<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> à l'aide de l'objet spécifié en tant que nouvel élément.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">
        <see cref="T:System.Object" /> à utiliser en tant que la nouvelle valeur d'élément.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">Obtient ou définit l'objet à ajouter à la liste de liaison.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">
        <see cref="T:System.Object" /> à ajouter comme un nouvel élément à la collection associée.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Représente la méthode qui gérera l'événement <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">Source de l’événement, en général un conteneur de données ou une collection liée aux données.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">Spécifie la valeur à passer à une propriété pour que celle-ci obtienne sa valeur à partir d’une autre source. On appelle cela l’ambiance. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec une valeur Boolean comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier non signé 8 bits comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un caractère Unicode comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un nombre à virgule flottante double précision comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 16 bits comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 32 bits comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un entier signé 64 bits comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un objet comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec un nombre à virgule flottante simple précision comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec une chaîne comme valeur.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AmbientValueAttribute" /> avec sa valeur et son type.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <see cref="T:System.Type" /> du paramètre <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value for this attribute.">Valeur de cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Détermine si l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> spécifié est égal à l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.AmbientValueAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Obtient l'objet qui est la valeur de ce <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Objet qui est la valeur de ce <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Array" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">Obtient une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">
        <see cref="T:System.Object" /> qui spécifie le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés exposées pour un tableau, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">Obtient une valeur indiquant si cet objet prend en charge les propriétés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">Représente une collection d’attributs.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">Tableau de type <see cref="T:System.Attribute" /> qui fournit les attributs de cette collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">Obtient la collection d'attributs.</summary>
      <returns vsli:raw="The attribute collection.">Collection d'attributs.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">Détermine si cette collection d'attributs possède l'attribut spécifié.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">
        <see cref="T:System.Attribute" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient l'attribut ou est l'attribut par défaut du type d'attribut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">Détermine si cette collection d'attributs contient tous les attributs spécifiés dans le tableau d'attributs.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Tableau de type <see cref="T:System.Attribute" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient tous les attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">Copie la collection dans un tableau, en commençant à l'index spécifié.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">
        <see cref="T:System.Array" /> dans lequel copier la collection.</param>
      <param name="index" vsli:raw="The index to start from.">Index à partir duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">Obtient le nombre d'attributs.</summary>
      <returns vsli:raw="The number of attributes.">Nombre d'attributs.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">Spécifie une collection vide que vous pouvez utiliser, plutôt que d'en créer une nouvelle. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Crée un nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> à partir d'un <see cref="T:System.ComponentModel.AttributeCollection" /> existant.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> à partir duquel créer la copie.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">Tableau de type <see cref="T:System.Attribute" /> qui fournit les attributs de cette collection. Peut être <see langword="null" />.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">Nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> qui est une copie de <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Retourne le <see cref="T:System.Attribute" /> par défaut d'un <see cref="T:System.Type" /> donné.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">
        <see cref="T:System.Type" /> de l'attribut à récupérer.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">
        <see cref="T:System.Attribute" /> par défaut d'un <paramref name="attributeType" /> donné.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">Obtient un énumérateur pour cette collection.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">Obtient l'attribut avec le numéro d'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Index de base zéro de <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">
        <see cref="T:System.Attribute" /> avec le numéro d'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">Obtient l'attribut du type spécifié.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">
        <see cref="T:System.Type" /> du <see cref="T:System.Attribute" /> à extraire de la collection.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">
        <see cref="T:System.Attribute" /> possédant le type spécifié ou, si l'attribut n'existe pas, valeur par défaut du type d'attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">Détermine si un attribut spécifié est identique à un attribut de la collection.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">Instance de <see cref="T:System.Attribute" /> à comparer avec les attributs de cette collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'attribut est contenu dans la collection et possède la même valeur que l'attribut dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">Détermine si les attributs du tableau spécifié sont identiques aux attributs de la collection.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">Tableau de <see cref="T:System.CodeDom.MemberAttributes" /> à comparer avec les attributs de cette collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si tous les attributs du tableau sont contenus dans la collection et possèdent les mêmes valeurs que les attributs de la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">Obtient une valeur indiquant si l'accès à la collection est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à la collection est synchronisé (thread-safe) ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retourne <see cref="T:System.Collections.IEnumerator" /> pour l'objet <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">Active la redirection d’attribut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> à l'aide du nom de type donné.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Nom du type à spécifier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> avec le nom de type et le nom de propriété donnés.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Nom du type à spécifier.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">Nom de la propriété pour laquelle les attributs seront récupérés.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> à l'aide du type donné.</summary>
      <param name="type" vsli:raw="The type to specify.">Type à spécifier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">Obtient le nom de la propriété pour laquelle les attributs seront récupérés.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">Nom de la propriété pour laquelle les attributs seront récupérés.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">Obtient le nom de type qualifié de l'assembly passé dans le constructeur.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">Nom qualifié de l'assembly du type spécifié dans le constructeur.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">Fournit un convertisseur de type de base pour les types numériques qui ne sont pas à virgule flottante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné à l'aide du contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="t">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Convertit l'objet donné en type natif du convertisseur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Convertit l'objet spécifié dans un autre type.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation du nombre.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">Spécifie si un membre est généralement utilisé pour la liaison. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" /> avec une valeur Boolean.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser la propriété pour la liaison ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser la propriété pour la liaison ; sinon, <see langword="false" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" /> avec l’une des valeurs <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">Obtient une valeur indiquant qu'une propriété est généralement utilisée pour la liaison.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété est généralement utilisée pour la liaison ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.BindableAttribute" /> (<see cref="F:System.ComponentModel.BindableAttribute.No" />). Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">Obtient une valeur qui indique la ou les directions de la liaison de données de cette propriété.</summary>
      <returns vsli:raw="The direction of this property's data binding.">Direction de la liaison de données de cette propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">Détermine si deux objets <see cref="T:System.ComponentModel.BindableAttribute" /> sont identiques.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objet à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.BindableAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.BindableAttribute" /> en cours ; <see langword="false" /> s'il n'est pas égal.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Sert de fonction de hachage pour la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.BindableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Détermine si cet attribut est l'attribut par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet attribut est la valeur par défaut pour cette classe d'attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">Spécifie qu'une propriété n'est généralement pas utilisée pour la liaison. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">Spécifie qu'une propriété est généralement utilisée pour la liaison. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">Spécifie des valeurs pour indiquer si une propriété peut être liée à un élément de données ou à une autre propriété.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">La propriété a la valeur par défaut.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">La propriété ne peut pas être liée au moment du design.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">La propriété peut être liée au moment du design.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">Spécifie si le modèle peut être lié dans un sens ou dans les deux.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">Le modèle peut accepter uniquement des valeurs de propriété. Utilisé avec un <see cref="T:System.Web.UI.ITemplate" /> générique.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">Le modèle peut accepter et exposer des valeurs de propriété. Utilisé avec <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">Fournit une collection générique qui prend en charge la liaison de données.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Type d'éléments de la liste.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindingList`1" /> en utilisant les valeurs par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BindingList`1" /> avec la liste spécifiée.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> d'éléments à contenir dans le <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">Se produit avant l'ajout d'un élément à la liste.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">Ajoute un nouvel élément à la collection.</summary>
      <returns vsli:raw="The item added to the list.">Élément ajouté à la liste.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">La propriété <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> a la valeur <see langword="false" />.  

ou - 
Aucun constructeur public sans paramètre n’a pu être trouvé pour le type d’élément actif.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">Ajoute un nouvel élément à la fin de la collection.</summary>
      <returns vsli:raw="The item that was added to the collection.">Élément ajouté à la collection.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Le nouvel élément n'est pas du même type que les objets contenus dans le <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">Obtient ou définit une valeur indiquant si les éléments de la liste peuvent être modifiés.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si les éléments de liste peuvent être modifiés ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Obtient ou définit une valeur indiquant si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> ; sinon, <see langword="false" />. La valeur par défaut dépend du type sous-jacent contenu dans la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">Obtient ou définit une valeur indiquant si vous pouvez supprimer des éléments de la collection.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Trie les éléments en cas de substitution dans une classe dérivée ; sinon, lève un <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifiant la propriété sur laquelle effectuer le tri.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">La méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">Ignore un nouvel élément en attente.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">Index du nouvel élément à ajouter</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Valide un nouvel élément en attente dans la collection.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">Index du nouvel élément à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Recherche l'index de l'élément qui a le descripteur de propriété déterminé avec la valeur spécifiée, si la recherche est implémentée dans une classe dérivée ; sinon, un <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à rechercher.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">Valeur de <paramref name="prop" /> à atteindre.</param>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">Index de base zéro de l'élément correspondant au descripteur de propriété et contenant la valeur spécifiée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> n'est pas substitué dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">Insère l'élément spécifié dans la liste à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="item" vsli:raw="The item to insert in the list.">Élément à insérer dans la liste.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">Obtient une valeur indiquant si la liste est triée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste est triée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">Se produit en cas de modification de la liste ou d'un de ses éléments.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">Obtient ou définit une valeur indiquant si l'ajout ou la suppression d'éléments dans la liste déclenche des événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si l'ajout ou la suppression d'éléments déclenche des événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">Vous supprimez un élément nouvellement ajouté et <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Supprime tous les tris appliqués avec <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> si le tri est implémenté dans une classe dérivée ; sinon, lève <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">La méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">Déclenche un événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">Déclenche un événement <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> pour l'élément à la position spécifiée.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">Index de base zéro de l'élément à réinitialiser.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Remplace l'élément à l'index spécifié par l'élément spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">Index de base zéro de l'élément à remplacer.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Nouvelle valeur de l'élément à l'index spécifié. La valeur peut être <see langword="null" /> pour les types référence.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à zéro.  

ou - 
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">Obtient le sens de tri de la liste.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />. La valeur par défaut est <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">Obtient le descripteur de propriété utilisé pour trier la liste si le tri est implémenté dans une classe dérivée ; sinon, retourne <see langword="null" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé pour trier la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">Obtient une valeur qui indique si les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> sont activés.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> sont pris en charge ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">Obtient une valeur indiquant si la liste prend en charge la recherche.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge la recherche ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">Obtient une valeur indiquant si la liste prend en charge le tri.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter comme critère de recherche.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Ajoute un nouvel élément à la liste. Pour plus d'informations, consultez <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="The item added to the list.">Élément ajouté à la liste.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Cette méthode n'est pas prise en charge.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">Obtient une valeur indiquant si les éléments de la liste peuvent être modifiés.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si les éléments de liste peuvent être modifiés ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Obtient une valeur indiquant si les nouveaux éléments peuvent être ajoutés à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> ; sinon, <see langword="false" />. La valeur par défaut dépend du type sous-jacent contenu dans la liste.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">Obtient une valeur indiquant si des éléments peuvent être supprimés de la liste.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste à l'aide de la méthode <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Trie la liste en fonction d'un <see cref="T:System.ComponentModel.PropertyDescriptor" /> et d'un <see cref="T:System.ComponentModel.ListSortDirection" />. Pour obtenir la description complète de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> selon lequel le tri doit s'effectuer.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel effectuer la recherche.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">Valeur du paramètre <paramref name="prop" /> à rechercher.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> a été appelé et si <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> n'a pas été appelé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer des index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">Obtient une valeur indiquant si les modifications apportées aux valeurs des propriétés de l'élément déclenchent les événements <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de type <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Ce membre ne peut pas être substitué dans une classe dérivée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Si le type de liste implémente <see cref="T:System.ComponentModel.INotifyPropertyChanged" />; sinon,. <see langword="false" /> La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Boolean" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet booléen en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">Convertit l'objet de valeur donné en objet booléen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Obtient une collection de valeurs standard pour le type de données booléen.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui contient un ensemble standard de valeurs valides.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Obtient une valeur indiquant si la liste de valeurs standard retournée par la méthode <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> peut être appelé pour rechercher un ensemble de valeurs communes prises en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et depuis d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">Représente la méthode qui gère un événement annulable.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.CancelEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets de caractère Unicode vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet de caractère Unicode à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">Convertit l'objet donné en objet de caractère Unicode.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">Convertit l'objet de valeur donné en objet de caractère Unicode à l'aide des arguments.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">Spécifie la façon dont la collection est modifiée.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">Spécifie qu'un élément a été ajouté à la collection.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">Spécifie que la collection entière a été modifiée. Ceci est provoqué par l'utilisation de méthodes qui manipulent la collection dans son intégralité, comme <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">Spécifie qu'un élément a été supprimé de la collection.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">Une des valeurs <see cref="T:System.ComponentModel.CollectionChangeAction" /> qui spécifie la façon dont la collection a été modifiée.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">
        <see cref="T:System.Object" /> qui spécifie l'instance de la collection où la modification a eu lieu.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">Obtient une action qui spécifie la façon dont la collection a été modifiée.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">Obtient l'instance de la collection avec la modification.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">
        <see cref="T:System.Object" /> qui représente l'instance de la collection avec la modification ou <see langword="null" /> si vous actualisez la collection.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">Représente la méthode qui gère l'événement <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> déclenché lors de l'ajout d'éléments à une collection ou de la suppression d'éléments de celle-ci.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets de collection vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Object" /> à convertir. Ce paramètre doit hériter de <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">Obtient une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">
        <see cref="T:System.Object" /> qui spécifie le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtient une valeur indiquant si cet objet prend en charge les propriétés.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns>
        <see langword="false" /> car <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> ne doit pas être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">Spécifie les propriétés de source de données et de donnée membre pour un composant qui prend en charge la liaison de données complexe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> à l'aide de la source de données spécifiée.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nom de la propriété à utiliser comme source de données.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> à l'aide de la source de données et des données membre spécifiées.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nom de la propriété à utiliser comme source de données.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">Nom de la propriété à utiliser comme source pour les données.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de donnée membre pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Nom de la propriété de donnée membre pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">Fournit un convertisseur de type pour convertir les composants vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">
        <see cref="T:System.Type" /> qui représente le type à associer à ce convertisseur de composant.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">Obtient une collection de propriétés pour le type de composant spécifié par le paramètre de valeur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">
        <see cref="T:System.Object" /> spécifiant le type du composant pour lequel obtenir les propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce composant, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Obtient une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">Fournit la classe de base pour un éditeur de composant personnalisé.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">Modifie le composant et retourne une valeur indiquant si le composant a été modifié en fonction d'un contexte donné.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">Objet de contexte facultatif pouvant être utilisé pour obtenir des informations supplémentaires sur la modification.</param>
      <param name="component" vsli:raw="The component to be edited.">Composant à modifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le composant a été modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">Modifie le composant et retourne une valeur indiquant si le composant a été modifié.</summary>
      <param name="component" vsli:raw="The component to be edited.">Composant à modifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le composant a été modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">Fournit des fonctionnalités simples permettant d'énumérer les ressources d'un composant ou d'un objet. La classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> est un <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Crée un <see cref="T:System.ComponentModel.ComponentResourceManager" /> qui recherche des ressources dans les assemblys satellites en fonction d'informations provenant du <see cref="T:System.Type" /> spécifié.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">
        <see cref="T:System.Type" /> à partir duquel le <see cref="T:System.ComponentModel.ComponentResourceManager" /> dérive toutes les informations utilisées pour la recherche des fichiers de ressources.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Assigne la valeur d'une ressource à la propriété correspondante de l'objet.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">
        <see cref="T:System.Object" /> contenant la valeur de propriété à assigner.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">
        <see cref="T:System.String" /> contenant le nom de l'objet à rechercher dans les ressources.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ou <paramref name="objectName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Assigne la valeur d'une ressource à la propriété correspondante de l'objet.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">
        <see cref="T:System.Object" /> contenant la valeur de propriété à assigner.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">
        <see cref="T:System.String" /> contenant le nom de l'objet à rechercher dans les ressources.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">Culture pour laquelle appliquer les ressources.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ou <paramref name="objectName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">Encapsule aucun ou plusieurs composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">Ajoute le <see cref="T:System.ComponentModel.Component" /> spécifié à <see cref="T:System.ComponentModel.Container" />. Le composant est sans nom.</summary>
      <param name="component" vsli:raw="The component to add.">Composant à ajouter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">Ajoute le <see cref="T:System.ComponentModel.Component" /> spécifié à <see cref="T:System.ComponentModel.Container" /> et lui assigne un nom.</summary>
      <param name="component" vsli:raw="The component to add.">Composant à ajouter.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">Nom unique qui ne respecte pas la casse à assigner au composant.  

ou - 
<see langword="null" />, ce qui laisse le composant sans nom.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> n'est pas unique.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Obtient tous les composants du <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Collection qui contient les composants de <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">Crée un <see cref="T:System.ComponentModel.ISite" /> de site pour le <see cref="T:System.ComponentModel.IComponent" /> donné et assigne le nom spécifié au site.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel créer un site.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Nom à assigner à <paramref name="component" /> ou <see langword="null" /> pour ignorer l'assignation de nom.</param>
      <returns vsli:raw="The newly created site.">Nouveau site créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">Libère les ressources non managées utilisées par le <see cref="T:System.ComponentModel.Container" />, et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">Libère les ressources non managées et exécute d'autres opérations de nettoyage avant la récupération de <see cref="T:System.ComponentModel.Container" /> par le garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Obtient l'objet service éventuel du type spécifié.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">
        <see cref="T:System.Type" /> du service à récupérer.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">
        <see cref="T:System.Object" /> implémentant le service demandé, ou <see langword="null" /> si le service ne peut pas être résolu.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Supprime un composant de <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Composant à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">Supprime un composant de <see cref="T:System.ComponentModel.Container" /> sans affecter à <see cref="P:System.ComponentModel.IComponent.Site" /> la valeur <see langword="null" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Composant à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">Détermine si le nom du composant est unique pour ce conteneur.</summary>
      <param name="component" vsli:raw="The named component.">Le composant nommé.</param>
      <param name="name" vsli:raw="The component name to validate.">Nom du composant à valider.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> n'est pas unique.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">Fournit une classe de base pour le service de filtre du conteneur.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">Filtre la collection de composants.</summary>
      <param name="components" vsli:raw="The component collection to filter.">Collection de composants à filtrer.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">
        <see cref="T:System.ComponentModel.ComponentCollection" /> qui représente une collection modifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Globalization.CultureInfo" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.Globalization.CultureInfo" /> à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">Convertit l'objet de valeur spécifié en <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> spécifie une culture qui n'est pas valide.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture vers laquelle effectuer la conversion.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">Récupère le nom de la culture spécifiée.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture pour laquelle obtenir le nom.</param>
      <returns vsli:raw="The name of the specified culture.">Nom de la culture spécifiée.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">Reçoit une collection de valeurs standard pour un objet <see cref="T:System.Globalization.CultureInfo" /> à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides, ou <see langword="null" /> si le type de données ne prend pas en charge un jeu de valeurs standard.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="false" /> car le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> n'est pas une liste exhaustive des valeurs possibles (c'est-à-dire que d'autres valeurs sont possibles). Cette méthode ne retourne jamais <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">Fournit une implémentation par défaut simple de l'interface <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> à l'aide d'un descripteur de type personnalisé parent.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">Descripteur de type personnalisé parent.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">Retourne une collection d'attributs personnalisés pour le type représenté par ce descripteur de type.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs pour le type. La valeur par défaut est <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">Retourne le nom qualifié complet de la classe représentée par ce descripteur de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Un objet <see cref="T:System.String" /> contenant le nom de classe qualifié complet du type que ce descripteur de type décrit. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">Retourne le nom de la classe représenté par ce descripteur de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.String" /> qui contient le nom de l'instance de composant que ce descripteur de type décrit. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">Retourne un convertisseur de type pour le type représenté par ce descripteur de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type représenté par ce descripteur de type. La valeur par défaut est un <see cref="T:System.ComponentModel.TypeConverter" /> créé récemment.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">Retourne le descripteur d'événement pour l'événement par défaut de l'objet représenté par ce descripteur de type.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement par défaut sur l'objet représenté par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">Retourne le descripteur de propriété pour la propriété par défaut de l'objet représenté par ce descripteur de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> pour la propriété par défaut sur l'objet représenté par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">Retourne un éditeur du type spécifié qui sera associé à la classe représentée par ce descripteur de type.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">Type de base de l'éditeur à récupérer.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Éditeur du type donné qui sera associé à la classe représentée par ce descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">Retourne une collection de descripteurs d'événement pour l'objet représenté par ce descripteur de type.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui contient les descripteurs d'événement pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">Retourne une collection filtrée de descripteurs d'événement pour l'objet représenté par ce descripteur de type.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Tableau d'attributs à utiliser comme filtre. Il peut s’agir de <see langword="null" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui contient les descriptions d'événement pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">Retourne une collection de descripteurs de propriété pour l'objet représenté par ce descripteur de type.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les descriptions de propriété pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">Retourne une collection filtrée de descripteurs de propriété pour l'objet représenté par ce descripteur de type.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Tableau d'attributs à utiliser comme filtre. Il peut s’agir de <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les descriptions de propriété pour l'objet représenté par ce descripteur de type. La valeur par défaut est <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Retourne un objet qui contient la propriété décrite par le descripteur de propriété spécifié.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">Descripteur de propriété pour lequel récupérer l'objet propriétaire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> qui possède la propriété donnée spécifiée par le descripteur de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">Identifie un type comme un objet qu'il est possible de lier à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> et indique s'il est possible de lier un objet à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'il est possible de lier l'objet à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indique qu'il est possible de lier la classe à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> qui indique que la classe peut être liée à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">Détermine si cette instance de <see cref="T:System.ComponentModel.DataObjectAttribute" /> s'adapte au modèle d'un autre objet.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">Obtient une valeur indiquant si un objet doit être considéré comme pouvant être lié à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet doit être considéré comme pouvant être lié à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indique qu'il n'est pas possible de lier la classe à un objet <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> au moment du design. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">Fournit les métadonnées pour une propriété représentant un champ de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données et un champ d'identité de base de données.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données, un champ d'identité de base de données et si le champ peut être null.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ peut être null dans le magasin de données ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> et indique si le champ représente la clé primaire de la ligne de données, un champ d'identité de base de données et s'il peut être null et définir la longueur du champ.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ se trouve dans la clé primaire de la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ représente un champ d'identité qui identifie uniquement la ligne de données ; sinon, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le champ peut être null dans le magasin de données ; sinon, <see langword="false" />.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">Longueur du champ en octets.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">Obtient une valeur indiquant si une propriété représente un champ d'identité dans les données sous-jacentes.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété représente un champ d'identité dans les données sous-jacentes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">Obtient une valeur indiquant si une propriété représente un champ qui peut être null dans le magasin de données sous-jacent.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété représente un champ qui peut être null dans le magasin de données sous-jacent ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">Obtient la longueur de la propriété en octets.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">Longueur de la propriété en octets, ou -1 si non définie.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">Obtient une valeur indiquant si une propriété est dans la clé primaire des données sous-jacentes.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété est dans la clé primaire du magasin de données ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">Identifie une méthode d'opération de données exposée par un type, le type d'opération que la méthode effectue et détermine si la méthode représente la méthode de données par défaut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> et identifie le type d'opération de données que la méthode effectue.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> décrivant l'opération de données que la méthode effectue.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, identifie le type d'opération de données que la méthode effectue et identifie si la méthode représente la méthode de données par défaut exposée par l'objet de données.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> décrivant l'opération de données que la méthode effectue.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que la méthode à laquelle l'attribut est appliqué représente la méthode par défaut de l'objet de données pour le <paramref name="methodType" /> spécifié ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">Obtient une valeur indiquant si la méthode à laquelle <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> est appliqué représente la méthode de données par défaut exposée par l'objet de données pour un type de méthode spécifique.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode représente la méthode par défaut exposée par l'objet d'un type de méthode ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">Obtient une valeur indiquant si cette instance partage un modèle commun avec un attribut spécifié.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Objet à comparer à cette instance de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance représente la même instance spécifiée par le paramètre <paramref name="obj" />; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">Obtient une valeur <see cref="T:System.ComponentModel.DataObjectMethodType" /> indiquant le type d'opération de données que la méthode effectue.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">Une des valeurs <see cref="T:System.ComponentModel.DataObjectMethodType" /> qui identifient le type d'opération de données effectué par la méthode à laquelle le <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> est appliqué.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">Identifie le type d'opération de données effectué par une méthode, comme spécifié par le <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> appliqué à la méthode.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">Indique qu'une méthode est utilisée pour une opération de données qui supprime des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">Indique qu'une méthode est utilisée pour une opération de données qui remplit un objet <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">Indique qu'une méthode est utilisée pour une opération de données qui insère des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">Indique qu'une méthode est utilisée pour une opération de données qui récupère des données.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">Indique qu'une méthode est utilisée pour une opération de données qui met à jour des données.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.DateTime" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.DateTime" /> à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Convertit l'objet de valeur donné en <see cref="T:System.DateTime" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">Convertit l'objet de valeur donné en <see cref="T:System.DateTime" /> en utilisant les arguments.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">Fournit un convertisseur de type pour convertir les structures <see cref="T:System.DateTimeOffset" /> en direction et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Retourne une valeur qui indique si un objet du type source spécifié peut être converti en <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Contexte de format de date.</param>
      <param name="sourceType" vsli:raw="The source type to check.">Type source à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type spécifié peut être converti en <see cref="T:System.DateTimeOffset" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">Retourne une valeur qui indique si un <see cref="T:System.DateTimeOffset" /> peut être converti en objet du type spécifié.</summary>
      <param name="context" vsli:raw="The date format context.">Contexte de format de date.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">Type de destination à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un <see cref="T:System.DateTimeOffset" /> peut être converti au type spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Convertit l'objet spécifié en <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Contexte de format de date.</param>
      <param name="culture" vsli:raw="The date culture.">Culture de date.</param>
      <param name="value" vsli:raw="The object to be converted.">Objet à convertir.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">
        <see cref="T:System.DateTimeOffset" /> qui représente l'objet spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">Convertit <see cref="T:System.DateTimeOffset" /> en un objet du type spécifié.</summary>
      <param name="context" vsli:raw="The date format context.">Contexte de format de date.</param>
      <param name="culture" vsli:raw="The date culture.">Culture de date.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">
        <see cref="T:System.DateTimeOffset" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">Type vers lequel effectuer la conversion.</param>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Objet du type spécifié qui représente <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Decimal" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">Convertit l'objet de valeur donné en <see cref="T:System.Decimal" /> en utilisant les arguments.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">Spécifie la propriété de liaison par défaut pour un composant. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> avec le nom de propriété spécifié.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">Nom de la propriété de liaison par défaut.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de liaison par défaut pour le composant auquel <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> est lié.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Nom de la propriété de liaison par défaut pour le composant auquel <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> est lié.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">Spécifie l’événement par défaut d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">Nom de l'événement par défaut pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.DefaultEventAttribute" /> (<see langword="null" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DefaultEventAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">Obtient le nom de l'événement par défaut pour le composant auquel cet attribut est lié.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Nom de l'événement par défaut pour le composant auquel cet attribut est lié. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">Spécifie la propriété par défaut d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">Nom de la propriété par défaut pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> (<see langword="null" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">Obtient le nom de la propriété par défaut pour le composant auquel cet attribut est lié.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Nom de la propriété par défaut pour le composant auquel cet attribut est lié. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">Fournit des données pour l'événement <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">Document qui perd l'activation.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">Document qui est activé.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">Obtient le document qui est activé.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> représentant le document qui est activé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">Obtient le document qui perd l'activation.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> représentant le document qui perd l'activation.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">Représente la méthode qui gérera l'événement <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> qui contient les données de l'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">L'exception levée lors d'une tentative d'extraction d'un fichier archivé dans un programme de gestion du code source est annulée ou échoue.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> sans message ou code d'erreur associé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> à l'aide des données et du contexte de sérialisation spécifiés.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec le message spécifié.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Message décrivant l'exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Description détaillée de l'erreur.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> avec le message et le code d'erreur spécifiés.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Message décrivant l'exception.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">Code d'erreur à passer.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> qui spécifie que l'extraction a été annulée. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">Représente un identificateur de commande unique constitué d'un ID de commande numérique et d'un identificateur GUID de groupe de menus.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.CommandID" /> avec le GUID de groupe de menus et le numéro d'ID de commande spécifiés.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">GUID du groupe auquel appartient cette commande de menu.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">Identificateur numérique de cette commande de menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">Détermine si deux instances <see cref="T:System.ComponentModel.Design.CommandID" /> sont égales.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objet à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet spécifié est équivalent à celui-ci ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">Sert de fonction de hachage pour un type particulier.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Code de hachage du <see cref="T:System.Object" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">Obtient le GUID du groupe de menus auquel appartient la commande de menu identifiée par ce <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">GUID du groupe de commandes de cette commande.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">Obtient l'ID de commande numérique.</summary>
      <returns vsli:raw="The command ID number.">Numéro d'ID de commande.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">Retourne <see cref="T:System.String" /> qui représente l'objet en cours.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">Chaîne contenant les informations de l'ID de commande, constituées à la fois du GUID et de l'identificateur entier.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that was changed.">Composant modifié.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> représentant le membre modifié.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">Ancienne valeur du membre modifié.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">Nouvelle valeur du membre modifié.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">Obtient le composant modifié.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">
        <see cref="T:System.Object" /> représentant le composant modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">Obtient le membre modifié.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">Obtient la nouvelle valeur du membre modifié.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle valeur du membre modifié. Cette propriété peut être <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">Obtient l'ancienne valeur du membre modifié.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Ancienne valeur du membre modifié. Cette propriété peut être <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">Composant sur le point d'être modifié.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre du composant qui est sur le point d'être modifié.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">Obtient le composant sur le point d'être modifié ou le composant qui est le conteneur parent du membre sur le point d'être modifié.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">Composant dont un membre est sur le point d'être modifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">Obtient le membre sur le point d'être modifié.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> indiquant le membre sur le point d'être modifié, s'il est connu ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">Événement <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">Fournit les données des événements <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> et <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">Composant correspondant à la source de l'événement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">Obtient le composant associé à l'événement.</summary>
      <returns vsli:raw="The component associated with the event.">Composant associé à l'événement.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">Représente la méthode qui gérera les événements <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> et <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> déclenchés pour des événements de niveau composant.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component" vsli:raw="The component to be renamed.">Composant à renommer.</param>
      <param name="oldName" vsli:raw="The old name of the component.">Ancien nom du composant.</param>
      <param name="newName" vsli:raw="The new name of the component.">Nouveau nom du composant.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">Obtient le composant à renommer.</summary>
      <returns vsli:raw="The component that is being renamed.">Composant à renommer.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">Obtient le nom du composant après l'événement d'attribution d'un nouveau nom.</summary>
      <returns vsli:raw="The name of the component after the rename event.">Nom du composant après l'événement d'affectation d'un nouveau nom.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">Obtient le nom du composant après l'événement d'affectation d'un nouveau nom.</summary>
      <returns vsli:raw="The previous name of the component.">Ancien nom du composant.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Représente la méthode qui gérera un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">Représente une collection de concepteurs.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> qui contient l'ensemble de concepteurs spécifié.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">Liste qui contient la collection de concepteurs à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> qui contient les concepteurs spécifiés.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">Tableau d'objets <see cref="T:System.ComponentModel.Design.IDesignerHost" /> à stocker.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">Obtient le nombre de concepteurs de la collection.</summary>
      <returns vsli:raw="The number of designers in the collection.">Nombre de concepteurs de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Obtient un nouvel énumérateur pour cette collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui énumère la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">Obtient le concepteur à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">Index du concepteur à retourner.</param>
      <returns vsli:raw="The designer at the specified index.">Concepteur à l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de la collection dans un <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Obtient un nouvel énumérateur pour cette collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui énumère la collection.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">Fournit des données pour les événements <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> et <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> du document.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">Obtient l'hôte du document.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> du document.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">Représente la méthode qui gérera les événements <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> et <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> déclenchés lors de la création ou de la suppression d'un document.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">Fournit une classe de base pour l'obtention et la définition des valeurs des options d'un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">Crée un <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> avec le nom donné et l'ajoute au parent donné.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">Collection d'options de concepteur parente. Toutes les collections ont un parent excepté la collection d'objets racine.</param>
      <param name="name" vsli:raw="The name of this collection.">Nom de cette collection.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">Objet qui fournit les propriétés de cette collection. Peut avoir la valeur <see langword="null" /> si la collection ne doit pas fournir de propriétés.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">Nouveau <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> avec le nom donné.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> ou <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> est une chaîne vide.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">Contient une collection d’options de concepteur. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copie l'ensemble de la collection dans un <see cref="T:System.Array" /> compatible unidimensionnel, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <paramref name="array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Obtient le nombre de collections d'options enfants que cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> contient.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Nombre de collections d'options enfants que cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> contient.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Retourne <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de cette collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de cette collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">Retourne l'index de la première occurrence d'une valeur donnée dans une plage de cette collection.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">Objet à localiser dans la collection.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">Index de la première occurrence d'une valeur dans la collection entière, le cas échéant ; sinon, la limite inférieure de la collection moins 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">Obtient la collection enfant à l'index donné.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">Index de base zéro de la collection enfant à obtenir.</param>
      <returns vsli:raw="The child collection at the specified index.">Collection enfant à l'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">Obtient la collection enfant correspondant au nom donné.</summary>
      <param name="name" vsli:raw="The name of the child collection.">Nom de la collection enfant.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">Collection enfant avec le nom spécifié par le paramètre <paramref name="name" /> ou <see langword="null" /> si le nom n'est pas trouvé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Obtient le nom de cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Nom de cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">Obtient l'objet de la collection parent.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Objet de la collection parent ou <see langword="null" /> s'il n'existe aucun parent.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Obtient la collection de propriétés offerte par cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, avec tous ses enfants.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Collection de propriétés offerte par cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, avec tous ses enfants.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Affiche une interface utilisateur de boîte de dialogue avec laquelle l'utilisateur peut configurer les options dans cet objet <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la boîte de dialogue peut être affichée ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">Obtient une valeur indiquant si l'accès à la collection est synchronisé et, par conséquent, thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à la collection est synchronisé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> à ajouter à <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Position à laquelle le nouvel élément est inséré.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Supprime tous les éléments de la collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à localiser dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Détermine l'index d'un élément spécifique de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Insère un élément dans la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">
        <see cref="T:System.Object" /> à insérer dans la collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">
        <see cref="T:System.Object" /> à supprimer de la collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">Supprime l'élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">Obtient la collection d'options de ce service.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> rempli avec les options de concepteur disponibles.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Remplit un <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options" vsli:raw="The collection to populate.">Collection à remplir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">Affiche la boîte de dialogue d'options pour l'objet donné.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">Collection d'options contenant l'objet à appeler.</param>
      <param name="optionObject" vsli:raw="The actual options object.">Objet d'options réel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la boîte de dialogue est affichée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">Obtient la valeur d'une option définie dans ce package.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Page à laquelle l'option est liée.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Nom de la valeur d'option.</param>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">Valeur de l'option nommée <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> ou <paramref name="valueName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">Définit la valeur d'une option définie dans ce package.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">Page à laquelle l'option est liée.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Nom de la valeur d'option.</param>
      <param name="value" vsli:raw="The value of the option.">Valeur de l'option.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> ou <paramref name="valueName" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">Permet de grouper une série d'actions au moment du design afin d'améliorer les performances et de permettre l'annulation de la majorité des modifications.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> sans description.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> avec la description de la transaction spécifiée.</summary>
      <param name="description" vsli:raw="A description for this transaction.">Description de cette transaction.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">Annule la transaction et tente de restaurer les modifications apportées par les événements de la transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">Obtient une valeur indiquant si la transaction a été annulée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la transaction a été annulée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">Valide cette transaction.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">Obtient une valeur indiquant si la transaction a été validée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la transaction a été validée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">Obtient une description de la transaction.</summary>
      <returns vsli:raw="A description for the transaction.">Description de la transaction.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">Libère les ressources associées à cet objet. Cette substitution valide cette transaction si elle n'est pas encore validée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">Déclenche l'événement <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">Exécute l'opération réelle de validation d'une transaction.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">Fournit des données pour les événements <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> et <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, à l'aide de la valeur spécifiée indiquant si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Valeur indiquant si la transaction a été validée.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Valeur indiquant si la transaction a été validée.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'il s'agit de la dernière transaction à fermer ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">Obtient une valeur qui indique s'il s'agit de la dernière transaction à fermer.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'il s'agit de la dernière transaction à fermer ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Indique si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le concepteur a appelé <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur la transaction ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">Représente la méthode qui gère les événements <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> et <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> d'un concepteur.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">Représente un verbe qui peut être appelé à partir d'un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Texte de la commande de menu qui s'affiche à l'utilisateur.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Gestionnaire d'événements exécutant les actions du verbe.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Texte de la commande de menu qui s'affiche à l'utilisateur.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Gestionnaire d'événements exécutant les actions du verbe.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">ID de la commande de départ pour ce verbe. Par défaut, l'architecture du concepteur met de côté une série d'ID de commande pour les verbes. Vous pouvez les substituer et fournir un ID de commande personnalisé.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">Obtient ou définit la description de l'élément de menu pour le verbe.</summary>
      <returns vsli:raw="A string describing the menu item.">Chaîne qui décrit l'élément de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">Obtient le texte de description de la commande sous forme de verbe contenue dans le menu.</summary>
      <returns vsli:raw="A description for the verb command.">Description de la commande sous forme de verbe.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">Substitue <see cref="M:System.Object.ToString" />.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">Texte du verbe ou chaîne vide ("") si le champ de texte est vide.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">Tableau <see cref="T:System.ComponentModel.Design.DesignerVerb" /> indiquant les verbes qui doivent être contenus dans la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">Ajoute l'objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">Objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter à la collection.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">Index de la collection auquel le verbe a été ajouté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">Ajoute l'ensemble spécifié de verbes du concepteur à la collection.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">Tableau d'objets <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">Ajoute la collection spécifiée de verbes du concepteur à la collection.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">Obtient une valeur indiquant si le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié existe dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet spécifié existe dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">Copie les membres de la collection vers le tableau <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié, en commençant à l'index de destination déterminé.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">Tableau dans lequel copier les membres de la collection.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">Index de destination à partir duquel commencer la copie.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Obtient l'index du <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> dont l'index doit être extrait de la collection.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">Index de l'objet spécifié s'il est détecté dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Insère le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié à l'index déterminé.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">Index de la collection auquel insérer le verbe.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à insérer dans la collection.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Obtient ou définit le <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à l'index spécifié.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Index auquel obtenir ou définir <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à chaque index valide dans la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Déclenche l'événement <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Déclenche l'événement <see langword="Insert" />.</summary>
      <param name="index">Index auquel insérer un élément.</param>
      <param name="value">Objet à insérer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Déclenche l'événement <see langword="Remove" />.</summary>
      <param name="index">Index auquel supprimer l'élément.</param>
      <param name="value">Objet à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Déclenche l'événement <see langword="Set" />.</summary>
      <param name="index">Index auquel définir l'élément.</param>
      <param name="oldValue">Ancien objet.</param>
      <param name="newValue">Nouvel objet.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">Déclenche l'événement <see langword="Validate" />.</summary>
      <param name="value" vsli:raw="The object to validate.">Objet à valider.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">Supprime l’objet <see cref="T:System.ComponentModel.Design.DesignerVerb" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à supprimer de la collection.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">Représente un contexte de licence au moment du design pouvant prendre en charge un fournisseur de licences au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">Obtient une clé de licence enregistrée.</summary>
      <param name="type" vsli:raw="The type of the license key.">Type de la clé de licence.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">Assembly duquel la clé doit être obtenue.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">Clé de licence enregistrée correspondant au type spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">Définit une clé de licence enregistrée.</summary>
      <param name="type" vsli:raw="The type of the license key.">Type de la clé de licence.</param>
      <param name="key" vsli:raw="The license key.">Clé de licence.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">Obtient le mode d'utilisation de la licence.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> indiquant le mode de licence du contexte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">Fournit la prise en charge de la sérialisation du contexte de licence au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">Sérialise les licences au sein du contexte de licence au moment du design spécifié à l'aide de la clé et du flux de sortie spécifiés.</summary>
      <param name="o" vsli:raw="The stream to output to.">Flux dans lequel écrire la sortie.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">Clé à utiliser pour le chiffrement.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> indiquant le contexte de licence.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">Définit des identificateurs qui indiquent des informations sur le contexte dans lequel une demande d'informations d'aide a été lancée.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">Contexte général.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">Sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">Sélection d'une fenêtre Outil.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">Fenêtre.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">Spécifie le mot-clé de contexte pour une classe ou un membre. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">Valeur du mot clé d'aide.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> du type donné.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">Type à partir duquel le mot clé d'aide sera pris.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> est <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">Représente la valeur par défaut de <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">Détermine si deux instances <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> sont égales.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">Obtient le mot clé d'aide fourni par cet attribut.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">Mot clé d'aide fourni par cet attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">Détermine si le mot clé d'aide est <see langword="null" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le mot clé d'aide est <see langword="null" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">Définit des identificateurs qui indiquent le type d'un mot clé d'aide.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">Mot clé sur lequel l'utilisateur demande de l'aide en appuyant sur la touche F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">Mot clé de filtre.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">Mot clé général.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Fournit une interface permettant d'ajouter et de supprimer les gestionnaires d'événements pour les événements qui ajoutent, modifient, suppriment ou renomment des composants, et fournit des méthodes pour déclencher un événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> ou <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">Se produit suite à l'ajout d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">Se produit pendant le processus d'ajout d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">Se produit suite à la modification d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">Se produit pendant le processus de modification d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">Se produit suite à la suppression d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">Se produit pendant le processus de suppression d'un composant.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">Se produit lorsqu'un composant est renommé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">Avertit le service de modification du composant qu'un composant particulier a été modifié.</summary>
      <param name="component" vsli:raw="The component that has changed.">Composant modifié.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Membre modifié. Il est <see langword="null" /> si cette modification n'est pas liée à un membre unique.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Ancienne valeur du membre. Ceci est valide uniquement si le membre n'est pas <see langword="null" />.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Nouvelle valeur du membre. Ceci est valide uniquement si le membre n'est pas <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">Avertit le service de modification du composant qu'un composant particulier est en cours de modification.</summary>
      <param name="component" vsli:raw="The component that is about to change.">Composant sur le point d'être modifié.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Membre en cours de modification. Il est <see langword="null" /> si cette modification n'est pas liée à un membre unique.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">Active l'énumération de composants au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">Obtient la liste des types de composants disponibles.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">Hôte du concepteur qui fournit des services au moment du design. Peut être <see langword="null" />.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">Type de base qui spécifie les composants à récupérer. Peut être <see langword="null" />.</param>
      <returns vsli:raw="The list of available component types.">Liste des types de composants disponibles.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">Fournit un jeu de valeurs par défaut recommandées pendant la création de composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">Rétablit l'état par défaut d'une instance d'un composant.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">Dictionnaire de valeurs de propriétés par défaut, qui sont des paires nom/valeur à utiliser pour rétablir l'état du composant.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">Initialise un nouveau composant à l'aide d'un jeu de valeurs recommandées.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">Dictionnaire de valeurs de propriétés par défaut, qui sont des paires nom/valeur à utiliser pour initialiser l'état du composant.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">Fournit l'infrastructure de base pour la génération d'un concepteur personnalisé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">Obtient le composant de base qui est créé par ce concepteur.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">
        <see cref="T:System.ComponentModel.IComponent" /> indiquant le composant de base qui est créé par ce concepteur.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">Exécute l'action par défaut pour ce concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">Initialise le concepteur avec le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">Composant à associer à ce concepteur.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">Obtient une collection des verbes de design pris en charge par le concepteur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes pris en charge par le concepteur ou <see langword="null" /> si le composant ne possède pas de verbe.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">Fournit des notifications d'événements lors de l'ajout et de la suppression de concepteurs racine, ainsi que lors de la modification d'un composant sélectionné ou du concepteur racine en cours.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">Obtient le concepteur racine pour le document actuellement actif.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">Document actuellement actif ou <see langword="null" /> si aucun document n'est actif.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">Se produit lorsque le concepteur racine actuel est modifié.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">Se produit lors de la création d'un concepteur racine.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">Se produit lors de la suppression du concepteur racine d'un document.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">Obtient une collection de concepteurs racine pour les documents de design actuellement actifs dans l'environnement de design.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">
        <see cref="T:System.ComponentModel.Design.DesignerCollection" /> contenant les concepteurs racine créés qui n'ont pas encore été supprimés.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">Se produit lors de la modification de la sélection du mode Design en cours.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">Fournit une interface permettant à un concepteur d'accéder et de filtrer les dictionnaires d'un <see cref="T:System.ComponentModel.TypeDescriptor" /> qui stocke les descripteurs de propriétés, d'attributs et d'événements qu'un concepteur de composant peut exposer dans l'environnement au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'attributs qu'il expose par le biais d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'attributs qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">Fournit une interface pour la gestion des transactions et composants du concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">Active le concepteur hébergé par cet hôte.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">Se produit lorsque ce concepteur est activé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">Obtient le conteneur de cet hôte de concepteur.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">
        <see cref="T:System.ComponentModel.IContainer" /> pour cet hôte.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">Crée un composant du type spécifié et l'ajoute au document de design.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Type du composant à créer.</param>
      <returns vsli:raw="The newly created component.">Nouveau composant qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">Crée un composant du type spécifié avec le nom donné et l'ajoute au document de design.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Type du composant à créer.</param>
      <param name="name" vsli:raw="The name for the component.">Nom du composant.</param>
      <returns vsli:raw="The newly created component.">Nouveau composant qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">Crée un <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> pouvant encapsuler des séquences d'événements afin d'améliorer les performances et de permettre l'annulation, ainsi que le rétablissement des fonctionnalités de prise en charge.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Nouvelle instance de <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Lorsque vous terminez les étapes de votre transaction, vous devez appeler <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">Crée un <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> pouvant encapsuler des séquences d'événements afin d'améliorer les performances et de permettre l'annulation, ainsi que le rétablissement des fonctionnalités de prise en charge, à l'aide de la description de la transaction spécifiée.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">Titre ou description de la nouvelle transaction qui vient d'être créée.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Nouveau <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Une fois les étapes de la transaction terminées, vous devez appeler <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sur cet objet.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">Se produit lorsque ce concepteur est désactivé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">Détruit le composant spécifié et le supprime du conteneur du concepteur.</summary>
      <param name="component" vsli:raw="The component to destroy.">Composant à détruire.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">Obtient l'instance de concepteur qui contient le composant spécifié.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel récupérer le concepteur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">
        <see cref="T:System.ComponentModel.Design.IDesigner" />, ou <see langword="null" /> s'il n'existe aucun concepteur pour le composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">Obtient une instance du nom de type qualifié complet spécifié.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">Nom du type à charger.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">Objet de type du nom de type spécifié, ou <see langword="null" /> si le type est introuvable.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">Obtient une valeur indiquant si l'hôte du concepteur se trouve actuellement dans une transaction.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une transaction est en cours ; sinon <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">Se produit lorsque ce concepteur a terminé le chargement de son document.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">Obtient une valeur indiquant si l'hôte du concepteur charge actuellement le document.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'hôte du concepteur charge actuellement le document ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">Obtient l'instance de la classe de base utilisée comme composant racine pour le design en cours.</summary>
      <returns vsli:raw="The instance of the root component class.">Instance de la classe du composant racine.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">Obtient le nom qualifié complet de la classe dont le design est en cours.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">Nom qualifié complet de la classe du composant de base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">Obtient la description de la transaction en cours.</summary>
      <returns vsli:raw="A description of the current transaction.">Description de la transaction en cours.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">Ajoute un gestionnaire d'événements pour l'événement <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">Spécifie les méthodes permettant à l'hôte de concepteur de signaler l'état des transactions.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">Obtient une valeur indiquant si l'hôte de concepteur ferme une transaction.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le concepteur ferme une transaction ; <see langword="false" /> dans le cas contraire.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Permet d’accéder aux options du concepteur figurant dans le menu Outils sous la commande Options dans l’environnement de développement Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">Obtient la valeur de l'option du Concepteur Windows Forms spécifiée.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Nom de la page qui définit l'option.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Nom de la propriété de l'option.</param>
      <returns vsli:raw="The value of the specified option.">Valeur de l'option spécifiée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">Définit la valeur de l'option du Concepteur Windows Forms spécifiée.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Nom de la page qui définit l'option.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Nom de la propriété de l'option.</param>
      <param name="value" vsli:raw="The new value.">Nouvelle valeur.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">Fournit un dictionnaire de paires clé-valeur de base, spécifique à un site de composant, par le biais d'un service qu'un concepteur peut utiliser pour stocker des données définies par l'utilisateur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">Obtient la clé correspondant à la valeur spécifiée.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">Valeur à rechercher dans le dictionnaire.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">Clé associée ou <see langword="null" /> s'il n'existe aucune clé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">Obtient la valeur correspondant à la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">Clé dont la valeur doit être recherchée dans le dictionnaire.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">Valeur associée ou <see langword="null" /> s'il n'existe aucune valeur.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">Définit la paire valeur-clé spécifiée.</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">Objet à utiliser comme clé à laquelle la valeur doit être associée.</param>
      <param name="value" vsli:raw="The value to store.">Valeur à stocker.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">Fournit un service permettant l'inscription de gestionnaires d'événements pour les événements de composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">Crée un nom unique pour une méthode de gestionnaire d'événements pour le composant et l'événement spécifiés.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">Instance du composant à laquelle l'événement est connecté.</param>
      <param name="e" vsli:raw="The event to create a name for.">Événement pour lequel créer un nom.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">Nom recommandé pour la méthode de gestionnaire d'événements de cet événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">Obtient une collection de méthodes de gestionnaire d'événements possédant une signature de méthode compatible avec l'événement spécifié.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">Événement pour lequel obtenir les méthodes de gestionnaire d'événements compatibles.</param>
      <returns vsli:raw="A collection of strings.">Collection de chaînes.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">Obtient <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement représenté par le descripteur de propriété spécifié, s'il représente un événement.</summary>
      <param name="property" vsli:raw="The property that represents an event.">Propriété qui représente un événement.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> pour l'événement représenté par la propriété, ou <see langword="null" /> si la propriété ne représente pas un événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">Convertit un ensemble de descripteurs d'événement en un ensemble de descripteurs de propriété.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">Événements à convertir en propriétés.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrivent l'ensemble d'événements.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">Convertit un descripteur d'événement unique en un descripteur de propriété.</summary>
      <param name="e" vsli:raw="The event to convert.">Événement à convertir.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'événement.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">Affiche le code utilisateur du concepteur.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">Affiche le code utilisateur de l'événement spécifié.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">Composant auquel l'événement est connecté.</param>
      <param name="e" vsli:raw="The event to display.">Événement à afficher.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">Affiche le code utilisateur du concepteur à la ligne spécifiée.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">Numéro de la ligne sur laquelle placer le signe insertion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le code est affiché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Fournit une interface pouvant répertorier les fournisseurs d'extendeurs.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">Obtient l'ensemble des fournisseurs d'extendeurs pour le composant.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">Tableau de type <see cref="T:System.ComponentModel.IExtenderProvider" /> qui répertorie les fournisseurs d'extendeurs actifs. S'il n'existe aucun fournisseur, un tableau vide est retourné.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">Fournit une interface pour ajouter et supprimer des fournisseurs d'extendeurs au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">Ajoute le fournisseur d'extendeurs spécifié.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">Fournisseur d'extendeurs à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">Supprime le fournisseur d'extendeurs spécifié.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">Fournisseur d'extendeurs à supprimer.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">Fournit des méthodes servant à l'affichage de rubriques d'aide et à l'ajout et la suppression de mots clés d'aide au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">Ajoute un attribut de contexte au document.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">Nom de l'attribut à ajouter.</param>
      <param name="value" vsli:raw="The value of the attribute.">Valeur de l'attribut.</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">Type du mot clé, à partir de l'énumération <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">Supprime du document tous les attributs de contexte existants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">Crée un <see cref="T:System.ComponentModel.Design.IHelpService" /> local pour gérer les sous-contextes.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">Type de priorité du sous-contexte à ajouter.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">Objet <see cref="T:System.ComponentModel.Design.IHelpService" /> nouvellement créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">Supprime un attribut de contexte précédemment ajouté.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">Nom de l'attribut à supprimer.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">Valeur de l'attribut à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">Supprime un contexte créé avec <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">Contexte local <see cref="T:System.ComponentModel.Design.IHelpService" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">Affiche la rubrique d'aide correspondant au mot clé spécifié.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">Mot clé de la rubrique d'aide à afficher.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">Affiche la rubrique d'aide correspondant à l'URL spécifiée.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">URL de la rubrique d'aide à afficher.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">Fournit des méthodes pour identifier les composants d'un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">Recherche les champs qui implémentent l'interface <see cref="T:System.ComponentModel.IComponent" /> dans le composant spécifié et les ajoute au conteneur spécifié en stockant leur niveau d'héritage, qui peut être récupéré en utilisant la méthode <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">
        <see cref="T:System.ComponentModel.IComponent" /> à rechercher. La recherche commence par ce composant.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">
        <see cref="T:System.ComponentModel.IContainer" /> où les composants doivent être ajoutés.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">Obtient l'attribut d'héritage du composant spécifié.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel l'attribut d'héritage doit être récupéré.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">Instance de <see cref="T:System.ComponentModel.InheritanceAttribute" /> qui décrit le niveau d'héritage du composant spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">Fournit des méthodes servant à gérer les verbes de concepteur globaux et les commandes de menu disponibles en mode design, ainsi qu'à afficher certains types de menus contextuels.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">Ajoute la commande de menu standard spécifiée au menu.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> à ajouter.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">Le <see cref="T:System.ComponentModel.Design.CommandID" /> du <see cref="T:System.ComponentModel.Design.MenuCommand" /> spécifié figure déjà dans un menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">Ajoute le verbe de concepteur spécifié à l'ensemble de verbes de concepteur globaux.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">Recherche l'ID de commande spécifié et retourne la commande de menu qui lui est associée.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> à rechercher.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> associé à l'ID de commande, ou <see langword="null" /> si aucune commande n'est trouvée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">Appelle une commande de menu ou une commande sous forme de verbe de concepteur correspondant à l'ID de commande spécifié.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande à rechercher et à exécuter.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la commande a été correctement trouvée et appelée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">Supprime la commande de menu standard spécifiée du menu.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">Supprime le verbe de concepteur spécifié de la collection de verbes de concepteur globaux.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">Affiche le menu contextuel spécifié à l'emplacement indiqué.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> du menu contextuel à afficher.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">Coordonnée x (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">Coordonnée y (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">Obtient une collection des verbes du concepteur actuellement disponibles.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes du concepteur actuellement disponibles.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">Fournit une interface permettant d'obtenir des références aux objets d'un projet par nom ou par type, d'obtenir le nom d'un objet spécifié et de rechercher le parent d'un objet spécifié au sein d'un projet de concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">Obtient le composant qui contient le composant spécifié.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">Objet pour lequel le composant parent doit être récupéré.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">
        <see cref="T:System.ComponentModel.IComponent" /> de base contenant l'objet spécifié, ou <see langword="null" /> s'il n'existe aucun composant parent.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Obtient le nom du composant spécifié.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">Objet dont le nom doit être retourné.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">Nom de l'objet référencé ou <see langword="null" /> si la référence d'objet n'est pas valide.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">Obtient une référence au composant dont le nom correspond au nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">Nom du composant pour lequel une référence doit être retournée.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">Objet auquel le nom spécifié fait référence, ou <see langword="null" /> si aucune référence n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">Obtient toutes les références disponibles aux composants du projet.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">Tableau de tous les objets dont les références sont disponibles pour <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">Obtient toutes les références disponibles aux composants du type spécifié.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">Type d'objet aux instances duquel des références doivent être retournées.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">Tableau de tous les objets disponibles du type spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">Fournit une interface permettant aux concepteurs d'accéder à des lecteurs et des writers de ressources pour des types de ressources <see cref="T:System.Globalization.CultureInfo" /> spécifiques.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">Recherche le lecteur de ressources pour la culture spécifiée et le retourne.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">
        <see cref="T:System.Globalization.CultureInfo" /> de la ressource pour laquelle récupérer un lecteur de ressources.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">Interface <see cref="T:System.Resources.IResourceReader" /> contenant les ressources de la culture ou <see langword="null" /> s'il n'existe aucune ressource pour la culture.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">Recherche le writer de ressource pour la culture spécifiée et le retourne.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">
        <see cref="T:System.Globalization.CultureInfo" /> de la ressource pour laquelle créer un writer de ressource.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">Interface <see cref="T:System.Resources.IResourceWriter" /> pour la culture spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">Fournit la prise en charge des technologies d'affichage du concepteur racine.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">Obtient un objet d'affichage pour la technologie d'affichage spécifiée.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> indiquant une technologie d'affichage particulière.</param>
      <returns vsli:raw="An object that represents the view for this designer.">Objet représentant l'affichage de ce concepteur.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">La technologie d'affichage spécifiée n'est pas prise en charge ou n'existe pas.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">Obtient l'ensemble des technologies prises en charge par le concepteur pour son affichage.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">Tableau des valeurs <see cref="T:System.ComponentModel.Design.ViewTechnology" /> prises en charge.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">Fournit une interface permettant à un concepteur de sélectionner des composants.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">Obtient une valeur indiquant si le composant spécifié est actuellement sélectionné.</summary>
      <param name="component" vsli:raw="The component to test.">Composant à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le composant appartient à la sélection utilisateur en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">Obtient une collection de composants actuellement sélectionnés.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">Collection représentant l'ensemble en cours des composants sélectionnés.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">Obtient l'objet qui est actuellement l'objet sélectionné principal.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">Objet qui est actuellement l'objet sélectionné principal.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">Se produit lorsque la sélection actuelle est modifiée.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">Se produit lorsque la sélection en cours est sur le point d'être modifiée.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">Obtient le nombre d'objets sélectionnés.</summary>
      <returns vsli:raw="The number of selected objects.">Nombre d'objets sélectionnés.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">Sélectionne la collection de composants spécifiée.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Collection de composants à sélectionner.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">Sélectionne les composants à partir de la collection spécifiée de composants qui correspondent au type de sélection spécifié.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Collection de composants à sélectionner.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">Valeur de l'énumération <see cref="T:System.ComponentModel.Design.SelectionTypes" />. La valeur par défaut est <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">Fournit un conteneur de services.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Objet de rappel utilisé pour créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">Ajoute le service spécifié au conteneur de service et promeut éventuellement le service vers les conteneurs de service parents.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Objet de rappel utilisé pour créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">Ajoute le service spécifié au conteneur de services et promeut éventuellement le service vers les conteneurs de services parents éventuels.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Type de service à supprimer.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">Supprime le type de service spécifié du conteneur de service et promeut éventuellement le service vers les conteneurs de service parents.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Type de service à supprimer.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour promouvoir cette demande vers les conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">Assure la prise en charge de la création d'un jeu de concepteurs personnalisés connexes.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">Obtient une collection de concepteurs enfants.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">
        <see cref="T:System.Collections.ICollection" />, contenant la collection d'objets enfants <see cref="T:System.ComponentModel.Design.IDesigner" /> du concepteur actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">Obtient le concepteur parent.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">
        <see cref="T:System.ComponentModel.Design.IDesigner" /> représentant le concepteur parent ou <see langword="null" /> s'il n'existe aucun parent.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">Fournit une interface permettant de modifier l'ensemble des descripteurs membres d'un composant en mode design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtre les attributs exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">Composant dont les attributs doivent être filtrés.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">Dictionnaire d'attributs pouvant être modifiés.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> si l'ensemble d'attributs filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtre les événements exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter events for.">Composant dont les événements doivent être filtrés.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">Dictionnaire d'événements pouvant être modifiés.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> si l'ensemble d'événements filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtre les propriétés exposées par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">Composant dont les propriétés doivent être filtrées.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">Dictionnaire de propriétés pouvant être modifiées.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> si l'ensemble de propriétés filtrées doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">Identifie les types disponibles au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">Récupère la liste des types disponibles.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">Type de base à trouver. Peut être <see langword="null" />.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">Indique si les types de tous les assemblys référencés doivent être vérifiés.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">Collection de types qui correspondent aux critères spécifiés par <paramref name="baseType" /> et <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">Fournit une interface permettant de récupérer un assembly ou un type par son nom.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">Obtient l'assembly demandé.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Nom de l'assembly à récupérer.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Instance de l'assembly demandé ou <see langword="null" /> si aucun assembly n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">Obtient l'assembly demandé.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Nom de l'assembly à récupérer.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Instance de l'assembly demandé ou <see langword="null" /> si aucun assembly n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">Obtient le chemin d'accès au fichier à partir duquel l'assembly a été chargé.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nom de l'assembly.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">Chemin d'accès au fichier à partir duquel l'assembly a été chargé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">Charge un type portant le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Charge un type portant le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Charge un type portant le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nom du type. Si le nom du type n'est pas un nom qualifié complet indiquant un assembly, ce service effectue la recherche dans son ensemble interne d'assemblys référencés.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> si cette méthode doit lever une exception lorsque l'assembly est introuvable ; sinon, <see langword="false" />. En outre, cette méthode retourne <see langword="null" /> si l'assembly est introuvable.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ignorer la casse lors de la recherche de types ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Instance de <see cref="T:System.Type" /> correspondant au nom spécifié ou <see langword="null" /> si aucun type n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">Ajoute une référence à l'assembly spécifié.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">
        <see cref="T:System.Reflection.AssemblyName" /> indiquant l'assembly à référencer.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Représente une commande de menu Windows ou de barre d'outils.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">Événement à déclencher lorsque l'utilisateur sélectionne l'élément de menu ou le bouton de barre d'outils.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">ID de commande unique liant cette commande de menu au menu de l'environnement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">Obtient ou définit une valeur indiquant si cet élément de menu est coché.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément est coché ; sinon <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">Se produit lorsque la commande de menu est modifiée.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> associé à cette commande de menu.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> associé à la commande de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">Obtient une valeur indiquant si cet élément de menu est disponible.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément de menu est activé ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">Appelle la commande.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">Appelle la commande avec le paramètre donné.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">Argument facultatif pouvant être utilisé par la commande.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">Obtient le code d'état de la commande OLE pour cet élément de menu.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">Entier contenant un mélange des indicateurs d'état qui reflètent l'état de cet élément de menu.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Obtient les propriétés publiques associées au <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> qui contient les propriétés publiques du <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">Obtient ou définit une valeur indiquant si cet élément de menu est pris en charge.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément est pris en charge ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">Retourne une représentation de type chaîne de cette commande de menu.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">Chaîne contenant la valeur de la propriété <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> à laquelle sont ajoutés les noms des indicateurs éventuellement définis, séparés par des barres verticales (| Ces propriétés d'indicateur sont notamment <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> et <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">Obtient ou définit une valeur indiquant si cet élément de menu est visible.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément de menu est visible ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">Définit les identificateurs qui indiquent le type d'une sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">Représente une sélection d'ajout qui ajoute les composants sélectionnés à la sélection actuelle, en conservant le jeu actuel de composants sélectionnés.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Représente une sélection normale. Le service de sélection réagit à l'appui des touches CTRL et MAJ pour prendre en charge l'ajout ou la suppression de composants de la sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Représente une sélection qui se produit lorsqu'un utilisateur clique sur un composant. Si le composant qui vient d'être sélectionné l'était déjà, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">Représente une sélection qui se produit lorsque l'utilisateur appuie sur le bouton de la souris alors que son pointeur se trouve au-dessus d'un composant. Si le composant situé sous le pointeur est déjà sélectionné, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Représente une sélection qui se produit lorsque l'utilisateur relâche le bouton de la souris immédiatement après la sélection d'un composant. Si le composant qui vient d'être sélectionné l'était déjà, il est promu au rôle de composant sélectionné principal plutôt que d'être annulé.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Représente une sélection normale. Le service de sélection réagit à l'appui des touches CTRL et MAJ pour prendre en charge l'ajout ou la suppression de composants de la sélection.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">Représente une sélection principale qui se produit lorsqu'un utilisateur clique sur un composant. Si un composant de la liste de sélection était déjà sélectionné, il est promu au rôle de sélection principale.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">Représente une sélection de suppression qui supprime les composants sélectionnés de la sélection actuelle, en conservant le jeu actuel de composants sélectionnés.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">Représente une sélection qui se produit lorsque le contenu d'une sélection est remplacé. Le service de sélection remplace la sélection en cours par la sélection de remplacement.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">Représente une sélection à bascule qui alterne entre la sélection actuelle et la sélection fournie. Si un composant est déjà sélectionné et qu'il est passé à <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> avec une sélection de type <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, la sélection du composant sera annulée.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">Identifie les types de sélection valides en tant que <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> et <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">Fournit la classe de base pour sérialiser un jeu de composants ou des objets sérialisables dans un magasin de sérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Crée un <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns vsli:raw="A new created serialization store.">Nouveau magasin de sérialisation créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">Désérialise le magasin donné pour produire une collection d'objets.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Collection d'objets créée d'après l'état stocké.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">Désérialise le magasin donné et remplit le <see cref="T:System.ComponentModel.IContainer" /> donné avec des objets <see cref="T:System.ComponentModel.IComponent" /> désérialisés.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IContainer" /> auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Collection d'objets créée d'après l'état stocké.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné, en validant éventuellement les types recyclés.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> pour garantir que la désérialisation ne fonctionnera que si elle est appliquée à un objet du même type.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">Désérialise le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> spécifié dans le conteneur donné, en appliquant éventuellement des valeurs de propriété par défaut.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à désérialiser.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Conteneur auquel des objets <see cref="T:System.ComponentModel.IComponent" /> seront ajoutés.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> pour garantir que la désérialisation ne fonctionnera que si elle est appliquée à un objet du même type.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">
        <see langword="true" /> pour indiquer que les valeurs de propriété par défaut doivent être appliquées.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="container" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> ne contient pas de données dans un format que le conteneur de sérialisation peut traiter.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">Charge <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> à partir d'un flux de données.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">
        <see cref="T:System.IO.Stream" /> à partir duquel le magasin sera chargé.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">Nouvelle instance de <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> ne contient pas de données enregistrées par un appel précédent à <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Sérialise l'objet donné dans le <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> donné.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="value" /> sera écrit.</param>
      <param name="value" vsli:raw="The object to serialize.">L'objet à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">Sérialise l'objet donné en prenant en compte les valeurs de propriétés par défaut.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="value" /> sera sérialisé.</param>
      <param name="value" vsli:raw="The object to serialize.">L'objet à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">Sérialise le membre donné sur l’objet donné.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="member" /> sera sérialisé.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Objet auquel <paramref name="member" /> est attaché.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui spécifie le membre à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">Sérialise le membre spécifié dans l'objet donné, en tenant compte de la valeur de propriété par défaut.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> dans lequel l'état de <paramref name="member" /> sera sérialisé.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Objet auquel <paramref name="member" /> est attaché.</param>
      <param name="member" vsli:raw="The member to serialize.">Membre à sérialiser.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> est fermé ou <paramref name="store" /> n'est pas un type de magasin de sérialisation pris en charge. Utilisez un magasin retourné par <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">Fournit un objet de pile pouvant être utilisé par un sérialiseur pour mettre des informations à la disposition de sérialiseurs imbriqués.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">Ajoute un objet à la fin de la pile au lieu de le pousser au sommet de celle-ci.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">Objet de contexte à ajouter à la pile.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">Obtient l'objet en cours dans la pile.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">Objet en cours dans la pile, ou <see langword="null" /> si aucun objet n'a fait l'objet d'un push.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">Obtient l'objet de la pile, au niveau spécifié.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">Niveau de l'objet à récupérer de la pile. Le niveau 0 correspond au sommet de la pile, le niveau 1 au niveau inférieur suivant, etc. Ce niveau doit être supérieur ou égal à 0. Si le niveau est supérieur au nombre de niveaux de la pile, <see langword="null" /> est retournée.</param>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">Objet de la pile au niveau spécifié, ou <see langword="null" /> si aucun objet n'est présent à ce niveau.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> est inférieur à 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">Obtient le premier objet de la pile qui hérite du type spécifié ou l'implémente.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">Type à récupérer de la pile de contexte.</param>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">Premier objet de la pile qui hérite du type spécifié ou l'implémente, ou <see langword="null" /> si aucun objet de la pile n'implémente le type.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">Supprime l'objet en cours de la pile en retournant sa valeur.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">Objet supprimé de la pile ; <see langword="null" /> si la pile ne contient aucun objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">Exécute un push de l'objet spécifié, ou place l'objet, dans la pile.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">Objet de contexte devant faire l'objet d'un push dans la pile.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">L'attribut <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> est placé sur un sérialiseur pour indiquer la classe à utiliser comme fournisseur par défaut de ce type de sérialiseur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> avec le type de fournisseur indiqué.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">Nom du type de fournisseur de sérialisation.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> avec le type de fournisseur donné.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">
        <see cref="T:System.Type" /> du fournisseur de sérialisation.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">Obtient le nom du type du fournisseur de sérialisation.</summary>
      <returns vsli:raw="A string containing the name of the provider.">Chaîne contenant le nom du fournisseur.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">Fournit une interface de chargeur de concepteur de base pouvant être utilisée pour implémenter un chargeur de concepteur personnalisé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">Commence le chargement d'un concepteur.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">Hôte de chargeur par le biais duquel ce chargeur charge les composants.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">Écrit les modifications mises en cache à l'endroit à partir duquel le concepteur a été chargé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">Obtient une valeur indiquant si le chargeur charge actuellement un document.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le chargeur charge actuellement un document ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indique un sérialiseur que le gestionnaire de sérialisation doit utiliser pour sérialiser les valeurs du type auquel s'applique cet attribut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerTypeName">Nom qualifié complet du type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerType">Type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">Type de données du sérialiseur.</param>
      <param name="baseSerializerType">Type de données de base du sérialiseur. Plusieurs sérialiseurs peuvent être fournis pour une classe, à condition qu'ils possèdent des types de base différents.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtient le nom qualifié complet du type de base du sérialiseur.</summary>
      <returns>Nom qualifié complet du type de base du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtient le nom de type qualifié complet du sérialiseur.</summary>
      <returns>Nom de type qualifié complet du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indique un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">Fournit une interface qui peut étendre un hôte de concepteur de sorte qu'il prenne en charge le chargement à partir d'un état sérialisé.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">Met fin à l'opération de chargement du concepteur.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">Nom qualifié complet de la classe de base du document créé par ce concepteur.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le concepteur a été chargé correctement ; sinon, <see langword="false" />.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Collection contenant les erreurs éventuellement survenues pendant le chargement. Si aucune erreur ne s'est produite, on passe une collection vide ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">Recharge le document de design.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">Fournit une interface qui étend <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> pour spécifier si les erreurs sont tolérées lorsqu'un document de design est chargé.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">Obtient ou définit une valeur indiquant s'il est possible de recharger avec des erreurs.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le chargeur de concepteur peut recharger le document de design lorsque des erreurs sont détectées; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">Obtient ou définit une valeur indiquant si les erreurs doivent être ignorées lorsque <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> est appelé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le chargeur de concepteur ignore les erreurs lors du rechargement; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">Fournit une interface qui peut étendre un chargeur de concepteur de sorte qu'il prenne en charge le chargement asynchrone de composants externes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">Inscrit un composant externe comme appartenant au processus de chargement managé par cette interface.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">Signale qu'un chargement dépendant est terminé.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">
        <see langword="true" /> si le chargement du concepteur réussit ; <see langword="false" /> si des erreurs ont empêché la fin du chargement.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Collection d'erreurs s'étant éventuellement produites pendant le chargement. Si aucune erreur ne s'est produite, on passe une collection vide ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">Recharge le document de design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">
        <see langword="true" /> si la demande de rechargement est acceptée, ou <see langword="false" /> si le chargeur ne permet pas le rechargement.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">Fournit une interface pouvant gérer la sérialisation au moment du design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">Ajoute le fournisseur de sérialisation spécifié au gestionnaire de sérialisation.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">Fournisseur de sérialisation à ajouter.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">Obtient une zone de stockage de type pile définie par l'utilisateur qui est pratique pour les communications entre sérialiseurs.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> qui stocke des données.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">Crée une instance du type spécifié et l’ajoute à une collection d’instances nommées.</summary>
      <param name="type" vsli:raw="The data type to create.">Type de données à créer.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">Arguments à passer au constructeur de ce type.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">Nom de l'objet. Ce nom peut être utilisé pour accéder ultérieurement à l'objet via <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Si <see langword="null" /> est passée, l'objet est toujours créé, mais n'est pas accessible par son nom.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">Si <see langword="true" /> est passé, cet objet est ajouté au conteneur de design. L'objet doit implémenter <see cref="T:System.ComponentModel.IComponent" /> pour qu'il entre en vigueur.</param>
      <returns vsli:raw="The newly created object instance.">Instance de l'objet qui vient d'être créé.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">Obtient une instance d'un objet créé portant le nom spécifié, ou <see langword="null" /> si cet objet n'existe pas.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">Nom de l'objet à récupérer.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">Instance de l'objet portant le nom donné, ou <see langword="null" /> si aucun objet portant ce nom n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">Obtient le nom de l'objet spécifié, ou <see langword="null" /> si l'objet ne possède pas de nom.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">Objet pour lequel le nom doit être récupéré.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">Nom de l'objet, ou <see langword="null" /> si l'objet est sans nom.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">Obtient un sérialiseur du type demandé pour le type d'objet spécifié.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">Type de l'objet pour lequel le sérialiseur doit être obtenu.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">Type du sérialiseur à récupérer.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">Instance du sérialiseur demandé, ou <see langword="null" /> si aucun sérialiseur approprié n'est détecté.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">Obtient un type portant le nom spécifié.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">Nom qualifié complet du type à charger.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">Instance du type, ou <see langword="null" /> si le type ne peut pas être chargé.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">Indique les propriétés personnalisées qui peuvent être sérialisées à l'aide des sérialiseurs disponibles.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés à sérialiser.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">Supprime un fournisseur de sérialisation personnalisé du gestionnaire de sérialisation.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">Fournisseur à supprimer. Cet objet doit avoir été ajouté à l'aide de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">Signale une erreur lors de la sérialisation.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">Erreur à signaler. Cet objet d'informations peut être de n'importe quel type. S'il s'agit d'une exception, le message de l'exception est extrait et transmis à l'utilisateur. S'il s'agit d'un autre type, <see cref="M:System.Object.ToString" /> est appelé pour afficher les informations à l'utilisateur.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">Se produit lorsque la méthode <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> ne parvient pas à trouver le nom spécifié dans la table de noms du gestionnaire de sérialisation.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">Se produit lorsque la sérialisation est terminée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">Définit le nom de l'objet existant spécifié.</summary>
      <param name="instance" vsli:raw="The object instance to name.">Instance de l'objet à nommer.</param>
      <param name="name" vsli:raw="The name to give the instance.">Nom à attribuer à la nouvelle instance.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">Fournit une interface qui permet d'accéder à un sérialiseur.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">Obtient un sérialiseur à l'aide des attributs spécifiés.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">Gestionnaire de sérialisation qui demande le sérialiseur.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">Instance du sérialiseur en cours du type spécifié. Cela peut être <see langword="null" /> s'il n'existe aucun sérialiseur du type spécifié.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">Type des données de l'objet à sérialiser.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">Type des données du sérialiseur à créer.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">Instance d'un sérialiseur du type demandé, ou <see langword="null" /> si la demande ne peut pas être satisfaite.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">Fournit une interface qui peut appeler la sérialisation et la désérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">Désérialise l'objet de données de sérialisation spécifié et retourne une collection d'objets représentés par ces données.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">Objet constitué de données sérialisées.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">
        <see cref="T:System.Collections.ICollection" /> d'objets régénérés à partir de l'objet de données de sérialisation spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">Sérialise la collection d'objets spécifiée et les stocke dans un objet de données de sérialisation.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">Collection d'objets à sérialiser.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">Objet qui contient l'état sérialisé de la collection d'objets spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">Fournit un service pouvant générer des noms uniques pour des objets.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">Crée un nouveau nom spécifique à tous les composants du conteneur spécifié.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">Conteneur dans lequel le nouvel objet est ajouté.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">Type de données de l'objet auquel le nom est attribué.</param>
      <returns vsli:raw="A unique name for the data type.">Nom unique pour le type de données.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Obtient une valeur indiquant si le nom spécifié est valide.</summary>
      <param name="name" vsli:raw="The name to validate.">Nom à valider.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le nom est valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Obtient une valeur indiquant si le nom spécifié est valide.</summary>
      <param name="name" vsli:raw="The name to validate.">Nom à valider.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">Fournit les informations nécessaires à la création d'une instance d'un objet. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> avec les informations sur les membres et les arguments spécifiés.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Informations sur les membres pour le descripteur. Il peut s'agir de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />. S'il s'agit de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />, il doit représenter un membre <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Collection des arguments à passer au membre. Ce paramètre peut être <see langword="null" /> ou être une collection vide s'il n'y a aucun argument. La collection peut également être constituée d'autres instances de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />ou <see cref="T:System.Reflection.PropertyInfo" />, et il ne représente pas un membre <see langword="static" />.  

ou - 
<paramref name="member" /> est de type <see cref="T:System.Reflection.PropertyInfo" /> et n'est pas lisible.  

ou - 
<paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" />, et le nombre d’arguments dans <paramref name="arguments" /> ne correspond pas à la signature de <paramref name="member" />.

ou -


<paramref name="member" /> est de type <see cref="T:System.Reflection.ConstructorInfo" /> et représente un membre <see langword="static" />  
ou 
<paramref name="member" /> est de type <see cref="T:System.Reflection.FieldInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> n'est pas nul.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, à l'aide des informations sur les membres, des arguments et de la valeur spécifiés, indiquant si les informations déterminées décrivent complètement l'instance.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Informations sur les membres pour le descripteur. Il peut s'agir de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />. S'il s'agit de <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou de <see cref="T:System.Reflection.PropertyInfo" />, il doit représenter un membre <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Collection des arguments à passer au membre. Ce paramètre peut être <see langword="null" /> ou être une collection vide s'il n'y a aucun argument. La collection peut également être constituée d'autres instances de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les informations spécifiées décrivent complètement l'instance ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" />ou <see cref="T:System.Reflection.PropertyInfo" />, et il ne représente pas un membre <see langword="static" />. 
 <paramref name="member" /> est de type <see cref="T:System.Reflection.PropertyInfo" /> et n'est pas lisible.  
 <paramref name="member" /> est de type <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> ne correspond pas à la signature de <paramref name="member" />.  
 <paramref name="member" /> est de type <see cref="T:System.Reflection.ConstructorInfo" /> et représente un membre <see langword="static" /><paramref name="member" /> est de type <see cref="T:System.Reflection.FieldInfo" />, et le nombre d'arguments dans <paramref name="arguments" /> n'est pas nul.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">Obtient la collection d'arguments pouvant être utilisés pour reconstruire une instance de l'objet que ce descripteur d'instance représente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">
        <see cref="T:System.Collections.ICollection" /> d'arguments pouvant être utilisés pour créer l'objet.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">Appelle ce descripteur d'instance et retourne l'objet qu'il décrit.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">Objet décrit par ce descripteur d'instance.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">Obtient une valeur indiquant si le contenu de ce <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identifie complètement l'instance.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'instance est complètement décrite ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">Obtient les informations sur les membres qui décrivent l'instance à laquelle ce descripteur est associé.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">
        <see cref="T:System.Reflection.MemberInfo" /> qui décrit l'instance à laquelle cet objet est associé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">Représente une relation unique entre un objet et un membre.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">Objet qui possède <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">Membre qui doit être en relation avec <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> ou <paramref name="member" /> est <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">Représente la relation membre vide. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">Détermine si deux instances <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont égales.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> à comparer avec l'objet <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifié est égal au <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">Obtient une valeur qui indique si cette relation est égale à la relation <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, si cette relation est égale à la relation <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">Obtient le membre en relation.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Membre passé à <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">Vérifie si deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifiées sont équivalentes.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à gauche de l'opérateur d'égalité.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à droite de l'opérateur d'égalité.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cet opérateur retourne <see langword="true" /> si les deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont égales ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">Vérifie si deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> spécifiées sont différentes.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à gauche de l'opérateur d'inégalité.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui se trouve à droite de l'opérateur d'inégalité.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cet opérateur retourne <see langword="true" /> si les deux structures <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sont différentes ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">Obtient l'objet propriétaire.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Objet propriétaire passé à <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">Fournit la classe de base pour lier un membre à un autre.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">Apporte une relation à la relation source donnée.</summary>
      <param name="source" vsli:raw="The source relationship.">Relation source.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">Relation à <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> s'il n'existe pas de relation.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Établit une relation entre un objet source et un objet cible.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">Relation source. Il s'agit du côté gauche d'une assignation de relation.</param>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">Relation actuelle associée à <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> s'il n'existe pas de relation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> est vide ou la relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Établit une relation entre un objet source et un objet cible.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">Propriétaire d'une relation source.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">Membre d'une relation source.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">Structure <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> qui encapsule la relation entre un objet source et un objet cible ou <see langword="null" /> s'il n'existe pas de relation.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> est vide ou la relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">Crée une relation entre l'objet source et la relation cible.</summary>
      <param name="source" vsli:raw="The source relationship.">Relation source.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Relation à définir dans la source.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">La relation n'est pas prise en charge par le service.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">Obtient une valeur indiquant si la relation donnée est prise en charge.</summary>
      <param name="source" vsli:raw="The source relationship.">Relation source.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Relation à définir dans la source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une relation entre les deux objets donnés est prise en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name" vsli:raw="The name to resolve.">Nom à résoudre.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">Obtient le nom de l'objet à résoudre.</summary>
      <returns vsli:raw="The name of the object to resolve.">Nom de l'objet à résoudre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">Obtient ou définit l'objet correspondant au nom.</summary>
      <returns vsli:raw="The object that the name is associated with.">Objet auquel le nom est associé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">Représente la méthode gérant l'événement <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> d'un gestionnaire de sérialisation.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">Indique le sérialiseur de base à utiliser pour un objet concepteur racine. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">Nom du type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Nom qualifié complet du type de données du sérialiseur.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">Nom du type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> avec les attributs spécifiés.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">Type de données du sérialiseur.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">Type de base du sérialiseur. Une classe peut comprendre plusieurs sérialiseurs, dans la mesure où ils possèdent tous des types de base différents.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce sérialiseur prend en charge le rechargement dynamique du document ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">Obtient une valeur indiquant si le sérialiseur racine prend en charge le rechargement du document de design sans détruire préalablement l'hôte du concepteur.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le sérialiseur racine prend en charge le rechargement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">Obtient le nom qualifié complet du type de base du sérialiseur.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">Nom du type de base du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">Obtient le nom de type qualifié complet du sérialiseur.</summary>
      <returns vsli:raw="The name of the type of the serializer.">Nom du type du sérialiseur.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">Obtient un ID unique pour ce type d'attribut.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">Objet contenant un ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">Fournit la classe de base pour stocker des données de sérialisation pour <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Ferme le magasin de sérialisation.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">Obtient une collection des erreurs qui se sont produites pendant une sérialisation ou une désérialisation.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">
        <see cref="T:System.Collections.ICollection" /> qui contient des erreurs qui se sont produites pendant une sérialisation ou une désérialisation.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">Enregistre le magasin dans le flux donné.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">Flux dans lequel le magasin sera sérialisé.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">Fournit une implémentation simple de l'interface <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.ServiceContainer" /> avec le fournisseur de services parent spécifié.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">Fournisseur de services parent.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Objet de rappel pouvant créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Objet de rappel pouvant créer le service. Cela permet à un service d'être déclaré comme disponible, mais retarde la création de l'objet jusqu'à ce que le service soit demandé.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce service doit être ajouté à des conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="callback" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Instance du service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Ajoute le service spécifié au conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Type de service à ajouter.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Instance du type de service à ajouter. Cet objet doit implémenter le type indiqué par le paramètre <paramref name="serviceType" /> ou en hériter.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce service doit être ajouté à des conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un service de type <paramref name="serviceType" /> existe déjà dans le conteneur.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">Obtient les services par défaut implémentés directement par <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns vsli:raw="The default services.">Services par défaut.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">Supprime ce conteneur de service.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">Supprime ce conteneur de service.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.Design.ServiceContainer" /> est en cours de suppression ; sinon <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">Obtient le service demandé.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">Type de service à récupérer.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">Instance éventuelle du service, ou <see langword="null" /> si aucune instance n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Type de service à supprimer.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">Supprime le type de service spécifié du conteneur de services.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Type de service à supprimer.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce service doit être supprimé de conteneurs de services parents éventuels ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">Fournit un mécanisme de rappel pouvant créer une instance d'un service à la demande.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">Conteneur de services qui a demandé la création du service.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">Type du service à créer.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">Service spécifié par <paramref name="serviceType" /> ou <see langword="null" /> si ce service n'a pas pu être créé.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">Définit des identificateurs pour l'ensemble de commandes standard disponibles dans la plupart des applications.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignBottom. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignHorizontalCenters. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignLeft. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignRight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignTop. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande AlignVerticalCenters. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeBottom. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ArrangeRight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande BringForward. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande BringToFront. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande CenterHorizontally. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande CenterVertically. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Copier. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Couper. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Supprimer. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Structure du document. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande F1Help. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Grouper. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceConcatenate. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceDecrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceIncrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande HorizSpaceMakeEqual. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande LineupIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande LockControls. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande MultiLevelRedo. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande MultiLevelUndo. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Coller. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Propriétés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande PropertiesWindow. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Rétablir. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Remplacer. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SelectAll. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SendBackward. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SendToBack. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ShowGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ShowLargeIcons. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControl. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControlHeight. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToControlWidth. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToFit. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SizeToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande SnapToGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande TabOrder. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Annuler. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande Dissocier. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">Obtient le premier verbe d'un ensemble de verbes. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">Obtient le dernier verbe d'un ensemble de verbes. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceConcatenate. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceDecrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceIncrease. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande VertSpaceMakeEqual. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ViewCode. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">Obtient le <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande ViewGrid. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">Définit des identificateurs GUID correspondant à l'ensemble standard de fenêtres Outil disponibles dans l'environnement de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">Obtient le GUID pour l'Explorateur d'objets. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">Obtient le GUID pour la fenêtre Sortie. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">Obtient le GUID pour l'Explorateur de solutions. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">Obtient le GUID pour la fenêtre Propriétés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">Obtient le GUID pour le frame des liens associés. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">Obtient le GUID pour l'Explorateur de serveurs. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">Obtient le GUID pour la liste des tâches. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">Obtient le GUID pour la boîte à outils. Ce champ est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">Fournit un fournisseur de description de type pour un type spécifié.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">Obtient un fournisseur de description de type pour l'objet spécifié.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">Objet pour lequel obtenir un fournisseur de description de type.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> correspondant à <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">Obtient un fournisseur de description de type pour le type spécifié.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">Type pour lequel obtenir un fournisseur de description de type.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> correspondant à <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">Définit des identificateurs pour un ensemble de technologies prises en charge par les hôtes du concepteur.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">Spécifie la prise en charge de la technologie d'affichage par défaut.
Le concepteur racine peut retourner tout type d’objet, à condition que l’objet soit compatible avec un adaptateur de la technologie de l’hôte. Les environnements d’hébergement tels que Visual Studio fournissent un moyen d’intégrer de nouveaux adaptateurs de technologie d’affichage. L’objet de vue par défaut pour le concepteur Windows Forms est une instance <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">Représente un mode dans lequel l'objet de vue est passé directement à l'environnement de développement.
L’objet de vue doit implémenter les interfaces requises par l’environnement de développement. L’environnement de développement Visual Studio prend en charge les objets de vue qui sont un contrôle ActiveX, un document actif, ou un objet qui implémente l’interface IVsWindowPane disponible dans le programme Visual Studio VSI (Visual Studio Integration). L’environnement de développement Visual Studio prend en charge cette technologie d’affichage. Celle-ci n’est pas nécessairement disponible dans tous les environnements de développement.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Représente un mode dans lequel un objet contrôle Windows Forms assure l'affichage du concepteur racine. Le concepteur hôte remplit la fenêtre de document de l’environnement de développement avec le contrôle Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Spécifie la classe utilisée pour implémenter des services au moment de la conception pour un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du nom du type qui fournit des services de design.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type de concepteur et de la classe de base du concepteur.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
      <param name="designerBaseTypeName">Nom qualifié complet de la classe de base à associer à la classe de concepteur.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du nom de la classe de concepteur et de la classe de base associée au concepteur.</summary>
      <param name="designerTypeName">Concaténation du nom qualifié complet du type qui fournit les services de design pour le composant auquel cet attribut est lié et nom de l'assembly dans lequel réside ce type.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> représentant la classe de base à associer à <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type qui fournit des services de design.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> qui représente la classe qui fournit les services de design pour le composant auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DesignerAttribute" /> à l'aide du type du concepteur et de la classe de base du concepteur.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> qui représente la classe qui fournit les services de design pour le composant auquel cet attribut est lié.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> représentant la classe de base à associer à <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Obtient le nom du type de base de ce concepteur.</summary>
      <returns>Nom du type de base de ce concepteur.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Obtient le nom du type de concepteur associé à cet attribut de concepteur.</summary>
      <returns>Nom du type de concepteur associé à cet attribut de concepteur.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.DesignerAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Obtient un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> marque la visibilité d'un composant. Si <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> existe, un concepteur visuel peut afficher ce composant dans un concepteur.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">Crée un nouvel <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> dont la valeur par défaut est <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">Crée un nouveau <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> dont la propriété <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> est égale à la valeur spécifiée dans <paramref name="visible" />.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">Valeur en fonction de laquelle la valeur de la propriété <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> sera définie.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">Visibilité par défaut, à savoir <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Objet à comparer à cette instance ou référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">Obtient une valeur qui indique si cette instance est égale à la valeur <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, si cette instance est égale à la valeur <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">Marque un composant invisible dans un concepteur visuel.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">Obtient ou définit si le composant doit être affiché au moment du design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">
        <see langword="true" /> si ce composant doit être affiché au moment du design ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">Marque un composant visible dans un concepteur visuel.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets numériques à virgule flottante double précision vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Spécifie l’éditeur à utiliser pour modifier une propriété. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec l'éditeur par défaut, c'est-à-dire aucun éditeur.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et du type de base de l'éditeur.</summary>
      <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
      <param name="baseTypeName">Obtient le nom qualifié complet du type de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le nom du type et le type de base.</summary>
      <param name="typeName">Nom de type qualifié complet de l'éditeur.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EditorAttribute" /> avec le type et le type de base.</summary>
      <param name="type">
        <see cref="T:System.Type" /> qui représente le type de l'éditeur.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la classe ou de l'interface de base à utiliser comme clé de recherche pour l'éditeur. Cette classe doit être <see cref="T:System.Drawing.Design.UITypeEditor" />, ou en dériver.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Obtient le nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</summary>
      <returns>Nom de la classe ou de l'interface de base qui sert de clé de recherche pour cet éditeur.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Obtient le nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>Nom de la classe de l'éditeur au format <see cref="P:System.Type.AssemblyQualifiedName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.EditorAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de l'objet actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Obtient un ID unique pour ce type d'attribut.</summary>
      <returns>ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Enum" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EnumConverter" /> pour le type donné.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">
        <see cref="T:System.Type" /> qui représente le type d'énumération à associer à ce convertisseur d'énumération.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet d'énumération à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">Obtient <see cref="T:System.Collections.IComparer" /> qui peut être utilisé pour trier les valeurs de l'énumération.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">
        <see cref="T:System.Collections.IComparer" /> pour trier les valeurs de l'énumération.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">Convertit l'objet de valeur spécifié en objet d'énumération.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> n'est pas une valeur valide pour l'énumération.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">Spécifie le type de l'énumérateur auquel ce convertisseur est associé.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">Type de l'énumérateur auquel ce convertisseur est associé.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Obtient une collection de valeurs standard pour le type de données pour lequel ce validateur est conçu.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">Obtient une valeur indiquant si la valeur d'objet donnée est valide pour ce type.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">
        <see cref="T:System.Object" /> à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Obtient ou définit un <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui spécifie les valeurs possibles pour l'énumération.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> qui spécifie les valeurs possibles pour l'énumération.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">Fournit des informations sur un événement.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom et les attributs dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom de l'événement et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs dans les tableaux <see cref="T:System.ComponentModel.MemberDescriptor" /> et <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> possédant le nom du membre et ses attributs.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">Tableau <see cref="T:System.Attribute" /> possédant les attributs à ajouter à la description de cet événement.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptor" /> avec le nom et le tableau d'attributs spécifiés.</summary>
      <param name="name" vsli:raw="The name of the event.">Nom de l’événement.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs d'événement.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">En cas de substitution dans une classe dérivée, lie l'événement au composant.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">Composant fournissant des événements au délégué.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">Délégué représentant la méthode qui gère l'événement.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">En cas de substitution dans une classe dérivée, obtient le type du composant auquel cet événement est lié.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">
        <see cref="T:System.Type" /> représentant le type du composant auquel cet événement est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">En cas de substitution dans une classe dérivée, obtient le type du délégué de l'événement.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">
        <see cref="T:System.Type" /> représentant le type du délégué de l'événement.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">En cas de substitution dans une classe dérivée, obtient une valeur indiquant si le délégué d'événement est un délégué multicast.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'il s'agit d'un délégué d'événement multicast ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">En cas de substitution dans une classe dérivée, supprime la liaison du délégué avec le composant de sorte que le délégué ne reçoit plus les événements du composant.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">Composant auquel le délégué est lié.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">Délégué dont la liaison au composant doit être supprimée.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Tableau de type <see cref="T:System.ComponentModel.EventDescriptor" /> qui fournit les événements de cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tableau d'objets <see cref="T:System.ComponentModel.EventDescriptor" /> donné. La collection est éventuellement en lecture seule.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Tableau de type <see cref="T:System.ComponentModel.EventDescriptor" /> qui fournit les événements de cette collection.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour spécifier une collection en lecture seule ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">Ajoute un <see cref="T:System.ComponentModel.EventDescriptor" /> à la fin de la collection.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à ajouter à la collection.</param>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Position du <see cref="T:System.ComponentModel.EventDescriptor" /> au sein de la collection.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">Supprime tous les objets de la collection.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Retourne une valeur indiquant si la collection contient le <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient le paramètre <paramref name="value" /> donné ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">Obtient le nombre de descripteurs d'événement dans la collection.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">Nombre de descripteurs d'événement dans la collection.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie une collection vide à utiliser, plutôt que d'en créer une dépourvue d'élément. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">Obtient la description de l'événement correspondant au nom spécifié dans la collection.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">Nom de l'événement à obtenir de la collection.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si vous souhaitez ignorer la casse de l'événement ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucun événement n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Obtient un énumérateur pour ce <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Énumérateur implémentant <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Retourne l'index du <see cref="T:System.ComponentModel.EventDescriptor" /> donné.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Index du <see cref="T:System.ComponentModel.EventDescriptor" /> donné au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">Insère un <see cref="T:System.ComponentModel.EventDescriptor" /> dans la collection à un index spécifié.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Index au sein de la collection dans laquelle insérer le paramètre <paramref name="value" />.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" />. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">Obtient ou définit l'événement assorti du numéro d'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Numéro d'index de base zéro du <see cref="T:System.ComponentModel.EventDescriptor" /> à obtenir ou définir.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec le numéro d'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> n'est pas un index valide pour <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">Obtient ou définit l'événement portant le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Nom du <see cref="T:System.ComponentModel.EventDescriptor" /> à obtenir ou définir.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucun événement n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">Supprime l’objet <see cref="T:System.ComponentModel.EventDescriptor" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">Supprime le <see cref="T:System.ComponentModel.EventDescriptor" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">Index du <see cref="T:System.ComponentModel.EventDescriptor" /> à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">
        <see cref="T:System.Collections.IComparer" /> à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec un ordre de tri spécifié.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> de la collection.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de ce <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec un ordre de tri spécifié et un <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> de la collection.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">
        <see cref="T:System.Collections.IComparer" /> à utiliser pour trier les objets <see cref="T:System.ComponentModel.EventDescriptor" /> dans cette collection.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nouvelle <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copie les éléments de la collection dans un <see cref="T:System.Array" />, en commençant à un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la collection. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">Obtient une valeur indiquant si l'accès à la collection est synchronisé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à la collection est synchronisé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Ajoute un élément à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">Objet <see cref="T:System.Object" /> à ajouter à la collection.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Position à laquelle le nouvel élément est inséré.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Détermine l'index d'un élément spécifique de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">Insère un élément dans la collection à l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">
        <see cref="T:System.Object" /> à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  

ou - 
<paramref name="index" /> est supérieur ou égal à <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Supprime la première occurrence d’un objet spécifique dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">
        <see cref="T:System.Object" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">Fournit un convertisseur de type pour des objets extensibles vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">Obtient une collection de propriétés pour le type d'objet spécifié par le paramètre de valeur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">
        <see cref="T:System.Object" /> spécifiant le type d'objet pour lequel obtenir les propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Tableau de type <see cref="T:System.Attribute" /> qui sera utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce composant, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Obtient une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Spécifie une propriété qui est offerte par un fournisseur d'extendeurs. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">Obtient la propriété fournie.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui encapsule la propriété qui est fournie.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">Fournit une indication si la valeur de cette instance est la valeur par défaut pour la classe dérivée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">Obtient le fournisseur d'extendeurs qui fournit la propriété.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">
        <see cref="T:System.ComponentModel.IExtenderProvider" /> qui fournit la propriété.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">Obtient le type d'objet qui peut recevoir la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">
        <see cref="T:System.Type" /> qui décrit le type d'objet qui peut recevoir la propriété.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Guid" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet GUID utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">Convertit l'objet donné en objet GUID.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Convertit l'objet donné en un autre type.</summary>
      <param name="context" vsli:raw="A formatter context.">Contexte de formateur.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">Fournit des données pour les événements qui peuvent être complètement gérés dans un gestionnaire d'événements.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.HandledEventArgs" /> avec une valeur de propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> par défaut de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.HandledEventArgs" /> avec la valeur par défaut spécifiée de la propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Valeur par défaut de cette propriété <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">Obtient ou définit une valeur qui indique si le gestionnaire d'événements a complètement géré l'événement ou si le système doit continuer son propre traitement.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'événement a été entièrement annulé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">Représente une méthode qui peut gérer des événements qui peuvent ou ne peuvent pas nécessiter un traitement supplémentaire après que le gestionnaire d'événements est retourné.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.HandledEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">Fournit les fonctionnalités nécessaires à la prise en charge de scénarios complexes et simples lors de la liaison à une source de données.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">Ajoute <see cref="T:System.ComponentModel.PropertyDescriptor" /> aux index utilisés pour la recherche.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter aux index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">Ajoute un nouvel élément à la liste.</summary>
      <returns vsli:raw="The item added to the list.">Élément ajouté à la liste.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">Obtient une valeur indiquant si vous pouvez mettre à jour des éléments de la liste.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si vous pouvez mettre à jour les éléments de la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Obtient une valeur indiquant si vous pouvez ajouter des éléments à la liste à l'aide de <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si vous pouvez ajouter des éléments à la liste à l'aide de <see cref="M:System.ComponentModel.IBindingList.AddNew" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">Obtient une valeur indiquant si vous pouvez supprimer des éléments de la liste à l'aide de <see cref="M:System.Collections.IList.Remove(System.Object)" /> ou de <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si vous pouvez supprimer des éléments de la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">Trie la liste en fonction d'un <see cref="T:System.ComponentModel.PropertyDescriptor" /> et d'un <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> selon lequel le tri doit s'effectuer.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retourne l'index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel effectuer la recherche.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">Valeur du paramètre <paramref name="property" /> à rechercher.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Index de la ligne possédant le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">Obtient une valeur indiquant si les éléments de la liste sont triés.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> a été appelé et si <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> n'a pas été appelé ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> est <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">Se produit en cas de modification de la liste ou d'un de ses éléments.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">Supprime <see cref="T:System.ComponentModel.PropertyDescriptor" /> des index utilisés pour la recherche.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer des index utilisés pour la recherche.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Supprime tout tri appliqué à l'aide de <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">Obtient le sens du tri.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilisé actuellement pour le tri.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> a la valeur <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">Obtient une valeur indiquant si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> est déclenché en cas de modification de la liste ou d'un de ses éléments ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">Obtient une valeur indiquant si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge la recherche à l'aide de la méthode <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">Obtient une valeur indiquant si la liste prend en charge le tri.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste prend en charge le tri ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">Étend l'interface <see cref="T:System.ComponentModel.IBindingList" /> en fournissant des fonctions de tri et de filtre avancées.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Trie la source de données selon le <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> donné.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> qui contient les tris à appliquer à la source de données.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">Obtient ou définit le filtre à utiliser pour exclure des éléments de la collection d'éléments retournée par la source de données.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">Chaîne utilisée pour filtrer des éléments de la collection d'éléments retournés par la source de données afin de les exclure.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">Supprime le filtre actuel appliqué à la source de données.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">Obtient la collection de descriptions de tri actuellement appliquée à la source de données.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> actuellement appliqué à la source de données.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">Obtient une valeur indiquant si la source de données prend en charge le tri avancé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la source de données prend en charge le tri avancé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">Obtient une valeur indiquant si la source de données prend en charge le filtrage.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la source de données prend en charge le filtrage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">Ajoute la fonction transactionnelle lors de l'ajout d'un nouvel élément à une collection.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">Élimine un nouvel élément en attente de la collection.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Index de l'élément ajouté précédemment à la collection.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Valide un nouvel élément en attente dans la collection.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Index de l'élément ajouté précédemment à la collection.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fournit une couche de mappage de niveau supérieur entre un objet COM et <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">Obtient les attributs du composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">Composant pour lequel obtenir les attributs.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">Collection d'attributs pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">Obtient le nom de la classe pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">Composant pour lequel obtenir le nom de la classe.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">Nom de la classe qui correspond à <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">Obtient le convertisseur de type pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">Composant pour lequel obtenir <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">Obtient l'événement par défaut pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">Composant pour lequel obtenir l'événement par défaut.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> qui représente l'événement par défaut de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">Obtient la propriété par défaut pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Composant pour lequel obtenir la propriété par défaut.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété par défaut de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">Obtient l'éditeur pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Composant pour lequel obtenir l’éditeur.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">Type de base de l'éditeur pour <paramref name="component" />.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">Éditeur pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">Obtient les événements pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get events for.">Composant pour lequel obtenir les événements.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Collection de descripteurs d'événement pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">Obtient les événements avec les attributs spécifiés pour le composant déterminé.</summary>
      <param name="component" vsli:raw="The component to get events for.">Composant pour lequel obtenir les événements.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">Attributs utilisés pour filtrer les événements.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Collection de descripteurs d'événement pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Obtient le nom du composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the name of.">Composant duquel obtenir le nom.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">Nom de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">Obtient les propriétés avec les attributs spécifiés pour le composant déterminé.</summary>
      <param name="component" vsli:raw="The component to get events for.">Composant pour lequel obtenir les événements.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">Attributs utilisés pour filtrer les propriétés.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Collection de descripteurs de propriétés pour <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">Obtient la valeur de la propriété qui comporte l'identificateur de dispatch spécifié.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Objet auquel la propriété appartient.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">Identificateur de dispatch.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">
        <see cref="T:System.Boolean" />, passé par référence, qui indique si la propriété a été récupérée.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">Valeur de la propriété qui comporte l'identificateur de dispatch spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">Obtient la valeur de la propriété qui comporte le nom spécifié.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Objet auquel la propriété appartient.</param>
      <param name="propertyName" vsli:raw="The name of the property.">Nom de la propriété.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">
        <see cref="T:System.Boolean" />, passé par référence, qui indique si la propriété a été récupérée.</param>
      <returns vsli:raw="The value of the property that has the specified name.">Valeur de la propriété qui comporte le nom spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">Fournit une interface qui propose des informations de type personnalisé pour un objet.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">Retourne une collection d’attributs personnalisés pour cette instance d’un composant.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> contenant les attributs pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">Retourne le nom de classe de cette instance d’un composant.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">Nom de classe de l’objet, ou <see langword="null" /> si la classe n’a pas de nom.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">Retourne le nom de cette instance d’un composant.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">Nom de l’objet, ou <see langword="null" /> si l’objet n’a pas de nom.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">Retourne un convertisseur de type pour cette instance d’un composant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">
        <see cref="T:System.ComponentModel.TypeConverter" /> qui est le convertisseur pour cet objet, ou <see langword="null" /> s’il n’existe aucun <see cref="T:System.ComponentModel.TypeConverter" /> pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">Retourne l’événement par défaut pour cette instance d’un composant.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> qui représente l’événement par défaut pour cet objet, ou <see langword="null" /> si cet objet n’a pas d’événements.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">Retourne la propriété par défaut pour cette instance d’un composant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété par défaut pour cet objet, ou <see langword="null" /> si cet objet n’a pas de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">Retourne un éditeur du type spécifié pour cette instance d’un composant.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">
        <see cref="T:System.Type" /> qui représente l’éditeur pour cet objet.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">
        <see cref="T:System.Object" /> du type spécifié qui est l’éditeur pour cet objet, ou <see langword="null" /> si l’éditeur est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">Retourne les événements pour cette instance d’un composant.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui représente les événements pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">Retourne les événements pour cette instance d’un composant à l’aide du tableau d’attributs spécifié comme filtre.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> qui représente les événements filtrés pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">Retourne les propriétés pour cette instance d’un composant.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés pour cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">Retourne les propriétés de cette instance d’un composant à l’aide du tableau d’attributs comme filtre.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés filtrées de cette instance de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Retourne un objet qui contient la propriété décrite par le descripteur de propriété spécifié.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui représente la propriété dont le propriétaire doit être trouvé.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">
        <see cref="T:System.Object" /> qui représente le propriétaire de la propriété spécifiée.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">Fournit des fonctionnalités pour proposer des informations sur l'erreur personnalisées vers lesquelles une interface utilisateur peut établir une liaison.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">Obtient un message d'erreur indiquant le problème lié à cet objet.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">Message d'erreur indiquant le problème lié à cet objet. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">Obtient le message d'erreur pour la propriété portant le nom donné.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">Nom de la propriété pour laquelle obtenir le message d'erreur.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">Message d'erreur pour la propriété. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">Définit l'interface pour étendre les propriétés à d'autres composants dans un conteneur.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">Spécifie si cet objet peut fournir ses propriétés extendeur à l'objet spécifié.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">
        <see cref="T:System.Object" /> recevant les propriétés extendeur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut fournir des propriétés extendeur à l'objet spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">Fournit une interface pour faciliter la récupération du nom du générateur et pour afficher le générateur.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">Obtient un nom localisé.</summary>
      <returns vsli:raw="A localized name.">Nom localisé.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">Affiche le générateur.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">Service de langage qui appelle le générateur.</param>
      <param name="value" vsli:raw="The expression being edited.">Expression qui est modifiée.</param>
      <param name="newValue" vsli:raw="The new value.">Nouvelle valeur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">
        <see langword="true" /> si la valeur doit être remplacée par <paramref name="newValue" /> ; sinon, <see langword="false" /> (si l'utilisateur annule, par exemple).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">Fournit des fonctionnalités à un objet pour retourner une liste pouvant être liée à une source de données.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">Obtient une valeur indiquant si la collection est une collection d'objets <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est une collection d'objets <see cref="T:System.Collections.IList" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">Retourne <see cref="T:System.Collections.IList" /> pouvant être lié à une source de données à partir d'un objet qui, lui-même, n'implémente pas <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">
        <see cref="T:System.Collections.IList" /> pouvant être lié à une source de données à partir de l'objet.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">Fournit les fonctionnalités pour les conteneurs imbriqués qui contiennent logiquement zéro ou plusieurs autres composants et ont un composant parent comme propriétaire.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">Obtient le composant propriétaire pour le conteneur imbriqué.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient le conteneur imbriqué.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">Permet de récupérer le nom imbriqué complet d'un composant.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">Obtient le nom complet du composant dans ce site.</summary>
      <returns vsli:raw="The full name of the component in this site.">Nom complet du composant dans ce site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">Indique si le composant associé à cet attribut a été hérité d'une classe de base. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InheritanceAttribute" /> avec le niveau d'héritage spécifié.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> indiquant le niveau d'héritage pour lequel cet attribut doit être défini.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">Spécifie que la valeur par défaut de <see cref="T:System.ComponentModel.InheritanceAttribute" /> est <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">Substitution à comparer.</summary>
      <param name="value" vsli:raw="The object to test.">Objet à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet est le même ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Retourne le code de hachage pour cet objet.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.InheritanceAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">Obtient ou définit le niveau d'héritage stocké dans cet attribut.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> stocké dans cet attribut.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">Spécifie que le composant est hérité. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">Spécifie que le composant est hérité et en lecture seule. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">Spécifie que le composant n'est pas hérité. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">Convertit cet attribut en chaîne.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Chaîne qui représente ce <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">Définit des identificateurs pour les types des niveaux d'héritage.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">L'objet est hérité.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">L'objet est hérité, mais possède un accès en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">L'objet n'est pas hérité.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">Spécifie le programme d'installation pour un type qui installe les composants.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> avec le nom du type de programme d'installation du composant.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Nom de <see cref="T:System.Type" /> qui représente le programme d'installation pour le composant auquel cet attribut est lié. Cette classe doit implémenter <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> lorsque le <see cref="T:System.Type" /> qui représente le programme d'installation pour un composant est donné.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">
        <see cref="T:System.Type" /> qui représente le programme d'installation pour le composant auquel cet attribut est lié. Cette classe doit implémenter <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Retourne le code de hachage pour cet objet.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">Obtient le type de programme d'installation associé à cet attribut.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">
        <see cref="T:System.Type" /> qui représente le type de programme d'installation associé à cet attribut ou <see langword="null" /> si aucun installateur n'existe.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">Crée une instance d'un type particulier de propriété à partir d'une liste déroulante dans <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">En cas de substitution dans une classe dérivée, retourne une instance du type spécifié.</summary>
      <param name="context" vsli:raw="The context information.">Informations de contexte.</param>
      <param name="instanceType" vsli:raw="The specified type.">Type spécifié.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">Instance du type spécifié ou <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">Obtient le texte spécifié.</summary>
      <returns vsli:raw="The specified text.">Le texte spécifié.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets entiers signés 16 bits vers et à partir d’autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets entiers signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">Fournit un convertisseur de type pour convertir des objets entiers signés 64 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Levée lorsqu'un thread sur lequel une opération doit être exécutée n'existe plus ou n'a pas de boucle de messages.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> donnés.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec la description détaillée spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message">Description détaillée de l'erreur.</param>
      <param name="innerException">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Indique si une classe convertit des événements de modification de propriété en événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Obtient une valeur indiquant si l'objet <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> déclenche des événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> déclenche des événements <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> lorsque l'une de ses valeurs de propriété change ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">Permet la coordination d'initialisation pour un composant et ses propriétés dépendantes.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">Se produit lorsque l'initialisation du composant est terminée.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">Obtient une valeur indiquant si le composant est initialisé.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que le composant a terminé l’initialisation ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">Fournit des informations contextuelles sur un composant telles que son conteneur et son descripteur de propriété.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">Obtient le conteneur représentant cette demande <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">
        <see cref="T:System.ComponentModel.IContainer" /> avec le jeu d'objets pour ce <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, <see langword="null" /> s'il n'y a aucun conteneur ou si <see cref="T:System.ComponentModel.TypeDescriptor" /> n'utilise pas d'objets externes.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">Obtient l'objet qui est connecté avec cette demande de descripteur de type.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">Objet qui appelle la méthode sur <see cref="T:System.ComponentModel.TypeDescriptor" /> ; sinon, <see langword="null" /> s'il n'y a aucun objet responsable de l'appel.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Déclenche l'événement <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut être modifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">Obtient <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui est associé à l'élément de contexte donné.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément de contexte donné ; sinon, <see langword="null" /> s'il n'y a aucun <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsable de l'appel.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">Fournit des fonctionnalités permettant de découvrir le schéma d'une liste pouvant être liée, dans laquelle les propriétés disponibles pour la liaison diffèrent des propriétés publiques de l'objet vers lequel établir la liaison.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Retourne l’objet <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés de chaque élément utilisé pour lier des données.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">Tableau d’objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> pouvant être liés à rechercher dans la collection. Il peut s’agir de <see langword="null" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui représente les propriétés de chaque élément utilisé pour lier des données.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">Retourne le nom de la liste.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> pour lequel le nom de la liste est retourné. Il peut s’agir de <see langword="null" />.</param>
      <returns vsli:raw="The name of the list.">Nom de la liste.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">Fournit la classe de base <see langword="abstract" /> pour toutes les licences. Une licence est accordée à une instance spécifique d’un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">En cas de substitution dans une classe dérivée, supprime les ressources utilisées par la licence.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">En cas de substitution dans une classe dérivée, obtient la clé de licence accordée à ce composant.</summary>
      <returns vsli:raw="A license key granted to this component.">Clé de licence accordée à ce composant.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">Spécifie le moment où vous pouvez utiliser un objet sous licence et fournit un moyen d'obtenir des services supplémentaires nécessaires pour prendre en charge des licences s'exécutant dans son domaine.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">En cas de substitution dans une classe dérivée, retourne une clé de licence enregistrée pour le type spécifié, à partir de l'assembly de la ressource spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">
        <see cref="T:System.Type" /> représentant le type de composant.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">
        <see cref="T:System.Reflection.Assembly" /> avec la clé de licence.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> du type spécifié. Cette méthode retourne <see langword="null" />, à moins que vous la substituiez.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">Obtient le service demandé, s'il est disponible.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">Type de service à récupérer.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">Instance du service ou <see langword="null" /> si le service est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">En cas de substitution dans une classe dérivée, définit une clé de licence pour le type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">
        <see cref="T:System.Type" /> représentant le composant associé à la clé de licence.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> à enregistrer pour le type de composant.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">En cas de substitution dans une classe dérivée, obtient une valeur spécifiant le moment où vous pouvez utiliser une licence.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">Une des valeurs <see cref="T:System.ComponentModel.LicenseUsageMode" /> spécifiant le moment où vous pouvez utiliser une licence. La valeur par défaut est <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">Représente l'exception levée lorsqu'une licence ne peut pas être accordée à un composant.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> avec les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> et <see cref="T:System.Runtime.Serialization.StreamingContext" /> donnés.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type de composant auquel une licence a été refusée.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Instance du composant qui n'a pas reçu de licence.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée, ainsi qu'un message à afficher.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Instance du composant qui n'a pas reçu de licence.</param>
      <param name="message" vsli:raw="The exception message to display.">Message d'exception à afficher.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseException" /> pour le type et l'instance du composant auquel une licence a été refusée, ainsi qu'un message à afficher et l'exception d'origine levée.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Instance du composant qui n'a pas reçu de licence.</param>
      <param name="message" vsli:raw="The exception message to display.">Message d'exception à afficher.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">
        <see cref="T:System.Exception" /> représentant l'exception d'origine.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Définit <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec des informations concernant l'exception.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destination à utiliser pour la désérialisation.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">Obtient le type du composant qui n'a pas reçu de licence.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">
        <see cref="T:System.Type" /> représentant le type du composant qui n'a pas reçu de licence.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">Fournit des propriétés et des méthodes permettant d’ajouter une licence à un composant et de gérer un <see cref="T:System.ComponentModel.LicenseProvider" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">Crée une instance du type spécifié, en tenant compte d'un contexte dans lequel vous pouvez utiliser l'instance sous licence.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'instance sous licence.</param>
      <returns vsli:raw="An instance of the specified type.">Instance du type spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">Crée une instance du type spécifié avec les arguments donnés, en tenant compte d'un contexte dans lequel vous pouvez utiliser l'instance sous licence.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'instance sous licence.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">Tableau de type <see cref="T:System.Object" /> représentant les arguments pour le type.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">Instance du type spécifié avec le tableau d'arguments donné.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">Obtient ou définit le <see cref="T:System.ComponentModel.LicenseContext" /> en cours qui spécifie le moment où l'objet sous licence peut être utilisé.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant le moment où vous pouvez utiliser l'objet sous licence.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">La propriété <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> est actuellement verrouillée et ne peut pas être modifiée.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">Retourne une valeur indiquant si le type donné possède une licence valide.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">
        <see cref="T:System.Type" /> pour lequel rechercher une licence valide.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le type donné est sous licence ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">Détermine si une licence valide peut être accordée pour le type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si une licence valide peut être accordée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Détermine si une licence valide peut être accordée pour l'instance spécifiée du type. Cette méthode crée un <see cref="T:System.ComponentModel.License" /> valide.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">Objet du type spécifié ou type dérivé du type spécifié.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">
        <see cref="T:System.ComponentModel.License" /> qui est une licence valide ou <see langword="null" /> si une licence valide ne peut pas être accordée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un <see cref="T:System.ComponentModel.License" /> valide peut être accordé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Empêche toute modification du <see cref="T:System.ComponentModel.LicenseContext" /> en cours de l'objet donné.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">Objet dont vous souhaitez verrouiller le contexte en cours.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">Le contexte est déjà verrouillé.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Autorise l'apport de modifications au <see cref="T:System.ComponentModel.LicenseContext" /> en cours de l'objet donné.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">Objet dont vous souhaitez déverrouiller le contexte en cours.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> représente un utilisateur différent de celui spécifié dans un appel précédent à <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">Obtient le <see cref="T:System.ComponentModel.LicenseUsageMode" /> spécifiant le moment où vous pouvez utiliser l'objet sous licence pour <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">Une des valeurs <see cref="T:System.ComponentModel.LicenseUsageMode" />, comme spécifié dans la propriété <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">Détermine si une licence valide peut être accordée pour le type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Aucun <see cref="T:System.ComponentModel.License" /> ne peut être accordé.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">Détermine si une licence peut être accordée pour l'instance du type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">
        <see cref="T:System.Type" /> représentant le type d'objet qui demande la licence.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">
        <see cref="T:System.Object" /> du type spécifié ou type dérivé du type spécifié.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.ComponentModel.License" /> valide.</returns>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Le type est sous licence, mais aucun <see cref="T:System.ComponentModel.License" /> ne peut être accordé.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">Fournit la classe de base <see langword="abstract" /> pour implémenter un fournisseur de licences.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">En cas de substitution dans une classe dérivée, obtient une licence pour une instance ou un type de composant en fonction d'un contexte et une valeur indiquant si le refus d'une licence lève une exception.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">
        <see cref="T:System.Type" /> représentant le composant qui demande la licence.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">Objet qui demande la licence.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.LicenseException" /> doit être levé si aucune licence ne peut être accordée au composant ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.ComponentModel.License" /> valide.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">Spécifie <see cref="T:System.ComponentModel.LicenseProvider" /> à utiliser avec une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> sans fournisseur de licences.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> à l'aide du type spécifié.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">Nom qualifié complet de la classe de fournisseur de licences.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> avec le type spécifié de fournisseur de licences.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">
        <see cref="T:System.Type" /> représentant le type de la classe de fournisseur de licences.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie la valeur par défaut (aucun fournisseur). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="value" vsli:raw="Another object to compare to.">Autre objet de comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">Obtient le fournisseur de licences à utiliser avec la classe associée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" /> représentant le type du fournisseur de licences. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">Indique un ID unique pour ce type d'attribut.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">ID unique pour ce type d'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">Spécifie le moment où <see cref="T:System.ComponentModel.License" /> peut être utilisé.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">Utilisé au moment du design par un concepteur visuel ou par le compilateur.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">Utilisé au moment de l'exécution.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">Fournit une implémentation d'un <see cref="T:System.ComponentModel.LicenseProvider" />. Le fournisseur fonctionne de la même manière que le modèle d'attribution de licence standard Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">Retourne une clé pour le type spécifié.</summary>
      <param name="type" vsli:raw="The object type to return the key.">Type d'objet dont la clé doit être retournée.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">Confirme que le paramètre <paramref name="type" /> est sous licence.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">Retourne une licence éventuelle pour l'instance du composant.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">
        <see cref="T:System.ComponentModel.LicenseContext" /> spécifiant l'endroit où vous pouvez utiliser l'objet sous licence.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Objet qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.LicenseException" /> doit être levé si aucune licence ne peut être accordée à un composant ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.License" /> valide. Si cette méthode ne parvient pas à trouver un <see cref="T:System.ComponentModel.License" /> valide ou un paramètre <paramref name="context" /> valide, elle retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">Détermine si la clé récupérée par la méthode <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> est valide pour le type spécifié.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> à vérifier.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> représentant le composant qui demande le <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la clé est un <see cref="P:System.ComponentModel.License.LicenseKey" /> valide pour le type spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">Spécifie qu'une liste peut être utilisée comme source de données. Un concepteur visuel doit utiliser cet attribut pour déterminer si une liste particulière doit s'afficher dans un sélecteur de liaison de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> avec une valeur indiquant si la liste peut être liée.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste peut être liée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> avec <see cref="T:System.ComponentModel.BindableSupport" /> pour indiquer si la liste peut être liée.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">
        <see cref="T:System.ComponentModel.BindableSupport" /> indiquant si la liste peut être liée.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Représente la valeur par défaut de <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Indique si l'objet donné est égal à ce <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">Objet servant à vérifier l'égalité.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet passé est égal à ce <see cref="T:System.ComponentModel.ListBindableAttribute" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.ListBindableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">Retourne une valeur indiquant si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> possède la valeur par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> possède la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">Obtient une valeur indiquant si la liste peut être liée.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la liste peut être liée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie que la liste ne peut pas être liée. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie que la liste peut être liée. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et du <see cref="T:System.ComponentModel.PropertyDescriptor" /> affecté.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> ayant été ajouté, supprimé ou modifié.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et de l'index de l'élément affecté.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">Index de l'élément qui a été ajouté, modifié ou supprimé.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification, l'index de l'élément affecté et un <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément affecté.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">Index de l'élément qui a été ajouté ou modifié.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit l'élément.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> en fonction du type de modification et de l'ancien et du nouvel index de l'élément qui a été déplacé.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">Nouvel index de l'élément ayant été déplacé.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">Ancien index de l'élément ayant été déplacé.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">Obtient le type de modification.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valeur <see cref="T:System.ComponentModel.ListChangedType" /> qui indique le type de modification.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">Obtient l'index de l'élément affecté par la modification.</summary>
      <returns vsli:raw="The index of the affected by the change.">Index de l'élément affecté par la modification.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">Obtient l'ancien index d'un élément qui a été déplacé.</summary>
      <returns vsli:raw="The old index of the moved item.">Ancien index de l'élément déplacé.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">Obtient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui a été ajouté, modifié ou supprimé.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> affecté par la modification.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">Représente la méthode qui gère l’événement <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> de la classe <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">Spécifie la façon dont la liste a été modifiée.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">Élément ajouté à la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été ajouté.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">Élément modifié dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été modifié.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">Élément supprimé dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient l'index de l'élément qui a été supprimé.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">Élément déplacé dans la liste. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contient l'ancien index de l'élément, alors que <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contient le nouvel index de l'élément.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été ajouté, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été modifié, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">Un <see cref="T:System.ComponentModel.PropertyDescriptor" /> a été supprimé, ce qui a entraîné une modification du schéma.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">Une grande partie de la liste a été modifiée. Les contrôles éventuellement à l'écoute doivent actualiser toutes leurs données à partir de la liste.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">Fournit une description de l'opération de tri appliquée à une source de données.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescription" /> avec la direction et la description de propriété spécifiées.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui décrit la propriété par laquelle la source de données est triée.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">Une des valeurs de l'objet <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtient ou définit la description abstraite d'une propriété de classe associée à ce <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> associé à ce <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtient ou définit la direction de l'opération de tri associée à ce <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Une des valeurs de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> avec le tableau spécifié d'objets <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">Tableau d'objets <see cref="T:System.ComponentModel.ListSortDescription" /> que doit contenir la collection.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">Détermine si <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Object" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">Copie le contenu de la collection dans le tableau spécifié en commençant au niveau de l'index du tableau de destination spécifié.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">Tableau de destination pour les éléments copiés de la collection.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">Index du tableau de destination à partir duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtient le nombre d’éléments de la collection.</summary>
      <returns vsli:raw="The number of items in the collection.">Nombre d’éléments dans la collection</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">Retourne l'index de l'élément spécifié dans la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">
        <see cref="T:System.Object" /> à rechercher dans la collection.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtient ou définit le <see cref="T:System.ComponentModel.ListSortDescription" /> spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir ou à définir dans la collection.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> avec l'index spécifié.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">Un élément est défini dans <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, qui est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">Obtient une valeur indiquant si l'accès à la collection est thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">Obtient l'instance actuelle qui peut être utilisée pour synchroniser l'accès à la collection.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Instance actuelle de <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Obtient <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Ajoute un élément à la collection.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Élément à ajouter à la collection.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Position à laquelle le nouvel élément est inséré.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Insère un élément dans la collection à un index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir ou à définir dans la collection</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Élément à insérer dans la collection.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Obtient la <see cref="T:System.ComponentModel.ListSortDescription" /> spécifiée.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">Index de base zéro de <see cref="T:System.ComponentModel.ListSortDescription" /> à obtenir dans la collection.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> avec l'index spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">Supprime la première occurrence d'un élément dans la collection.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Élément à supprimer de la collection.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">Supprime un élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">Index de base zéro du <see cref="T:System.ComponentModel.ListSortDescription" /> à supprimer de la collection</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">Dans tous les cas.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">Spécifie le sens d'une opération de tri.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">Trie dans l'ordre croissant.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">Trie dans l'ordre décroissant.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">Spécifie les propriétés qui prennent en charge la liaison basée sur la recherche. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> sans paramètre.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nom de la propriété à utiliser comme source de données.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">Nom de la propriété à utiliser pour le nom complet.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">Nom de la propriété à utiliser comme source pour les valeurs.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">Nom de la propriété à utiliser pour les recherches.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Propriété de source de données pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Représente la valeur par défaut de la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de membre d'affichage pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Nom de la propriété de membre d'affichage pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Détermine si le <see cref="T:System.Object" /> spécifié est égal à l'instance <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">
        <see cref="T:System.Object" /> à comparer à l'instance <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> en cours.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> si l'objet est égal à l'instance actuelle ; sinon, <see langword="false" /> qui indique qu'ils ne sont pas égaux.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">Obtient le nom du membre de recherche pour le composant auquel cet attribut est lié.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Nom du membre de recherche pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Obtient le nom de la propriété de membre de valeur pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Nom de la propriété de membre de valeur pour le composant auquel <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> est lié.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">Implémente <see cref="T:System.ComponentModel.IComponent" /> et fournit l'implémentation de base pour les composants distants, marshalés par valeur (une copie de l'objet sérialisé est passée).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">Obtient le conteneur du composant.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">Objet implémentant l'interface <see cref="T:System.ComponentModel.IContainer" /> qui représente le conteneur du composant, ou <see langword="null" /> si le composant ne possède pas de site.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">Obtient une valeur indiquant si le composant est actuellement en mode design.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le composant est en mode design ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">Libère toutes les ressources utilisées par <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.MarshalByValueComponent" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">Ajoute un gestionnaire d'événements qui doit écouter l'événement <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> pour le composant.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">Obtient la liste des gestionnaires d'événements attachés à ce composant.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">
        <see cref="T:System.ComponentModel.EventHandlerList" /> qui fournit les délégués de ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Obtient l'implémenteur du <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">
        <see cref="T:System.Type" /> représentant le type de service souhaité.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.Object" /> représentant l'implémenteur du <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">Obtient ou définit le site du composant.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">Objet implémentant l'interface <see cref="T:System.ComponentModel.ISite" /> qui représente le site du composant.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">Retourne un <see cref="T:System.String" /> contenant le nom du <see cref="T:System.ComponentModel.Component" />, s’il en existe un. Cette méthode ne doit pas être remplacée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">
        <see cref="T:System.String" /> contenant le nom du <see cref="T:System.ComponentModel.Component" />, s'il existe.  
 <see langword="null" /> si <see cref="T:System.ComponentModel.Component" /> est sans nom.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">Représente un service d'analyse de masque qui peut être utilisé par n'importe quel nombre de contrôles qui prennent en charge le masquage tel que le contrôle <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque spécifié.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide de la valeur de restriction ASCII et du masque spécifié.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque spécifié, du caractère de mot de passe, et de la valeur d'utilisation de l'invite.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour autoriser le caractère d'invite comme entrée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque et de la culture spécifiés.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide de la valeur de restriction ASCII, du masque et de la culture spécifiés.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque, de la culture, de la valeur d'utilisation de l'invite, du caractère d'invite, du caractère de mot de passe et de la valeur de restriction ASCII spécifiés.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">Valeur <see cref="T:System.Boolean" /> qui spécifie si le caractère d'invite peut être autorisé en tant que caractère d'entrée valide.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">
        <see cref="T:System.Char" /> qui sera affiché comme un espace réservé pour l'entrée d'utilisateur.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> pour restreindre les entrées aux caractères compatibles ASCII ; sinon, <see langword="false" /> pour autoriser le jeu Unicode complet.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">Le paramètre de masque est <see langword="null" /> ou <see cref="F:System.String.Empty" />.  

ou - 
Le masque contient un ou plusieurs caractères non imprimables.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> à l'aide du masque, de la culture, du caractère de mot de passe, et de la valeur d'utilisation de l'invite spécifiés.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">
        <see cref="T:System.String" /> qui représente le masque de saisie.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">
        <see cref="T:System.Globalization.CultureInfo" /> qui est utilisé pour définir des caractères de séparation sensibles à la région.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">
        <see cref="T:System.Char" /> qui sera affiché pour les caractères entrés dans une chaîne de mot de passe.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour autoriser le caractère d'invite comme entrée ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">Ajoute le caractère d'entrée spécifié à la fin de la chaîne mise en forme.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Une valeur <see cref="T:System.Char" /> à ajouter à la chaîne mise en forme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère d'entrée a été correctement ajouté ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">Ajoute le caractère d'entrée spécifié à la fin de la chaîne mise en forme, puis génère les informations descriptives et de position.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Une valeur <see cref="T:System.Char" /> à ajouter à la chaîne mise en forme.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Position de base zéro dans la chaîne mise en forme et ayant fait l'objet d'une tentative d'ajout du caractère. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère d'entrée a été correctement ajouté ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">Ajoute les caractères dans la chaîne d'entrée spécifiée à la fin de la chaîne mise en forme.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">
        <see cref="T:System.String" /> qui contient des valeurs de caractère à ajouter à la chaîne mise en forme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> si tous les caractères de la chaîne d'entrée ont été correctement ajoutés ; sinon, <see langword="false" /> pour indiquer qu'aucun caractère n'a été ajouté.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">Ajoute les caractères dans la chaîne d'entrée spécifiée à la fin de la chaîne mise en forme, puis génère les informations descriptives et de position.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">
        <see cref="T:System.String" /> qui contient des valeurs de caractère à ajouter à la chaîne mise en forme.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Position de base zéro dans la chaîne mise en forme et ayant fait l'objet d'une tentative d'ajout du caractère. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> si tous les caractères de la chaîne d'entrée ont été correctement ajoutés ; sinon, <see langword="false" /> pour indiquer qu'aucun caractère n'a été ajouté.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">Obtient une valeur qui indique si le caractère d'invite doit être traité comme un caractère d'entrée valide ou pas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si l'utilisateur peut entrer <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> dans le contrôle ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">Obtient une valeur qui indique si le masque accepte des caractères en dehors du jeu de caractères ASCII.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> uniquement si ASCII est accepté ; <see langword="false" /> si <see cref="T:System.ComponentModel.MaskedTextProvider" /> peut accepter tout caractère Unicode arbitraire. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">Obtient le nombre de positions de caractère modifiables auxquelles une valeur d'entrée a déjà été correctement assignée.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">
        <see cref="T:System.Int32" /> qui contient le nombre de positions de caractère modifiables dans le masque de saisie auxquelles a déjà été assignée une valeur de caractère dans la chaîne mise en forme.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">Obtient le nombre de positions de caractère modifiables dans le masque de saisie auxquelles aucune valeur d'entrée n'a encore été assignée.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">
        <see cref="T:System.Int32" /> qui contient le nombre de positions de caractère modifiables auxquelles aucune valeur n'a encore été assignée.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">Efface tous les caractères d'entrée modifiables de la chaîne mise en forme en les remplaçant par des caractères d'invite.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">Efface tous les caractères d'entrée modifiables de la chaîne mise en forme en les remplaçant par des caractères d'invite, puis génère les informations descriptives.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">Crée une copie de l'élément <see cref="T:System.ComponentModel.MaskedTextProvider" /> actuel.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">Objet <see cref="T:System.ComponentModel.MaskedTextProvider" /> créé par cette méthode, casté en objet.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">Obtient la culture qui détermine la valeur des séparateurs localisables et des espaces réservés dans le masque de saisie.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">
        <see cref="T:System.Globalization.CultureInfo" /> qui contient les informations de culture associées au masque de saisie.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">Obtient le caractère de mot de passe par défaut utilisé pour masquer l'entrée d'utilisateur.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">
        <see cref="T:System.Char" /> qui représente le caractère de mot de passe par défaut.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">Obtient le nombre de positions modifiables dans la chaîne mise en forme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">
        <see cref="T:System.Int32" /> qui contient le nombre de positions modifiables dans la chaîne mise en forme.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">Obtient un énumérateur créé récemment pour les positions modifiables dans la chaîne mise en forme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">
        <see cref="T:System.Collections.IEnumerator" /> qui prend en charge l'énumération sur les positions modifiables dans la chaîne mise en forme.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">Retourne la position de la première position modifiable assignée après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">Retourne la position de la première position modifiable assignée entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">Retourne la position de la première position modifiable après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">Retourne la position de la première position modifiable entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">Retourne la position de la première position non modifiable après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position littérale rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">Retourne la position de la première position non modifiable entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position littérale rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">Retourne la position de la première position modifiable non assignée après la position spécifiée à l'aide du sens de la recherche spécifié.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Position de base zéro dans la chaîne mise en forme pour démarrer la recherche.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable non assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">Retourne la position de la première position modifiable non assignée entre les positions spécifiées à l'aide du sens de la recherche spécifié.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Position de base zéro dans la chaîne mise en forme où la recherche démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Position de base zéro dans la chaîne mise en forme où la recherche se termine.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">
        <see cref="T:System.Boolean" /> qui indique le sens de la recherche ; <see langword="true" /> pour rechercher vers le bas ou <see langword="false" /> pour rechercher vers le haut.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">En cas de réussite, <see cref="T:System.Int32" /> qui représente la position de base zéro de la première position modifiable non assignée rencontrée ; sinon, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">Détermine si le <see cref="T:System.ComponentModel.MaskedTextResultHint" /> spécifié dénote un succès ou un échec.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">Valeur <see cref="T:System.ComponentModel.MaskedTextResultHint" /> obtenue en général comme paramètre de sortie d'une opération antérieure.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">
        <see langword="true" /> si la valeur <see cref="T:System.ComponentModel.MaskedTextResultHint" /> spécifiée représente un succès ; sinon, <see langword="false" /> si elle représente un échec.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">Obtient ou définit une valeur qui indique si les caractères littéraux dans le masque de saisie doivent être inclus dans la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si des littéraux sont inclus ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">Obtient ou définit une valeur qui indique si <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> est utilisé pour représenter l'absence d'entrée d'utilisateur lors de l'affichage de la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si le caractère d'invite est utilisé pour représenter les positions où aucune entrée d'utilisateur n'a été fournie ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">Insère le caractère spécifié à la position spécifiée dans la chaîne mise en forme.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">
        <see cref="T:System.Char" /> à insérer.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Position de base zéro dans la chaîne mise en forme pour insérer le caractère.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">Insère le caractère spécifié à la position spécifiée dans la chaîne mise en forme et retourne la dernière position d'insertion et l'état de l'opération.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">
        <see cref="T:System.Char" /> à insérer.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Position de base zéro dans la chaîne mise en forme pour insérer le caractère.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Si la méthode aboutit, la dernière position où un caractère a été inséré ; sinon, la première position où l'insertion a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération d'insertion. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">Insère la chaîne spécifiée à une position spécifiée dans la chaîne mise en forme.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">
        <see cref="T:System.String" /> à insérer.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Position de base zéro dans la chaîne mise en forme pour insérer la chaîne d'entrée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">Insère la chaîne spécifiée à une position spécifiée dans la chaîne mise en forme et retourne la dernière position d'insertion et l'état de l'opération.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">
        <see cref="T:System.String" /> à insérer.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Position de base zéro dans la chaîne mise en forme pour insérer la chaîne d'entrée.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Si la méthode aboutit, la dernière position où un caractère a été inséré ; sinon, la première position où l'insertion a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération d'insertion. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'insertion aboutit ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">Obtient la limite supérieure de la plage des index non valides.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">Valeur qui représente le plus grand index non valide comme le détermine l'implémentation du fournisseur. Par exemple, si l'index valide le moins élevé est 0, cette propriété retourne -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">Détermine si la position spécifiée est disponible pour l'assignation.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Position de base zéro dans le masque à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la position spécifiée dans la chaîne mise en forme est modifiable et n'a pas été encore assignée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">Détermine si la position spécifiée est modifiable.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Position de base zéro dans le masque à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la position spécifiée dans la chaîne mise en forme est modifiable ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">Obtient ou définit une valeur qui détermine si la protection par mot de passe doit être appliquée à la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne d'entrée sera traitée comme une chaîne de mot de passe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">Détermine si le caractère spécifié est un caractère d'entrée valide.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère spécifié contient une valeur d'entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">Détermine si le caractère spécifié est un caractère de masque valide.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère spécifié contient une valeur de masque valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">Détermine si le caractère spécifié est un caractère de mot de passe valide.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valeur <see cref="T:System.Char" /> à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère spécifié contient une valeur de mot de passe valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">Obtient l'élément à la position spécifiée dans la chaîne mise en forme.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">Index de base zéro de l'élément à récupérer.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">
        <see cref="T:System.Char" /> à la position spécifiée dans la chaîne mise en forme.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> est inférieur à zéro ou supérieur ou égal à <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> du masque.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">Obtient l'index dans le masque du caractère d'entrée le plus à droite assigné au masque.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Si au moins un caractère d'entrée a été assigné au masque, <see cref="T:System.Int32" /> qui contient l'index de la position assignée la plus à droite ; sinon, si aucune position n'a été assignée, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">Obtient la longueur du masque, sans les caractères du modificateur du masque.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">
        <see cref="T:System.Int32" /> qui contient le nombre de positions dans le masque, à l'exclusion des caractères qui modifient l'entrée de masque.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">Obtient le masque de saisie.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">
        <see cref="T:System.String" /> qui contient le masque complet.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">Obtient une valeur qui indique si toutes les entrées requises ont été entrées dans la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si toutes les entrées requises ont été entrées dans le masque ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">Obtient une valeur qui indique si toutes les entrées obligatoires et facultatives ont été entrées dans la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si toutes les entrées obligatoires et facultatives ont été entrées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">Obtient ou définit le caractère à substituer aux caractères d'entrée réels.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">La valeur <see cref="T:System.Char" /> utilisée comme caractère de mot de passe.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">Caractère de mot de passe spécifié lorsque la définition de cette propriété est identique au caractère d'invite en cours, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Ces deux éléments doivent être différents.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Caractère spécifié lorsque la définition de cette propriété n'est pas un caractère de mot de passe valide comme le détermine la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">Obtient ou définit le caractère utilisé pour représenter l'absence d'entrée d'utilisateur pour toutes les positions de modification disponibles.</summary>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">Caractère utilisé pour inviter l'utilisateur à entrer des données. La valeur par défaut est un trait de soulignement (_).</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">Caractère d'invite spécifié lorsque la définition de cette propriété est identique au caractère de mot de passe en cours, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Ces deux éléments doivent être différents.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Caractère spécifié lorsque la définition de cette propriété n'est pas un caractère de mot de passe valide comme le détermine la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">Supprime le dernier caractère assigné de la chaîne mise en forme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">Supprime le dernier caractère assigné de la chaîne mise en forme, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">Position de base zéro dans la chaîne mise en forme où le caractère a été effectivement supprimé. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">Supprime le caractère assigné à la position spécifiée de la chaîne mise en forme.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">Index de base zéro du caractère assigné à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">Supprime les caractères assignés entre les positions spécifiées de la chaîne mise en forme.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Index de base zéro du premier caractère assigné à supprimer.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Index de base zéro du dernier caractère assigné à supprimer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">Supprime les caractères assignés entre les positions spécifiées de la chaîne mise en forme, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Index de base zéro du premier caractère assigné à supprimer.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Index de base zéro du dernier caractère assigné à supprimer.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme de l'emplacement où les caractères ont été effectivement supprimés ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la suppression du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">Remplace un caractère unique au niveau ou au-delà de la position spécifiée par la valeur de caractère spécifiée.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">Remplace un caractère unique entre le début spécifié et les positions de fin par la valeur de caractère spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Position de base zéro dans la chaîne mise en forme où le remplacement démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Position de base zéro dans la chaîne mise en forme où le remplacement se termine.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">Remplace un caractère unique au niveau de ou au-delà de la position spécifiée par la valeur de caractère spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valeur <see cref="T:System.Char" /> qui remplace la valeur existante.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement du caractère réussit ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">Remplace une plage de caractères modifiables en commençant à la position spécifiée par la chaîne spécifiée.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">Remplace une plage de caractères modifiables entre les positions de début et de fin spécifiées par la chaîne spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Position de base zéro dans la chaîne mise en forme où le remplacement démarre.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Position de base zéro dans la chaîne mise en forme où le remplacement se termine.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">Remplace une plage de caractères modifiables en commençant à la position spécifiée par la chaîne spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valeur <see cref="T:System.String" /> utiliser pour remplacer les caractères modifiables existants.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Position zéro de base pour rechercher le premier caractère modifiable à remplacer.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement remplacé ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de remplacement. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le remplacement de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">Obtient ou définit une valeur qui détermine comment un caractère d'entrée qui correspond au caractère d'invite doit être géré.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si le fait de saisir le caractère d'invite comme entrée entraîne la réinitialisation de la position modifiable actuelle dans le masque ; sinon, <see langword="false" /> pour indiquer que le caractère d'invite sera traité comme un caractère d'entrée normal. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">Obtient ou définit une valeur qui détermine comment un caractère d'entrée d'espace doit être géré.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si le caractère d'entrée d'espace entraîne la réinitialisation de la position modifiable actuelle dans le masque ; sinon, <see langword="false" /> pour indiquer qu'il sera traité comme un caractère d'entrée normal. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">Définit la chaîne mise en forme sur la chaîne d'entrée spécifiée.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Valeur <see cref="T:System.String" /> utilisée pour définir la chaîne mise en forme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la définition de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">Définit la chaîne mise en forme sur la chaîne d'entrée spécifiée, puis renvoie la position de suppression et les informations descriptives.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Valeur <see cref="T:System.String" /> utilisée pour définir la chaîne mise en forme.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">En cas de réussite, la position de base zéro dans la chaîne mise en forme à l'emplacement où le dernier caractère a été effectivement défini ; sinon, la première position où l'opération a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de définition. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la définition de tous les caractères a réussi ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="input" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">Obtient ou définit une valeur qui indique si les positions de caractères littéraux dans le masque peuvent être remplacées par leurs mêmes valeurs.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> pour autoriser le rajout de littéraux ; sinon, <see langword="false" /> pour ne pas autoriser l'utilisateur à remplacer des caractères littéraux. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">Retourne la chaîne mise en forme dans un formulaire affichable.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">
        <see cref="T:System.String" /> mis en forme qui inclut des invites et des littéraux de masque.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">Retourne la chaîne mise en forme qui inclut toutes les valeurs de caractère assignées.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">
        <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">Retourne la chaîne mise en forme en incluant éventuellement les caractères de mot de passe.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">Le <see cref="T:System.String" /> mis en forme qui inclut des littéraux, des invites, et éventuellement des caractères de mot de passe.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">Retourne la chaîne mise en forme en incluant éventuellement des caractères littéraux et d'invite.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">Le <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et inclut éventuellement des littéraux et des invites.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères littéraux, d'invite et de mot de passe.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour retourner des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length" vsli:raw="The number of characters to return.">Nombre de caractères à retourner.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et éventuellement des littéraux, des invites, et des caractères de mot de passe ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères littéraux et d'invite.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des caractères d'invite dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour inclure des caractères littéraux dans la chaîne de retour ; sinon, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length" vsli:raw="The number of characters to return.">Nombre de caractères à retourner.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées et éventuellement des littéraux et des invites ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">Retourne une sous-chaîne de la chaîne mise en forme et inclut éventuellement des caractères de mot de passe.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> pour retourner les caractères modifiables réels ; sinon, <see langword="false" /> pour indiquer que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> doit être reconnue.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length" vsli:raw="The number of characters to return.">Nombre de caractères à retourner.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut des littéraux, des invites, et éventuellement des caractères de mot de passe ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">Retourne une sous-chaîne de la chaîne mise en forme.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Position de base zéro dans la chaîne mise en forme où commence la sortie.</param>
      <param name="length" vsli:raw="The number of characters to return.">Nombre de caractères à retourner.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">En cas de réussite, une sous-chaîne du <see cref="T:System.String" /> mis en forme qui inclut toutes les valeurs de caractère assignées ; sinon, la chaîne <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">Teste si le caractère spécifié peut être défini correctement à la position spécifiée.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valeur <see cref="T:System.Char" /> à tester.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Position dans le masque par rapport à laquelle tester le caractère d'entrée.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère spécifié est valide pour la position spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">Teste si le caractère spécifié fait l'objet d'un échappement à la position spécifiée.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valeur <see cref="T:System.Char" /> à tester.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Position dans le masque par rapport à laquelle tester le caractère d'entrée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le caractère spécifié fait l'objet d'un échappement à la position spécifiée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">Teste si la définition de la chaîne spécifiée est correcte.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Valeur <see cref="T:System.String" /> à tester.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne spécifiée représente une entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">Teste si la définition de la chaîne spécifiée est correcte, puis génère les informations descriptives et de position.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Valeur <see cref="T:System.String" /> à tester.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">En cas de réussite, la position de base zéro du dernier caractère effectivement testé ; sinon, la première position où le test a échoué. Paramètre de sortie.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> qui décrit succinctement le résultat de l'opération de test. Paramètre de sortie.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la chaîne spécifiée représente une entrée valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">Spécifie des valeurs qui décrivent brièvement les résultats d'une opération d'analyse de texte masqué.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas alphanumérique a été rencontré. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas membre du jeu de caractères ASCII a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">Opération réussie. L'opération a réussi parce qu'un caractère littéral, d'invite ou d'espace était un caractère d'échappement. Pour plus d'informations sur les caractères d'échappement, consultez la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas un chiffre a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">L'opération n'a pas réussi. Le programme a rencontré un caractère d’entrée qui n’était pas valide. Pour plus d'informations sur les caractères qui ne sont pas valides, consultez la méthode <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas une lettre a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">Opération réussie. L'opération principale n'a pas été exécutée : elle n'était pas nécessaire ; par conséquent, il n'y a eu aucun effet secondaire.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">L'opération n'a pas réussi. La position actuelle dans la chaîne mise en forme est un caractère littéral.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">L'opération n'a pas réussi. La position spécifiée n'est pas dans la plage de la chaîne cible ; en général, elle est inférieure à zéro ou supérieure à la longueur de la chaîne cible.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">L'opération n'a pas réussi. Le caractère d'invite n'est pas valide en entrée, sans doute parce que la propriété <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> a la valeur <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">Opération réussie. L'opération principale n'a pas été effectuée car elle n'était pas nécessaire, mais la méthode a produit un effet secondaire. Par exemple, la méthode <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> peut supprimer une position de modification non assignée qui provoque un décalage vers la gauche des caractères suivants dans la chaîne mise en forme.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">L'opération n'a pas réussi. Un caractère d'entrée qui n'était pas un chiffre signé a été rencontré.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">Opération réussie. L'opération principale a réussi.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">L'opération n'a pas réussi. Il n'y avait pas assez de positions de modification disponibles pour accomplir la demande.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">Inconnu. Le résultat de l'opération n'a pas pu être déterminé.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">Représente un membre de classe, tel qu'une propriété ou un événement. Il s'agit d'une classe de base abstraite.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom du membre et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs de l'ancien <see cref="T:System.ComponentModel.MemberDescriptor" /> et du tableau <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> possédant le nom du membre et ses attributs.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">Tableau d'objets <see cref="T:System.Attribute" /> possédant les attributs à ajouter au membre.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom du membre spécifié.</summary>
      <param name="name" vsli:raw="The name of the member.">Nom du membre.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Le nom est une chaîne vide ("") ou <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> avec le nom du membre spécifié et un tableau d'attributs.</summary>
      <param name="name" vsli:raw="The name of the member.">Nom du membre.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs du membre.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Le nom est une chaîne vide ("") ou <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">Obtient ou définit un tableau d'attributs.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs de ce membre.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">Obtient la collection des attributs de ce membre.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui fournit les attributs pour ce membre ou une collection vide si <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> ne contient pas d'attribut.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">Obtient le nom de la catégorie à laquelle le membre appartient, comme spécifié dans <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">Nom de la catégorie à laquelle le membre appartient. S'il n'existe aucun <see cref="T:System.ComponentModel.CategoryAttribute" />, le nom de la catégorie est celui de la catégorie par défaut, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">Crée une collection d'attributs à l'aide du tableau d'attributs passé au constructeur.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">Nouveau <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">Obtient la description du membre, telle qu'elle est spécifiée dans <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">Description du membre. S'il n'existe aucun <see cref="T:System.ComponentModel.DescriptionAttribute" />, la valeur de la propriété est la valeur par défaut, c'est-à-dire une chaîne vide ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">Obtient une valeur indiquant si ce membre ne doit être défini qu'au moment du design, comme spécifié dans <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">
        <see langword="true" /> si ce membre ne doit être défini qu'au moment du design ; <see langword="false" /> si le membre peut être défini pendant l'exécution.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">Obtient le nom qui peut être affiché dans une fenêtre, telle qu'une fenêtre Propriétés.</summary>
      <returns vsli:raw="The name to display for the member.">Nom du membre à afficher.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">Compare cette instance avec l'objet donné afin de déterminer s'ils sont équivalents.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">Objet à comparer avec l'instance actuelle.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> s'ils sont équivalents ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">En cas de substitution dans une classe dérivée, ajoute les attributs de la classe qui hérite à la liste d'attributs spécifiée dans la classe parente.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">
        <see cref="T:System.Collections.IList" /> énumérant les attributs de la classe parente. Initialement, cette liste est vide.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">Recherche la méthode donnée par réflexion, en recherchant uniquement les méthodes publiques.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Composant qui contient la méthode.</param>
      <param name="name" vsli:raw="The name of the method to find.">Nom de la méthode à rechercher.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Tableau de paramètres pour la méthode, utilisé pour choisir entre différentes méthodes surchargées.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Type à retourner pour la méthode.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">
        <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode ou <see langword="null" /> si la méthode est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">Recherche la méthode donnée par réflexion, avec une option permettant de rechercher uniquement les méthodes publiques.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Composant qui contient la méthode.</param>
      <param name="name" vsli:raw="The name of the method to find.">Nom de la méthode à rechercher.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Tableau de paramètres pour la méthode, utilisé pour choisir entre différentes méthodes surchargées.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Type à retourner pour la méthode.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">Indique si la recherche doit se limiter aux méthodes publiques.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">
        <see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode ou <see langword="null" /> si la méthode est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.MemberDescriptor" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">Récupère l'objet qui doit être utilisé pendant l'appel des membres.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">
        <see cref="T:System.Type" /> de la cible d'appel.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Cible d'appel potentielle.</param>
      <returns vsli:raw="The object to be used during member invocations.">Objet à utiliser pendant les appels de membres.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ou <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">Obtient le composant sur lequel une méthode doit être appelée.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce <see cref="T:System.ComponentModel.MemberDescriptor" /> est lié. Par exemple, si ce <see cref="T:System.ComponentModel.MemberDescriptor" /> décrit une propriété, ce paramètre doit être la classe sur laquelle la propriété est déclarée.</param>
      <param name="component" vsli:raw="An instance of the object to call.">Instance de l'objet à appeler.</param>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">Instance du composant à appeler. Cette méthode retourne un concepteur visuel si la propriété est attachée à un concepteur visuel.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> ou <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">Obtient un site de composant pour le composant donné.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">Composant pour lequel vous souhaitez rechercher un site.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">Site du composant, ou <see langword="null" /> si aucun site n'existe.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">Obtient une valeur indiquant si le membre peut être exploré, tel que spécifié dans <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si le membre peut être exploré ; sinon, <see langword="false" />. S'il n'existe aucun <see cref="T:System.ComponentModel.BrowsableAttribute" />, la valeur de la propriété est la valeur par défaut, <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">Obtient le nom du membre.</summary>
      <returns vsli:raw="The name of the member.">Nom du membre.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">Obtient le code de hachage pour le nom du membre, tel que spécifié dans <see cref="M:System.String.GetHashCode" />.</summary>
      <returns vsli:raw="The hash code for the name of the member.">Code de hachage pour le nom du membre.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">Fournit un convertisseur de type pour convertir des chaînes multilignes en une chaîne simple.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre <paramref name="value" /> à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">Fournit l'implémentation de base pour l'interface <see cref="T:System.ComponentModel.INestedContainer" /> qui permet aux conteneurs d'avoir un composant propriétaire.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">Crée un site pour le composant dans le conteneur.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">
        <see cref="T:System.ComponentModel.IComponent" /> pour lequel créer un site.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Nom à assigner à <paramref name="component" /> ou <see langword="null" /> pour ignorer l'assignation de nom.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">Objet <see cref="T:System.ComponentModel.ISite" /> nouvellement créé.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">Libère les ressources utilisées par le conteneur imbriqué.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Obtient l'objet service éventuel du type spécifié.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">
        <see cref="T:System.Type" /> du service à récupérer.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">
        <see cref="T:System.Object" /> qui implémente le service demandé, ou <see langword="null" /> si le service ne peut pas être résolu.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">Obtient le composant propriétaire pour ce conteneur imbriqué.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">
        <see cref="T:System.ComponentModel.IComponent" /> auquel appartient ce conteneur imbriqué.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">Obtient le nom du composant propriétaire.</summary>
      <returns vsli:raw="The name of the owning component.">Nom du composant propriétaire</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Fournit une conversion automatique entre un type Nullable et son type primitif sous-jacent.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type" vsli:raw="The specified nullable type.">Type Nullable spécifié.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> n'est pas un type Nullable.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur à l’aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Crée une instance du type auquel ce <see cref="T:System.ComponentModel.TypeConverter" /> est associé, en utilisant le contexte spécifié, en fonction d’un ensemble de valeurs de propriétés de l’objet.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> de nouvelles valeurs de propriétés.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la modification d’une propriété de cet objet nécessite un appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour créer une valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs déterminés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Retourne une collection de valeurs standard pour le type de données pour lequel ce convertisseur de type est conçu lorsqu'il est fourni avec un contexte de format.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format qui peut être utilisé pour extraire des informations supplémentaires sur l'environnement à partir duquel ce convertisseur est appelé. Ce paramètre ou les propriétés de ce paramètre peuvent être <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive des valeurs possibles, utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Retourne une valeur indiquant si cet objet prend en charge un jeu de valeurs standard pouvant être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">Obtient le type Nullable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">
        <see cref="T:System.Type" /> qui représente le type Nullable.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">Obtient la liste sous-jacente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">
        <see cref="T:System.Type" /> qui représente le type sous-jacent.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">Obtient le convertisseur de type sous-jacent.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">
        <see cref="T:System.ComponentModel.TypeConverter" /> qui représente le convertisseur de type sous-jacent.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">Indique que la représentation sous forme de texte d’un objet est masquée par des caractères tels que des astérisques. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> et affiche éventuellement le texte du mot de passe.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que la propriété doit apparaître sous la forme de texte de mot de passe ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">Détermine si deux instances <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> sont égales.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> à comparer avec l'objet <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">Indique si la valeur de cette instance est la valeur par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Spécifie qu'une propriété Text n'est pas utilisée en tant que mot de passe. Ce champ <see langword="static" /> (<see langword="Shared" /> en Visual Basic) est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">Obtient une valeur qui indique si la propriété pour laquelle <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> est défini doit apparaître sous la forme de texte de mot de passe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété doit apparaître sous la forme de texte de mot de passe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Spécifie qu'une propriété Text est utilisée en tant que mot de passe. Ce champ <see langword="static" /> (<see langword="Shared" /> en Visual Basic) est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">Fournit une abstraction d'une propriété sur une classe.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> qui contient le nom de la propriété et ses attributs.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom dans le <see cref="T:System.ComponentModel.MemberDescriptor" /> spécifié et les attributs dans les tableaux <see cref="T:System.ComponentModel.MemberDescriptor" /> et <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> contenant le nom du membre et ses attributs.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">Tableau <see cref="T:System.Attribute" /> contenant les attributs à associer à la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le nom et les attributs spécifiés.</summary>
      <param name="name" vsli:raw="The name of the property.">Nom de la propriété.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">Tableau de type <see cref="T:System.Attribute" /> qui contient les attributs de la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">Composant pour lequel ajouter le gestionnaire.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">Délégué à ajouter en tant qu'écouteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">En cas de substitution dans une classe dérivée, retourne une valeur indiquant si la réinitialisation d'un objet modifie sa valeur.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Composant dont la fonction de réinitialisation doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la réinitialisation du composant modifie sa valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">En cas de substitution dans une classe dérivée, obtient le type du composant auquel cette propriété est liée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">
        <see cref="T:System.Type" /> représentant le type du composant auquel cette propriété est liée. Lors de l'appel des méthodes <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> ou <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />, l'objet spécifié peut être une instance de ce type.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">Obtient le convertisseur de type pour cette propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">
        <see cref="T:System.ComponentModel.TypeConverter" /> utilisé pour convertir le <see cref="T:System.Type" /> de cette propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">Crée une instance du type spécifié.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">
        <see cref="T:System.Type" /> représentant le type à créer.</param>
      <returns vsli:raw="A new instance of the type.">Nouvelle instance du type.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">Compare cet objet à un autre afin de déterminer s'ils sont équivalents.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Objet à comparer à ce <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les valeurs sont équivalentes ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">Ajoute les attributs de <see cref="T:System.ComponentModel.PropertyDescriptor" /> à la liste spécifiée d'attributs dans la classe parente.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">
        <see cref="T:System.Collections.IList" /> énumérant les attributs de la classe parente. Initialement, cette liste est vide.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">Retourne le <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> par défaut.</summary>
      <returns vsli:raw="A collection of property descriptor.">Collection du descripteur de propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec comme filtre un tableau d'attributs spécifié.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés pour le composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">Retourne un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> pour un objet donné à l'aide d'un tableau d'attributs spécifié comme filtre.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés pour le composant indiqué.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">Obtient un éditeur du type spécifié.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">Type de base de l'éditeur, utilisé pour différencier plusieurs éditeurs pris en charge par une propriété.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">Instance du type d'éditeur demandé, ou <see langword="null" /> si l'éditeur est introuvable.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">Retourne le code de hachage de cet objet.</summary>
      <returns vsli:raw="The hash code for this object.">Code de hachage pour cet objet.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">Cette méthode retourne l'objet qui doit être utilisé pendant l'appel de membres.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">
        <see cref="T:System.Type" /> de la cible d'appel.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Cible d'appel potentielle.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">
        <see cref="T:System.Object" /> qui doit être utilisé pendant l'appel de membres.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">Retourne un type en utilisant son nom.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">Nom spécifié dans l'assembly du type à récupérer.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">
        <see cref="T:System.Type" /> correspondant au nom de type donné, ou <see langword="null" /> si aucune correspondance n'est détectée.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">En cas de substitution dans une classe dérivée, obtient la valeur actuelle de la propriété d'un composant.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">Composant possédant la propriété dont la valeur doit être récupérée.</param>
      <returns vsli:raw="The value of a property for a given component.">Valeur d'une propriété pour un composant donné.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">Récupère l’ensemble actif de gestionnaires d’événements <c>ValueChanged</c> pour un composant spécifique.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">Composant pour lequel récupérer les gestionnaires d'événements.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">Un gestionnaire d'événements de multidiffusion combiné ou <see langword="null" /> si aucun gestionnaire d'événements n'est assigné actuellement à <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">Obtient une valeur indiquant si cette propriété doit être localisée, comme spécifié dans <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le membre est marqué avec <see cref="T:System.ComponentModel.LocalizableAttribute" /> ayant la valeur <see langword="true" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">En cas de substitution dans une classe dérivée, obtient une valeur indiquant si cette propriété est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">Déclenche l’événement <c>ValueChanged</c> que vous avez implémenté.</summary>
      <param name="component" vsli:raw="The object that raises the event.">Objet déclenchant l'événement.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">
        <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">En cas de substitution dans une classe dérivée, obtient le type de la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">
        <see cref="T:System.Type" /> représentant le type de la propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Permet à d'autres objets d'être avertis en cas de modification de cette propriété.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">Composant dont le gestionnaire doit être supprimé.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">Délégué à supprimer en tant qu'écouteur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="handler" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">En cas de substitution dans une classe dérivée, rétablit la valeur par défaut de cette propriété du composant.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">Composant dont la valeur par défaut de la propriété doit être rétablie.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">Obtient une valeur indiquant si cette propriété doit être sérialisée, comme spécifié dans <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">Une des valeurs d'énumération <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> spécifiant si cette propriété doit être sérialisée.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">En cas de substitution dans une classe dérivée, affecte une autre valeur au composant.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">Composant dont la valeur de la propriété doit être définie.</param>
      <param name="value" vsli:raw="The new value.">Nouvelle valeur.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">En cas de substitution dans une classe dérivée, détermine une valeur indiquant si la valeur de cette propriété doit être persistante.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">Composant possédant la propriété dont la persistance doit être examinée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété doit être persistante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">Obtient une valeur qui indique si les notifications de modification des valeurs pour cette propriété peuvent provenir de l'extérieur du descripteur de propriété.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les notifications de modification des valeurs peuvent provenir de l'extérieur du descripteur de propriété ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Représente une collection d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Tableau de type <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui fournit les propriétés de cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, qui est éventuellement en lecture seule.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Tableau de type <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui fournit les propriétés de cette collection.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">La valeur <see langword="true" /> spécifie que la collection ne peut pas être modifiée.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">Ajoute l'objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifié à la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter à la collection.</param>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui a été ajouté à la collection.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">Supprime tous les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> de la collection.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retourne une valeur indiquant si la collection contient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à rechercher dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection contient le <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">Copie la totalité de la collection dans un tableau, en commençant au numéro d'index spécifié.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">Tableau d'objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans lequel copier les éléments de la collection.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">Index du paramètre <paramref name="array" /> au niveau duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">Obtient le nombre de descripteurs de propriété dans la collection.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">Nombre de descripteurs de propriété dans la collection.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie une collection vide que vous pouvez utiliser, plutôt que d'en créer une sans élément. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">Retourne le <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, en utilisant une valeur booléenne pour indiquer si la casse doit être ignorée.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">Nom du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à retourner à partir de la collection.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si vous souhaitez ignorer la casse de la propriété ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si la propriété n'existe pas.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Retourne un énumérateur pour cette classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Retourne l'index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> dont l'index doit être retourné.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> donné.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">Ajoute <see cref="T:System.ComponentModel.PropertyDescriptor" /> à la collection, au numéro d'index spécifié.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">Index auquel ajouter le paramètre <paramref name="value" /> à la collection.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> à ajouter à la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de cette collection avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">Obtient ou définit le <see cref="T:System.ComponentModel.PropertyDescriptor" /> situé au numéro d'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">Index de base zéro du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à obtenir ou définir.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec le numéro d'index spécifié.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">Le paramètre <paramref name="index" /> n'est pas un index valide pour <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">Obtient ou définit <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">Nom du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à obtenir à partir de la collection.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> portant le nom spécifié, ou <see langword="null" /> si aucune propriété n'existe.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">Supprime l’objet <see cref="T:System.ComponentModel.PropertyDescriptor" /> spécifié de la collection.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">Supprime le <see cref="T:System.ComponentModel.PropertyDescriptor" /> à l'index spécifié dans la collection.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Index du <see cref="T:System.ComponentModel.PropertyDescriptor" /> à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">Trie les membres de cette collection en appliquant le tri par défaut pour cette collection, c'est-à-dire généralement l'ordre alphabétique.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de cette collection avec le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri par défaut pour cette collection (généralement l'ordre alphabétique).</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Trie les membres de cette collection. L'ordre spécifié est appliqué en premier, suivi du tri qui utilise le <see cref="T:System.Collections.IComparer" /> spécifié.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Tableau de chaînes décrivant l'ordre dans lequel trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Comparateur à utiliser pour trier les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> dans cette collection.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nouveau <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> triés.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Nombre d’éléments contenus dans la collection.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Obtient une valeur indiquant si l’accès à la collection est synchronisé (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'accès à la collection est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Objet permettant de synchroniser l’accès à la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">
        <see cref="T:System.Object" /> à utiliser comme clé de l'élément à ajouter.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">
        <see cref="T:System.Object" /> à utiliser comme valeur de l'élément à ajouter.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Supprime tous les éléments de <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Détermine si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Clé à rechercher dans <see cref="T:System.Collections.IDictionary" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contient un élément avec la clé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Retourne un énumérateur pour cette classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est de taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Obtient une valeur indiquant si <see cref="T:System.Collections.IDictionary" /> est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtient ou définit l'élément à l'aide de la clé spécifiée.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">Clé de l'élément à obtenir ou définir.</param>
      <returns vsli:raw="The element with the specified key.">Élément correspondant à la clé spécifiée.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient un <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les clés de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Clé de l'élément à supprimer.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtient <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> contenant les valeurs de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Retourne <see cref="T:System.Collections.IEnumerator" /> pour l'objet <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> pour <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Ajoute un élément à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Élément à ajouter à la collection.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Position à laquelle le nouvel élément est inséré.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Supprime tous les éléments de la collection.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Détermine si la collection contient une valeur spécifique.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Élément à localiser dans la collection.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'élément se trouve dans la collection ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">Détermine l'index d'un élément spécifié dans la collection.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Élément à localiser dans la collection.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">Index de <paramref name="value" /> s'il figure dans la liste ; sinon -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Insère un élément dans la collection à un index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Élément à insérer dans la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Obtient une valeur indiquant si la collection est de taille fixe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection a une taille fixe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Obtient une valeur indiquant si la collection est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">Obtient ou définit un élément de la collection au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">Index de base zéro de l'élément à obtenir ou définir.</param>
      <returns vsli:raw="The element at the specified index.">Élément au niveau de l'index spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> n’est pas un <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> est inférieur à 0.  
ou 
 <paramref name="index" /> est supérieur ou égal à <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">Supprime la première occurrence d'une valeur spécifiée dans la collection.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Élément à supprimer de la collection.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Supprime l'élément au niveau de l'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Index de base zéro de l'élément à supprimer.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">La collection est en lecture seule.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">Identifie le ou les onglets de propriétés à afficher pour la ou les classes spécifiées.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le nom de la classe de l'onglet spécifié.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Nom complet de l'assembly du type de l'onglet à créer. Pour obtenir un exemple de cette convention de mise en forme, consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le nom de la classe de l'onglet spécifié et la portée de l'onglet.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Nom complet de l'assembly du type de l'onglet à créer. Pour obtenir un exemple de cette convention de mise en forme, consultez <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant la portée de cet onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> n'est pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> à l'aide du type d'onglet spécifié.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Type de l'onglet à créer.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> avec le type d'onglet spécifié et la portée de l'onglet.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Type de l'onglet à créer.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant la portée de cet onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> n'est pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">Retourne une valeur indiquant si cette instance est égale à un attribut spécifié.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> à comparer à cette instance ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si les instances de <see cref="T:System.ComponentModel.PropertyTabAttribute" /> sont égales ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> du paramètre <paramref name="other" /> sont introuvables.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Retourne une valeur indiquant si cette instance équivaut à un objet spécifié.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Objet à comparer à cette instance ou <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="other" /> fait référence à la même instance de <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> du paramètre <paramref name="other" /> sont introuvables.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">Obtient le code de hachage de cet objet.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">Code de hachage de l'objet auquel appartient l'attribut.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Initialise l'attribut à l'aide des noms de classes d'onglets spécifiés et d'un tableau de portées d'onglet.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">Tableau des noms qualifiés complets des types à créer pour les onglets de la fenêtre Propriétés.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Portée de chaque onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Une ou plusieurs des valeurs dans <paramref name="tabScopes" /> ne sont pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  

ou - 
La longueur des tableaux <paramref name="tabClassNames" /> et <paramref name="tabScopes" /> est différente.  

ou - 
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Initialise l'attribut à l'aide des noms de classes d'onglets spécifiés et d'un tableau de portées d'onglet.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">Types des onglets à créer.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Portée de chaque onglet. Si la portée a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, elle est affichée uniquement pour les composants avec le <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondant. Si elle a la valeur <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, elle est affichée pour tous les composants du document.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Une ou plusieurs des valeurs dans <paramref name="tabScopes" /> ne sont pas <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  

ou - 
La longueur des tableaux <paramref name="tabClassNames" /> et <paramref name="tabScopes" /> est différente.  

ou - 
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">Obtient les types d'onglets utilisés par cet attribut.</summary>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">Tableau de types indiquant les types d'onglets utilisés par cet attribut.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">Les types spécifiés par la propriété <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> sont introuvables.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">Obtient les noms des classes d'onglets utilisées par cet attribut.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">Noms des classes d'onglets utilisées par cet attribut.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">Obtient un tableau des portées d'onglet de chaque onglet de ce <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">Tableau d'objets <see cref="T:System.ComponentModel.PropertyTabScope" /> indiquant les portées des onglets.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">Définit des identificateurs qui spécifient la portée de la persistance d'un onglet de la fenêtre Propriétés.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">Cet onglet est propre au composant en cours. Il est ajouté à la fenêtre Propriétés du composant en cours uniquement et supprimé lorsque le composant n'est plus sélectionné.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">Cet onglet est propre au document actif. Il est ajouté à la fenêtre Propriétés et supprimé en cas de modification du document actuellement sélectionné.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">Cet onglet est ajouté à la fenêtre Propriétés et ne peut être supprimé qu'explicitement par un composant parent.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">Cet onglet est ajouté à la fenêtre Propriétés et ne peut pas être supprimé.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">Spécifie le nom de la propriété qu'un implémenteur de <see cref="T:System.ComponentModel.IExtenderProvider" /> apporte aux autres composants. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> avec le nom de la propriété et le type de son destinataire.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Nom de la propriété étendant à un objet du type spécifié.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">Nom du type de données que cette propriété peut étendre.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> avec le nom de la propriété et son <see cref="T:System.Type" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Nom de la propriété étendant à un objet du type spécifié.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">
        <see cref="T:System.Type" /> du type de données de l'objet pouvant recevoir la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de l'objet donné est égale à celle de la valeur actuelle ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">Obtient le nom d'une propriété fournie par cette classe.</summary>
      <returns vsli:raw="The name of a property that this class provides.">Nom d'une propriété fournie par cette classe.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">Obtient le nom du type de données que cette propriété peut étendre.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">Nom du type de données que cette propriété peut étendre.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">Obtient un identificateur unique pour cet attribut.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">
        <see cref="T:System.Object" /> qui est un identificateur unique pour l'attribut.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">Spécifie que la propriété peut être utilisée comme paramètre d'application.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie la valeur par défaut de <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> (<see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />). Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indique si cette instance et un objet spécifié sont égaux.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">Autre objet de comparaison.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal à cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">Indique si la valeur de cette instance est la valeur par défaut pour la classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cette instance est l’attribut par défaut de la classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie qu'une propriété ne peut pas être utilisée comme paramètre d'application. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">Obtient une valeur indiquant si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété à laquelle est lié cet attribut peut être utilisée comme paramètre d'application ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie qu'une propriété peut être utilisée comme paramètre d'application. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">Fournit un convertisseur de type pour convertir des références d'objet vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">
        <see cref="T:System.Type" /> qui représente le type à associer à ce convertisseur de référence.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en objet de référence à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">Convertit l'objet donné en type référence.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">Convertit l'objet de valeur en type référence en utilisant le contexte et les arguments spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">Reçoit une collection de valeurs standard pour le type de données référence.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">Obtient une valeur indiquant si la liste de valeurs standard retournée par <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> peut être appelé pour rechercher un ensemble de valeurs communes prises en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">Retourne une valeur indiquant si une valeur particulière peut être ajoutée à la collection des valeurs standard.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> pouvant fournir un contexte supplémentaire.</param>
      <param name="value" vsli:raw="The value to check.">Valeur à contrôler.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">
        <see langword="true" /> si la valeur est autorisée et peut être ajoutée à la collection de valeurs standard ; <see langword="false" /> si la valeur ne peut pas être ajoutée à la collection de valeurs standard.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> avec le composant modifié.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">Composant modifié.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> avec le type de composant modifié.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">
        <see cref="T:System.Type" /> modifié.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">Obtient le composant dont les propriétés, les événements ou les extendeurs ont été modifiés.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">Composant dont les propriétés, les événements ou les extendeurs ont été modifiés, ou <see langword="null" /> si tous les composants du même type ont été modifiés.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Obtient le <see cref="T:System.Type" /> dont les propriétés, les événements ou les extensions ont été modifiés.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">
        <see cref="T:System.Type" /> dont les propriétés ou les événements ont été modifiés.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">Représente la méthode qui gère l'événement <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> déclenché lorsque <see cref="T:System.Type" /> ou un composant est modifié au moment du design.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">
        <see cref="T:System.ComponentModel.RefreshEventArgs" /> qui contient le composant ou le <see cref="T:System.Type" /> modifiés.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">Spécifie si le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) doit être appelé lors de l’installation de l’assembly.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un programme d'installation doit être appelé pendant l'installation d'un assembly ; sinon, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie la visibilité par défaut, à savoir <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Détermine si la valeur du <see cref="T:System.ComponentModel.RunInstallerAttribute" /> spécifié est égale au <see cref="T:System.ComponentModel.RunInstallerAttribute" /> en cours.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objet à comparer.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.RunInstallerAttribute" /> spécifié est égal au <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actuel ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Génère un code de hachage pour le <see cref="T:System.ComponentModel.RunInstallerAttribute" /> en cours.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Code de hachage du <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actuel.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Détermine si cet attribut est l'attribut par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet attribut est la valeur par défaut pour cette classe d'attributs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie que le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) ne doit pas être appelé lors de l’installation de l’assembly. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">Obtient une valeur indiquant si un programme d'installation doit être appelé lors de l'installation d'un assembly.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si un programme d'installation doit être appelé pendant l'installation d'un assembly ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Spécifie que le Custom Action Installer de Visual Studio ou Installutil.exe (Installer Tool) doit être appelé lors de l’installation de l’assembly. Ce champ <see langword="static" /> est en lecture seule.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">Fournit un convertisseur de type pour convertir des objets entiers non signés 8 bits vers et à partir d'une chaîne.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">Spécifie quand une propriété de composant peut être liée à un paramètre d'application.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour spécifier qu'une propriété est appropriée pour une liaison de paramètres ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">Obtient une valeur qui indique si une propriété est appropriée pour une liaison de paramètres.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la propriété est appropriée pour une liaison des paramètres ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">Indique qu'une propriété n'est pas appropriée pour la liaison de paramètres.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">Spécifie qu'une propriété est appropriée pour la liaison de paramètres.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">Fournit un convertisseur de type pour convertir des objets numériques à virgule flottante simple précision vers et à partir d'autres représentations différentes.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets de type chaîne vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en chaîne utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Convertit l'objet de valeur spécifiée en objet <see cref="T:System.String" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">La conversion n'a pas pu être effectuée.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">Fournit des méthodes pour vérifier que le nom et le chemin d'accès de l'ordinateur sont conformes à une syntaxe spécifique. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">Vérifie la syntaxe du nom de l’ordinateur pour confirmer qu’elle ne contient pas le caractère « \ ».</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">Chaîne contenant le nom de l'ordinateur à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> correspond au format de nom d'ordinateur approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">Vérifie la syntaxe du chemin pour déterminer si elle commence par « \\ ».</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Chaîne contenant le chemin d'accès à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> correspond au format de chemin d'accès approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">Vérifie la syntaxe du chemin pour déterminer si elle commence par « \ » ou par la lettre de lecteur « C: ».</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Chaîne contenant le chemin d'accès à vérifier.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> correspond au format de chemin d'accès approprié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets <see cref="T:System.TimeSpan" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en un objet <see cref="T:System.TimeSpan" /> à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">Convertit l'objet donné en <see cref="T:System.TimeSpan" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> n'est pas une valeur valide pour le type cible.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Convertit l'objet donné en un autre type.</summary>
      <param name="context" vsli:raw="A formatter context.">Contexte de formateur.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Culture dans laquelle <paramref name="value" /> doit être converti.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">Représente un attribut d’un élément de boîte à outils.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et spécifie si les valeurs d'initialisation par défaut doivent être utilisées.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">
        <see langword="true" /> pour créer un attribut d'élément de boîte à outils pour un type par défaut ; <see langword="false" /> pour n'associer aucune prise en charge d'élément de boîte à outils par défaut pour cet attribut.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> avec le nom du type spécifié.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">Noms du type de l'élément de boîte à outils et de l'assembly qui contient le type.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> à l'aide du type spécifié de l'élément de boîte à outils.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">Type de l'élément de boîte à outils.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et affecte le type par défaut, <see cref="T:System.Drawing.Design.ToolboxItem" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Obtient une valeur indiquant si la valeur actuelle de l'attribut est sa valeur par défaut.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur actuelle de l'attribut est la valeur par défaut ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> et affecte au type la valeur <see langword="null" />. Ce champ est en lecture seule.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">Obtient ou définit le type de l'élément de boîte à outils.</summary>
      <returns vsli:raw="The type of the toolbox item.">Type de l'élément de boîte à outils.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">Le type est introuvable.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">Obtient ou définit le nom du type du <see cref="T:System.Drawing.Design.ToolboxItem" /> en cours.</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">Nom qualifié complet du type de l'élément de boîte à outils en cours.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">Spécifie la chaîne de filtrage et le type de filtre à utiliser pour un élément de boîte à outils.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> à l'aide de la chaîne de filtrage spécifiée.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Chaîne de filtrage de l'élément de boîte à outils.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> à l'aide de la chaîne de filtrage et du type de filtre spécifiés.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Chaîne de filtrage de l'élément de boîte à outils.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> indiquant le type du filtre.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <see cref="T:System.Object" /> à comparer à cette instance ou une référence null (<see langword="Nothing" /> en Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="obj" /> est égal au type et à la valeur de cette instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">Obtient la chaîne de filtrage de l'élément de boîte à outils.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">Chaîne de filtrage de l'élément de boîte à outils.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">Obtient le type du filtre.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> qui indique le type du filtre.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Retourne le code de hachage de cette instance.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Code de hachage d'un entier signé 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">Indique si l'objet spécifié possède une chaîne de filtrage correspondante.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">Objet à tester pour découvrir une chaîne de filtrage correspondante.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si l'objet spécifié possède une chaîne de filtrage correspondante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns vsli:raw="A string that represents the current object.">Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">Obtient l'ID de type de l'attribut.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">ID de type de cet attribut. Tous les objets <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> possédant la même chaîne de filtrage retournent le même ID de type.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">Définit les identificateurs utilisés pour indiquer le type de filtre utilisé par <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">Indique qu'une chaîne de filtrage d'élément de boîte à outils est autorisée, mais pas requise.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">Indique qu'un traitement personnalisé est requis pour déterminer si une chaîne de filtrage d'élément de boîte à outils doit être utilisée. Cette chaîne est généralement spécifiée sur une classe de concepteur racine pour indiquer que le concepteur souhaite accepter ou refuser un élément de boîte à outils par le biais du code. Le concepteur doit implémenter la méthode <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> de l’interface <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">Indique qu'une chaîne de filtrage d'élément de boîte à outils n'est pas autorisée. Si un concepteur et une classe de composant ont tous deux une chaîne de filtrage et que l’une des chaînes a la valeur <c>ToolboxItemFilterType.Prevent</c>, l’élément de boîte à outils ne sera pas disponible.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">Indique qu'une chaîne de filtrage d'élément de boîte à outils doit être présente pour qu'un élément de boîte à outils soit activé.  Pour qu’un élément de boîte à outils avec un type de filtre <c>Require</c> puisse être activé, le concepteur et la classe de composant doivent avoir la même chaîne de filtrage. De plus, ni le concepteur ni la classe de composant ne doit avoir un type de filtre <c>Prevent</c>.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">Propose un procédé unifié pour convertir les types de valeurs en d'autres types, ainsi que pour accéder aux valeurs et sous-propriétés standard.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur à l’aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">Convertit la valeur donnée en valeur du type de ce convertisseur.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">Convertit la chaîne donnée au type de ce convertisseur, à l'aide des informations de culture indifférente et du contexte spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">
        <see cref="T:System.String" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">Convertit la chaîne donnée en représentation sous forme de chaîne du type de ce convertisseur, à l'aide de la culture dite indifférente.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">
        <see cref="T:System.String" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">Convertit le texte donné en objet, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">
        <see cref="T:System.String" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">Convertit le texte donné en objet, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">
        <see cref="T:System.String" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">Convertit le texte spécifié en objet.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">Représentation textuelle de l'objet à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">
        <see cref="T:System.Object" /> représentant le texte converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">Impossible de convertir la chaîne vers l'objet approprié.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Convertit l’objet de valeur donné en objet du type spécifié, en utilisant le contexte et les informations de culture spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">Convertit l'objet de valeur donné en objet du type spécifié, à l'aide des arguments.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">Convertit la valeur spécifiée en représentation sous forme de chaîne de culture dite indifférente, à l'aide du contexte déterminé.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">Convertit la valeur spécifiée en représentation sous forme de chaîne de culture dite indifférente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">Convertit la valeur donnée en représentation sous forme de chaîne, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">Convertit la valeur donnée en représentation sous forme de chaîne, à l'aide du contexte déterminé.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">Convertit la valeur spécifiée en représentation sous forme de chaîne.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">Recrée un <see cref="T:System.Object" /> en fonction d'un jeu de valeurs de propriétés de l'objet.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">
        <see cref="T:System.Collections.IDictionary" /> représentant un dictionnaire de nouvelles valeurs de propriétés.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Crée une instance du type auquel ce <see cref="T:System.ComponentModel.TypeConverter" /> est associé, en utilisant le contexte spécifié, en fonction d’un ensemble de valeurs de propriétés de l’objet.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> de nouvelles valeurs de propriétés.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> représentant le <see cref="T:System.Collections.IDictionary" /> donné, ou <see langword="null" /> si l’objet ne peut pas être créé. Cette méthode retourne toujours la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">
        <see cref="T:System.Object" /> à convertir, ou <see langword="null" /> si l'objet n'est pas disponible.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Automatiquement levée par cette méthode.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Retourne une exception à lever lorsqu'une conversion ne peut pas être effectuée.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">
        <see cref="T:System.Object" /> à convertir, ou <see langword="null" /> si l'objet n'est pas disponible.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">
        <see cref="T:System.Type" /> représentant le type vers lequel la conversion tentait de s'effectuer.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">
        <see cref="T:System.Exception" /> représentant l'exception à lever lorsqu'une conversion ne peut pas être effectuée.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Automatiquement levée par cette méthode.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite un appel à la méthode <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la modification d'une propriété de cet objet requiert l'appel de <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la modification d'une propriété de cet objet requiert l'appel de <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> pour la création d'une nouvelle valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte déterminé.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur, à l'aide du contexte et des attributs déterminés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Tableau de type <see cref="T:System.Attribute" /> utilisé comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">Retourne une collection de propriétés pour le type de tableau spécifié par le paramètre de valeur.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">
        <see cref="T:System.Object" /> spécifiant le type de tableau pour lequel obtenir des propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés exposées pour ce type de données, ou <see langword="null" /> en l'absence de propriétés.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">Retourne une valeur indiquant si l'objet prend en charge les propriétés.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Retourne une valeur indiquant si cet objet prend en charge les propriétés, en utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">Retourne une collection de valeurs standard à partir du contexte par défaut du type de données pour lequel ce convertisseur de type est conçu.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides, ou <see langword="null" /> si le type de données ne prend pas en charge un jeu de valeurs standard.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Retourne une collection de valeurs standard pour le type de données pour lequel ce convertisseur de type est conçu lorsqu'il est fourni avec un contexte de format.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format qui peut être utilisé pour extraire des informations supplémentaires sur l'environnement à partir duquel ce convertisseur est appelé. Ce paramètre ou les propriétés de ce paramètre peuvent être <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Retourne une valeur indiquant si la collection de valeurs standard retournée par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exclusive des valeurs possibles, utilisant le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> si le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné par <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> est une liste exhaustive des valeurs possibles ; <see langword="false" /> si d'autres valeurs sont possibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">Retourne une valeur indiquant si cet objet prend en charge un jeu standard de valeurs qui peuvent être sélectionnées dans une liste.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Retourne une valeur indiquant si cet objet prend en charge un jeu de valeurs standard pouvant être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> doit être appelée pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">Retourne une valeur indiquant si l'objet de valeur donné est valide pour ce type.</summary>
      <param name="value" vsli:raw="The object to test for validity.">Objet dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">Représente une classe <see langword="abstract" /> qui fournit des propriétés pour les objets qui n'en ont pas.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce descripteur de propriété est lié.</param>
      <param name="name" vsli:raw="The name of the property.">Nom de la propriété.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">
        <see cref="T:System.Type" /> représentant le type de données de cette propriété.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">
        <see cref="T:System.Type" /> représentant le type du composant auquel ce descripteur de propriété est lié.</param>
      <param name="name" vsli:raw="The name of the property.">Nom de la propriété.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">
        <see cref="T:System.Type" /> représentant le type de données de cette propriété.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">Tableau <see cref="T:System.Attribute" /> contenant les attributs à associer à la propriété.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">Retourne une valeur indiquant si la réinitialisation du composant modifie sa valeur.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Composant dont la fonction de réinitialisation doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la réinitialisation du composant modifie sa valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">Obtient le type de composant auquel cette description de propriété est liée.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">
        <see cref="T:System.Type" /> représentant le type du composant auquel cette propriété est liée.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">Obtient une valeur indiquant si cette propriété est en lecture seule.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">
        <see langword="true" /> si la propriété est en lecture seule ; <see langword="false" /> si la propriété est en lecture/écriture.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">Obtient le type de la propriété.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">
        <see cref="T:System.Type" /> représentant le type de la propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">Réinitialise la valeur pour cette propriété du composant.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">Composant dont la valeur de la propriété doit être rétablie.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">Retourne une valeur indiquant si la valeur de cette propriété peut être persistante.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">Composant possédant la propriété dont la persistance doit être examinée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur de la propriété peut être persistante ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">Trie une collection de propriétés.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> possédant les propriétés à trier.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">Tableau de noms triés dans l'ordre dans lequel les propriétés doivent apparaître dans la collection.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés triées.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">Représente une collection de valeurs.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">
        <see cref="T:System.Collections.ICollection" /> représentant les objets à insérer dans la collection.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">Copie le contenu de cette collection dans un tableau.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">
        <see cref="T:System.Array" /> représentant le tableau vers lequel effectuer la copie.</param>
      <param name="index" vsli:raw="The index to start from.">Index à partir duquel commencer la copie.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">Obtient le nombre d’objets dans la collection.</summary>
      <returns vsli:raw="The number of objects in the collection.">Nombre d'objets de la collection.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">Retourne un énumérateur pour cette collection.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Énumérateur de type <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">Obtient l'objet au numéro d'index spécifié.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">Index de base zéro du <see cref="T:System.Object" /> à obtenir de la collection.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">
        <see cref="T:System.Object" /> avec l'index spécifié.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">Pour obtenir une description de ce membre, consultez <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">
        <see langword="null" /> dans tous les cas.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> avec le convertisseur de type par défaut, qui est une chaîne vide ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le nom de type spécifié comme étant le convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="typeName">Nom qualifié complet de la classe à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en utilisant le type spécifié comme convertisseur de données pour l'objet auquel cet attribut est lié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> représentant le type de la classe de convertisseur à utiliser pour la conversion de données de l'objet auquel cet attribut est lié.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtient le nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié.</summary>
      <returns>Nom de type qualifié complet de <see cref="T:System.Type" /> à utiliser comme convertisseur pour l'objet auquel cet attribut est lié, ou une chaîne vide ("") s'il n'en existe aucun. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Spécifie le type à utiliser comme convertisseur de l'objet auquel cet attribut est lié.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si la valeur de l'objet donné est égale au <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours.</summary>
      <param name="obj">Objet dont l'égalité des valeurs doit être vérifiée.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet donné est égale à celle du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage du <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actuel.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fournit les métadonnées supplémentaires au <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à l'aide d'un fournisseur de description de type parent.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">Fournisseur de description de type parent.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Crée un objet qui peut remplacer un autre type de données.</summary>
      <param name="provider" vsli:raw="An optional service provider.">Fournisseur de services facultatif.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">Type de l'objet à créer. Ce paramètre n'est jamais <see langword="null" />.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">Tableau facultatif des types qui représentent les types de paramètres à passer au constructeur de l'objet. Ce tableau peut être <see langword="null" /> ou de longueur nulle.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">Tableau facultatif de valeurs de paramètre à passer au constructeur de l’objet.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> de substitution.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">Obtient un cache par objet accessible en tant que <see cref="T:System.Collections.IDictionary" /> de paires clé/valeur.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">Objet pour lequel obtenir le cache.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> si l'objet fournit prend en charge la mise en cache ; sinon, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">Obtient un descripteur de type personnalisé étendu pour l'objet donné.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">Objet pour lequel obtenir le descripteur de type étendu.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir des métadonnées étendues pour l'objet.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">Obtient les fournisseurs d'extendeurs pour l'objet spécifié.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">Objet pour lequel obtenir des fournisseurs d'extendeurs.</param>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">Tableau de fournisseurs d'extendeurs pour <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Obtient le nom du composant spécifié ou <see langword="null" /> si le composant ne possède pas de nom.</summary>
      <param name="component" vsli:raw="The specified component.">Le composant spécifié.</param>
      <returns vsli:raw="The name of the specified component.">Nom du composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">Effectue la réflexion normale par rapport à l'objet donné.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">Instance du type (ne doit pas être <see langword="null" />).</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">Type de réflexion pour ce <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">Effectue la réflexion normale par rapport à un type.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Type d'objet pour lequel récupérer <see cref="T:System.Reflection.IReflect" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Type de réflexion pour ce <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">Effectue la réflexion normale par rapport à l'objet donné à l'aide du type donné.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Type d'objet pour lequel récupérer <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">Instance du type. Peut être <see langword="null" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Type de réflexion pour ce <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">Convertit un type de réflexion en un type au moment de l'exécution.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">Type à convertir en son équivalent au moment de l'exécution.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">
        <see cref="T:System.Type" /> qui représente l'équivalent au moment de l'exécution de <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">Obtient un descripteur de type personnalisé pour l'objet donné.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Instance du type. Peut être <see langword="null" /> si aucune instance n'est passée au <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">Obtient un descripteur de type personnalisé pour le type donné.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Type d'objet pour lequel récupérer le descripteur de type.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">Obtient un descripteur de type personnalisé pour le type et l'objet donné.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Type d'objet pour lequel récupérer le descripteur de type.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Instance du type. Peut être <see langword="null" /> si aucune instance n'est passée au <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> qui peut fournir les métadonnées pour le type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">Obtient une valeur qui indique si le type spécifié est compatible avec la description de type et sa chaîne de fournisseurs de descriptions de types.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">Type dont la compatibilité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="type" /> est compatible avec la description de type et sa chaîne de fournisseurs de descriptions de types, sinon <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Spécifie le fournisseur de description de type personnalisé pour une classe. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du nom du type spécifié.</summary>
      <param name="typeName">Nom qualifié du type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> à l'aide du type spécifié.</summary>
      <param name="type">Type à stocker dans l'attribut.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtient le nom de type pour le fournisseur de description de type.</summary>
      <returns>
        <see cref="T:System.String" /> qui contient le nom de type qualifié pour <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">Fournit des informations relatives aux caractéristiques d’un composant, telles que ses attributs, ses propriétés et ses événements. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">Ajoute des attributs de niveau classe à l’instance du composant cible.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Tableau d’objets <see cref="T:System.Attribute" /> à ajouter à la classe du composant.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> récemment créé qui a été utilisé pour ajouter les attributs spécifiés.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">Ajoute des attributs de classe au type du composant cible.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Tableau d’objets <see cref="T:System.Attribute" /> à ajouter à la classe du composant.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> récemment créé qui a été utilisé pour ajouter les attributs spécifiés.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">Ajoute une table d’éditeur pour le type de base d’éditeur donné.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">Type de base d’éditeur pour lequel ajouter la table d’éditeur. Si une table existe déjà pour ce type, cette méthode n’aura aucun effet.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">
        <see cref="T:System.Collections.Hashtable" /> à ajouter.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Ajoute un fournisseur de description de type pour une instance unique d’un composant.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Ajoute un fournisseur de description de type pour une classe de composant.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Ajoute un fournisseur de description de type pour une instance unique d’un composant.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Ajoute un fournisseur de description de type pour une classe de composant.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à ajouter.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">Obtient ou définit le fournisseur pour les informations de type COM (Component Object Model) pour le composant cible.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">Instance <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> représentant le fournisseur d’informations de type COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">Obtient le type de l’objet COM (Component Object Model) représenté par le composant cible.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">
        <see cref="T:System.Type" /> de l’objet COM représenté par ce composant, ou <see langword="null" /> pour les objets non-COM.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">Crée une association de type principal-secondaire entre deux objets.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> secondaire.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> est égal à <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">Crée une instance du concepteur associé au composant spécifié et du type de concepteur spécifié.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">
        <see cref="T:System.ComponentModel.IComponent" /> qui spécifie le composant à associer au concepteur.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">
        <see cref="T:System.Type" /> qui représente le type de concepteur à créer.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">
        <see cref="T:System.ComponentModel.Design.IDesigner" /> qui est une instance du concepteur pour le composant, ou <see langword="null" /> si aucun concepteur n’est trouvé.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Crée un descripteur d’événement identique à un descripteur d’événement existant, quand le <see cref="T:System.ComponentModel.EventDescriptor" /> existant est passé.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">Type du composant pour lequel créer l’événement.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">Informations existantes sur l’événement.</param>
      <param name="attributes" vsli:raw="The new attributes.">Nouveaux attributs.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">Nouveau <see cref="T:System.ComponentModel.EventDescriptor" /> qui a fusionné les attributs de métadonnées spécifiés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">Crée un nouveau descripteur d’événement qui est identique à un descripteur d’événement existant, en générant des informations de descripteur de façon dynamique à partir d’un événement spécifié sur un type.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">Type du composant dans lequel réside l’événement.</param>
      <param name="name" vsli:raw="The name of the event.">Nom de l'événement.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">Type du délégué qui gère l’événement.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">Attributs de cet événement.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> lié à un type.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Crée un objet qui peut remplacer un autre type de données.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Fournisseur de services qui fournit un service <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Ce paramètre peut être <see langword="null" />.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">
        <see cref="T:System.Type" /> de l’objet à créer.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">Tableau facultatif de types de paramètre à passer au constructeur de l’objet. Ce paramètre peut avoir la valeur <see langword="null" /> ou correspondre à un tableau de longueur égale à zéro.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">Tableau facultatif de valeurs de paramètre à passer au constructeur de l’objet. Si la valeur n’est pas <see langword="null" />, le nombre d’éléments doit être le même que <paramref name="argTypes" />.</param>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Instance du type de données de remplacement si un <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé est trouvé ; sinon, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> a la valeur <see langword="null" /> ou <paramref name="args" /> a la valeur <see langword="null" /> quand <paramref name="argTypes" /> n’a pas la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> et <paramref name="args" /> ont un nombre différent d’éléments.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">Crée un descripteur de propriété à partir d’un descripteur de propriété existant, à l’aide du <see cref="T:System.ComponentModel.PropertyDescriptor" /> et du tableau d’attributs existants spécifiés.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">
        <see cref="T:System.Type" /> du composant dont la propriété est membre.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">Descripteur de propriété existant.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Nouveaux attributs de cette propriété.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">Nouveau <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui possède les attributs de métadonnées spécifiés fusionnés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">Crée et lie dynamiquement un descripteur de propriété à un type, en utilisant le nom, le type et le tableau d’attributs de la propriété spécifiée.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">
        <see cref="T:System.Type" /> du composant dont la propriété est membre.</param>
      <param name="name" vsli:raw="The name of the property.">Nom de la propriété.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">
        <see cref="T:System.Type" /> de la propriété.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Nouveaux attributs de cette propriété.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> qui est lié au type spécifié et dont les attributs de métadonnées spécifiés sont fusionnés avec les attributs de métadonnées existants.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">Retourne une instance du type associée à l'objet principal spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="primary" vsli:raw="The primary object of the association.">Objet principal de l'association.</param>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">Instance du type secondaire associée à l'objet principal si une association existe ; sinon, <paramref name="primary" /> si aucune association spécifiée n'existe.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">Retourne la collection d'attributs pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Composant pour lequel vous souhaitez obtenir les attributs.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> qui contient les attributs pour le composant. Si <paramref name="component" /> a la valeur <see langword="null" />, cette méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">Retourne une collection d'attributs pour le composant spécifié et une valeur booléenne indiquant qu'un descripteur de type personnalisé a été créé.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Composant pour lequel vous souhaitez obtenir les attributs.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour utiliser un ensemble d'attributs de référence à partir du descripteur de type personnalisé si <paramref name="component" /> est de type <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> avec les attributs du composant. Si le composant est <see langword="null" />, cette méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">Retourne une collection d'attributs pour le type spécifié de composant.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> avec les attributs pour le type de composant. Si le composant est <see langword="null" />, cette méthode retourne une collection vide.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">Retourne le nom de la classe pour le composant spécifié à l'aide du descripteur de type par défaut.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">
        <see cref="T:System.Object" /> dont vous souhaitez obtenir le nom de la classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">
        <see cref="T:System.String" /> qui contient le nom de la classe pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">Retourne le nom de la classe pour le composant spécifié à l'aide d'un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">
        <see cref="T:System.Object" /> dont vous souhaitez obtenir le nom de la classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">
        <see cref="T:System.String" /> qui contient le nom de la classe pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">Retourne le nom de la classe pour le type spécifié.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">
        <see cref="T:System.String" /> qui contient le nom de la classe pour le type de composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">Retourne le nom du composant spécifié à l'aide du descripteur de type par défaut.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">
        <see cref="T:System.Object" /> dont vous souhaitez obtenir le nom de la classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">
        <see cref="T:System.String" /> qui contient le nom du composant spécifié, ou <see langword="null" /> s'il n'y a aucun nom de composant.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">Retourne le nom du composant spécifié, à l'aide d'un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">
        <see cref="T:System.Object" /> dont vous souhaitez obtenir le nom de la classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Nom de la classe pour le composant spécifié, ou <see langword="null" /> s'il n'y a aucun nom composant.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">Retourne un convertisseur de type pour le type du composant spécifié.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Composant pour lequel obtenir le convertisseur.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">Retourne un convertisseur de type pour le type du composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Composant pour lequel obtenir le convertisseur.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">Retourne un convertisseur de type pour le type spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">Retourne l'événement par défaut pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Composant pour lequel obtenir l'événement.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l'événement par défaut, ou <see langword="null" /> s'il n'existe aucun événement.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">Retourne l'événement par défaut pour un composant avec un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Composant pour lequel obtenir l'événement.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l'événement par défaut, ou <see langword="null" /> s'il n'existe aucun événement.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">Retourne l'événement par défaut pour le type de composant spécifié.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> avec l'événement par défaut, ou <see langword="null" /> s'il n'existe aucun événement.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">Retourne la propriété par défaut pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Composant pour lequel obtenir la propriété par défaut.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> s'il n'existe aucune propriété.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">Retourne la propriété par défaut pour le composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Composant pour lequel obtenir la propriété par défaut.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> s'il n'existe aucune propriété.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">Retourne la propriété par défaut pour le type de composant spécifié.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">
        <see cref="T:System.Type" /> représentant la classe dont la propriété doit être obtenue.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> avec la propriété par défaut, ou <see langword="null" /> s'il n'existe aucune propriété.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">Obtient un éditeur du type de base spécifié pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Composant pour lequel obtenir l’éditeur.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">
        <see cref="T:System.Type" /> représentant le type de base de l'éditeur à rechercher.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Instance de l'éditeur qui peut faire l'objet d'un cast en un type d'éditeur spécifié ou <see langword="null" /> si aucun éditeur du type demandé n'est disponible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">Retourne un éditeur du type de base spécifié et possédant un descripteur de type personnalisé pour le composant spécifié.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Composant pour lequel obtenir l’éditeur.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">
        <see cref="T:System.Type" /> représentant le type de base de l'éditeur à rechercher.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">Indicateur qui indique si les informations de description de type personnalisées doivent être considérées.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Instance de l'éditeur qui peut faire l'objet d'un cast en un type d'éditeur spécifié ou <see langword="null" /> si aucun éditeur du type demandé n'est disponible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">Retourne un éditeur du type de base spécifié pour le type spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">
        <see cref="T:System.Type" /> représentant le type de base de l'éditeur que vous recherchez.</param>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Instance de l'objet d'éditeur qui peut faire l'objet d'un cast en un type de base donné ou <see langword="null" /> si aucun éditeur du type demandé n'est disponible.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ou <paramref name="editorBaseType" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">Retourne la collection d'événements pour le composant spécifié.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Composant pour lequel obtenir les événements.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">Retourne la collection d'événements pour un composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Composant pour lequel obtenir les événements.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Tableau de type <see cref="T:System.Attribute" /> que vous pouvez utiliser comme filtre.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements qui correspondent aux attributs spécifiés pour ce composant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Retourne la collection d'événements pour un composant spécifié en utilisant comme filtre un tableau d'attributs déterminé et un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Composant pour lequel obtenir les événements.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements qui correspondent aux attributs spécifiés pour ce composant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">Retourne la collection d'événements pour un composant spécifié avec un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Composant pour lequel obtenir les événements.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">Retourne la collection d'événements pour un type de composant spécifié.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements de ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">Retourne la collection d'événements pour un type de composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Tableau de type <see cref="T:System.Attribute" /> que vous pouvez utiliser comme filtre.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> avec les événements qui correspondent aux attributs spécifiés pour ce composant.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">Retourne le nom qualifié complet du composant.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">
        <see cref="T:System.ComponentModel.Component" /> dont le nom est à rechercher.</param>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Nom qualifié complet du composant spécifié ou <see langword="null" /> si le composant ne possède pas de nom.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">Retourne la collection de propriétés pour un composant spécifié.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés pour le composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">Retourne la collection de propriétés pour un composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés pour le composant indiqué.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Retourne la collection des propriétés pour un composant spécifié en utilisant comme filtre un tableau d'attributs déterminé et un descripteur de type personnalisé.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour prendre en compte les informations de description de type personnalisées ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les événements qui correspondent aux attributs spécifiés pour le composant déterminé.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">Retourne la collection de propriétés pour un composant spécifié, à l'aide du descripteur de type par défaut.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Composant pour lequel obtenir les propriétés.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour ne pas prendre en compte les informations de description de type personnalisé ; sinon, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés pour un composant spécifié.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> est un objet distant interprocessus.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">Retourne la collection de propriétés pour un type de composant spécifié.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">
        <see cref="T:System.Type" /> représentant le composant pour lequel obtenir les propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés pour un type de composant spécifié.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">Retourne la collection de propriétés pour un type de composant déterminé en utilisant comme filtre un tableau d'attributs spécifié.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Tableau de type <see cref="T:System.Attribute" /> à utiliser comme filtre.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> avec les propriétés qui correspondent aux attributs spécifiés pour ce type de composant.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">Retourne le fournisseur de description de type pour le composant spécifié.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé au composant spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">Retourne le fournisseur de description de type pour le type spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associé au type spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">Retourne <see cref="T:System.Type" /> qui peut être utilisé pour effectuer la réflexion en fonction d'un objet.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">
        <see cref="T:System.Type" /> pour l'objet spécifié.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">Retourne <see cref="T:System.Type" /> qui peut être utilisé pour effectuer la réflexion en fonction d'un type de classe.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">
        <see cref="T:System.Type" /> de la classe spécifiée.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">Obtient un type qui représente un fournisseur de description de type pour tous les types d'interface.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">
        <see cref="T:System.Type" /> qui représente un fournisseur de description de type personnalisé pour tous les types d'interface.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">Efface du cache les propriétés et événements pour le composant spécifié.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">Composant dont les propriétés ou les événements ont été modifiés.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">Efface du cache les propriétés et événements de l'assembly spécifié.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">
        <see cref="T:System.Reflection.Assembly" /> représentant l'assembly à actualiser. Chaque <see cref="T:System.Type" /> de cet assembly est actualisé.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">Efface du cache les propriétés et événements pour le module spécifié.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">
        <see cref="T:System.Reflection.Module" /> représentant le module à actualiser. Chaque <see cref="T:System.Type" /> de ce module est actualisé.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">Efface du cache les propriétés et événements pour le type de composant spécifié.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">Se produit lorsque le cache d'un composant est effacé.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">Supprime une association entre deux objets.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> secondaire.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">Supprime toutes les associations pour un objet principal.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">
        <see cref="T:System.Object" /> principal dans une association.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Supprime un fournisseur de description de type ajouté précédemment et associé à l'objet spécifié.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Supprime un fournisseur de description de type ajouté précédemment et associé au type spécifié.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Supprime un fournisseur de description de type ajouté précédemment et associé à l'objet spécifié.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Instance du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Supprime un fournisseur de description de type ajouté précédemment et associé au type spécifié.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> à supprimer.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">
        <see cref="T:System.Type" /> du composant cible.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">Trie des descripteurs selon leur nom.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">
        <see cref="T:System.Collections.IList" /> qui contient les descripteurs à trier.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">Fournit un convertisseur de type qui peut être utilisé pour renseigner une zone de liste avec les types disponibles.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.TypeListConverter" /> en utilisant le tableau de types comme types disponibles.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">Tableau de type <see cref="T:System.Type" /> à utiliser comme types disponibles.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">Obtient une valeur qui indique si ce convertisseur peut convertir le <see cref="T:System.Type" /> spécifié de l'objet de source à l'aide du contexte donné.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">
        <see cref="T:System.Type" /> de l'objet source.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">Convertit l'objet spécifié en type natif du convertisseur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">
        <see cref="T:System.Globalization.CultureInfo" /> spécifiant la culture utilisée pour représenter la police.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Convertit l'objet de valeur donnée en type de destination spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> facultatif. Si la culture n'est pas spécifiée, la culture en cours est utilisée.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">
        <see cref="T:System.Type" /> dans lequel convertir la valeur.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Object" /> qui représente <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Obtient une collection de valeurs standard pour le type de données pour lequel ce validateur est conçu.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> contenant un jeu standard de valeurs valides ou <see langword="null" /> si le type de données ne prend pas en charge un jeu standard de valeurs.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Obtient une valeur indiquant si la liste de valeurs standard retournée par la méthode <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exclusive.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> parce que le <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retourné depuis <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> est une liste exhaustive de valeurs possibles. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Obtient une valeur indiquant si cet objet prend en charge une série de valeurs standard qui peuvent être sélectionnées dans une liste, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> car <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> doit être appelé pour trouver un jeu de valeurs communes pris en charge par l'objet. Cette méthode ne retourne jamais <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets entiers non signés 16 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">Fournit un convertisseur de type pour convertir des objets entiers non signés 32 bits vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">Fournit un convertisseur de type pour convertir des objets entiers non signés 64 bits vers et à partir d’autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">Fournit un convertisseur de type pour convertir les objets <see cref="T:System.Version" /> vers et à partir d'autres représentations.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet du type source donné en <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Objet qui fournit des informations contextuelles.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">Type de l'objet à convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut convertir sourceType en <see cref="T:System.Version" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Objet qui fournit des informations contextuelles.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">Type cible pour la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le convertisseur peut convertir un objet dans le type de destination donné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Convertit l'objet spécifié en <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Objet qui fournit des informations contextuelles.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">Culture à utiliser pour la conversion.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Valeur à convertir en <see cref="T:System.Version" />.</param>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <paramref name="value" /> converti en valeur <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> n’est pas une chaîne <see cref="T:System.Version" /> valide.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">Convertit la valeur spécifiée dans le type de destination spécifié en utilisant le contexte et les arguments spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">Culture qui fournit les informations de mise en forme pour la conversion.</param>
      <param name="value" vsli:raw="The value to be converted.">Valeur à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">Type dans lequel convertir le paramètre de valeur.</param>
      <returns vsli:raw="An object that represents the converted value.">Objet qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">Retourne une valeur qui indique si l’objet de valeur donné est valide pour ce type et pour le contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The object to test for validity.">Objet dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la valeur spécifiée est valide pour cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">Spécifie une exception gérée comme un avertissement plutôt que comme une erreur.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> à l'aide des données et du contexte de sérialisation spécifiés.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à utiliser pour la désérialisation.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destination à utiliser pour la désérialisation.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et aucun fichier d'aide.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Message à afficher à l'utilisateur final.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec la description détaillée spécifiée et l'exception spécifiée.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Description détaillée de l'erreur.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Référence à l'exception interne à l'origine de cette exception.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et la possibilité d'accéder au fichier d'aide spécifié.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Message à afficher à l'utilisateur final.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Fichier d'aide à afficher à si l'utilisateur fait appel à l'aide.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.WarningException" /> avec le message spécifié et la possibilité d'accéder au fichier et à la rubrique d'aide spécifiés.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Message à afficher à l'utilisateur final.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">Fichier d'aide à afficher à si l'utilisateur fait appel à l'aide.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">Rubrique d'aide à afficher si l'utilisateur fait appel à l'aide.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">Affecte le nom de paramètre et des informations complémentaires concernant l'exception à <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">Stocke les données utilisées pour sérialiser ou désérialiser l'objet que <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> sérialisait ou désérialisait.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">Décrit la source et la destination du flux ayant généré l'exception, ainsi qu'un moyen pour la sérialisation de conserver ce contexte et un contexte supplémentaire défini par l'appelant.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">Obtient la rubrique d'aide associée à l'avertissement.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">Rubrique d'aide associée à l'avertissement.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">Obtient le fichier d'aide associé à l'avertissement.</summary>
      <returns vsli:raw="The Help file associated with the warning.">Fichier d'aide associé à l'avertissement.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Convertit les couleurs d'un type de données à un autre. Accédez à cette classe via <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Vous pouvez utiliser cet objet pour obtenir d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">Type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné à l'aide du contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">
        <see cref="T:System.Type" /> représentant le type à partir duquel vous souhaitez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si le convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Convertit l'objet donné en type natif du convertisseur.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> qui fournit un contexte de format. Vous pouvez utiliser cet objet pour obtenir d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation de la couleur.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">
        <see cref="T:System.Object" /> représentant la valeur convertie.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Convertit l'objet spécifié dans un autre type.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Utilisez cet objet pour extraire d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours si cette valeur est <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">
        <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture de représentation de la couleur.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">
        <see cref="T:System.Object" /> représentant la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Récupère une collection contenant un ensemble de valeurs standard pour le type de données pour lequel ce validateur a été conçu. La méthode retourne <see langword="null" /> si le type de données ne prend pas en charge un ensemble de valeurs standard.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Utilisez cet objet pour extraire d'autres informations sur l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours si cette valeur est <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Collection contenant un ensemble standard de valeurs valides ou <see langword="null" />. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">Détermine si cet objet prend en charge un ensemble standard de valeurs pouvant être sélectionnées dans une liste.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> doit être appelé pour rechercher un jeu commun de valeurs prises en charge par l'objet ; sinon <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">Convertit un objet <see cref="T:System.Drawing.Point" /> d'un type de données à un autre.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Type à partir duquel vous souhaitez convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si cet objet peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">Objet <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Objet <see cref="T:System.Type" /> qui représente le type vers lequel effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">Convertit l'objet spécifié en objet <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Objet qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Objet qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">Crée une instance de ce type en fonction d'un jeu de valeurs de propriétés pour l'objet.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, une par propriété retournée par <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Détermine si la modification d'une valeur de cet objet nécessite un appel à <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la méthode <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelée quand une ou plusieurs propriétés de cet objet sont modifiées ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Ensemble des propriétés qui sont exposées pour ce type de données. Si aucune propriété n'est exposée, cette méthode risque de retourner <see langword="null" />. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Convertit des rectangles d'un type de données à un autre. Accédez à cette classe via <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Détermine si ce convertisseur peut convertir un objet du type source donné en objet du type natif du convertisseur.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contexte de formateur. Cet objet peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel le convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Type à partir duquel vous souhaitez convertir.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">Objet <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Vérifiez toujours, car la valeur peut être <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Objet <see cref="T:System.Type" /> qui représente le type vers lequel effectuer la conversion.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cette méthode retourne <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">Convertit l'objet donné en objet <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">
        <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">Crée une instance de ce type en fonction d'un jeu de valeurs de propriétés pour l'objet. Cela est utile pour des objets immuables, mais dont les propriétés doivent néanmoins être modifiables.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, une par propriété retournée par un appel à la méthode <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Détermine si la modification d'une valeur de cet objet nécessite un appel à <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descripteur de type par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cette méthode retourne <see langword="true" /> si <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelé quand une ou plusieurs propriétés de cet objet sont modifiées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Ensemble des propriétés qui doivent être exposées pour ce type de données. Si aucune propriété ne doit être exposée, la valeur <see langword="null" /> peut être retournée. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cette méthode retourne <see langword="true" /> si <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelé pour rechercher les propriétés de cet objet ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">La classe <see cref="T:System.Drawing.SizeConverter" /> est utilisée pour convertir d'un type de données à un autre. Accédez à cette classe via l'objet <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">Initialise un nouvel objet <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">Détermine si ce convertisseur peut convertir un objet du type source spécifié en objet du type natif du convertisseur.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Type à partir duquel vous souhaitez convertir.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">Cette méthode retourne <see langword="true" /> si cet objet peut effectuer la conversion.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Obtient une valeur indiquant si ce convertisseur peut convertir un objet en objet du type de destination donné en utilisant le contexte.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. Vérifiez toujours, car la valeur peut être <see langword="null" />. En outre, les propriétés de l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Cette méthode retourne <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">Convertit l'objet spécifié en type natif du convertisseur.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Objet <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Convertit l'objet spécifié dans le type spécifié.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui peut être utilisé pour obtenir des informations supplémentaires concernant l'environnement à partir duquel ce convertisseur est appelé. La valeur peut être <see langword="null" />, vérifiez donc toujours. En outre, les propriétés sur l'objet de contexte peuvent retourner <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Objet <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations de culture spécifiques, telles que la langue, le calendrier et des conventions associées à une culture spécifique. Il est basé sur la norme RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Type dans lequel convertir l'objet.</param>
      <returns vsli:raw="The converted object.">Objet converti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">Crée un objet de ce type à l'aide d'un jeu de valeurs de propriétés spécifié pour l'objet. Cela est utile pour créer des objets non modifiables dotés de propriétés modifiables.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Dictionnaire de nouvelles valeurs de propriétés. Le dictionnaire contient une série de paires nom/valeur, à raison d'une paire par propriété retournée par la méthode <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Objet nouvellement créé ou <see langword="null" /> si l'objet n'a pas pu être créé. L'implémentation par défaut retourne la valeur <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Détermine si la modification d'une valeur de cet objet nécessite un appel à la méthode <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> pour créer une nouvelle valeur.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">
        <see langword="true" /> si l'objet <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> doit être appelé quand une ou plusieurs propriétés de cet objet sont modifiées.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">Récupère le jeu de propriétés pour ce type. Par défaut, un type ne retourne aucune propriété.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valeur de l'objet pour lequel les propriétés doivent être obtenues.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Ensemble des propriétés qui doivent être exposées pour ce type de données. Si aucune propriété ne doit être exposée, la valeur <see langword="null" /> peut être retournée. L'implémentation par défaut retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Détermine si cet objet prend en charge les propriétés. Par défaut, cette valeur est <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">
        <see langword="true" /> si la méthode <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> doit être appelée pour rechercher les propriétés de cet objet.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">Convertit les objets <see cref="T:System.Drawing.SizeF" /> d'un type en un autre type.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">Retourne une valeur indiquant si le convertisseur peut effectuer une conversion du type spécifié vers le type <see cref="T:System.Drawing.SizeF" />, à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel vous voulez effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> pour indiquer que la conversion peut être effectuée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">Retourne une valeur indiquant si <see cref="T:System.Drawing.SizeFConverter" /> peut convertir <see cref="T:System.Drawing.SizeF" /> vers le type spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">
        <see cref="T:System.Type" /> qui représente le type à partir duquel opérer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Convertit l’objet de valeur donné en type spécifié, en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur null est passée, la culture est supposée être celle en cours.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">Crée une instance de <see cref="T:System.Drawing.SizeF" /> avec les valeurs de propriétés spécifiées à l'aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">
        <see cref="T:System.Collections.IDictionary" /> contenant les noms et les valeurs de propriétés.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">
        <see cref="T:System.Object" /> représentant le nouveau <see cref="T:System.Drawing.SizeF" /> ou <see langword="null" /> si l'objet ne peut pas être créé.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">Retourne une valeur indiquant si la modification d'une valeur de cet objet nécessite l'appel à la méthode <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> pour créer une nouvelle valeur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format. Celui-ci peut être <see langword="null" />.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">Récupère un jeu de propriétés pour le type <see cref="T:System.Drawing.SizeF" /> à l'aide du contexte et des attributs spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">
        <see cref="T:System.Object" /> pour lequel retourner les propriétés.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Tableau d'objets <see cref="T:System.Attribute" /> qui décrivent les propriétés.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> qui contient les propriétés.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">Retourne une valeur indiquant si le type <see cref="T:System.Drawing.SizeF" /> prend en charge les propriétés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> par l'intermédiaire duquel un contexte supplémentaire peut être fourni.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Retourne toujours <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">La classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> représente le convertisseur de type pour la stratégie de protection étendue utilisée par le serveur pour valider les connexions clientes entrantes.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Retourne une valeur indiquant si ce convertisseur peut convertir l'objet en objet du type spécifié.</summary>
      <param name="context" vsli:raw="The object to convert.">Objet à convertir.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">
        <see cref="T:System.Type" /> qui représente le type vers lequel vous souhaitez convertir.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si ce convertisseur peut effectuer la conversion ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">Convertit l'objet en objet du type spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Objet <see cref="T:System.Globalization.CultureInfo" />. Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">
        <see cref="T:System.Object" /> à convertir. Il doit s’agir d’un objet <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">
        <see cref="T:System.Type" /> vers lequel le paramètre de valeur doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <see cref="T:System.Object" /> qui représente le paramètre <paramref name="value" /> converti.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">La conversion n'a pas pu être effectuée.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Fournit des données pour l'événement <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Obtient la date et l’heure auxquelles l’événement <see cref="E:System.Timers.Timer.Elapsed" /> a été déclenché.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Heure à laquelle l'événement <see cref="E:System.Timers.Timer.Elapsed" /> a été déclenché.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Représente la méthode qui gérera l'événement <see cref="E:System.Timers.Timer.Elapsed" /> d'un <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Source de l'événement.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">Objet <see cref="T:System.Timers.ElapsedEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">Génère un événement au bout d'un intervalle défini, avec la possibilité de générer des événements récurrents.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">Initialise une nouvelle instance de la classe <see cref="T:System.Timers.Timer" /> et affecte à toutes les propriétés leurs valeurs initiales.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">Initialise une nouvelle instance de la classe <see cref="T:System.Timers.Timer" /> et affecte le nombre spécifié de millisecondes à la propriété <see cref="P:System.Timers.Timer.Interval" />.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Intervalle, en millisecondes, entre les événements. La valeur doit être supérieure à zéro et inférieure ou égale à <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La valeur du paramètre <paramref name="interval" /> doit être inférieure ou égale à zéro, ou supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">Obtient ou définit une valeur booléenne indiquant si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> une seule fois (<see langword="false" />) ou de façon répétée (<see langword="true" />).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> chaque fois que l'intervalle expire ; <see langword="false" /> s'il doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> une seule fois, à la première expiration de l'intervalle. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Débute l'initialisation au moment de l'exécution d'un <see cref="T:System.Timers.Timer" /> utilisé sur un formulaire ou par un autre composant.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Libère les ressources utilisées par le <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Libère toutes les ressources utilisées par le <see cref="T:System.Timers.Timer" /> actuel.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">Se produit quand l'intervalle est écoulé.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Obtient ou définit une valeur indiquant si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.Timers.Timer" /> doit déclencher l'événement <see cref="E:System.Timers.Timer.Elapsed" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">Cette propriété ne peut pas être définie, car la minuterie a été supprimée.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">La propriété <see cref="P:System.Timers.Timer.Interval" /> a eu une valeur supérieure à <see cref="F:System.Int32.MaxValue" /> avant que la minuterie ait été activée.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Met fin à l'initialisation au moment de l'exécution d'un <see cref="T:System.Timers.Timer" /> utilisé sur un formulaire ou par un autre composant.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Obtient ou définit l'intervalle, exprimé en millisecondes, auquel l'événement <see cref="E:System.Timers.Timer.Elapsed" /> doit être déclenché.</summary>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">Intervalle en millisecondes séparant les événements <see cref="E:System.Timers.Timer.Elapsed" />. La valeur doit être supérieure à zéro et inférieure ou égale à <see cref="F:System.Int32.MaxValue" />. La valeur par défaut est 100 millisecondes.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">L'intervalle est inférieur ou égal à zéro.  

ou - 
L'intervalle est supérieur à <see cref="F:System.Int32.MaxValue" /> et la minuterie est actuellement activée. (Si la minuterie n'est pas activée actuellement, aucune exception n'est levée jusqu'à ce qu'elle soit activée.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">Obtient ou définit le site qui lie <see cref="T:System.Timers.Timer" /> à son conteneur en mode design.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">Interface <see cref="T:System.ComponentModel.ISite" /> représentant le site qui lie l'objet <see cref="T:System.Timers.Timer" /> à son conteneur.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">Lance le déclenchement de l'événement <see cref="E:System.Timers.Timer.Elapsed" /> en affectant à <see cref="P:System.Timers.Timer.Enabled" /> la valeur <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">
        <see cref="T:System.Timers.Timer" /> est créé avec un intervalle supérieur ou égal à <see cref="F:System.Int32.MaxValue" /> + 1, ou défini à un intervalle inférieur à zéro.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">Arrête le déclenchement de l'événement <see cref="E:System.Timers.Timer.Elapsed" /> en affectant à <see cref="P:System.Timers.Timer.Enabled" /> la valeur <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">Obtient ou définit l'objet utilisé pour marshaler les appels du gestionnaire d'événements émis quand un intervalle a expiré.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> représentant l'objet utilisé pour marshaler les appels du gestionnaire d'événements émis quand un intervalle a expiré. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">Définit la description que les concepteurs visuels peuvent afficher lors du référencement d'un événement, d'un extendeur ou d'une propriété.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description" vsli:raw="The description to use.">Description à utiliser.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">Obtient la description que les concepteurs visuels peuvent afficher lors du référencement d'un événement, d'un extendeur ou d'une propriété.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">Description de l'événement, de l'extendeur ou de la propriété.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">Convertit un type <see cref="T:System.String" /> en type <see cref="T:System.Uri" />, et inversement.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">Initialise une nouvelle instance de la classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Retourne une valeur indiquant si ce convertisseur peut convertir un objet du type donné en objet du type de ce convertisseur.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">
        <see cref="T:System.Type" /> représentant le type à partir duquel effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="sourceType" /> est un type <see cref="T:System.String" /> ou un type <see cref="T:System.Uri" /> qui peut être assigné à partir de <paramref name="sourceType" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="sourceType" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Retourne une valeur indiquant si ce convertisseur peut convertir l’objet en objet du type spécifié, à l’aide du contexte spécifié.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">
        <see cref="T:System.Type" /> représentant le type vers lequel effectuer la conversion.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="destinationType" /> est de type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> ou <see cref="T:System.Uri" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Convertit l’objet donné dans le type de ce convertisseur en utilisant les informations de contexte et de culture spécifiées.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">
        <see cref="T:System.Globalization.CultureInfo" /> à utiliser comme culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">Convertit l'objet de valeur donné dans le type spécifié, à l'aide du contexte et des informations de culture spécifiés.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> Si la valeur <see langword="null" /> est passée, la culture est supposée être la culture actuelle.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">
        <see cref="T:System.Object" /> à convertir.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> auquel le paramètre <paramref name="value" /> doit être converti.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">
        <see cref="T:System.Object" /> qui représente la valeur convertie.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Le paramètre <paramref name="destinationType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">La conversion ne peut pas être effectuée.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">Retourne si l'objet de valeur donné est un <see cref="T:System.Uri" /> ou un <see cref="T:System.Uri" /> à partir duquel il peut être créé.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> qui fournit un contexte de format.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">
        <see cref="T:System.Object" /> dont la validité doit être testée.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> est un <see cref="T:System.Uri" /> ou un <see cref="T:System.String" /> à partir duquel un <see cref="T:System.Uri" /> peut être créé ; sinon, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
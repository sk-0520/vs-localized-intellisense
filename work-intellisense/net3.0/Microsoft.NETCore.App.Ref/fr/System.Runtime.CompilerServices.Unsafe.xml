<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Contient des fonctionnalités secondaires génériques pour la manipulation des pointeurs.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Ajoute un décalage d’élément à la référence donnée.</summary>
      <param name="source">Référence à laquelle ajouter le décalage.</param>
      <param name="elementOffset">Offset à ajouter.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète l’ajout du décalage au pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Ajoute un décalage d’élément à la référence donnée.</summary>
      <param name="source">Référence à laquelle ajouter le décalage.</param>
      <param name="elementOffset">Offset à ajouter.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète l’ajout du décalage au pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Ajoute un offset d’élément au pointeur void donné.</summary>
      <param name="source">Pointeur void auquel ajouter l’offset.</param>
      <param name="elementOffset">Offset à ajouter.</param>
      <typeparam name="T">Type de pointeur void.</typeparam>
      <returns>Nouveau pointeur void qui reflète l’ajout de l’offset au pointeur spécifié.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Ajoute un décalage d’octet à la référence donnée.</summary>
      <param name="source">Référence à laquelle ajouter le décalage.</param>
      <param name="byteOffset">Offset à ajouter.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète l’ajout du décalage d’octet au pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Détermine si les références spécifiées pointent vers le même emplacement.</summary>
      <param name="left">Première référence à comparer.</param>
      <param name="right">Seconde référence à comparer.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> pointent vers le même emplacement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Caste l’objet donné dans le type spécifié.</summary>
      <param name="o">Objet à caster.</param>
      <typeparam name="T">Type dans lequel l’objet sera casté.</typeparam>
      <returns>L’objet d’origine, casté dans le type donné.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Réinterprète la référence donnée comme une référence à une valeur de type <typeparamref name="TTo" />.</summary>
      <param name="source">Référence à réinterpréter.</param>
      <typeparam name="TFrom">Type de référence à réinterpréter.</typeparam>
      <typeparam name="TTo">Type souhaité de la référence.</typeparam>
      <returns>Référence à une valeur de type <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Retourne un pointeur au paramètre by-ref donné.</summary>
      <param name="value">Objet dont le pointeur est obtenu.</param>
      <typeparam name="T">Type d'objet.</typeparam>
      <returns>Pointeur vers la valeur donnée.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Réinterprète la référence en lecture seule donnée comme une référence.</summary>
      <param name="source">Référence en lecture seule à réinterpréter.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Référence à une valeur de type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Réinterprète l’emplacement donné comme une référence à une valeur de type <typeparamref name="T" />.</summary>
      <param name="source">Emplacement de la valeur à référencer.</param>
      <typeparam name="T">Type de l’emplacement interprété.</typeparam>
      <returns>Référence à une valeur de type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Détermine le décalage d’octet entre l’origine et la cible à partir des références données.</summary>
      <param name="origin">Référence à l’origine.</param>
      <param name="target">Référence à la cible.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Décalage d’octet entre l’origine et la cible, c’est-à-dire <paramref name="target" />  -  <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Copie une valeur de type <typeparamref name="T" /> à l’emplacement donné.</summary>
      <param name="destination">Emplacement vers lequel effectuer la copie.</param>
      <param name="source">Pointeur vers la valeur à copier.</param>
      <typeparam name="T">Type de valeur à copier.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Copie une valeur de type <typeparamref name="T" /> à l’emplacement donné.</summary>
      <param name="destination">Emplacement vers lequel effectuer la copie.</param>
      <param name="source">Référence à la valeur à copier.</param>
      <typeparam name="T">Type de valeur à copier.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copie les octets de l’adresse source vers l’adresse de destination.</summary>
      <param name="destination">Adresse de destination vers laquelle effectuer la copie.</param>
      <param name="source">Adresse source depuis laquelle effectuer la copie.</param>
      <param name="byteCount">Nombre d'octets à copier.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Copie les octets de l’adresse source vers l’adresse de destination.</summary>
      <param name="destination">Adresse de destination vers laquelle effectuer la copie.</param>
      <param name="source">Adresse source depuis laquelle effectuer la copie.</param>
      <param name="byteCount">Nombre d'octets à copier.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copie les octets de l’adresse source vers l’adresse de destination sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="destination">Adresse de destination vers laquelle effectuer la copie.</param>
      <param name="source">Adresse source depuis laquelle effectuer la copie.</param>
      <param name="byteCount">Nombre d'octets à copier.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Copie les octets de l’adresse source vers l’adresse de destination sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="destination">Adresse de destination vers laquelle effectuer la copie.</param>
      <param name="source">Adresse source depuis laquelle effectuer la copie.</param>
      <param name="byteCount">Nombre d'octets à copier.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée.</summary>
      <param name="startAddress">Adresse du début du bloc de mémoire à initialiser.</param>
      <param name="value">Valeur sur laquelle initialiser le bloc.</param>
      <param name="byteCount">Nombre d’octets à initialiser.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée.</summary>
      <param name="startAddress">Adresse du début du bloc de mémoire à initialiser.</param>
      <param name="value">Valeur sur laquelle initialiser le bloc.</param>
      <param name="byteCount">Nombre d’octets à initialiser.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée sans supposer de l’alignement dépendant de l’architecture de l’adresse.</summary>
      <param name="startAddress">Adresse du début du bloc de mémoire à initialiser.</param>
      <param name="value">Valeur sur laquelle initialiser le bloc.</param>
      <param name="byteCount">Nombre d’octets à initialiser.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Initialise un bloc de mémoire à l’emplacement spécifié avec une valeur initiale donnée sans supposer de l’alignement dépendant de l’architecture de l’adresse.</summary>
      <param name="startAddress">Adresse du début du bloc de mémoire à initialiser.</param>
      <param name="value">Valeur sur laquelle initialiser le bloc.</param>
      <param name="byteCount">Nombre d’octets à initialiser.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Retourne une valeur qui indique si une référence spécifiée est supérieure à une autre référence spécifiée.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <typeparam name="T">Type de la référence.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est supérieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Retourne une valeur qui indique si une référence spécifiée est inférieure à une autre référence spécifiée.</summary>
      <param name="left">Première valeur à comparer.</param>
      <param name="right">Deuxième valeur à comparer.</param>
      <typeparam name="T">Type de la référence.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="left" /> est inférieur à <paramref name="right" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné.</summary>
      <param name="source">Emplacement à partir duquel effectuer la lecture.</param>
      <typeparam name="T">Type à lire.</typeparam>
      <returns>Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="source">Emplacement à partir duquel effectuer la lecture.</param>
      <typeparam name="T">Type à lire.</typeparam>
      <returns>Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Lit une valeur de type <typeparamref name="T" /> à partir de l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="source">Emplacement à partir duquel effectuer la lecture.</param>
      <typeparam name="T">Type à lire.</typeparam>
      <returns>Objet de type <typeparamref name="T" /> lu à partir de l’emplacement donné.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Retourne la taille d’un objet du paramètre de type donné.</summary>
      <typeparam name="T">Type de l’objet dont la taille est récupérée.</typeparam>
      <returns>Taille d’un objet de type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Soustrait un décalage d’élément de la référence donnée.</summary>
      <param name="source">Référence de laquelle soustraire le décalage.</param>
      <param name="elementOffset">Offset à soustraire.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète la soustraction du décalage du pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Soustrait un décalage d’élément de la référence donnée.</summary>
      <param name="source">Référence de laquelle soustraire le décalage.</param>
      <param name="elementOffset">Offset à soustraire.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète la soustraction du décalage du pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Soustrait un offset d’élément du pointeur void donné.</summary>
      <param name="source">Pointeur void duquel soustraire l’offset.</param>
      <param name="elementOffset">Offset à soustraire.</param>
      <typeparam name="T">Type du pointeur void.</typeparam>
      <returns>Nouveau pointeur void qui reflète la soustraction de l’offset par rapport au pointeur spécifié.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Soustrait un décalage d’octet de la référence donnée.</summary>
      <param name="source">Référence de laquelle soustraire le décalage.</param>
      <param name="byteOffset">Offset à soustraire.</param>
      <typeparam name="T">Type de référence.</typeparam>
      <returns>Nouvelle référence qui reflète la soustraction du décalage d’octet du pointeur.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Retourne <see langword="mutable ref" /> à une valeur boxed.</summary>
      <param name="box">Valeur pour laquelle effectuer un unboxing.</param>
      <typeparam name="T">Type qui doit être unboxed.</typeparam>
      <returns>Un <see langword="mutable ref" /> à la valeur boxed <paramref name="box" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> est <see langword="null" /> et <typeparamref name="T" /> est un type de valeur non Nullable.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> n’est pas un type de valeur boxed.

ou -

<paramref name="box" /> n’est pas un <typeparamref name="T" /> boxed.</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> est introuvable.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné.</summary>
      <param name="destination">Emplacement dans lequel écrire.</param>
      <param name="value">Valeur à écrire.</param>
      <typeparam name="T">Type de valeur à écrire.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="destination">Emplacement dans lequel écrire.</param>
      <param name="value">Valeur à écrire.</param>
      <typeparam name="T">Type de valeur à écrire.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Écrit une valeur de type <typeparamref name="T" /> à l’emplacement donné sans supposer de l’alignement dépendant de l’architecture des adresses.</summary>
      <param name="destination">Emplacement dans lequel écrire.</param>
      <param name="value">Valeur à écrire.</param>
      <typeparam name="T">Type de valeur à écrire.</typeparam>
    </member>
  </members>
</doc>
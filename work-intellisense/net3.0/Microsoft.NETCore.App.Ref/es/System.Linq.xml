<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Linq.Enumerable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying objects that implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Proporciona un conjunto de métodos <see langword="static" /> (<see langword="Shared" /> en Visual Basic) para consultar objetos que implementan <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Aplica una función de acumulador a una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> en el que se van a agregar elementos.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Función de acumulador que se va a invocar en cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Aplica una función de acumulador a una secuencia. El valor de inicialización especificado se utiliza como valor de inicio del acumulador.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> en el que se van a agregar elementos.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Función de acumulador que se va a invocar en cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valor del acumulador.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Aplica una función de acumulador a una secuencia. El valor de inicialización especificado se utiliza como valor inicial del acumulador y la función especificada se utiliza para seleccionar el valor resultante.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to aggregate over.">Objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> en el que se van a agregar elementos.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to be invoked on each element.">Función de acumulador que se va a invocar en cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result value.">Función que va a transformar el valor final del acumulador en el valor del resultado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valor del acumulador.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">Tipo del valor resultante.</typeparam>
      <returns vsli:raw="The transformed final accumulator value.">El valor final del acumulador transformado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Determines whether all elements of a sequence satisfy a condition.">Determina si todos los elementos de una secuencia satisfacen una condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to apply the predicate to.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos a los que se va a aplicar el predicado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de la secuencia de origen pasan la prueba del predicado especificado o si la secuencia está vacía; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Determina si una secuencia contiene elementos.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to check for emptiness.">Interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a comprobar si está vacía.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de origen contiene elementos; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Determina si algún elemento de una secuencia satisface una condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to apply the predicate to.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a cuyos elementos se va a aplicar el predicado.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence is not empty and at least one of its elements passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de la secuencia de origen pasa la prueba del predicado especificado; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Appends a value to the end of the sequence.">Anexa un valor al final de la secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values.">Secuencia de valores.</param>
      <param name="element" vsli:raw="The value to append to &lt;paramref name=&quot;source&quot; /&gt;.">Valor que se va a anexar a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A new sequence that ends with &lt;paramref name=&quot;element&quot; /&gt;.">Nueva secuencia que termina en <paramref name="element" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the input typed as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Devuelve la entrada con tipo como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The sequence to type as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Secuencia que se va a tipificar como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The input sequence typed as &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Secuencia de entrada tipada como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Decimal" /> cuyo promedio se va a calcular.</param>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Double" /> cuyo promedio se va a calcular.</param>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int32" /> cuyo promedio se va a calcular.</param>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int64" /> cuyo promedio se va a calcular.</param>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Decimal" /> que admiten valores NULL para calcular el promedio.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Double" /> que admiten valores NULL para calcular el promedio.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int32" /> que admiten valores NULL para calcular el promedio.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int64" /> que admiten valores NULL para calcular el promedio.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Single" /> que admiten valores NULL para calcular el promedio.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Single" /> cuyo promedio se va a calcular.</param>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of source.">Tipo de los elementos de origen.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum of the elements in the sequence is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only values that are &lt;see langword=&quot;null&quot; /&gt;.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene sólo valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary vsli:raw="Casts the elements of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to the specified type.">Convierte los elementos de <see cref="T:System.Collections.IEnumerable" /> en el tipo especificado.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains the elements to be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerable" /> que contiene los elementos que se van a convertir al tipo <paramref name="TResult" />.</param>
      <typeparam name="TResult" vsli:raw="The type to cast the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">Tipo al que se convierten los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains each element of the source sequence cast to the specified type.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene cada elemento de la secuencia de origen convertido al tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Un elemento de la secuencia no se puede convertir al tipo <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Concatena dos secuencias.</summary>
      <param name="first" vsli:raw="The first sequence to concatenate.">Primera secuencia que se va a concatenar.</param>
      <param name="second" vsli:raw="The sequence to concatenate to the first sequence.">Secuencia que se va a concatenar con la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos concatenados de las dos secuencias de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Determina si una secuencia contiene un elemento especificado utilizando el comparador de igualdad predeterminado.</summary>
      <param name="source" vsli:raw="A sequence in which to locate a value.">Secuencia en la que se va a buscar un valor.</param>
      <param name="value" vsli:raw="The value to locate in the sequence.">Valor que se va a buscar en la secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de origen contiene un elemento que tiene el valor especificado; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Determina si una secuencia contiene un elemento especificado utilizando un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> determinado.</summary>
      <param name="source" vsli:raw="A sequence in which to locate a value.">Secuencia en la que se va a buscar un valor.</param>
      <param name="value" vsli:raw="The value to locate in the sequence.">Valor que se va a buscar en la secuencia.</param>
      <param name="comparer" vsli:raw="An equality comparer to compare values.">Comparador de igualdad que va a comparar los valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de origen contiene un elemento que tiene el valor especificado; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Devuelve el número de elementos de una secuencia.</summary>
      <param name="source" vsli:raw="A sequence that contains elements to be counted.">Secuencia que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the input sequence.">El número de elementos de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns a number that represents how many elements in the specified sequence satisfy a condition.">Devuelve un número que representa cuántos elementos de la secuencia especificada satisfacen una condición.</summary>
      <param name="source" vsli:raw="A sequence that contains elements to be tested and counted.">Secuencia que contiene los elementos que se van a probar y contar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A number that represents how many elements in the sequence satisfy the condition in the predicate function.">Un número que representa cuántos elementos de la secuencia especificada satisfacen la condición de la función de predicado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Devuelve los elementos de la secuencia especificada o el valor predeterminado del parámetro de tipo en una colección singleton si la secuencia está vacía.</summary>
      <param name="source" vsli:raw="The sequence to return a default value for if it is empty.">Secuencia para la que se va a devolver un valor predeterminado si está vacía.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; object that contains the default value for the &lt;paramref name=&quot;TSource&quot; /&gt; type if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene el valor predeterminado para el tipo <paramref name="TSource" /> si <paramref name="source" /> está vacío; de lo contrario, es <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Devuelve los elementos de la secuencia especificada o el valor especificado en una colección singleton si la secuencia está vacía.</summary>
      <param name="source" vsli:raw="The sequence to return the specified value for if it is empty.">Secuencia para la que se va a devolver el valor especificado si está vacía.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">Valor que se va a devolver si la secuencia está vacía.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene <paramref name="defaultValue" /> si <paramref name="source" /> está vacío; de lo contrario, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Devuelve diversos elementos de una secuencia utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="source" vsli:raw="The sequence to remove duplicate elements from.">Secuencia de la que se van a quitar los elementos duplicados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains distinct elements from the source sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos distintos de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Devuelve diversos elementos de una secuencia utilizando un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="source" vsli:raw="The sequence to remove duplicate elements from.">Secuencia de la que se van a quitar los elementos duplicados.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains distinct elements from the source sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos distintos de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Devuelve el elemento situado en un índice especificado de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The element at the specified position in the source sequence.">El elemento situado en la posición especificada de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than or equal to the number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="index" /> es menor que 0 o mayor o igual que el número de elementos de <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Devuelve el elemento situado en un índice especificado de una secuencia o un valor predeterminado si el índice está fuera del intervalo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.">
        <see langword="default" />(<paramref name="TSource" />) si el índice está fuera de los límites de la secuencia de origen; de lo contrario, el elemento situado en la posición especificada de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has the specified type argument.">Devuelve una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacía que tiene el argumento de tipo especificado.</summary>
      <typeparam name="TResult" vsli:raw="The type to assign to the type parameter of the returned generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Tipo que se va a asignar al parámetro de tipo de la interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> genérica devuelta.</typeparam>
      <returns vsli:raw="An empty &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose type argument is &lt;paramref name=&quot;TResult&quot; /&gt;.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> vacía cuyo argumento de tipo es <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Proporciona la diferencia de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que no se encuentren en  <paramref name="second" /> se van a devolver.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que también aparecen en la primera secuencia harán que se quiten esos elementos de la secuencia devuelta.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="A sequence that contains the set difference of the elements of two sequences.">Una secuencia que contiene la diferencia de conjuntos de los elementos de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Proporciona la diferencia de conjuntos de dos secuencias utilizando el objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que no se encuentren en  <paramref name="second" /> se van a devolver.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que también aparecen en la primera secuencia harán que se quiten esos elementos de la secuencia devuelta.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="A sequence that contains the set difference of the elements of two sequences.">Una secuencia que contiene la diferencia de conjuntos de los elementos de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Devuelve el primer elemento de una secuencia.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the first element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver el primer elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in the specified sequence.">El primer elemento de la secuencia especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Devuelve el primer elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in the sequence that passes the test in the specified predicate function.">El primer elemento de la secuencia que pasa la prueba de la función de predicado especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
o bien 
La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Devuelve el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the first element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver el primer elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see langword="default" /> (<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, el primer elemento de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Devuelve el primer elemento de la secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see langword="default" /> (<paramref name="TSource" />) si <paramref name="source" /> está vacío o si ningún elemento pasa la prueba especificada en <paramref name="predicate" />; de lo contrario, el primer elemento de <paramref name="source" /> que pasa la prueba especificada en <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">
        <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# o <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic donde cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una secuencia de objetos y una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y compara las claves utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects and a key.">
        <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# o <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic donde cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una colección de objetos y una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y proyecta los elementos de cada grupo utilizando una función determinada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">
        <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# o <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic donde cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una colección de objetos de tipo <paramref name="TElement" /> y una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.">Agrupa los elementos de una secuencia conforme a una función del selector de claves. Las claves se comparan utilizando un comparador y los elementos de cada grupo se proyectan utilizando una función especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a collection of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">
        <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# o <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic donde cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una colección de objetos de tipo <paramref name="TElement" /> y una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Colección de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Las claves se comparan utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys with.">Interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> con la que se van a comparar las claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Colección de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Los elementos de cada grupo se proyectan utilizando una función determinada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Colección de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Los valores de las claves se comparan utilizando un comparador especificado y los elementos de cada grupo se proyectan utilizando una función especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys with.">Interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> con la que se van a comparar las claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection of elements of type &lt;paramref name=&quot;TResult&quot; /&gt; where each element represents a projection over a group and its key.">Colección de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary vsli:raw="Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.">Establece una correlación entre los elementos de dos secuencias en función de la igualdad de sus claves y agrupa los resultados. El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing a grouped join on two sequences.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Establece una correlación entre los elementos de dos secuencias basándose en la igualdad de clave y agrupa los resultados. Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing a grouped join on two sequences.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Proporciona la intersección de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la que se van a devolver los distintos elementos que también aparecen en <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence will be returned.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la que se van a devolver los distintos elementos que también aparecen en la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="A sequence that contains the elements that form the set intersection of two sequences.">Una secuencia que contiene los elementos que forman la intersección de conjuntos de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Proporciona la intersección de conjuntos de dos secuencias utilizando el objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;second&quot; /&gt; will be returned.">Interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la que se van a devolver los distintos elementos que también aparecen en <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence will be returned.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la que se van a devolver los distintos elementos que también aparecen en la primera secuencia.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="A sequence that contains the elements that form the set intersection of two sequences.">Una secuencia que contiene los elementos que forman la intersección de conjuntos de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Establece la correlación de dos secuencias basándose en claves coincidentes. El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing an inner join on two sequences.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que tiene elementos de tipo <paramref name="TResult" /> que se obtienen al realizar una combinación interna de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Establece la correlación de dos secuencias basándose en claves coincidentes. Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; that are obtained by performing an inner join on two sequences.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que tiene elementos de tipo <paramref name="TResult" /> que se obtienen al realizar una combinación interna de dos secuencias.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the last element of a sequence.">Devuelve el último elemento de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the last element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver el último elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value at the last position in the source sequence.">El valor de la última posición de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Devuelve el último elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The last element in the sequence that passes the test in the specified predicate function.">El último elemento de la secuencia que pasa la prueba de la función de predicado especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
O bien 
La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Devuelve el último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the last element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver el último elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the source sequence is empty; otherwise, the last element in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">
        <see langword="default" />(<paramref name="TSource" />) si la secuencia de origen está vacía; de lo contrario, el último elemento de <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Devuelve el último elemento de una secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.">
        <see langword="default" />(<paramref name="TSource" />) si la secuencia está vacía o si ningún elemento pasa la prueba de la función de predicado; en caso contrario, devuelve el último elemento que pasa la prueba de la función de predicado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Devuelve un valor <see cref="T:System.Int64" /> que representa el número total de elementos de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the source sequence.">El número de elementos de la secuencia de origen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">El número de elementos es superior a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents how many elements in a sequence satisfy a condition.">Devuelve un valor <see cref="T:System.Int64" /> que representa el número de elementos de una secuencia que satisfacen una condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A number that represents how many elements in the sequence satisfy the condition in the predicate function.">Un número que representa cuántos elementos de la secuencia especificada satisfacen la condición de la función de predicado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">El número de elementos que coinciden es superior a <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Decimal" /> cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Double" /> cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Int32" /> cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Int64" /> cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Decimal&gt;</c> en C# o <c>Nullable(Of Decimal)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Double&gt;</c> en C# o <c>Nullable(Of Double)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Int32&gt;</c> en C# o <c>Nullable(Of Int32)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Int64&gt;</c> en C# o <c>Nullable(Of Int64)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Returns the maximum value in a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Single&gt;</c> en C# o <c>Nullable(Of Single)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Returns the maximum value in a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Devuelve el valor máximo de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the maximum value of.">Secuencia de valores <see cref="T:System.Single" /> cuyo valor máximo se va a determinar.</param>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic sequence.">Devuelve el valor máximo de una secuencia genérica.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No object in &lt;paramref name=&quot;source&quot; /&gt; implements the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; interface.">Ningún objeto de <paramref name="source" /> implementa la interfaz <see cref="T:System.IComparable" /> o <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Decimal" /> máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Double" /> máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int32" /> máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int64" /> máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Decimal" /> máximo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Decimal&gt;</c> en C# o <c>Nullable(Of Decimal)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Double" /> máximo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Double&gt;</c> en C# o <c>Nullable(Of Double)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int32" /> máximo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Int32&gt;</c> en C# o <c>Nullable(Of Int32)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int64" /> máximo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Int64&gt;</c> en C# o <c>Nullable(Of Int64)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Single" /> máximo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the maximum value in the sequence.">Valor de tipo <c>Nullable&lt;Single&gt;</c> en C# o <c>Nullable(Of Single)</c> en Visual Basic que corresponde al valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the maximum &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Single" /> máximo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.">Invoca una función de transformación en cada elemento de una secuencia genérica y devuelve el valor máximo resultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum value of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Decimal" /> cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Double" /> cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Int32" /> cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Int64" /> cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Decimal&gt;</c> en C# o <c>Nullable(Of Decimal)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Double&gt;</c> en C# o <c>Nullable(Of Double)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Int32&gt;</c> en C# o <c>Nullable(Of Int32)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Int64&gt;</c> en C# o <c>Nullable(Of Int64)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Returns the minimum value in a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="A value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Single&gt;</c> en C# o <c>Nullable(Of Single)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Returns the minimum value in a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Devuelve el valor mínimo de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to determine the minimum value of.">Secuencia de valores <see cref="T:System.Single" /> cuyo valor mínimo se va a determinar.</param>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the minimum value in a generic sequence.">Devuelve el valor mínimo de una secuencia genérica.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No object in &lt;paramref name=&quot;source&quot; /&gt; implements the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; interface.">Ningún objeto de <paramref name="source" /> implementa la interfaz <see cref="T:System.IComparable" /> o <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Decimal" /> mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Double" /> mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int32" /> mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int64" /> mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Decimal" /> mínimo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Decimal&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Decimal)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Decimal&gt;</c> en C# o <c>Nullable(Of Decimal)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Double" /> mínimo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Double&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Double)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Double&gt;</c> en C# o <c>Nullable(Of Double)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int32" /> mínimo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int32)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Int32&gt;</c> en C# o <c>Nullable(Of Int32)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Int64" /> mínimo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Int64&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Int64)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Int64&gt;</c> en C# o <c>Nullable(Of Int64)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Single" /> mínimo que acepta valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value of type &lt;c&gt;Nullable&amp;lt;Single&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;Nullable(Of Single)&lt;/c&gt; in Visual Basic that corresponds to the minimum value in the sequence.">Valor de tipo <c>Nullable&lt;Single&gt;</c> en C# o <c>Nullable(Of Single)</c> en Visual Basic que corresponde al valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Invokes a transform function on each element of a sequence and returns the minimum &lt;see cref=&quot;T:System.Single&quot; /&gt; value.">Invoca una función de transformación en cada elemento de una secuencia y devuelve el valor <see cref="T:System.Single" /> mínimo.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.">Invoca una función de transformación en cada elemento de una secuencia genérica y devuelve el valor mínimo resultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum value of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; based on a specified type.">Filtra los elementos de <see cref="T:System.Collections.IEnumerable" /> en función de un tipo especificado.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements to filter.">
        <see cref="T:System.Collections.IEnumerable" /> cuyos elementos se van a filtrar.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">El tipo según el cual se van a filtrar los elementos de la secuencia.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence of type &lt;paramref name=&quot;TResult&quot; /&gt;.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada de tipo <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Ordena de manera ascendente los elementos de una secuencia en función de una clave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Ordena de manera ascendente los elementos de una secuencia utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Ordena de manera descendente los elementos de una secuencia en función de una clave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Ordena de manera descendente los elementos de una secuencia utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary vsli:raw="Adds a value to the beginning of the sequence.">Agrega un valor al principio de la secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values.">Secuencia de valores.</param>
      <param name="element" vsli:raw="The value to prepend to &lt;paramref name=&quot;source&quot; /&gt;.">Valor para anteponer a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A new sequence that begins with &lt;paramref name=&quot;element&quot; /&gt;.">Nueva secuencia que comienza con <paramref name="element" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary vsli:raw="Generates a sequence of integral numbers within a specified range.">Genera una secuencia de números enteros en un intervalo especificado.</summary>
      <param name="start" vsli:raw="The value of the first integer in the sequence.">Valor del primer entero de la secuencia.</param>
      <param name="count" vsli:raw="The number of sequential integers to generate.">Número de enteros secuenciales que se van a generar.</param>
      <returns vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;Int32&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IEnumerable(Of Int32)&lt;/c&gt; in Visual Basic that contains a range of sequential integral numbers.">
        <c>IEnumerable&lt;Int32&gt;</c> en C# o <c>IEnumerable(Of Int32)</c> en Visual Basic que contiene un intervalo de números enteros secuenciales.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than 0.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; -1 is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="count" /> es menor que 0.  
o bien 
 <paramref name="start" /> + <paramref name="count" /> -1 es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary vsli:raw="Generates a sequence that contains one repeated value.">Genera una secuencia que contiene un valor repetido.</summary>
      <param name="element" vsli:raw="The value to be repeated.">El valor que se va a repetir.</param>
      <param name="count" vsli:raw="The number of times to repeat the value in the generated sequence.">El número de veces que se va a repetir el valor en la secuencia generada.</param>
      <typeparam name="TResult" vsli:raw="The type of the value to be repeated in the result sequence.">El tipo de valor que se va a repetir en la secuencia de resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains a repeated value.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene un valor repetido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="count" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Invierte el orden de los elementos de una secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Secuencia de valores que se va a invertir.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A sequence whose elements correspond to those of the input sequence in reverse order.">Una secuencia cuyos elementos se corresponden en orden inverso con los de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Proyecta cada elemento de una secuencia a un nuevo formulario.</summary>
      <param name="source" vsli:raw="A sequence of values to invoke a transform function on.">Secuencia de valores sobre la que se va a invocar una función de transformación.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar una función de transformación en cada elemento de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Proyecta cada elemento de una secuencia en un nuevo formulario incorporando el índice del elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to invoke a transform function on.">Secuencia de valores sobre la que se va a invocar una función de transformación.</param>
      <param name="selector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Función de transformación que se va a aplicar a cada elemento de origen; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar una función de transformación en cada elemento de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and flattens the resulting sequences into one sequence.">Proyecta cada elemento de una secuencia en una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> y reduce las secuencias resultantes en una secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de los elementos de la secuencia devueltos por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios en cada elemento de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Proyecta cada elemento de una secuencia en una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> y reduce las secuencias resultantes en una secuencia. El índice de cada elemento de origen se utiliza en el formulario proyectado de ese elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Función de transformación que se va a aplicar a cada elemento de origen; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de los elementos de la secuencia devueltos por <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios en cada elemento de una secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.">Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una única secuencia e invoca una función del selector de resultados en cada elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Una función de transformación que se va a aplicar a cada elemento de la secuencia de entrada.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Una función de transformación que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo de los elementos de la secuencia resultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding source element to a result element.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.">Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una única secuencia e invoca una función del selector de resultados en cada elemento. El índice de cada elemento de origen se utiliza en el formulario proyectado intermedio de ese elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each source element; the second parameter of the function represents the index of the source element.">Función de transformación que se va a aplicar a cada elemento de origen; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Una función de transformación que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo de los elementos de la secuencia resultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding source element to a result element.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.">Determina si dos secuencias son iguales; para ello, se comparan sus elementos mediante el comparador de igualdad predeterminado para su tipo.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to &lt;paramref name=&quot;second&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a comparar con <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to the first sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a comparar con la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos secuencias de origen tienen la misma longitud y sus elementos correspondientes son iguales según el comparador de igualdad predeterminado para su tipo; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by comparing their elements by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Determina si dos secuencias son iguales; para ello, compara sus elementos utilizando una interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to &lt;paramref name=&quot;second&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a comparar con <paramref name="second" />.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to compare to the first sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a comparar con la primera secuencia.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar elementos.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal according to &lt;paramref name=&quot;comparer&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos secuencias de origen tienen la misma longitud y sus elementos correspondientes son iguales según <paramref name="comparer" />; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Devuelve el único elemento de una secuencia y produce una excepción si no hay exactamente un elemento en la secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the single element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence.">El único elemento de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The input sequence contains more than one element.&#xA;&#xA; -or-&#xA;&#xA; The input sequence is empty.">La secuencia de entrada contiene más de un elemento.  
 O bien  
 La secuencia de entrada está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Devuelve el único elemento de una secuencia que cumpla una condición especificada y produce una excepción si existe más de un elemento de este tipo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return a single element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies a condition.">El único elemento de la secuencia de entrada que satisface una condición.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
o bien 
Varios elementos satisfacen la condición de <paramref name="predicate" />.  
O bien 
La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Devuelve el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return the single element of.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence, or &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">El único elemento de la secuencia de entrada o <see langword="default" />(<paramref name="TSource" />) si la secuencia no contiene ningún elemento.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The input sequence contains more than one element.">La secuencia de entrada contiene más de un elemento.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Devuelve el único elemento de una secuencia que cumpla la condición especificada, o bien, un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return a single element from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se va a devolver un único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition, or &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">El único elemento de la secuencia de entrada que satisface la condición o <see langword="default" />(<paramref name="TSource" />) si no se encuentra dicho elemento.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Varios elementos satisfacen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Omite un número especificado de elementos en una secuencia y luego devuelve los elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se van a devolver los elementos.</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">Número de elementos que se van a omitir antes de devolver los elementos restantes.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements that occur after the specified index in the input sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que hay después del índice especificado en la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source" vsli:raw="An enumerable collection instance." />
      <param name="count" vsli:raw="The number of elements to omit from the end of the collection." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the enumerable collection." />
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Omite los elementos de una secuencia en tanto que el valor de una condición especificada sea true y luego devuelve los elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se van a devolver los elementos.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada comenzando por el primer elemento de la serie lineal que no pasa la prueba especificada en <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Omite los elementos de una secuencia en tanto que el valor de una condición especificada sea true y luego devuelve los elementos restantes. El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> del que se van a devolver los elementos.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Función que va a probar cada elemento de origen para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada comenzando por el primer elemento de la serie lineal que no pasa la prueba especificada en <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Decimal" /> cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Double" /> cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int32" /> cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int64" /> cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Single" /> cuya suma se va a calcular.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that are obtained by invoking a transform function on each element of the input sequence.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate a sum.">Secuencia de valores que se usan para calcular una suma.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Devuelve un número especificado de elementos contiguos desde el principio de una secuencia.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="count" vsli:raw="The number of elements to return.">Número de elementos que se van a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the specified number of elements from the start of the input sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene el número especificado de elementos desde el principio de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <param name="source" vsli:raw="An enumerable collection instance." />
      <param name="count" vsli:raw="The number of elements to take from the end of the collection." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the enumerable collection." />
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Devuelve los elementos de una secuencia en tanto que el valor de una condición especificada sea true.</summary>
      <param name="source" vsli:raw="A sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from the input sequence that occur before the element at which the test no longer passes.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada que se encuentran antes del elemento que no supera la prueba.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Devuelve los elementos de una secuencia en tanto que el valor de una condición especificada sea true. El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Función que va a probar cada elemento de origen para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that occur before the element at which the test no longer passes.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada que se encuentran antes del elemento que no supera la prueba.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Realiza una clasificación posterior de los elementos de una secuencia en orden ascendentes con arreglo a una clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Realiza una clasificación posterior de los elementos de una secuencia en orden ascendente utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Realiza una clasificación posterior de los elementos de una secuencia en orden descendente con arreglo a una clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Realiza una clasificación posterior de los elementos de una secuencia en orden descendente utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an array from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Crea una matriz a partir de un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create an array from.">Objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear una matriz.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An array that contains the elements from the input sequence.">Una matriz que contiene los elementos de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function.">Crea una clase <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene claves y valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.  
o bien 
 <paramref name="keySelector" /> genera una clave cuyo valor es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">
        <paramref name="keySelector" /> genera claves duplicadas para dos elementos.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function and key comparer.">Crea un objeto <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves especificada y el comparador de claves.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de las claves devueltas por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene claves y valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.  
O bien 
 <paramref name="keySelector" /> genera una clave cuyo valor es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">
        <paramref name="keySelector" /> genera claves duplicadas para dos elementos.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to specified key selector and element selector functions.">Crea un objeto <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según el selector de claves especificado y las funciones del selector de elementos.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.  
O bien 
 <paramref name="keySelector" /> genera una clave cuyo valor es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">
        <paramref name="keySelector" /> genera claves duplicadas para dos elementos.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function, a comparer, and an element selector function.">Crea un objeto <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves especificada, un comparador y una función del selector de elementos.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;keySelector&quot; /&gt; produces a key that is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.  
o bien 
 <paramref name="keySelector" /> genera una clave cuyo valor es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;keySelector&quot; /&gt; produces duplicate keys for two elements.">
        <paramref name="keySelector" /> genera claves duplicadas para dos elementos.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Crea un <see cref="T:System.Collections.Generic.HashSet`1" /> a partir de un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; that contains values of type &lt;paramref name=&quot;TSource&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> que contiene valores de tipo TSource seleccionados en la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; using the &lt;paramref name=&quot;comparer&quot; /&gt; to compare keys.">Crea un <see cref="T:System.Collections.Generic.HashSet`1" /> a partir de un <see cref="T:System.Collections.Generic.IEnumerable`1" /> mediante <paramref name="comparer" /> para comparar claves.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del que se va a crear un <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; that contains values of type &lt;paramref name=&quot;TSource&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> que contiene valores de tipo <paramref name="TSource" /> seleccionados en la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">Crea un <see cref="T:System.Collections.Generic.List`1" /> a partir de un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains elements from the input sequence.">
        <see cref="T:System.Collections.Generic.List`1" /> que contiene los elementos de la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function.">Crea una clase <see cref="T:System.Linq.Lookup`2" /> a partir de una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves especificada.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.Lookup`2" /> que contiene claves y valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function and key comparer.">Crea un objeto <see cref="T:System.Linq.Lookup`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves especificada y el comparador de claves.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains keys and values. The values within each group are in the same order as in &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.Lookup`2" /> que contiene claves y valores.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to specified key selector and element selector functions.">Crea un objeto <see cref="T:System.Linq.Lookup`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según el selector de claves especificado y las funciones del selector de elementos.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Linq.Lookup`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; according to a specified key selector function, a comparer and an element selector function.">Crea un objeto <see cref="T:System.Linq.Lookup`2" /> a partir de un objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> según una función del selector de claves, un comparador y una función del selector de elementos especificados.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to create a &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; from.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> a partir del cual se va a crear <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A transform function to produce a result element value from each element.">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the value returned by &lt;paramref name=&quot;elementSelector&quot; /&gt;.">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt; that contains values of type &lt;paramref name=&quot;TElement&quot; /&gt; selected from the input sequence.">
        <see cref="T:System.Linq.Lookup`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Proporciona la unión de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the first set for the union.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos distintos forman el primer conjunto de la unión.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the second set for the union.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos distintos forman el segundo conjunto de la unión.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Proporciona la unión de conjuntos de dos secuencias a través de un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="first" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the first set for the union.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos distintos forman el primer conjunto de la unión.</param>
      <param name="second" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements form the second set for the union.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos distintos forman el segundo conjunto de la unión.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a comparar los valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra una secuencia de valores en función de un predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to filter.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a filtrar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada que satisfacen la condición.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Filtra una secuencia de valores en función de un predicado. El índice de cada elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to filter.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a filtrar.</param>
      <param name="predicate" vsli:raw="A function to test each source element for a condition; the second parameter of the function represents the index of the source element.">Función que va a probar cada elemento de origen para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos de la secuencia de entrada que satisfacen la condición.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Genera una secuencia de tuplas con elementos a partir de las dos secuencias especificadas.</summary>
      <param name="first" vsli:raw="The first sequence to merge.">Primera secuencia que se va a combinar.</param>
      <param name="second" vsli:raw="The second sequence to merge.">Segunda secuencia que se va a combinar.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo de los elementos de la primera secuencia de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo de los elementos de la segunda secuencia de entrada.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Secuencia de tuplas con elementos tomados de la primera y la segunda secuencia, en ese orden.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary vsli:raw="Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.">Aplica la función especificada a los elementos correspondientes de dos secuencias, lo que genera una secuencia de resultados.</summary>
      <param name="first" vsli:raw="The first sequence to merge.">Primera secuencia que se va a combinar.</param>
      <param name="second" vsli:raw="The second sequence to merge.">Segunda secuencia que se va a combinar.</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Función que especifica cómo combinar los elementos de las dos secuencias.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo de los elementos de la primera secuencia de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo de los elementos de la segunda secuencia de entrada.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">Tipo de los elementos de la secuencia de resultados.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains merged elements of two input sequences.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene elementos combinados de las dos secuencias de entrada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;first&quot; /&gt; or &lt;paramref name=&quot;second&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="first" /> o <paramref name="second" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary vsli:raw="Represents a collection of objects that have a common key.">Representa una colección de objetos que tienen una clave común.</summary>
      <typeparam name="TKey" vsli:raw="The type of the key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de la clave de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the values in the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los valores de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary vsli:raw="Gets the key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Obtiene la clave del objeto <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns vsli:raw="The key of the &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Clave de <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary vsli:raw="Defines an indexer, size property, and Boolean search method for data structures that map keys to &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequences of values.">Define un indizador, propiedad de tamaño y método de búsqueda booleano para las estructuras de datos que asignan las claves a las secuencias de valores <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Tipo de las claves de <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequences that make up the values in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">El tipo de los elementos de la secuencia <see cref="T:System.Collections.Generic.IEnumerable`1" /> que conforman los valores de <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary vsli:raw="Determines whether a specified key exists in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Determina si una clave especificada existe en <see cref="T:System.Linq.ILookup`2" />.</summary>
      <param name="key" vsli:raw="The key to search for in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">La clave que se va a buscar en la colección <see cref="T:System.Linq.ILookup`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="key" /> se encuentra en <see cref="T:System.Linq.ILookup`2" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary vsli:raw="Gets the number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Obtiene el número de pares de colecciones de claves y valores en el objeto <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns vsli:raw="The number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.ILookup`2&quot; /&gt;.">Número de pares de colecciones de claves y valores en el objeto <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequence of values indexed by a specified key.">Obtiene la secuencia de valores <see cref="T:System.Collections.Generic.IEnumerable`1" /> indizada por una clave concreta.</summary>
      <param name="key" vsli:raw="The key of the desired sequence of values.">Clave de la secuencia deseada de valores.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; sequence of values indexed by the specified key.">La secuencia de valores <see cref="T:System.Collections.Generic.IEnumerable`1" /> indizada por la clave especificada.</returns>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary vsli:raw="Represents a sorted sequence.">Representa una secuencia ordenada.</summary>
      <typeparam name="TElement" vsli:raw="The type of the elements of the sequence.">Tipo de los elementos de la secuencia.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary vsli:raw="Performs a subsequent ordering on the elements of an &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; according to a key.">Realiza una ordenación subsiguiente de los elementos de un objeto <see cref="T:System.Linq.IOrderedEnumerable`1" /> según una clave.</summary>
      <param name="keySelector" vsli:raw="The &lt;see cref=&quot;T:System.Func`2&quot; /&gt; used to extract the key for each element.">Se utiliza <see cref="T:System.Func`2" /> para extraer la clave de cada elemento.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to compare keys for placement in the returned sequence.">Comparador <see cref="T:System.Collections.Generic.IComparer`1" /> utilizado para comparar las claves de cara a su colocación en la secuencia devuelta.</param>
      <param name="descending" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to sort the elements in descending order; &lt;see langword=&quot;false&quot; /&gt; to sort the elements in ascending order.">Es <see langword="true" /> para ordenar los elementos en orden descendente; es <see langword="false" /> para ordenar los elementos en orden ascendente.</param>
      <typeparam name="TKey" vsli:raw="The type of the key produced by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave generada por <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedEnumerable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedEnumerable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary vsli:raw="Represents a collection of keys each mapped to one or more values.">Representa una colección de claves asignadas a uno o varios valores.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Tipo de las claves de <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements of each &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; value in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Tipo de los elementos de cada valor <see cref="T:System.Collections.Generic.IEnumerable`1" /> en <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary vsli:raw="Applies a transform function to each key and its associated values and returns the results.">Aplica una función de transformación a cada clave y sus valores asociados, y devuelve los resultados.</summary>
      <param name="resultSelector" vsli:raw="A function to project a result value from each key and its associated values.">Función para proyectar un valor de resultado de cada clave y sus valores asociados.</param>
      <typeparam name="TResult" vsli:raw="The type of the result values produced by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo de los valores de resultado generados por <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="A collection that contains one value for each key/value collection pair in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Colección que contiene un valor para cada par de colecciones de claves y valores en el objeto <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary vsli:raw="Determines whether a specified key is in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Determina si la clave especificada está en el objeto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <param name="key" vsli:raw="The key to find in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Clave que se va a buscar en <see cref="T:System.Linq.Lookup`2" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="key" /> se encuentra en <see cref="T:System.Linq.Lookup`2" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary vsli:raw="Gets the number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Obtiene el número de pares de colecciones de claves y valores en el objeto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns vsli:raw="The number of key/value collection pairs in the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Número de pares de colecciones de claves y valores en el objeto <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary vsli:raw="Returns a generic enumerator that iterates through the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Devuelve un enumerador genérico que recorre en iteración el objeto <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Enumerador para <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary vsli:raw="Gets the collection of values indexed by the specified key.">Obtiene la colección de valores indexados por la clave especificada.</summary>
      <param name="key" vsli:raw="The key of the desired collection of values.">Clave de la colección de valores deseada.</param>
      <returns vsli:raw="The collection of values indexed by the specified key.">Colección de valores indexados por la clave especificada.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;. This class cannot be inherited.">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Linq.Lookup`2" />. Esta clase no puede heredarse.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Linq.Lookup`2&quot; /&gt;.">Enumerador para <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
  </members>
</doc>
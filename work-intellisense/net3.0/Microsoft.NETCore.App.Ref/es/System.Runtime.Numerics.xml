<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary vsli:raw="Represents an arbitrarily large signed integer.">Representa un entero con signo arbitrariamente grande.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using the values in a byte array.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando los valores de una matriz de bytes.</summary>
      <param name="value" vsli:raw="An array of byte values in little-endian order.">Matriz de valores de byte en orden little-endian.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="A decimal number.">Número decimal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a double-precision floating-point value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor de punto flotante de precisión doble.</summary>
      <param name="value" vsli:raw="A double-precision floating-point value.">Valor de punto flotante de precisión doble.</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> es <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 32-bit signed integer value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> usando un valor entero de 32 bits con signo.</summary>
      <param name="value" vsli:raw="A 32-bit signed integer.">Entero de 32 bits con signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 64-bit signed integer value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> usando un valor entero de 64 bits con signo.</summary>
      <param name="value" vsli:raw="A 64-bit signed integer.">Entero de 64 bits con signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <param name="value" vsli:raw="A read-only span of bytes representing the big integer." />
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; uses unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt; (the default value)." />
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; is in big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;  (the default value)." />
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a single-precision floating-point value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor de punto flotante de precisión sencilla.</summary>
      <param name="value" vsli:raw="A single-precision floating-point value.">Valor de punto flotante de precisión sencilla.</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> es <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using an unsigned 32-bit integer value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor entero de 32 bits sin signo.</summary>
      <param name="value" vsli:raw="An unsigned 32-bit integer value.">Valor entero de 32 bits sin signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure with an unsigned 64-bit integer value.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> con un valor entero de 64 bits sin signo.</summary>
      <param name="value" vsli:raw="An unsigned 64-bit integer.">Entero de 64 bits sin signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary vsli:raw="Gets the absolute value of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Obtiene el valor absoluto de un objeto <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="A number.">Un número.</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">Valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the result.">Suma dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The first value to add.">Primer valor que se va a sumar.</param>
      <param name="right" vsli:raw="The second value to add.">Segundo valor que se va a sumar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.">Compara dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve un entero que indica si el primer valor es menor, igual o mayor que el segundo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; equals &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entero con signo que indica los valores relativos de <paramref name="left" /> y <paramref name="right" />, como se muestra en la tabla siguiente.  
  Valor 
  Condición 
  Menor que cero 
 <paramref name="left" /> es menor que <paramref name="right" />.  

  Cero 
 <paramref name="left" /> es igual que <paramref name="right" />.  

  Mayor que cero 
 <paramref name="left" /> es mayor que <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary vsli:raw="Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.">Compara esta instancia con un entero de 64 bits con signo y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del entero de 64 bits con signo.</summary>
      <param name="other" vsli:raw="The signed 64-bit integer to compare.">Entero de 64 bits con signo que se va a comparar.</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Valor entero con signo que indica la relación de esta instancia con <paramref name="other" />, como se muestra en la tabla siguiente.  
  Valor devuelto 
  Descripción 
  Menor que cero 
  La instancia actual es menor que <paramref name="other" />.  

  Cero 
  La instancia actual es igual que <paramref name="other" />.  

  Mayor que cero 
  La instancia actual es mayor que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary vsli:raw="Compares this instance to a second &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">Compara esta instancia con un segundo <see cref="T:System.Numerics.BigInteger" /> y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del objeto especificado.</summary>
      <param name="other" vsli:raw="The object to compare.">Objeto que se va a comparar.</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Valor entero con signo que indica la relación de esta instancia con <paramref name="other" />, como se muestra en la tabla siguiente.  
  Valor devuelto 
  Descripción 
  Menor que cero 
  La instancia actual es menor que <paramref name="other" />.  

  Cero 
  La instancia actual es igual que <paramref name="other" />.  

  Mayor que cero 
  La instancia actual es mayor que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary vsli:raw="Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">Compara esta instancia con un objeto especificado y devuelve un entero que indica si el valor de esta instancia es mayor, igual o menor que el valor del objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objeto que se va a comparar.</param>
      <returns vsli:raw="A signed integer that indicates the relationship of the current instance to the &lt;paramref name=&quot;obj&quot; /&gt; parameter, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;obj&quot; /&gt;, or the &lt;paramref name=&quot;obj&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entero con signo que indica la relación de la instancia actual con el parámetro <paramref name="obj" />, como se muestra en la tabla siguiente.  
  Valor devuelto 
  Descripción 
  Menor que cero 
  La instancia actual es menor que <paramref name="obj" />.  

  Cero 
  La instancia actual es igual que <paramref name="obj" />.  

  Mayor que cero 
  La instancia actual es mayor que <paramref name="obj" /> o el parámetro <paramref name="obj" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">
        <paramref name="obj" /> no es un <see cref="T:System.Numerics.BigInteger" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary vsli:raw="Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.">Compara esta instancia con un entero de 64 bits sin signo y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del entero de 64 bits sin signo.</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">Entero de 64 bits sin signo que se va a comparar.</param>
      <returns vsli:raw="A signed integer that indicates the relative value of this instance and &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.&#xA;          &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt;Return value&lt;/term&gt;&lt;description&gt;Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;Less than zero&lt;/term&gt;&lt;description&gt;The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Zero&lt;/term&gt;&lt;description&gt;The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Greater than zero&lt;/term&gt;&lt;description&gt;The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Entero con signo que indica el valor relativo de esta instancia y <paramref name="other" />, como se muestra en la tabla siguiente.  
  Valor devuelto 
  Descripción 
  Menor que cero 
  La instancia actual es menor que <paramref name="other" />.  

  Cero 
  La instancia actual es igual que <paramref name="other" />.  

  Mayor que cero 
  La instancia actual es mayor que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another and returns the result.">Divide un valor <see cref="T:System.Numerics.BigInteger" /> por otro y devuelve el resultado.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">Valor que se va a dividir.</param>
      <param name="divisor" vsli:raw="The value to divide by.">Valor por el que se va a dividir.</param>
      <returns vsli:raw="The quotient of the division.">Cociente de la división.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another, returns the result, and returns the remainder in an output parameter.">Divide un valor <see cref="T:System.Numerics.BigInteger" /> por otro, devuelve el resultado y devuelve el resto en un parámetro de salida.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">Valor que se va a dividir.</param>
      <param name="divisor" vsli:raw="The value to divide by.">Valor por el que se va a dividir.</param>
      <param name="remainder" vsli:raw="When this method returns, contains a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value that represents the remainder from the division. This parameter is passed uninitialized.">Cuando este método devuelve un valor, contiene <see cref="T:System.Numerics.BigInteger" />, que representa el resto de la división. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="The quotient of the division.">Cociente de la división.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.">Devuelve un valor que indica si la instancia actual y un entero de 64 bits con signo tienen el mismo valor.</summary>
      <param name="other" vsli:raw="The signed 64-bit integer value to compare.">Valor entero de 64 bits con signo que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the signed 64-bit integer and the current instance have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el entero de 64 bits con signo y la instancia actual tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object have the same value.">Devuelve un valor que indica si la instancia actual y un objeto <see cref="T:System.Numerics.BigInteger" /> especificado tienen el mismo valor.</summary>
      <param name="other" vsli:raw="The object to compare.">Objeto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si este objeto <see cref="T:System.Numerics.BigInteger" /> y <paramref name="other" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">Devuelve un valor que indica si la instancia actual y un objeto especificado tienen el mismo valor.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objeto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; argument is a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, and its value is equal to the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el argumento <paramref name="obj" /> es un objeto <see cref="T:System.Numerics.BigInteger" /> y su valor es igual al valor de la instancia <see cref="T:System.Numerics.BigInteger" /> actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.">Devuelve un valor que indica si la instancia actual y un entero de 64 bits sin signo tienen el mismo valor.</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">Entero de 64 bits sin signo que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and the unsigned 64-bit integer have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la instancia actual y el entero de 64 bits sin signo tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary vsli:raw="Gets the number of bytes that will be output by &lt;see cref=&quot;M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)&quot; /&gt; and &lt;see cref=&quot;M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)&quot; /&gt;.">Obtiene el número de bytes que <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> y <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> van a generar.</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="The number of bytes.">Número de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Devuelve el código hash del objeto <see cref="T:System.Numerics.BigInteger" /> actual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Finds the greatest common divisor of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Busca el máximo común divisor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">Primer valor.</param>
      <param name="right" vsli:raw="The second value.">Segundo valor.</param>
      <returns vsli:raw="The greatest common divisor of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Máximo común divisor de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number.">Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es un número par.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es un número par; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;.">Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es <see cref="P:System.Numerics.BigInteger.One" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two.">Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es una potencia de dos.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es una potencia de dos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;.">Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es <see cref="P:System.Numerics.BigInteger.Zero" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified number.">Devuelve el logaritmo natural (en base <see langword="e" />) de un número especificado.</summary>
      <param name="value" vsli:raw="The number whose logarithm is to be found.">Número cuyo logaritmo se va a calcular.</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">Logaritmo natural (base <see langword="e" />) de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The natural log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">El logaritmo natural de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified number in a specified base.">Devuelve el logaritmo de un número especificado en una base determinada.</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">Número cuyo logaritmo hay que calcular.</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">Base del logaritmo.</param>
      <returns vsli:raw="The base &lt;paramref name=&quot;baseValue&quot; /&gt; logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">Logaritmo en base <paramref name="baseValue" /> de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">El logaritmo de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the base 10 logarithm of a specified number.">Devuelve el logaritmo en base 10 de un número especificado.</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">Número cuyo logaritmo hay que calcular.</param>
      <returns vsli:raw="The base 10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">Logaritmo en base 10 de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The base 10 log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">El logaritmo en base 10 de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the larger of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Devuelve el mayor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is larger.">Parámetro <paramref name="left" /> o <paramref name="right" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the smaller of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Devuelve el menor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is smaller.">Parámetro <paramref name="left" /> o <paramref name="right" />, el que sea menor.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary vsli:raw="Gets a value that represents the number negative one (-1).">Obtiene un valor que representa menos uno (-1).</summary>
      <returns vsli:raw="An integer whose value is negative one (-1).">Entero cuyo valor es menos uno (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs modulus division on a number raised to the power of another number.">Realiza una división de módulo en un número elevado a la potencia de otro número.</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">Número que se va a elevar a la potencia especificada por <paramref name="exponent" />.</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">Exponente al que se va a elevar <paramref name="value" />.</param>
      <param name="modulus" vsli:raw="The number by which to divide &lt;paramref name=&quot;value&quot; /&gt; raised to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">Especifica el número por el que dividir <paramref name="value" /> elevado a la potencia <paramref name="exponent" />.</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;value&quot; /&gt;exponent by &lt;paramref name=&quot;modulus&quot; /&gt;.">Resto después de dividir <paramref name="value" />exponent por <paramref name="modulus" />.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;modulus&quot; /&gt; is zero.">
        <paramref name="modulus" /> es cero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> es negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the product of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Devuelve el producto de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first number to multiply.">El primer número que se va a multiplicar.</param>
      <param name="right" vsli:raw="The second number to multiply.">El segundo número que se va a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Crea el negativo de un valor <see cref="T:System.Numerics.BigInteger" /> especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">Valor que se va a negar.</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">Resultado del parámetro <paramref name="value" /> multiplicado por menos uno (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary vsli:raw="Gets a value that represents the number one (1).">Obtiene un valor que representa el número uno (1).</summary>
      <returns vsli:raw="An object whose value is one (1).">Objeto cuyo valor es uno (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds the values of two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects.">Suma los valores de dos objetos <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left" vsli:raw="The first value to add.">Primer valor que se va a sumar.</param>
      <param name="right" vsli:raw="The second value to add.">Segundo valor que se va a sumar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Realiza una operación <see langword="And" /> bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">Primer valor.</param>
      <param name="right" vsli:raw="The second value.">Segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;And&quot; /&gt; operation.">Resultado de la operación <see langword="And" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Realiza una operación <see langword="Or" /> bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">Primer valor.</param>
      <param name="right" vsli:raw="The second value.">Segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">Resultado de la operación <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary vsli:raw="Decrements a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">Disminuye un valor <see cref="T:System.Numerics.BigInteger" /> en 1.</summary>
      <param name="value" vsli:raw="The value to decrement.">Valor que se va a disminuir.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter decremented by 1.">Valor del parámetro <paramref name="value" /> disminuido en 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by using integer division.">Divide un valor <see cref="T:System.Numerics.BigInteger" /> especificado por otro valor <see cref="T:System.Numerics.BigInteger" /> indicado utilizando división de enteros.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">Valor que se va a dividir.</param>
      <param name="divisor" vsli:raw="The value to divide by.">Valor por el que se va a dividir.</param>
      <returns vsli:raw="The integral result of the division.">Resultado entero de la división.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a signed long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">Devuelve un valor que indica si un valor entero long con signo y un valor <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a signed long integer value are equal.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor entero long con signo son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the values of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects are equal.">Devuelve un valor que indica si los valores de dos objetos <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and an unsigned long integer value are equal.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor entero long sin signo son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether an unsigned long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">Devuelve un valor que indica si un valor entero long sin signo y un valor <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise exclusive &lt;see langword=&quot;Or&quot; /&gt; (&lt;see langword=&quot;XOr&quot; /&gt;) operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Realiza una operación exclusiva <see langword="Or" /> (<see langword="XOr" />) bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">Primer valor.</param>
      <param name="right" vsli:raw="The second value.">Segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">Resultado de la operación <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión explícita de un objeto <see cref="T:System.Decimal" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Double&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión explícita de un valor <see cref="T:System.Double" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> es <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned byte value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de byte sin signo.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Byte" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Decimal" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Double" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 16-bit signed integer value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 16 bits con signo.</summary>
      <param name="value" vsli:raw="The value to convert to a 16-bit signed integer.">Valor que se va a convertir en un entero de 16 bits con signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MinValue" /> o menor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 32-bit signed integer value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 32 bits con signo.</summary>
      <param name="value" vsli:raw="The value to convert to a 32-bit signed integer.">Valor que se va a convertir en un entero de 32 bits con signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MinValue" /> o menor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 64-bit signed integer value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 64 bits con signo.</summary>
      <param name="value" vsli:raw="The value to convert to a 64-bit signed integer.">Valor que se va a convertir en un entero de 64 bits con signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MinValue" /> o menor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a signed 8-bit value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de 8 bits con signo.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="The value to convert to a signed 8-bit value.">Valor que se va a convertir en un valor de 8 bits con signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MinValue" /> o menor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a single-precision floating-point value.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de punto flotante de precisión sencilla.</summary>
      <param name="value" vsli:raw="The value to convert to a single-precision floating-point value.">Valor que se va a convertir en un valor de punto flotante de precisión sencilla.</param>
      <returns vsli:raw="An object that contains the closest possible representation of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene la representación más cercana del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 16-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 16 bits sin signo.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 16-bit integer.">Valor que se va a convertir en un entero de 16 bits sin signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MinValue" /> o menor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 32-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 32 bits sin signo.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 32-bit integer.">Valor que se va a convertir en un entero de 32 bits sin signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt32.MinValue" /> o menor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 64-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 64 bits sin signo.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 64-bit integer.">Valor que se va a convertir en un entero de 64 bits sin signo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt64.MinValue" /> o menor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Single&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión explícita de un valor <see cref="T:System.Single" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> es <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits con signo es mayor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; is greater than a 64-bit signed integer value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un valor entero de 64 bits con signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un entero de 64 bits sin signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un entero de 64 bits sin signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits con signo es mayor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit signed integer value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que un valor entero de 64 bits con signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit unsigned integer value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que un valor entero de 64 bits sin signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits sin signo es mayor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión implícita de un byte sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 16-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión implícita de un entero de 16 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 32-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión implícita de un entero de 32 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 64-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define una conversión implícita de un entero de 64 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an 8-bit signed integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.#ctor(System.Int32)&quot; /&gt;.">Define una conversión implícita de un entero de 8 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger&quot; /&gt;.">Define una conversión implícita de un entero de 16 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger&quot; /&gt;.">Define una conversión implícita de un entero de 32 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Define una conversión implícita de un entero de 64 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary vsli:raw="Increments a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">Aumenta un valor <see cref="T:System.Numerics.BigInteger" /> en 1.</summary>
      <param name="value" vsli:raw="The value to increment.">Valor que se va a aumentar.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter incremented by 1.">Valor del parámetro <paramref name="value" /> aumentado en 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">Devuelve un valor que indica si un entero de 64 bits con signo y un valor <see cref="T:System.Numerics.BigInteger" /> no son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit signed integer are not equal.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor de 64 bits con signo no son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects have different values.">Devuelve un valor que indica si dos objetos <see cref="T:System.Numerics.BigInteger" /> tienen valores diferentes.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit unsigned integer are not equal.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor de 64 bits sin signo no son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">Devuelve un valor que indica si un entero de 64 bits sin signo y un valor <see cref="T:System.Numerics.BigInteger" /> no son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the left.">Desplaza un valor <see cref="T:System.Numerics.BigInteger" /> un número especificado de bits a la izquierda.</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">Valor cuyos bits se van a desplazar.</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the left.">Número de bits que se va a desplazar <paramref name="value" /> a la izquierda.</param>
      <returns vsli:raw="A value that has been shifted to the left by the specified number of bits.">Valor que se ha desplazado a la izquierda el número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits con signo es menor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit signed integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que un entero de 64 bits con signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit unsigned integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que un entero de 64 bits sin signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits sin signo es menor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits con signo es menor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit signed integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que un entero de 64 bits con signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit unsigned integer.">Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que un entero de 64 bits sin signo.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve un valor que indica si un entero de 64 bits sin signo es menor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the remainder that results from division with two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Devuelve el resto que se obtiene al dividir dos valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">Valor que se va a dividir.</param>
      <param name="divisor" vsli:raw="The value to divide by.">Valor por el que se va a dividir.</param>
      <returns vsli:raw="The remainder that results from the division.">Resto que es el resultado de la división.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Multiplies two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Multiplica dos valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left" vsli:raw="The first value to multiply.">Primer valor que se va a multiplicar.</param>
      <param name="right" vsli:raw="The second value to multiply.">Segundo valor que se va a multiplicar.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Producto de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the bitwise one's complement of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Devuelve el complemento de uno bit a bit de un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="An integer value.">Valor de entero.</param>
      <returns vsli:raw="The bitwise one's complement of &lt;paramref name=&quot;value&quot; /&gt;.">Complemento de uno bit a bit de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the right.">Desplaza un valor <see cref="T:System.Numerics.BigInteger" /> un número especificado de bits a la derecha.</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">Valor cuyos bits se van a desplazar.</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the right.">Número de bits que se va a desplazar <paramref name="value" /> a la derecha.</param>
      <returns vsli:raw="A value that has been shifted to the right by the specified number of bits.">Valor que se ha desplazado a la derecha el número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Resta un valor <see cref="T:System.Numerics.BigInteger" /> de otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">Valor del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">Valor que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified BigInteger value.">Crea el negativo de un valor BigInteger especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">Valor que se va a negar.</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">Resultado del parámetro <paramref name="value" /> multiplicado por menos uno (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; operand. (The sign of the operand is unchanged.)">Devuelve el valor del operando <see cref="T:System.Numerics.BigInteger" />. (El signo del operando no cambia).</summary>
      <param name="value" vsli:raw="An integer value.">Valor de entero.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; operand.">Valor del operando <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="value" vsli:raw="A read-only span of characters that contains the number to convert." />
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary vsli:raw="Converts the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Convierte la representación en forma de cadena de un número en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains the number to convert.">Cadena que contiene el número que se va a convertir.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> no tiene el formato correcto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary vsli:raw="Converts the string representation of a number in a specified style to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Convierte la representación de cadena de un número con un estilo especificado en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Cadena que contiene un número que se va a convertir.</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
O bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt;.">
        <paramref name="value" /> no cumple el modelo de entrada especificado por <see cref="T:System.Globalization.NumberStyles" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Convierte la representación de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en su equivalente de <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Cadena que contiene un número que se va a convertir.</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="value" />.</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
O bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;paramref name=&quot;style&quot; /&gt;.">
        <paramref name="value" /> no cumple el modelo de entrada especificado por <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Convierte la representación en forma de cadena de un número con el formato específico de la referencia cultural indicada en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Cadena que contiene un número que se va a convertir.</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> no tiene el formato correcto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to the power of a specified value.">Eleva un valor <see cref="T:System.Numerics.BigInteger" /> a la potencia del valor especificado.</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">Número que se va a elevar a la potencia especificada por <paramref name="exponent" />.</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">Exponente al que se va a elevar <paramref name="value" />.</param>
      <returns vsli:raw="The result of raising &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">Resultado de elevar <paramref name="value" /> a la potencia <paramref name="exponent" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> es negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs integer division on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the remainder.">Realiza la división entera en dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve el resto.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">Valor que se va a dividir.</param>
      <param name="divisor" vsli:raw="The value to divide by.">Valor por el que se va a dividir.</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;dividend&quot; /&gt; by &lt;paramref name=&quot;divisor&quot; /&gt;.">Resto después de dividir <paramref name="dividend" /> por <paramref name="divisor" />.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary vsli:raw="Gets a number that indicates the sign (negative, positive, or zero) of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Obtiene un número que indica el signo (negativo, positivo o cero) del objeto <see cref="T:System.Numerics.BigInteger" /> actual.</summary>
      <returns vsli:raw="A number that indicates the sign of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Number&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; -1&lt;/term&gt;&lt;description&gt; The value of this object is negative.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 0&lt;/term&gt;&lt;description&gt; The value of this object is 0 (zero).&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 1&lt;/term&gt;&lt;description&gt; The value of this object is positive.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Número que indica el signo del objeto <see cref="T:System.Numerics.BigInteger" />, como se muestra en la tabla siguiente.  
  número 
  Descripción 
  -1 
  El valor de este objeto es negativo.  

  0 
  El valor de este objeto es 0 (cero).  

  1 
  El valor de este objeto es positivo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another and returns the result.">Resta un valor <see cref="T:System.Numerics.BigInteger" /> de otro y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">Valor del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">Valor que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a byte array.">Convierte un valor <see cref="T:System.Numerics.BigInteger" /> en una matriz de bytes.</summary>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">Valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual convertido en una matriz de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as a byte array using the fewest number of bytes possible. If the value is zero, returns an array of one byte whose element is 0x00.">Devuelve el valor de este objeto <see cref="T:System.Numerics.BigInteger" /> como una matriz de bytes usando el menor número de bytes posible. Si el valor es cero, devuelve una matriz de un byte cuyo elemento es 0x00.</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para escribir los bytes en un orden de bytes big endian; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">Valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual convertido en una matriz de bytes.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="If &lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">Si <paramref name="isUnsigned" /> es <see langword="true" /> y <see cref="P:System.Numerics.BigInteger.Sign" /> es negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation.">Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente.</summary>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified culture-specific formatting information.">Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;provider&quot; /&gt; parameter.">Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual en el formato especificado por el parámetro <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format.">Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente con el formato especificado.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Cadena de formato numérico estándar o personalizada.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;format&quot; /&gt; parameter.">Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual en el formato especificado por el parámetro <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format and culture-specific format information.">Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente usando el formato especificado y la información de formato específica de la referencia cultural.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value as specified by the &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt; parameters.">Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual, tal como la especifican los parámetros <paramref name="format" /> y <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" vsli:raw="The span of characters into which this instance will be written." />
      <param name="charsWritten" vsli:raw="When the method returns, contains the length of the span in number of characters." />
      <param name="format" vsli:raw="A read-only span of characters that specifies the format for the formatting operation." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not of the correct format. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">Intenta convertir la representación de cadena de un número con un estilo específico y un formato específico de la referencia cultural en su equivalente de <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión fue correcta.</summary>
      <param name="value" vsli:raw="The string representation of a number. The string is interpreted using the style specified by &lt;paramref name=&quot;style&quot; /&gt;.">Representación de cadena de un número. La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;.">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="value" />. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="value" />.</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized.">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o <see cref="P:System.Numerics.BigInteger.Zero" /> si se produjo un error en la conversión. Se produce un error en la conversión si el parámetro <paramref name="value" /> es <see langword="null" /> o no tiene un formato conforme a <paramref name="style" />. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">Intenta convertir la representación en forma de cadena de un número en su equivalente <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <param name="value" vsli:raw="The string representation of a number.">Representación de cadena de un número.</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not of the correct format. This parameter is passed uninitialized.">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o cero (0) si se produce un error en la conversión. Se produce un error en la conversión si el parámetro <paramref name="value" /> es <see langword="null" /> o no tiene el formato correcto. Este parámetro se pasa sin inicializar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value" /> se convirtió correctamente; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary vsli:raw="Copies the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as little-endian twos-complement bytes, using the fewest number of bytes possible. If the value is zero, outputs one byte whose element is 0x00.">Copia el valor de este objeto <see cref="T:System.Numerics.BigInteger" /> como bytes de complemento a dos little endian usando el menor número de bytes posible. Si el valor es cero, se genera un byte cuyo elemento es 0x00.</summary>
      <param name="destination" vsli:raw="The destination span to which the resulting bytes should be written.">Intervalo de destino en el que se deben escribir los bytes resultantes.</param>
      <param name="bytesWritten" vsli:raw="The number of bytes written to &lt;paramref name=&quot;destination&quot; /&gt;.">Número de bytes escritos en <paramref name="destination" />.</param>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para escribir los bytes en un orden de bytes big endian; de lo contrario, <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the bytes fit in &lt;paramref name=&quot;destination&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if not all bytes could be written due to lack of space.">
        <see langword="true" /> si los bytes caben en <paramref name="destination" />; <see langword="false" /> si no se pueden escribir todos los bytes debido a la falta de espacio.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">
        <paramref name="isUnsigned" /> es <see langword="true" /> y <see cref="P:System.Numerics.BigInteger.Sign" /> es negativo.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary vsli:raw="Gets a value that represents the number 0 (zero).">Obtiene un valor que representa el número 0 (cero).</summary>
      <returns vsli:raw="An integer whose value is 0 (zero).">Entero cuyo valor es 0 (cero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary vsli:raw="Represents a complex number.">Representa un número complejo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; structure using the specified real and imaginary values.">Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.Complex" /> utilizando el valor real y el valor imaginario especificados.</summary>
      <param name="real" vsli:raw="The real part of the complex number.">Parte real del número complejo.</param>
      <param name="imaginary" vsli:raw="The imaginary part of the complex number.">Parte imaginaria del número complejo.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary vsli:raw="Gets the absolute value (or magnitude) of a complex number.">Obtiene el valor absoluto (o magnitud) de un número complejo.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">Valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc cosine of the specified complex number.">Devuelve el ángulo que es el arco coseno del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number that represents a cosine.">Número complejo que representa un coseno.</param>
      <returns vsli:raw="The angle, measured in radians, which is the arc cosine of &lt;paramref name=&quot;value&quot; /&gt;.">Ángulo, medido en radianes, que es el arco coseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number and returns the result.">Agrega un número real de doble precisión a un número complejo y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">El valor real de doble precisión que se va a agregar.</param>
      <param name="right" vsli:raw="The complex value to add.">El valor complejo que se va a agregar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number and returns the result.">Agrega un número complejo a un número real de doble precisión y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The complex value to add.">El valor complejo que se va a agregar.</param>
      <param name="right" vsli:raw="The double-precision real value to add.">El valor real de doble precisión que se va a agregar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers and returns the result.">Suma dos valores complejos y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The first complex number to add.">Primer número complejo que se va a sumar.</param>
      <param name="right" vsli:raw="The second complex number to add.">Segundo número complejo que se va a sumar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc sine of the specified complex number.">Devuelve el ángulo que es el arco seno del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The angle which is the arc sine of &lt;paramref name=&quot;value&quot; /&gt;.">Ángulo que es el arco seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc tangent of the specified complex number.">Devuelve el ángulo que es el arco tangente del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The angle that is the arc tangent of &lt;paramref name=&quot;value&quot; /&gt;.">Ángulo que es el arco tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary vsli:raw="Computes the conjugate of a complex number and returns the result.">Calcula el conjugado de un número complejo y devuelve el resultado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The conjugate of &lt;paramref name=&quot;value&quot; /&gt;.">Conjugado de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the cosine of the specified complex number.">Devuelve el coseno del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The cosine of &lt;paramref name=&quot;value&quot; /&gt;.">Coseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic cosine of the specified complex number.">Devuelve el coseno hiperbólico del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The hyperbolic cosine of &lt;paramref name=&quot;value&quot; /&gt;.">Coseno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides one double-precision real number by a complex number and returns the result.">Divide un número real de doble precisión por un número complejo y devuelve el resultado.</summary>
      <param name="dividend" vsli:raw="The double-precision real number to be divided.">El número real de doble precisión que se va a dividir.</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">Número complejo por el cual se va a dividir.</param>
      <returns vsli:raw="The quotient of the division.">Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides one complex number by a double-precision real number and returns the result.">Divide un número complejo por un número real de doble precisión y devuelve el resultado.</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">Número complejo que se va a dividir.</param>
      <param name="divisor" vsli:raw="The double-precision real number to divide by.">El número real de doble precisión por el que se va a dividir.</param>
      <returns vsli:raw="The quotient of the division.">Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides one complex number by another and returns the result.">Divide un número complejo por otro y devuelve el resultado.</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">Número complejo que se va a dividir.</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">Número complejo por el cual se va a dividir.</param>
      <returns vsli:raw="The quotient of the division.">Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified complex number have the same value.">Devuelve un valor que indica si la instancia actual y el número complejo especificado tienen el mismo valor.</summary>
      <param name="value" vsli:raw="The complex number to compare.">Número complejo que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this complex number and &lt;paramref name=&quot;value&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si este número complejo y <paramref name="value" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">Devuelve un valor que indica si la instancia actual y un objeto especificado tienen el mismo valor.</summary>
      <param name="obj" vsli:raw="The object to compare.">Objeto que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; parameter is a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object or a type capable of implicit conversion to a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object, and its value is equal to the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el parámetro <paramref name="obj" /> es un objeto <see cref="T:System.Numerics.Complex" /> o un tipo capaz de realizar una conversión implícita a un objeto <see cref="T:System.Numerics.Complex" />, y su valor es igual al valor del objeto <see cref="T:System.Numerics.Complex" /> actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary vsli:raw="Returns &lt;see langword=&quot;e&quot; /&gt; raised to the power specified by a complex number.">Devuelve un <see langword="e" /> elevado a la potencia especificada por un número complejo.</summary>
      <param name="value" vsli:raw="A complex number that specifies a power.">Número complejo que especifica una potencia.</param>
      <returns vsli:raw="The number &lt;see langword=&quot;e&quot; /&gt; raised to the power &lt;paramref name=&quot;value&quot; /&gt;.">Número <see langword="e" /> elevado a la potencia <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary vsli:raw="Creates a complex number from a point's polar coordinates.">Crea un número complejo a partir de las coordenadas polares de un punto.</summary>
      <param name="magnitude" vsli:raw="The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.">Magnitud, que es la distancia del origen (la intersección de los ejes X e Y) al número.</param>
      <param name="phase" vsli:raw="The phase, which is the angle from the line to the horizontal axis, measured in radians.">Fase, que es el ángulo desde la línea al eje horizontal, medido en radianes.</param>
      <returns vsli:raw="A complex number.">Número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Devuelve el código hash del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary vsli:raw="Gets the imaginary component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Obtiene el componente imaginario del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns vsli:raw="The imaginary component of a complex number.">Componente imaginario de un número complejo.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to one.">Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a cero y un número imaginario igual a uno.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary vsli:raw="Represents infinity as a complex number.">Representa un valor infinito como un número complejo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary vsli:raw="Determines whether the specified complex number is finite.">Determina si el número complejo especificado es limitado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la parte real y la imaginaria son limitadas (cero, no normal o normal); de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value indicating whether the specified complex number evaluates to infinity.">Devuelve un valor que indica si el número complejo especificado se evalúa como infinito.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if either, the real or imaginary part are &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt; or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la parte real o la imaginaria son <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the specified complex instance is not a number (NaN).">Devuelve un valor que indica si la instancia compleja especificada no es un número (NaN).</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is not finite or infinite; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si el valor especificado no es limitado ni infinito; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified complex number.">Devuelve el logaritmo natural (en la base <see langword="e" />) del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">Logaritmo natural (en la base <see langword="e" />) de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified complex number in a specified base.">Devuelve el logaritmo del número complejo especificado en la base especificada.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">Base del logaritmo.</param>
      <returns vsli:raw="The logarithm of &lt;paramref name=&quot;value&quot; /&gt; in base &lt;paramref name=&quot;baseValue&quot; /&gt;.">Logaritmo de <paramref name="value" /> en la base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary vsli:raw="Returns the base-10 logarithm of a specified complex number.">Devuelve el logaritmo en la base 10 del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The base-10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">Logaritmo en base 10 de <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary vsli:raw="Gets the magnitude (or absolute value) of a complex number.">Obtiene la magnitud (o valor absoluto) de un número complejo.</summary>
      <returns vsli:raw="The magnitude of the current instance.">Magnitud de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of a double-precision real number and a complex number.">Devuelve el producto de un número real de doble precisión y un número complejo.</summary>
      <param name="left" vsli:raw="The double-precision real number to multiply.">El número real de doble precisión que se va a multiplicar.</param>
      <param name="right" vsli:raw="The complex number to multiply.">El número complejo que se va a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the product of a complex number and a double-precision real number.">Devuelve el producto de un número complejo y un número real de doble precisión.</summary>
      <param name="left" vsli:raw="The complex number to multiply.">El número complejo que se va a multiplicar.</param>
      <param name="right" vsli:raw="The double-precision real number to multiply.">El número real de doble precisión que se va a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of two complex numbers.">Devuelve el producto de dos números complejos.</summary>
      <param name="left" vsli:raw="The first complex number to multiply.">Primer número complejo que se va a multiplicar.</param>
      <param name="right" vsli:raw="The second complex number to multiply.">Segundo número complejo que se va a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary vsli:raw="Represents a complex instance that is not a number (NaN).">Representa una instancia compleja que no es un número (NaN).</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">Devuelve el inverso aditivo de un número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">Resultado de multiplicar por -1 los componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to one and an imaginary number equal to zero.">Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a uno y un número imaginario igual a cero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number.">Agrega un número real de doble precisión a un número complejo.</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">El valor real de doble precisión que se va a agregar.</param>
      <param name="right" vsli:raw="The complex value to add.">El valor complejo que se va a agregar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">La suma de <paramref name="left" /> y <paramref name="right" /> como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number.">Agrega un número complejo a un número real de doble precisión.</summary>
      <param name="left" vsli:raw="The complex value to add.">El valor complejo que se va a agregar.</param>
      <param name="right" vsli:raw="The double-precision real value to add.">El valor real de doble precisión que se va a agregar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">La suma de <paramref name="left" /> y <paramref name="right" /> como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers.">Suma dos números complejos.</summary>
      <param name="left" vsli:raw="The first complex value to add.">El primer valor complejo que se va a agregar.</param>
      <param name="right" vsli:raw="The second complex value to add.">El segundo valor complejo que se va a agregar.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified double-precision real number by a specified complex number.">Divide un número real de doble precisión especificado por un número complejo especificado.</summary>
      <param name="left" vsli:raw="The double-precision real value to be divided.">El valor real de doble precisión que se va a dividir.</param>
      <param name="right" vsli:raw="The complex value to divide by.">El valor complejo por el que se va a dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">El resultado de dividir <paramref name="left" /> por <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides a specified complex number by a specified double-precision real number.">Divide un número complejo especificado por un número real de doble precisión especificado.</summary>
      <param name="left" vsli:raw="The complex value to be divided.">El valor complejo que se va a dividir.</param>
      <param name="right" vsli:raw="The double-precision real value to divide by.">El valor real de doble precisión por el que se va a dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">El resultado de dividir <paramref name="left" /> por <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified complex number by another specified complex number.">Divide el número complejo especificado por otro.</summary>
      <param name="left" vsli:raw="The complex value to be divided.">El valor complejo que se va a dividir.</param>
      <param name="right" vsli:raw="The complex value to divide by.">El valor complejo por el que se va a dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Resultado de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are equal.">Devuelve un valor que indica si dos números complejos son iguales.</summary>
      <param name="left" vsli:raw="The first complex number to compare.">Primer número complejo que se va a comparar.</param>
      <param name="right" vsli:raw="The second complex number to compare.">Segundo número complejo que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value to a complex number.">Define una conversión explícita de un valor <see cref="T:System.Decimal" /> a un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">Número complejo con un componente real igual a <paramref name="value" /> y un componente imaginario igual a cero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a complex number.">Define una conversión explícita de un valor <see cref="T:System.Numerics.BigInteger" /> a un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">Número complejo con un componente real igual a <paramref name="value" /> y un componente imaginario igual a cero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a complex number.">Define una conversión implícita de un byte sin signo en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a double-precision floating-point number to a complex number.">Define una conversión implícita de un número de punto flotante de precisión doble en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit signed integer to a complex number.">Define una conversión implícita de un entero de 16 bits con signo en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit signed integer to a complex number.">Define una conversión implícita de un entero de 32 bits con signo en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit signed integer to a complex number.">Define una conversión implícita de un entero de 64 bits con signo en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a signed byte to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define una conversión implícita de un byte con signo en un número complejo.   
Esta API no es conforme a CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a single-precision floating-point number to a complex number.">Define una conversión implícita de un número de punto flotante de precisión sencilla en un número complejo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define una conversión implícita de un entero de 16 bits sin signo en un número complejo.   
Esta API no es conforme a CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define una conversión implícita de un entero de 32 bits sin signo en un número complejo.   
Esta API no es conforme a CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define una conversión implícita de un entero de 64 bits sin signo en un número complejo.   
Esta API no es conforme a CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">Valor que se va a convertir en un número complejo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are not equal.">Devuelve un valor que indica si dos números complejos no son iguales.</summary>
      <param name="left" vsli:raw="The first value to compare.">Primer valor que se va a comparar.</param>
      <param name="right" vsli:raw="The second value to compare.">Segundo valor que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies a specified double-precision real number by a specified complex number.">Multiplica un número real de doble precisión especificado por un número complejo especificado.</summary>
      <param name="left" vsli:raw="The double-precision real value to multiply.">El valor real de doble precisión que se va a multiplicar.</param>
      <param name="right" vsli:raw="The complex value to multiply.">El valor complejo que se va a multiplicar.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">El producto de <paramref name="left" /> y <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Multiplies the specified complex number by a specified double-precision real number.">Multiplica el número complejo especificado por un número real de doble precisión especificado.</summary>
      <param name="left" vsli:raw="The complex value to multiply.">El valor complejo que se va a multiplicar.</param>
      <param name="right" vsli:raw="The double-precision real value to multiply.">El valor real de doble precisión que se va a multiplicar.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">El producto de <paramref name="left" /> y <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies two specified complex numbers.">Multiplica los dos números complejos especificados.</summary>
      <param name="left" vsli:raw="The first complex value to multiply.">El primer valor complejo que se va a multiplicar.</param>
      <param name="right" vsli:raw="The second complex value to multiply.">El segundo valor complejo que se va a multiplicar.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Producto de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from a double-precision real number.">Resta un número complejo a un número real de doble precisión.</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">El valor real de doble precisión al que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">El valor complejo que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts a double-precision real number from a complex number.">Resta un número real de doble precisión a un número complejo.</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">El valor complejo del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">El valor real de doble precisión que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from another complex number.">Resta un número complejo de otro número complejo.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">Valor del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">Valor que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">Devuelve el inverso aditivo de un número complejo especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">Valor que se va a negar.</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">Resultado de multiplicar por -1 los componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary vsli:raw="Gets the phase of a complex number.">Obtiene la fase de un número complejo.</summary>
      <returns vsli:raw="The phase of a complex number, in radians.">Fase de un número complejo, en radianes.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a double-precision floating-point number.">Devuelve un número complejo especificado elevado a la potencia indicada por un número de punto flotante de precisión doble.</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">Número complejo que se va a elevar a una potencia.</param>
      <param name="power" vsli:raw="A double-precision floating-point number that specifies a power.">Número de punto flotante de precisión doble que especifica una potencia.</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">Número complejo <paramref name="value" /> elevado a la potencia indicada por <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a complex number.">Devuelve el número complejo especificado elevado a la potencia indicada por un número complejo.</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">Número complejo que se va a elevar a una potencia.</param>
      <param name="power" vsli:raw="A complex number that specifies a power.">Número complejo que especifica una potencia.</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">Número complejo <paramref name="value" /> elevado a la potencia indicada por <paramref name="power" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary vsli:raw="Gets the real component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Obtiene el componente real del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns vsli:raw="The real component of a complex number.">Componente real de un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary vsli:raw="Returns the multiplicative inverse of a complex number.">Devuelve el inverso multiplicativo de un número complejo.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The reciprocal of &lt;paramref name=&quot;value&quot; /&gt;.">Recíproco de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the sine of the specified complex number.">Devuelve el seno del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The sine of &lt;paramref name=&quot;value&quot; /&gt;.">Seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic sine of the specified complex number.">Devuelve el seno hiperbólico del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The hyperbolic sine of &lt;paramref name=&quot;value&quot; /&gt;.">Seno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary vsli:raw="Returns the square root of a specified complex number.">Devuelve la raíz cuadrada del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The square root of &lt;paramref name=&quot;value&quot; /&gt;.">Raíz cuadrada de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from a double-precision real number and returns the result.">Resta un número complejo a un número real de doble precisión y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">El valor real de doble precisión al que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">El valor complejo que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts one double-precision real number from a complex number and returns the result.">Resta un número real de doble precisión a un número complejo y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">El valor complejo del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">El valor real de doble precisión que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from another and returns the result.">Resta un número complejo de otro y devuelve el resultado.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">Valor del que se va a restar (minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">Valor que se va a restar (sustraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the tangent of the specified complex number.">Devuelve la tangente del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The tangent of &lt;paramref name=&quot;value&quot; /&gt;.">Tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic tangent of the specified complex number.">Devuelve la tangente hiperbólica del número complejo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Número complejo.</param>
      <returns vsli:raw="The hyperbolic tangent of &lt;paramref name=&quot;value&quot; /&gt;.">Tangente hiperbólica de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form.">Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano.</summary>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">Representación de cadena de la instancia actual en formato cartesiano.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.">Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;provider&quot; /&gt;.">Representación de cadena de la instancia actual en formato cartesiano, tal como especifica <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.">Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando el formato especificado para la parte real y la parte imaginaria.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Cadena de formato numérico estándar o personalizada.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">Representación de cadena de la instancia actual en formato cartesiano.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.">Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando el formato especificado y la información de formato específica de la referencia cultural indicada para la parte real y la parte imaginaria.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt;.">Representación de cadena de la instancia actual en formato cartesiano, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to zero.">Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a cero y un número imaginario igual a cero.</summary>
    </member>
  </members>
</doc>
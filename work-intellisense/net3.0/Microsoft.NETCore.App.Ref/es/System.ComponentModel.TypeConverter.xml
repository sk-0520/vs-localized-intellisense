<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AddingNewEventArgs" /> sin ningún parámetro.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AddingNewEventArgs" /> con el objeto especificado como nuevo elemento.</summary>
      <param name="newObject">Objeto <see cref="T:System.Object" /> que se va a utilizar como nuevo valor del elemento.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>Obtiene o establece el objeto que se va a agregar a la lista de enlace.</summary>
      <returns>Objeto <see cref="T:System.Object" /> que se va a agregar como nuevo elemento a la colección asociada.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender">Origen del evento, normalmente un contenedor de datos o una colección enlazada a datos.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>Especifica el valor para pasar a una propiedad que hace que esta obtenga su valor de otro origen. Esto se conoce como ambiente. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un valor booleano como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un entero de 8 bits sin signo como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un carácter Unicode como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un número de punto flotante de precisión doble como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un entero de 16 bits con signo como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un entero de 32 bits con signo como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un entero de 64 bits con signo como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un objeto como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado un número de punto flotante de precisión sencilla como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dada una cadena como valor.</summary>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dados el valor y su tipo.</summary>
      <param name="type">Tipo (<see cref="T:System.Type" />) del parámetro <paramref name="value" />.</param>
      <param name="value">Valor de este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actual.</summary>
      <param name="obj">Objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> que se va a comparar con el objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>Obtiene el objeto que es el valor de <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns>Objeto que es el valor de <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Array" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado en el tipo de destino especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de propiedades para el tipo de matriz especificado por el parámetro de valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utilizará como filtro.</param>
      <returns>Una clase <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para un matriz o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite propiedades.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque se debe llamar al método <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> para buscar las propiedades de este objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>Representa una colección de atributos.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que proporciona los atributos de esta colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>Obtiene la colección de atributos.</summary>
      <returns>Colección de atributos.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>Determina si esta colección de atributos tiene el atributo especificado.</summary>
      <param name="attribute">
        <see cref="T:System.Attribute" /> que se buscará en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el atributo o es el atributo predeterminado del tipo de atributo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>Determina si esta colección de atributos contiene todos los atributos especificados en la matriz de atributos.</summary>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se buscará en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene todos los atributos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia la colección en una matriz, empezando por el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> en la que se va a copiar la colección.</param>
      <param name="index">Índice por el que se va a comenzar.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>Obtiene el número de atributos.</summary>
      <returns>Número de atributos.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>Especifica una colección vacía que se puede usar en lugar de crear una nueva. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>Crea una nueva clase <see cref="T:System.ComponentModel.AttributeCollection" /> a partir de una clase <see cref="T:System.ComponentModel.AttributeCollection" /> existente.</summary>
      <param name="existing">Clase <see cref="T:System.ComponentModel.AttributeCollection" /> a partir de la cual se creará la copia.</param>
      <param name="newAttributes">Matriz de tipo <see cref="T:System.Attribute" /> que proporciona los atributos de esta colección. Puede ser <see langword="null" />.</param>
      <returns>Una nueva clase <see cref="T:System.ComponentModel.AttributeCollection" /> que es una copia de <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>Devuelve el <see cref="T:System.Attribute" /> predeterminado de un tipo (<see cref="T:System.Type" />) dado.</summary>
      <param name="attributeType">Tipo (<see cref="T:System.Type" />) de atributo que se va a recibir.</param>
      <returns>El <see cref="T:System.Attribute" /> predeterminado de un <paramref name="attributeType" /> dado.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>Obtiene un enumerador para esta colección.</summary>
      <returns>Enumerador de tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>Obtiene el atributo que tiene el número de índice especificado.</summary>
      <param name="index">Índice basado en cero de <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns>
        <see cref="T:System.Attribute" /> que tiene el número de índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>Obtiene el atributo que tiene el tipo especificado.</summary>
      <param name="attributeType">Tipo (<see cref="T:System.Type" />) de <see cref="T:System.Attribute" /> que se va a obtener de la colección.</param>
      <returns>
        <see cref="T:System.Attribute" /> que tiene el tipo especificado o, si el atributo no existe, el valor predeterminado del tipo de atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>Determina si un atributo especificado es igual a un atributo de la colección.</summary>
      <param name="attribute">Instancia de <see cref="T:System.Attribute" /> que se va a comparar con los atributos de esta colección.</param>
      <returns>
        <see langword="true" /> si el atributo forma parte de la colección y tiene el mismo valor que el atributo de la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>Determina si los atributos en la matriz especificada son iguales a los de la colección.</summary>
      <param name="attributes">Matriz de <see cref="T:System.CodeDom.MemberAttributes" /> que se va a comparar con los atributos de esta colección.</param>
      <returns>
        <see langword="true" /> si todos los atributos de la matriz forman parte de la colección y tienen los mismos valores que los atributos de la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos contenido en la colección.</summary>
      <returns>Número de elementos contenidos en la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>
        <see langword="true" />, si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> para la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.IEnumerator" /> para la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>Habilita la redirección del atributo. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con el nombre de tipo especificado.</summary>
      <param name="typeName">Nombre del tipo que se va a especificar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con el nombre de tipo y el nombre de propiedad especificados.</summary>
      <param name="typeName">Nombre del tipo que se va a especificar.</param>
      <param name="propertyName">Nombre de la propiedad cuyos atributos se van a recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con el tipo especificado.</summary>
      <param name="type">Tipo que se va a especificar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>Obtiene el nombre de la propiedad cuyos atributos se van a recuperar.</summary>
      <returns>Nombre de la propiedad cuyos atributos se van a recuperar.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>Obtiene el nombre de tipo calificado con el nombre de ensamblado que se ha pasado al constructor.</summary>
      <returns>Nombre calificado con el nombre de ensamblado del tipo especificado en el constructor.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Proporciona un convertidor de tipos base para los tipos numéricos de punto no flotante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si este convertidor puede convertir un objeto del tipo de origen indicado al tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo desde el que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la operación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si este convertidor puede convertir un objeto en el tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="t">
        <see cref="T:System.Type" /> que representa el tipo al que se va a convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la operación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en el tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural para representar el número.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en otro tipo.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural para representar el número.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>Especifica si un miembro se usa normalmente para el enlace. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindableAttribute" /> con un valor booleano.</summary>
      <param name="bindable">Es <see langword="true" /> para utilizar la propiedad para el enlace; de lo contrario, es <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable">Es <see langword="true" /> para utilizar la propiedad para el enlace; de lo contrario, es <see langword="false" />.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindableAttribute" /> con uno de los valores de <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags">Uno de los valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags">Uno de los valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>Obtiene un valor que indica que una propiedad se utiliza normalmente para el enlace.</summary>
      <returns>
        <see langword="true" /> si la propiedad se utiliza normalmente para el enlace; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.BindableAttribute" />, que es <see cref="F:System.ComponentModel.BindableAttribute.No" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>Obtiene un valor que indica la dirección o direcciones del enlace de datos de esta propiedad.</summary>
      <returns>Dirección del enlace de datos de esta propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>Determina si los dos objetos <see cref="T:System.ComponentModel.BindableAttribute" /> son iguales.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.BindableAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.BindableAttribute" /> actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>Sirve como función hash para la clase <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.BindableAttribute" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>Determina si este atributo es el valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si el atributo es el valor predeterminado de esta clase de atributos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>Especifica que una propiedad no se utiliza normalmente para el enlace. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>Especifica que una propiedad se utiliza normalmente para el enlace. Este campo es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>Especifica valores para indicar si una propiedad puede enlazarse a un elemento de datos u otra propiedad.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>La propiedad está establecida en el valor predeterminado.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>La propiedad no es enlazable en tiempo de diseño.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>La propiedad es enlazable en tiempo de diseño.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>Especifica si la plantilla se puede enlazar de forma unidireccional o bidireccional.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>La plantilla sólo puede aceptar valores de propiedades. Se utiliza con una <see cref="T:System.Web.UI.ITemplate" /> genérica.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>La plantilla puede aceptar y exponer los valores de propiedades. Se utiliza con una <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>Ofrece una colección genérica que admite el enlace de datos.</summary>
      <typeparam name="T">Tipo de elementos en la lista.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindingList`1" /> utilizando los valores predeterminados.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BindingList`1" /> con la lista especificada.</summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> de elementos que se van a incluir en <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>Se produce antes de que se agregue un elemento a la lista.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>Agrega un nuevo elemento a la colección.</summary>
      <returns>El elemento agregado a la lista.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> se establece en <see langword="false" />.  
O bien 
No se ha encontrado ningún constructor sin parámetros público para el tipo de elemento actual.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>Agrega un nuevo elemento al final de la colección.</summary>
      <returns>Elemento que se ha agregado a la colección.</returns>
      <exception cref="T:System.InvalidCastException">El nuevo elemento no es del mismo tipo que los objetos incluidos en <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>Obtiene o establece un valor que indica si se pueden editar los elementos de la lista.</summary>
      <returns>
        <see langword="true" /> si se pueden editar los elementos de la lista; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>Obtiene o establece un valor que indica si se pueden agregar elementos a la lista utilizando el método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si se pueden agregar elementos a la lista mediante el método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; en caso contrario, <see langword="false" />. El valor predeterminado depende del tipo subyacente contenido en la lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>Obtiene o establece un valor que indica si se pueden quitar elementos de la colección.</summary>
      <returns>
        <see langword="true" /> si se pueden quitar elementos de la lista mediante el método <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Si se reemplaza en una clase derivada, ordena los elementos; en caso contrario, produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que especifica la propiedad con respecto a la cual se va a realizar la ordenación.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">El método no se reemplaza en una clase derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>Descarta un nuevo elemento pendiente.</summary>
      <param name="itemIndex">Índice del nuevo elemento que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>Confirma un nuevo elemento pendiente en la colección.</summary>
      <param name="itemIndex">Índice del nuevo elemento que se va agregar.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Si se han implementado las búsquedas en una clase derivada, busca el índice del elemento que contiene el descriptor de propiedades especificado con el valor indicado; en caso contrario, produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a buscar.</param>
      <param name="key">Valor de <paramref name="prop" /> que debe coincidir.</param>
      <returns>Índice de base cero del elemento que coincide con el descriptor de propiedades y contiene el valor especificado.</returns>
      <exception cref="T:System.NotSupportedException">No se ha reemplazado <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> en una clase derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>Inserta el elemento determinado en el índice especificado de la lista.</summary>
      <param name="index">Índice de base cero donde se va a insertar el elemento.</param>
      <param name="item">Elemento que se va a insertar en la lista.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>Obtiene un valor que indica si la lista está ordenada.</summary>
      <returns>
        <see langword="true" /> si la lista está ordenada; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>Se produce cuando cambia la lista o un elemento de la lista.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>Obtiene o establece un valor que indica si la adición o eliminación de elementos de la lista provoca eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> si la adición o eliminación de elementos provoca eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>Quita el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Está quitando un elemento que acaba de agregarse y <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> se establece en <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>Cuando se ha implementado la ordenación en una clase derivada, quita cualquier ordenación aplicada mediante <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />; en caso contrario, provoca una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">El método no se reemplaza en una clase derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>Provoca un evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de tipo <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>Provoca un evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> para el elemento situado en la posición especificada.</summary>
      <param name="position">Índice de base cero del elemento que se va a restablecer.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item">Nuevo valor para el elemento situado en el índice especificado. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>Obtiene la dirección en que se ordena la lista.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />. De manera predeterminada, es <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>Obtiene el descriptor de propiedades que se utiliza para ordenar la lista si se ha implementado la ordenación en una clase derivada; de lo contrario, devuelve <see langword="null" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilizado para ordenar la lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>Obtiene un valor que indica si están habilitados los eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> si se admiten los eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>Obtiene un valor que indica si la lista admite las búsquedas.</summary>
      <returns>
        <see langword="true" /> si la lista admite las búsquedas; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>Obtiene un valor que indica si la lista admite la ordenación.</summary>
      <returns>
        <see langword="true" /> si la lista admite la ordenación; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a agregar como criterio de búsqueda.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>Agrega un nuevo elemento a la lista. Para obtener más información, vea <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>El elemento agregado a la lista.</returns>
      <exception cref="T:System.NotSupportedException">No se admite este método.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>Obtiene un valor que indica si se pueden editar los elementos de la lista.</summary>
      <returns>
        <see langword="true" /> si se pueden editar los elementos de la lista; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>Obtiene un valor que indica si se pueden agregar nuevos elementos a la lista utilizando el método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si se pueden agregar elementos a la lista mediante el método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; en caso contrario, <see langword="false" />. El valor predeterminado depende del tipo subyacente contenido en la lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>Obtiene un valor que indica si se pueden quitar elementos de la lista.</summary>
      <returns>
        <see langword="true" /> si se pueden quitar elementos de la lista mediante el método <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Ordena la lista basándose en <see cref="T:System.ComponentModel.PropertyDescriptor" /> y <see cref="T:System.ComponentModel.ListSortDirection" />. Para obtener una descripción completa de este miembro, vea <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop">Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> por el que se ordena.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> por el que se realiza la búsqueda.</param>
      <param name="key">Valor del parámetro <paramref name="prop" /> que se va a buscar.</param>
      <returns>Índice de la fila que tiene el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>Para obtener una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns>
        <see langword="true" /> si se ha llamado a <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> y no se ha llamado a <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a quitar de los índices utilizados para buscar.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se utiliza para ordenar.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns>
        <see langword="true" /> si se provoca un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> cuando cambia la lista o un elemento de la lista; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns>
        <see langword="true" /> si la lista admite búsquedas mediante el método <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>Para obtener una descripción de este miembro, vea <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns>
        <see langword="true" /> si la lista admite la ordenación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>Obtiene un valor que indica si los cambios en los valores de propiedades de los elementos provocan eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> de tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Este miembro no se puede reemplazar en una clase derivada.</summary>
      <returns>
        <see langword="true" />Si el tipo de lista implementa <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, de lo <see langword="false" />contrario,. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Boolean" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en un objeto Boolean mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este objeto puede llevar a cabo la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto de valor especificado en un objeto Boolean.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Clase <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural a la que se va a convertir.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene una colección de valores estándar para el tipo de datos Boolean.</summary>
      <param name="context">Objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <returns>Una clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si la lista de valores estándar devuelta por el método <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exclusiva.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque la clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelta por el método <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exhaustiva de valores posibles. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque se puede llamar al método <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> para buscar un conjunto común de valores que sea compatible con el objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros sin signo de 8 bits a y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>Representa el método que controla un evento cancelable.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.CancelEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de caracteres Unicode desde otras representaciones y a otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en un objeto de carácter Unicode mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo desde el que se quiere convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto determinado en un objeto de carácter Unicode.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor determinado en un objeto de carácter Unicode utilizando los argumentos.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>Especifica la forma en que ha cambiado la colección.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>Especifica que se ha agregado un elemento a la colección.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>Especifica que toda la colección ha cambiado. Esto se debe al uso de métodos que manipulan toda la colección, como <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>Especifica que se ha quitado un elemento de la colección.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action">Uno de los valores de <see cref="T:System.ComponentModel.CollectionChangeAction" /> que especifica la forma en que cambió la colección.</param>
      <param name="element">
        <see cref="T:System.Object" /> que especifica la instancia de la colección en la que se ha producido el cambio.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>Obtiene una acción que especifica la forma en que cambió la colección.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>Obtiene la instancia de la colección que contiene el cambio.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa la instancia de la colección que contiene el cambio, o <see langword="null" /> si se actualiza la colección.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> que se produce al agregar elementos a una colección o quitar elementos de una colección.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de colección a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado en el tipo de destino especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir. Este parámetro debe heredar de la interfaz <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de propiedades para el tipo de matriz especificado por el parámetro de valor, utilizando el contexto y los atributos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utilizará como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades. Este método devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite propiedades.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="false" /> porque no se debe llamar al método <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> para buscar las propiedades de este objeto. Este método nunca devuelve <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>Especifica las propiedades de origen de datos y de miembro de datos para un componente que admite el enlace de datos complejo. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> sin ningún parámetro.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> con el origen de datos especificado.</summary>
      <param name="dataSource">Nombre de la propiedad que se va a utilizar como origen de datos.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> con el origen de datos y el miembro de datos especificados.</summary>
      <param name="dataSource">Nombre de la propiedad que se va a utilizar como origen de datos.</param>
      <param name="dataMember">Nombre de la propiedad que se va a utilizar como origen para los datos.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>Obtiene el nombre de la propiedad de miembro de datos del componente al que está enlazado el atributo <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns>Nombre de la propiedad de miembro de datos del componente al que está enlazado el atributo <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>Obtiene el nombre de la propiedad de origen de datos del componente al que está enlazado el atributo <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns>Nombre de la propiedad de origen de datos del componente al que está enlazado el atributo <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>Representa el valor predeterminado de la clase <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a la instancia actual del objeto <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <param name="obj">Objeto <see cref="T:System.Object" /> que se va a comparar con la instancia actual de <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</param>
      <returns>Es <see langword="true" /> si el objeto es igual a la instancia actual; de lo contrario, es <see langword="false" />, lo que indica que no son iguales.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>Proporciona un convertidor de tipos para convertir componentes a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type">Objeto <see cref="T:System.Type" /> que representa el tipo que se va a asociar a este convertidor de componentes.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de propiedades para el tipo de componente especificado por el parámetro de valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">Objeto <see cref="T:System.Object" /> que especifica el tipo de componente para el que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utilizará como filtro.</param>
      <returns>Clase <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para el componente o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite propiedades que utilicen el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque se debe llamar al método <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> para buscar las propiedades de este objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>Proporciona la clase base para un editor de componentes personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Edita el componente y devuelve un valor que indica si se ha modificado el componente, basándose en un contexto determinado.</summary>
      <param name="context">Objeto de contexto opcional que puede utilizarse para obtener más información sobre la edición.</param>
      <param name="component">Componente que se va a editar.</param>
      <returns>
        <see langword="true" /> si se ha modificado el componente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>Edita el componente y devuelve un valor que indica si se ha modificado el componente.</summary>
      <param name="component">Componente que se va a editar.</param>
      <returns>
        <see langword="true" /> si se ha modificado el componente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>Proporciona una forma sencilla de enumerar los recursos de un componente u objeto. La clase <see cref="T:System.ComponentModel.ComponentResourceManager" /> es una clase <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ComponentResourceManager" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>Crea una clase <see cref="T:System.ComponentModel.ComponentResourceManager" /> que busca recursos en los ensamblados satélite a partir de la información de la clase <see cref="T:System.Type" /> especificada.</summary>
      <param name="t">Clase <see cref="T:System.Type" /> a partir de la cual la clase <see cref="T:System.ComponentModel.ComponentResourceManager" /> deriva toda la información para encontrar los archivos de recursos.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>Aplica el valor de un recurso a la propiedad correspondiente del objeto.</summary>
      <param name="value">Clase <see cref="T:System.Object" /> que contiene el valor de propiedad que se va a aplicar.</param>
      <param name="objectName">Clase <see cref="T:System.String" /> que contiene el nombre del objeto que se va a buscar en los recursos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> o <paramref name="objectName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Aplica el valor de un recurso a la propiedad correspondiente del objeto.</summary>
      <param name="value">Clase <see cref="T:System.Object" /> que contiene el valor de propiedad que se va a aplicar.</param>
      <param name="objectName">Clase <see cref="T:System.String" /> que contiene el nombre del objeto que se va a buscar en los recursos.</param>
      <param name="culture">Referencia cultural para la que se van a aplicar los recursos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> o <paramref name="objectName" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>Encapsula cero o más componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>Agrega el objeto <see cref="T:System.ComponentModel.Component" /> especificado a la colección <see cref="T:System.ComponentModel.Container" />. El componente no tiene nombre.</summary>
      <param name="component">Componente que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Agrega el <see cref="T:System.ComponentModel.Component" /> especificado a <see cref="T:System.ComponentModel.Container" /> y le asigna un nombre.</summary>
      <param name="component">Componente que se va a agregar.</param>
      <param name="name">Nombre único que se le va a asignar al componente, sin hacer distinción entre mayúsculas y minúsculas.  
o bien 
 <see langword="null" />, que deja al componente sin nombre.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="name" /> no es único.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>Obtiene todos los componentes de <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>Colección que contiene los componentes de <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Crea un sitio <see cref="T:System.ComponentModel.ISite" /> para la <see cref="T:System.ComponentModel.IComponent" /> especificada y le asigna el nombre determinado al sitio.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> para la que se va a crear un sitio.</param>
      <param name="name">Nombre que se va a asignar a <paramref name="component" />; o bien, <see langword="null" /> para omitir la asignación de nombre.</param>
      <returns>Sitio recién creado.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por el objeto <see cref="T:System.ComponentModel.Container" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>Libera recursos no administrados y realiza otras operaciones de limpieza antes de que se reclame el objeto <see cref="T:System.ComponentModel.Container" /> durante la recolección de elementos no utilizados.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>Obtiene el objeto de servicio del tipo especificado, si está disponible.</summary>
      <param name="service">
        <see cref="T:System.Type" /> del servicio que se va a recuperar.</param>
      <returns>
        <see cref="T:System.Object" /> que implementa el servicio solicitado o <see langword="null" /> si no se puede resolver el servicio.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>Quita un componente del objeto <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component">Componente que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>Quita un componente del objeto <see cref="T:System.ComponentModel.Container" /> sin establecer <see cref="P:System.ComponentModel.IComponent.Site" /> en <see langword="null" />.</summary>
      <param name="component">Componente que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>Determina si el nombre del componente es único para este contenedor.</summary>
      <param name="component">Componente con nombre.</param>
      <param name="name">Nombre del componente que se va a validar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="name" /> no es único.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>Proporciona una clase base para el servicio de filtro del contenedor.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>Filtra la colección de componentes.</summary>
      <param name="components">Colección de componentes que se va a filtrar.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.ComponentCollection" /> que representa una colección modificada.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Globalization.CultureInfo" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en una estructura <see cref="T:System.Globalization.CultureInfo" /> mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto de valor especificado en un objeto <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Clase <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural a la que se va a convertir.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> especifica una referencia cultural que no es válida.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado en el tipo de destino especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Clase <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural a la que se va a convertir.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>Recupera el nombre de la referencia cultural especificada.</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural cuyo nombre se va a obtener.</param>
      <returns>Nombre de la referencia cultural especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene una colección de valores estándar de un objeto <see cref="T:System.Globalization.CultureInfo" /> utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si la lista de valores estándar devueltos por el método <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exhaustiva.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>Es <see langword="false" /> porque la colección <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelta por el método <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> no es una lista exhaustiva de posibles valores (es decir, hay otros posibles valores). Este método nunca devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque debe llamarse al método <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> para buscar un conjunto común de valores que sea compatible con el objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>Proporciona una implementación predeterminada simple de la interfaz <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> utilizando un descriptor de tipos personalizado primario.</summary>
      <param name="parent">Descriptor de tipos personalizado primario.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>Devuelve una colección de atributos personalizados para el tipo que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.AttributeCollection" /> que contiene los atributos para el tipo. De manera predeterminada, es <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>Devuelve el nombre completo de la clase representada por este descriptor de tipos.</summary>
      <returns>Un <see cref="T:System.String" /> que contiene el nombre de clase completo del tipo que describe este descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>Devuelve el nombre de la clase que representa este descriptor de tipos.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de la instancia del componente que describe este descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>Devuelve un convertidor de tipos para el tipo que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo que representa este descriptor de tipos. El valor predeterminado es un objeto <see cref="T:System.ComponentModel.TypeConverter" /> recién creado.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>Devuelve el descriptor de eventos para el evento predeterminado del objeto que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.EventDescriptor" /> para el evento predeterminado del objeto que representa este descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>Devuelve el descriptor de propiedades para la propiedad predeterminada del objeto que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> para la propiedad predeterminada del objeto que representa este descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Devuelve un editor del tipo especificado que se va a asociar a la clase que representa este descriptor de tipos.</summary>
      <param name="editorBaseType">Tipo base del editor que se va a recuperar.</param>
      <returns>Editor del tipo especificado que se va a asociar a la clase que representa este descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>Devuelve una colección de descriptores de eventos para el objeto que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contiene los descriptores de eventos para el objeto que representa este descriptor de tipos. De manera predeterminada, es <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Devuelve una colección de descriptores de eventos filtrada para el objeto que representa este descriptor de tipos.</summary>
      <param name="attributes">Matriz de atributos que se va a utilizar como filtro. Puede ser <see langword="null" />.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contiene las descripciones de eventos para el objeto que representa este descriptor de tipos. De manera predeterminada, es <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>Devuelve una colección de descriptores de propiedades para el objeto que representa este descriptor de tipos.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las descripciones de propiedades para el objeto que representa este descriptor de tipos. De manera predeterminada, es <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Devuelve una colección de descriptores de propiedades filtrada para el objeto que representa este descriptor de tipos.</summary>
      <param name="attributes">Matriz de atributos que se va a utilizar como filtro. Puede ser <see langword="null" />.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las descripciones de propiedades para el objeto que representa este descriptor de tipos. De manera predeterminada, es <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Devuelve un objeto que contiene la propiedad que describe el descriptor de propiedades especificado.</summary>
      <param name="pd">Descriptor de propiedades para el que se va a recuperar el objeto propietario.</param>
      <returns>
        <see cref="T:System.Object" /> que posee la propiedad determinada que especifica el descriptor de tipos. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>Identifica un tipo como objeto adecuado para enlazarlo a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectAttribute" /> e indica si un objeto es adecuado para enlazarlo a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject">
        <see langword="true" /> si el objeto es adecuado para enlazarlo a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>Indica que la clase es adecuada para enlazarla a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> en tiempo de diseño. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>Representa el valor predeterminado de la clase <see cref="T:System.ComponentModel.DataObjectAttribute" />, que indica que la misma es adecuada para enlazarla a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> en tiempo de diseño. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>Determina si esta instancia de <see cref="T:System.ComponentModel.DataObjectAttribute" /> se ajusta al modelo de otro objeto.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia de <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns>
        <see langword="true" /> si esta instancia es igual que la instancia especificada por el parámetro <paramref name="obj" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>Obtiene un valor que indica si un objeto se debe considerar adecuado para enlazarlo a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> en tiempo de diseño.</summary>
      <returns>
        <see langword="true" /> si el objeto se debe considerar adecuado para enlazarlo a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>Obtiene un valor que indica si el valor actual del atributo es su valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si el valor actual del atributo es el valor predeterminado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>Indica que la clase no es adecuada para enlazarla a un objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> en tiempo de diseño. Este campo es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>Proporciona metadatos para una propiedad que representa un campo de datos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica si el campo es la clave principal para la fila de datos.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que el campo está en la clave principal de la fila de datos; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica si el campo es la clave principal para la fila de datos y si es un campo de identidad de base de datos.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que el campo está en la clave principal de la fila de datos; en caso contrario, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que el campo es un campo de identidad que únicamente identifica la fila de datos; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica si el campo es la clave principal para la fila de datos, si es un campo de identidad de base de datos y si el campo puede ser null.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que el campo está en la clave principal de la fila de datos; en caso contrario, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que el campo es un campo de identidad que únicamente identifica la fila de datos; en caso contrario, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> para indicar que el campo puede ser null en el almacén de datos; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica si el campo es la clave principal de la fila de datos, si es un campo de identidad de base de datos y si puede ser null, y establece la longitud del campo.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que el campo está en la clave principal de la fila de datos; en caso contrario, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que el campo es un campo de identidad que únicamente identifica la fila de datos; en caso contrario, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> para indicar que el campo puede ser null en el almacén de datos; de lo contrario, <see langword="false" />.</param>
      <param name="length">Longitud del campo en bytes.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia de <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns>
        <see langword="true" /> si esta instancia es igual que la instancia especificada por el parámetro <paramref name="obj" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>Obtiene un valor que indica si una propiedad representa un campo de identidad en los datos subyacentes.</summary>
      <returns>
        <see langword="true" /> si la propiedad representa un campo de identidad en los datos subyacentes; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>Obtiene un valor que indica si una propiedad representa un campo que puede ser null en el almacén de datos subyacentes.</summary>
      <returns>
        <see langword="true" /> si la propiedad representa un campo que puede ser null en el almacén de datos subyacentes; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>Obtiene la longitud de la propiedad en bytes.</summary>
      <returns>Longitud de la propiedad en bytes o -1 si no está establecida.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>Obtiene un valor que indica si una propiedad está en la clave principal incluida en los datos subyacentes.</summary>
      <returns>
        <see langword="true" /> si la propiedad está en la clave principal del almacén de datos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>Identifica un método de operación de datos expuesto por un tipo, el tipo de operación que realiza el método y si es el método de datos predeterminado. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> e identifica el tipo de operación de datos que realiza el método.</summary>
      <param name="methodType">Uno de los valores de <see cref="T:System.ComponentModel.DataObjectMethodType" /> que describe la operación de datos que realiza el método.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> e identifica el tipo de operación de datos que realiza el método y si es el método de datos predeterminado que expone el objeto de datos.</summary>
      <param name="methodType">Uno de los valores de <see cref="T:System.ComponentModel.DataObjectMethodType" /> que describe la operación de datos que realiza el método.</param>
      <param name="isDefault">
        <see langword="true" /> para indicar que el método al que se aplica el atributo es el método predeterminado del objeto de datos para el parámetro <paramref name="methodType" /> especificado; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> si esta instancia es igual que la instancia especificada por el parámetro <paramref name="obj" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>Obtiene un valor que indica si el método al que se aplica <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> es el método de datos predeterminado que expone el objeto de datos para un tipo de método especificado.</summary>
      <returns>
        <see langword="true" /> si es el método predeterminado que expone el objeto para un tipo de método; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>Obtiene un valor que indica si esta instancia comparte un modelo común con un atributo especificado.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia de <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> si esta instancia es igual que la instancia especificada por el parámetro <paramref name="obj" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>Obtiene un valor <see cref="T:System.ComponentModel.DataObjectMethodType" /> que indica el tipo de operación de datos que el método realiza.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.DataObjectMethodType" /> que identifica el tipo de operación de datos que realiza el método al que se aplica <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>Identifica el tipo de operación de datos que realiza un método, según especifica el atributo <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> aplicado al método.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>Indica que un método se utiliza para una operación de datos que elimina datos.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>Indica que un método se utiliza para una operación de datos que rellena un objeto <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>Indica que un método se utiliza para una operación de datos que inserta datos.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>Indica que un método se utiliza para una operación de datos que recupera datos.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>Indica que un método se utiliza para una operación de datos que actualiza datos.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.DateTime" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en una estructura <see cref="T:System.DateTime" /> mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este objeto puede llevar a cabo la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto de valor especificado en una clase <see cref="T:System.DateTime" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor dado en un valor <see cref="T:System.DateTime" /> utilizando los argumentos.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Proporciona un convertidor de tipos para convertir estructuras <see cref="T:System.DateTimeOffset" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si un objeto del tipo de origen especificado puede convertirse en una estructura <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Contexto de formato de fecha.</param>
      <param name="sourceType">Tipo de origen que va a comprobarse.</param>
      <returns>Es <see langword="true" /> si el tipo especificado puede convertirse en una estructura <see cref="T:System.DateTimeOffset" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si una estructura <see cref="T:System.DateTimeOffset" /> puede convertirse en un objeto del tipo especificado.</summary>
      <param name="context">Contexto de formato de fecha.</param>
      <param name="destinationType">Tipo de destino que va a comprobarse.</param>
      <returns>Es <see langword="true" /> si una estructura <see cref="T:System.DateTimeOffset" /> puede convertirse en el tipo especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un tipo de datos <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">Contexto de formato de fecha.</param>
      <param name="culture">Referencia cultural de la fecha.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>Estructura <see cref="T:System.DateTimeOffset" /> que representa el objeto especificado.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte una estructura <see cref="T:System.DateTimeOffset" /> en un objeto del tipo especificado.</summary>
      <param name="context">Contexto de formato de fecha.</param>
      <param name="culture">Referencia cultural de la fecha.</param>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> que va a convertirse.</param>
      <param name="destinationType">Tipo al que se va a convertir.</param>
      <returns>Objeto del tipo especificado que representa la estructura <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Decimal" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor dado en un valor <see cref="T:System.Decimal" /> utilizando los argumentos.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>Especifica la propiedad de enlace predeterminada para un componente. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> sin ningún parámetro.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> con el nombre de propiedad especificado.</summary>
      <param name="name">Nombre de la propiedad de enlace predeterminada.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>Representa el valor predeterminado de la clase <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a la instancia actual del objeto <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <param name="obj">Objeto <see cref="T:System.Object" /> que se va a comparar con la instancia actual de <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</param>
      <returns>Es <see langword="true" /> si el objeto es igual a la instancia actual; de lo contrario, es <see langword="false" />, lo que indica que no son iguales.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>Obtiene el nombre de la propiedad de enlace predeterminada del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <returns>Nombre de la propiedad de enlace predeterminada del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>Especifica el evento predeterminado para un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name">Nombre del evento predeterminado del componente con el que está enlazado este atributo.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.DefaultEventAttribute" />, que es <see langword="null" />. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DefaultEventAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>Obtiene el nombre del evento predeterminado del componente con el que está enlazado este atributo.</summary>
      <returns>Nombre del evento predeterminado del componente con el que está enlazado este atributo. El valor predeterminado es <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>Especifica la propiedad predeterminada para un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name">Nombre de la propiedad predeterminada del componente con el que está enlazado este atributo.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, que es <see langword="null" />. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>Obtiene el nombre de la propiedad predeterminada del componente con el que está enlazado este atributo.</summary>
      <returns>Nombre de la propiedad predeterminada del componente con el que está enlazado este atributo. El valor predeterminado es <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>Proporciona datos para el evento <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner">Documento que está perdiendo la activación.</param>
      <param name="newDesigner">Documento que está ganando activación.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>Obtiene el documento que está ganando activación.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa al documento que está ganando activación.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>Obtiene el documento que está perdiendo activación.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa al documento que está perdiendo activación.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>Excepción que se produce cuando se cancela o falla un intento para desproteger un archivo que está protegido en un programa de administración de códigos fuente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> con ningún código de error o mensaje asociado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> con el contexto y los datos de serialización especificados.</summary>
      <param name="info">Clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a utilizar para la deserialización.</param>
      <param name="context">Destino que se va a utilizar para la deserialización.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> con el mensaje especificado.</summary>
      <param name="message">Mensaje que describe la excepción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> con la descripción detallada especificada y la excepción especificada.</summary>
      <param name="message">Descripción detallada del error.</param>
      <param name="innerException">Referencia a la excepción interna que es la causa de esta excepción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> con el mensaje o código de error especificado.</summary>
      <param name="message">Mensaje que describe la excepción.</param>
      <param name="errorCode">Código de error que se va a pasar.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CheckoutException" /> que indica que se ha cancelado la desprotección. Este campo es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>Representa un identificador de comando único formado por un identificador de comando numérico y un identificador GUID del grupo de menús.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.CommandID" /> utilizando el identificador GUID del grupo de menús y el identificador de comando numérico especificados.</summary>
      <param name="menuGroup">Identificador GUID del grupo al que pertenece este comando de menú.</param>
      <param name="commandID">Identificador numérico de este comando de menú.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.ComponentModel.Design.CommandID" /> son iguales.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el objeto especificado es equivalente a éste; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash para el objeto <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>Obtiene el identificador GUID del grupo de menús al que pertenece el comando de menú identificado por este <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns>Identificador GUID del grupo de comandos para este comando.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>Obtiene el identificador de comando numérico.</summary>
      <returns>Identificador numérico de comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>Devuelve un valor de tipo <see cref="T:System.String" /> que representa el objeto actual.</summary>
      <returns>Cadena que contiene la información del identificador de comando, tanto el identificador GUID como el identificador entero.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component">Componente que ha cambiado.</param>
      <param name="member">Un objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> que representa el miembro que ha cambiado.</param>
      <param name="oldValue">El valor antiguo del miembro que ha cambiado.</param>
      <param name="newValue">El nuevo valor del miembro que ha cambiado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>Obtiene el componente que se ha modificado.</summary>
      <returns>Un objeto <see cref="T:System.Object" /> que representa el componente que se ha modificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>Obtiene el miembro que se ha cambiado.</summary>
      <returns>Un objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica el miembro que se ha modificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>Obtiene el valor nuevo del miembro que ha cambiado.</summary>
      <returns>El nuevo valor del miembro que ha cambiado. Esta propiedad puede ser <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>Obtiene el valor antiguo del miembro que ha cambiado.</summary>
      <returns>El valor antiguo del miembro que ha cambiado. Esta propiedad puede ser <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>Representa el método que procesará un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component">Componente que se va a cambiar.</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica el miembro del componente que se va a cambiar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>Obtiene el componente que se va a cambiar o el componente que es el contenedor primario del miembro que se va a cambiar.</summary>
      <returns>Componente en el que se va a cambiar un miembro.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>Obtiene el miembro que se va a cambiar.</summary>
      <returns>
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica el miembro que se va a cambiar, si se conoce; en caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>Representa el método que procesará un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Evento <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> que contiene los datos de eventos.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>Proporciona datos para los eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> y <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component">Componente que constituye el origen del evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>Obtiene el componente asociado al evento.</summary>
      <returns>Componente asociado al evento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>Representa el método que controlará los eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> y <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> provocados para eventos de nivel de componente.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component">Componente al que se va a cambiar el nombre.</param>
      <param name="oldName">Nombre antiguo del componente.</param>
      <param name="newName">Nombre nuevo del componente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>Obtiene el componente al que se va a cambiar el nombre.</summary>
      <returns>Componente al que se va a cambiar el nombre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>Obtiene el nombre del componente después del evento de cambio de nombre.</summary>
      <returns>Nombre del componente después del evento de cambio de nombre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>Obtiene el nombre del componente antes del evento de cambio de nombre.</summary>
      <returns>Nombre anterior del componente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>Representa el método que procesará un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>Representa una colección de diseñadores.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contiene el conjunto de diseñadores especificado.</summary>
      <param name="designers">Lista que contiene la colección de diseñadores que se van a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contiene los diseñadores especificados.</summary>
      <param name="designers">Matriz de objetos <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que se van a almacenar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>Obtiene el número de diseñadores de la colección.</summary>
      <returns>Número de diseñadores de la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>Obtiene un nuevo enumerador para esta colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que enumera la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>Obtiene el diseñador en el índice especificado.</summary>
      <param name="index">Índice del diseñador que se va a devolver.</param>
      <returns>Diseñador en el índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la colección en un objeto <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de la colección. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos contenido en la colección.</summary>
      <returns>Número de elementos contenidos en la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene un nuevo enumerador para esta colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que enumera la colección.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>Proporciona datos para los eventos <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> y <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> del documento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>Obtiene el host del documento.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> del documento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>Representa el método que controlará los eventos <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> y <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> que se provocan al crear o eliminar un documento.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>Proporciona una clase base para obtener y establecer valores de opciones de un diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>Crea un nuevo objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> con el nombre especificado y lo agrega al elemento primario establecido.</summary>
      <param name="parent">Colección primaria de opciones del diseñador. Todas las colecciones tienen un elemento primario, con la excepción de la colección de objetos raíz.</param>
      <param name="name">Nombre de esta colección.</param>
      <param name="value">Objeto que proporciona propiedades para esta colección. Puede ser <see langword="null" /> si la colección no debe proporcionar ninguna propiedad.</param>
      <returns>Un nuevo <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> con el nombre especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> o <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> es una cadena vacía.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>Contiene una colección de opciones del diseñador. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia toda la colección en un objeto <see cref="T:System.Array" /> unidimensional y compatible, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="array">Control <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde la colección. <paramref name="array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>Obtiene el número de colecciones de opciones secundarias que contiene este objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Número de colecciones de opciones secundarias que contiene este objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración esta colección.</summary>
      <returns>Interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración esta colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Devuelve el índice de la primera aparición de un valor especificado en un intervalo de dicha colección.</summary>
      <param name="value">Objeto que se va a buscar en la colección.</param>
      <returns>Índice de la primera aparición de valor en toda la colección, si se encuentra; en caso contrario, límite inferior de la colección menos 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>Obtiene la colección secundaria en el índice especificado.</summary>
      <param name="index">Índice de base cero de la colección secundaria que se va a obtener.</param>
      <returns>Colección secundaria que se encuentra en el índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>Obtiene la colección secundaria en el nombre determinado.</summary>
      <param name="name">Nombre de la colección secundaria.</param>
      <returns>Colección secundaria con el nombre especificado por el parámetro <paramref name="name" /> o <see langword="null" /> si no se encuentra el nombre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>Obtiene el nombre de <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>Nombre de <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>Obtiene el objeto de colección primario.</summary>
      <returns>Objeto de colección primario o <see langword="null" /> si no hay ningún objeto primario.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>Obtiene la colección de propiedades proporcionada por este objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, junto con todos sus elementos secundarios.</summary>
      <returns>Colección de propiedades proporcionada por este objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, junto con todos sus elementos secundarios.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>Muestra una interfaz de usuario de cuadro de diálogo con la que el usuario puede configurar las opciones en el objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>
        <see langword="true" /> si se puede mostrar el cuadro de diálogo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado y, por tanto, es seguro para la ejecución de subprocesos.</summary>
      <returns>
        <see langword="true" /> si el acceso a la colección está sincronizado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a agregar a <see cref="T:System.Collections.IList" />.</param>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la colección contiene un valor concreto.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Object" /> está en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a insertar en la colección.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la colección tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la colección tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns>Elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto concreto de la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a quitar de la colección.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento de la colección que está en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>Obtiene la colección de opciones para este servicio.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> que contiene las opciones del diseñador disponibles.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Rellena una colección <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options">Colección que se va a rellenar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>Muestra el cuadro de diálogo de opciones para el objeto especificado.</summary>
      <param name="options">Colección de opciones que contiene el objeto al que se va a invocar.</param>
      <param name="optionObject">Objeto de opciones real.</param>
      <returns>
        <see langword="true" /> si se muestra el cuadro de diálogo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>Obtiene el valor de una opción definida en este paquete.</summary>
      <param name="pageName">Página a la que está enlazada la opción.</param>
      <param name="valueName">Nombre del valor de la opción.</param>
      <returns>Valor de la opción denominada <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> o <paramref name="valueName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>Establece el valor de una opción definida en este paquete.</summary>
      <param name="pageName">Página a la que está enlazada la opción.</param>
      <param name="valueName">Nombre del valor de la opción.</param>
      <param name="value">Valor de la opción.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> o <paramref name="valueName" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>Permite agrupar una serie de acciones en tiempo de diseño para mejorar el rendimiento y habilitar la posibilidad de deshacer la mayoría de los tipos de cambio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> sin ninguna descripción.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> utilizando la descripción de transacción especificada.</summary>
      <param name="description">Descripción para esta transacción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>Cancela la transacción e intenta deshacer los cambios realizados por los eventos de la transacción.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>Obtiene un valor que indica si se canceló la transacción.</summary>
      <returns>
        <see langword="true" /> si se canceló la transacción; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>Confirma la transacción.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>Obtiene un valor que indica si se confirmó la transacción.</summary>
      <returns>
        <see langword="true" /> si se confirmó la transacción; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>Obtiene una descripción para la transacción.</summary>
      <returns>Descripción para la transacción.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>Libera los recursos asociados a este objeto. Este reemplazo confirma esta transacción si aún no se había confirmado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>Genera el evento <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>Realiza el trabajo real de confirmación de una transacción.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>Proporciona datos para los eventos <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> y <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />, usando el valor especificado que indica si el diseñador llamó a <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> en la transacción.</summary>
      <param name="commit">Valor que indica si se confirmó la transacción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit">Valor que indica si se confirmó la transacción.</param>
      <param name="lastTransaction">
        <see langword="true" /> si esta es la última transacción que se va a cerrar; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>Obtiene un valor que indica si esta es la última transacción que se va a cerrar.</summary>
      <returns>
        <see langword="true" /> si esta es la última transacción que se va a cerrar; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>Indica si el diseñador llamó a <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> en la transacción.</summary>
      <returns>Es <see langword="true" /> si el diseñador llamó a <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> en la transacción; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>Representa el método que controla los eventos <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> y <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> de un diseñador.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>Representa un verbo que se puede invocar desde un diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Texto del comando de menú que se muestra al usuario.</param>
      <param name="handler">Controlador de eventos que realiza las acciones del verbo.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">Texto del comando de menú que se muestra al usuario.</param>
      <param name="handler">Controlador de eventos que realiza las acciones del verbo.</param>
      <param name="startCommandID">Identificador de comando inicial de este verbo. De manera predeterminada, la arquitectura del diseñador reserva un intervalo de identificadores de comando para los verbos. Esto se puede reemplazar proporcionando un identificador de comando personalizado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>Obtiene o establece la descripción del elemento de menú para el verbo.</summary>
      <returns>Una cadena que describe el elemento de menú.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>Obtiene la descripción de texto para el comando de verbo del menú.</summary>
      <returns>Descripción para el comando de verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>Invalida <see cref="M:System.Object.ToString" />.</summary>
      <returns>Texto del verbo o cadena vacía ("") si el campo de texto está vacío.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> mediante la matriz especificada de los objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value">Matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que indica los verbos contenidos en la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>Agrega el <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado a la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se agrega a la colección.</param>
      <returns>Índice de la colección al que se ha agregado el verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Agrega el conjunto especificado de verbos del diseñador a la colección.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se agregará a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>Agrega la colección especificada de verbos del diseñador a la colección.</summary>
      <param name="value">Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que se va a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtiene un valor que indica si el <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si el objeto especificado existe en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>Copia los miembros de la colección en la matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificada a partir del índice de destino especificado.</summary>
      <param name="array">Matriz en la que se van a copiar los miembros de la colección.</param>
      <param name="index">Índice de destino dónde empezar a copiar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtiene el índice del objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> cuyo índice se obtiene en la colección.</param>
      <returns>Índice del objeto especificado si se encuentra en la lista; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>Inserta el objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> en el índice especificado.</summary>
      <param name="index">Índice de la colección donde se va a insertar el verbo.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> para insertar en la colección.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.ComponentModel.Design.DesignerVerb" /> en el índice especificado.</summary>
      <param name="index">Índice donde se va a obtener o establecer el objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns>Un objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> en cada índice válido de la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Genera el evento <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Genera el evento <see langword="Insert" />.</summary>
      <param name="index">Índice en el que insertar un elemento.</param>
      <param name="value">Objeto que se va a insertar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Genera el evento <see langword="Remove" />.</summary>
      <param name="index">Índice en el que quitar el elemento.</param>
      <param name="value">Objeto que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Genera el evento <see langword="Set" />.</summary>
      <param name="index">Índice en el que establecer el elemento.</param>
      <param name="oldValue">Objeto antiguo.</param>
      <param name="newValue">El objeto nuevo.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>Genera el evento <see langword="Validate" />.</summary>
      <param name="value">Objeto que se va a validar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>Quita el objeto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a quitar de la colección.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>Representa un contexto de licencia en tiempo de diseño compatible con un proveedor de licencia en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Obtiene una clave de licencia guardada.</summary>
      <param name="type">Tipo de la clave de licencia.</param>
      <param name="resourceAssembly">Ensamblado del que se obtendrá la clave.</param>
      <returns>Clave de licencia guardada que coincide con el tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Establece una clave de licencia guardada.</summary>
      <param name="type">Tipo de la clave de licencia.</param>
      <param name="key">Clave de licencia.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>Obtiene el modo de uso de licencia.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> que indica el modo de licencia del contexto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>Proporciona compatibilidad para la serialización del contexto de licencia en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>Serializa las licencias en el contexto de licencia en tiempo de diseño especificado mediante la clave y el flujo de salida especificados.</summary>
      <param name="o">Secuencia de salida.</param>
      <param name="cryptoKey">Clave que se utilizará para el cifrado.</param>
      <param name="context">Objeto <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> que indica el contexto de licencia.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>Define identificadores que indican información acerca del contexto en que se ha originado una solicitud de información de ayuda.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>Contexto general.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>Selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>Selección de ventana de herramientas.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>Ventana.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>Especifica la palabra clave de contexto para una clase o miembro. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword">Valor de la palabra clave para el sistema de ayuda.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> a partir del tipo especificado.</summary>
      <param name="t">Tipo a partir del cual se tomará la palabra clave para el sistema de ayuda.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> es <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>Representa el valor predeterminado de <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> son iguales.</summary>
      <param name="obj">Objeto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> que se va a comparar con el objeto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>Obtiene la palabra clave para el sistema de ayuda que proporciona este atributo.</summary>
      <returns>Palabra clave para el sistema de ayuda que proporciona este atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>Determina si la palabra clave para el sistema de ayuda es <see langword="null" />.</summary>
      <returns>
        <see langword="true" /> si la palabra clave para el sistema de ayuda es <see langword="null" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>Define identificadores que indican el tipo de una palabra clave de Ayuda.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>Palabra clave sobre la que se ha solicitado ayuda presionando F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>Palabra clave de filtro.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>Palabra clave general.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>Proporciona una interfaz para agregar y quitar los controladores de eventos que agregan, cambian, quitan o cambian de nombre componentes, y proporciona métodos para iniciar un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> o <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>Se produce cuando se ha agregado un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>Se produce cuando un componente está en el proceso de agregarse.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>Se produce cuando se ha cambiado un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>Se produce cuando un componente está en el proceso de cambiarse.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>Se produce cuando se ha quitado un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>Se produce cuando un componente está en el proceso de quitarse.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>Se produce cuando se cambia el nombre de un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Anuncia al servicio de cambio de componentes que un determinado componente ha cambiado.</summary>
      <param name="component">Componente que ha cambiado.</param>
      <param name="member">Miembro que ha cambiado. Es <see langword="null" /> si este cambio no está relacionado con un solo miembro.</param>
      <param name="oldValue">Valor antiguo del miembro. Sólo es válido si el miembro no es <see langword="null" />.</param>
      <param name="newValue">Valor nuevo del miembro. Sólo es válido si el miembro no es <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Anuncia al servicio de cambio de componentes que un determinado componente está cambiando.</summary>
      <param name="component">Componente que va a cambiar.</param>
      <param name="member">Miembro que se va a cambiar. Es <see langword="null" /> si este cambio no está relacionado con un solo miembro.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>Habilita la enumeración de componentes en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>Obtiene la lista de tipos de componente disponibles.</summary>
      <param name="designerHost">Host del diseñador que proporciona servicios en tiempo de diseño. Puede ser <see langword="null" />.</param>
      <param name="baseType">Tipo base que especifica los componentes que se van a recuperar. Puede ser <see langword="null" />.</param>
      <returns>La lista de tipos de componente disponibles.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>Proporciona un conjunto de valores predeterminados recomendados durante la creación de componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Restaura una instancia de un componente a su estado predeterminado.</summary>
      <param name="defaultValues">Diccionario de valores de propiedades predeterminados, que son pares de nombre/valor con los que restablecer el estado del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Inicializa un nuevo componente utilizando un conjunto de valores recomendados.</summary>
      <param name="defaultValues">Diccionario de valores de propiedades predeterminados, que son pares de nombre/valor con los que inicializar el estado del componente.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>Proporciona el marco de trabajo básico para compilar un diseñador personalizado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>Obtiene el componente base que está diseñando el diseñador.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> que indica el componente base que diseña el diseñador.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>Realiza la acción predeterminada para el diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa el diseñador con el componente especificado.</summary>
      <param name="component">Componente que se va a asociar al diseñador.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>Obtiene una colección de los verbos en tiempo de diseño admitidos por el diseñador.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contiene los verbos admitidos por el diseñador, o <see langword="null" /> si el componente no tiene verbos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>Proporciona notificaciones de eventos cuando se agregan y quitan diseñadores raíz, cuando un componente seleccionado cambia y cuando el diseñador raíz actual cambia.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>Obtiene el diseñador raíz del documento activo en ese momento.</summary>
      <returns>Documento activo actual o <see langword="null" /> si no hay ningún documento activo.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>Se produce cuando cambia el diseñador raíz actual.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>Se produce cuando se crea un diseñador raíz.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>Se produce cuando se desecha el diseñador raíz de un documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>Obtiene una colección de diseñadores raíz para los documentos de diseño que están actualmente activos en el entorno de desarrollo.</summary>
      <returns>Una colección <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contiene los diseñadores raíz que se han creado pero aún no se han desechado.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>Se produce cuando cambia la selección de vista de diseño actual.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>Proporciona una interfaz que habilita a un diseñador para tener acceso y filtrar los diccionarios de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" /> que almacena los descriptores de propiedad, atributo y evento que un diseñador de componentes puede exponer en el entorno en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de atributos que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de eventos que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador cambie o quite elementos del conjunto de propiedades que se exponen a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de atributos que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de eventos que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Cuando se reemplaza en una clase derivada, permite que un diseñador agregue elementos al conjunto de propiedades que se expone a través de un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>Proporciona una interfaz para administrar transacciones y componentes de diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>Activa el diseñador hospedado en este host.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>Se produce cuando se activa el diseñador.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>Obtiene el contenedor para el host del diseñador.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> de este host.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>Crea un componente del tipo especificado y lo agrega al documento de diseño.</summary>
      <param name="componentClass">Tipo del componente que se va a crear.</param>
      <returns>Componente recién creado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>Crea un componente del tipo y nombre especificados y lo agrega al documento de diseño.</summary>
      <param name="componentClass">Tipo del componente que se va a crear.</param>
      <param name="name">Nombre para el componente.</param>
      <returns>Componente recién creado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>Crea una <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que puede encapsular secuencias de eventos para mejorar el rendimiento y habilitar funcionalidad para las operaciones de deshacer y rehacer.</summary>
      <returns>Nueva instancia de <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Cuando haya finalizado todos los pasos de la transacción, debe llamar a <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> en este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>Crea una <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que puede encapsular secuencias de eventos para mejorar el rendimiento y habilitar funcionalidad para las operaciones de deshacer y rehacer, utilizando la descripción de transacción especificada.</summary>
      <param name="description">Título o descripción para la transacción que se acaba de crear.</param>
      <returns>Un nuevo objeto <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Cuando haya finalizado todos los pasos de la transacción, debe llamar a <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> en este objeto.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>Se produce cuando se desactiva el diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>Destruye el componente especificado y lo quita del contenedor del diseñador.</summary>
      <param name="component">Componente que se va a destruir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>Obtiene la instancia del diseñador que contiene el componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> para el que se va a recuperar el diseñador.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> o <see langword="null" /> si no hay un diseñador para el componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>Obtiene una instancia del nombre de tipo completo especificado.</summary>
      <param name="typeName">Nombre del tipo que se va a cargar.</param>
      <returns>Objeto de tipo del nombre de tipo especificado o <see langword="null" /> si no se encuentra el tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>Obtiene un valor que indica si el host del diseñador está ejecutando actualmente una transacción.</summary>
      <returns>Es <see langword="true" /> si se está ejecutando una transacción; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>Se produce cuando el diseñador termina de cargar su documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>Obtiene un valor que indica si el host del diseñador está cargando el documento.</summary>
      <returns>Es <see langword="true" /> si el host del diseñador está cargando el documento; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>Obtiene la instancia de la clase base que se utiliza como componente raíz para el diseño actual.</summary>
      <returns>Instancia de la clase de componente raíz.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>Obtiene el nombre completo de la clase que se está diseñando.</summary>
      <returns>Nombre completo de la clase de componente base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>Agrega un controlador de eventos para el evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>Agrega un controlador de eventos para el evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>Obtiene una descripción de la transacción actual.</summary>
      <returns>Descripción de la transacción actual.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>Agrega un controlador de eventos para el evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>Agrega un controlador de eventos para el evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>Especifica los métodos para que el host del diseñador notifique el estado de las transacciones.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>Obtiene un valor que indica si el host del diseñador está cerrando una transacción.</summary>
      <returns>Es <see langword="true" /> si el diseñador está cerrando una transacción; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Proporciona acceso a las opciones del diseñador ubicadas en el menú Herramientas bajo el comando Opciones en el entorno de desarrollo de Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>Obtiene el valor de la opción del Diseñador de Windows Forms especificada.</summary>
      <param name="pageName">Nombre de la página que define la opción.</param>
      <param name="valueName">Nombre de la propiedad de la opción.</param>
      <returns>Valor de la opción especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>Establece el valor de la opción del Diseñador de Windows Forms especificada.</summary>
      <param name="pageName">Nombre de la página que define la opción.</param>
      <param name="valueName">Nombre de la propiedad de la opción.</param>
      <param name="value">Nuevo valor.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>Proporciona un diccionario básico de pares clave-valor específico del componente a través de un servicio que un diseñador puede utilizar para almacenar los datos definidos por el usuario.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>Obtiene la clave que corresponde al valor especificado.</summary>
      <param name="value">Valor que se va a buscar en el diccionario.</param>
      <returns>La clave asociada o <see langword="null" /> si no hay ninguna clave.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>Obtiene el valor que corresponde a la clave especificada.</summary>
      <param name="key">Clave para la que se va a buscar el valor.</param>
      <returns>El valor asociado o <see langword="null" /> si no hay ningún valor.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>Establece el par clave-valor especificado.</summary>
      <param name="key">Objeto que se va a utilizar como clave a la que asociar el valor.</param>
      <param name="value">Valor que se va a almacenar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>Proporciona un servicio para registrar los controladores de eventos de los eventos de los componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Crea un nombre único para un método de control de eventos para el componente y evento especificados.</summary>
      <param name="component">Instancia del componente a la que está conectado el evento.</param>
      <param name="e">Evento para el que se va a crear un nombre.</param>
      <returns>Nombre del método de control de eventos recomendado para este evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Obtiene una colección de métodos de control de eventos que tienen una firma de método compatible con el evento especificado.</summary>
      <param name="e">Evento para el que se van a obtener métodos de control de eventos compatibles.</param>
      <returns>Colección de cadenas.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.EventDescriptor" /> para el evento que representa el descriptor de propiedades especificado, si representa un evento.</summary>
      <param name="property">Propiedad que representa un evento.</param>
      <returns>Un objeto <see cref="T:System.ComponentModel.EventDescriptor" /> del evento que representa la propiedad, o <see langword="null" /> si la propiedad no representa un evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>Convierte un conjunto de descriptores de eventos en un conjunto de descriptores de propiedades.</summary>
      <param name="events">Eventos que se van a convertir en propiedades.</param>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describen el conjunto de eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>Convierte un único descriptor de eventos en un descriptor de propiedades.</summary>
      <param name="e">Evento que se va a convertir.</param>
      <returns>Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describe el evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>Muestra el código de usuario del diseñador.</summary>
      <returns>Es <see langword="true" /> si se muestra el código; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Muestra el código de usuario del evento especificado.</summary>
      <param name="component">Componente al que está conectado el evento.</param>
      <param name="e">Evento que se va a mostrar.</param>
      <returns>Es <see langword="true" /> si se muestra el código; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>Muestra el código de usuario del diseñador en la línea especificada.</summary>
      <param name="lineNumber">Número de la línea donde se ha de colocar el símbolo de intercalación.</param>
      <returns>Es <see langword="true" /> si se muestra el código; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Proporciona una interfaz que puede enumerar proveedores extensores.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>Obtiene el conjunto de proveedores extensores del componente.</summary>
      <returns>Matriz de tipo <see cref="T:System.ComponentModel.IExtenderProvider" /> que enumera los proveedores extensores activos. Si no hay ningún proveedor, se devolverá una matriz vacía.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>Proporciona una interfaz para agregar y quitar proveedores extensores en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Agrega el proveedor extensor especificado.</summary>
      <param name="provider">Proveedor extensor que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Quita el proveedor extensor especificado.</summary>
      <param name="provider">Proveedor extensor que se va a quitar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>Proporciona métodos para mostrar los temas de Ayuda y para agregar y quitar palabras clave de Ayuda en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Agrega un atributo de contexto al documento.</summary>
      <param name="name">Nombre del atributo que se va a agregar.</param>
      <param name="value">El valor del atributo.</param>
      <param name="keywordType">Tipo de palabra clave, extraído de la enumeración <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>Quita del documento todos los atributos de contexto existentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>Crea una interfaz <see cref="T:System.ComponentModel.Design.IHelpService" /> local para administrar subcontextos.</summary>
      <param name="contextType">Tipo de prioridad del subcontexto que se va a agregar.</param>
      <returns>Colección <see cref="T:System.ComponentModel.Design.IHelpService" /> creada recientemente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Quita un atributo de contexto agregado previamente.</summary>
      <param name="name">Nombre del atributo que se va a quitar.</param>
      <param name="value">Valor del atributo que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>Quita un contexto creado con <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext">Contexto local <see cref="T:System.ComponentModel.Design.IHelpService" /> que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Muestra el tema de Ayuda que corresponde a la palabra clave especificada.</summary>
      <param name="helpKeyword">Palabra clave del tema de Ayuda que se va a mostrar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>Muestra el tema de Ayuda que corresponde a la dirección URL especificada.</summary>
      <param name="helpUrl">Dirección URL del tema de Ayuda que se va a mostrar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>Proporciona métodos para identificar los componentes de un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Busca, en el componente especificado, campos que implementen la interfaz <see cref="T:System.ComponentModel.IComponent" /> y los agrega al contenedor especificado almacenando el nivel de herencia de todos los que puedan recuperarse con el método <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a buscar. La búsqueda empieza por este componente.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> al que se va a agregar componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Obtiene el atributo de herencia del componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> para el que se debe recuperar el atributo de referencia.</param>
      <returns>Instancia de <see cref="T:System.ComponentModel.InheritanceAttribute" /> que describe el nivel de herencia del componente especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>Proporciona métodos para administrar los verbos globales del diseñador y los comandos de menú disponibles en modo de diseño, así como para mostrar algunos tipos de menús contextuales.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Agrega el comando de menú estándar especificado al menú.</summary>
      <param name="command">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> que se va a agregar.</param>
      <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.ComponentModel.Design.CommandID" /> del objeto <see cref="T:System.ComponentModel.Design.MenuCommand" /> especificado ya existe en un menú.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Agrega el verbo del diseñador especificado al conjunto de verbos globales del diseñador.</summary>
      <param name="verb">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Busca el identificador de comando especificado y devuelve el comando de menú asociado.</summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se va a buscar.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> asociado a este identificador de comando o <see langword="null" /> si no se encuentra ningún comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Invoca a un comando de menú o de verbo del diseñador que coincida con el identificador de comando especificado.</summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> del comando que se va a buscar y ejecutar.</param>
      <returns>Es <see langword="true" /> si el comando se invocó y se encontró satisfactoriamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Quita el comando de menú estándar especificado del menú.</summary>
      <param name="command">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Quita el verbo del diseñador especificado del conjunto de verbos globales del diseñador.</summary>
      <param name="verb">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Muestra el menú contextual especificado en la ubicación especificada.</summary>
      <param name="menuID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> del menú contextual que se va a mostrar.</param>
      <param name="x">Coordenada x donde se va a mostrar el menú de acceso directo, en coordenadas de pantalla.</param>
      <param name="y">Coordenada y donde se va a mostrar el menú de acceso directo, en coordenadas de pantalla.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>Obtiene una colección de los verbos de diseñador que están disponibles actualmente.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> de los verbos de diseñador que están disponibles actualmente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>Proporciona una interfaz para obtener referencias a los objetos de un proyecto por nombre o tipo, para obtener el nombre de un objeto especificado y para buscar el objeto principal de un objeto especificado en un proyecto del diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>Obtiene el componente que contiene el componente especificado.</summary>
      <param name="reference">Objeto para el que se va a recuperar el componente principal.</param>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> base que contiene el objeto especificado, o <see langword="null" /> si no existe un componente principal.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>Obtiene el nombre del componente especificado.</summary>
      <param name="reference">Objeto cuyo nombre se va a devolver.</param>
      <returns>Nombre del objeto al que se hace referencia o <see langword="null" /> si la referencia al objeto no es válida.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>Obtiene una referencia al componente cuyo nombre coincide con el nombre especificado.</summary>
      <param name="name">Nombre del componente al que se va a devolver una referencia.</param>
      <returns>Objeto al que hace referencia el nombre especificado o <see langword="null" /> si no se encuentra ninguna referencia.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>Obtiene todas las referencias disponibles a los componentes del proyecto.</summary>
      <returns>Matriz de todos los objetos con referencias disponibles a <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>Obtiene todas las referencias disponibles a los componentes del tipo especificado.</summary>
      <param name="baseType">Tipo de objeto del que se van a devolver referencias a instancias.</param>
      <returns>Matriz de todos los objetos disponibles del tipo especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>Proporciona una interfaz para que los diseñadores tengan acceso a los lectores y escritores de recursos para tipos de recursos <see cref="T:System.Globalization.CultureInfo" /> específicos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>Busca el lector de recursos para la referencia cultural especificada y lo devuelve.</summary>
      <param name="info">El objeto <see cref="T:System.Globalization.CultureInfo" /> del recurso cuyo lector de recursos se va a recuperar.</param>
      <returns>Una interfaz <see cref="T:System.Resources.IResourceReader" /> que contiene los recursos de la referencia cultural o <see langword="null" /> si no hay recursos de la referencia cultural.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>Busca el escritor de recursos de la referencia cultural especificada y lo devuelve.</summary>
      <param name="info">El objeto <see cref="T:System.Globalization.CultureInfo" /> del recurso cuyo escritor de recursos se va a crear.</param>
      <returns>Una interfaz <see cref="T:System.Resources.IResourceWriter" /> de la referencia cultural especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>Proporciona funcionalidad para las tecnologías de vista de diseñador de nivel raíz.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Obtiene un objeto de vista de la tecnología de vista especificada.</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> que indica una tecnología de vista concreta.</param>
      <returns>Objeto que representa la vista de este diseñador.</returns>
      <exception cref="T:System.ArgumentException">La tecnología de vista especificada no se admite o no existe.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>Obtiene el conjunto de tecnologías que admite este diseñador para su presentación.</summary>
      <returns>Matriz de valores <see cref="T:System.ComponentModel.Design.ViewTechnology" /> admitidos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>Proporciona una interfaz para que un diseñador seleccione componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>Obtiene un valor que indica si el componente especificado se encuentra actualmente seleccionado.</summary>
      <param name="component">Componente que se va a probar.</param>
      <returns>Es <see langword="true" /> si el componente forma parte de la selección actual del usuario; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>Obtiene una colección de componentes que están seleccionados actualmente.</summary>
      <returns>Colección que representa el conjunto actual de componentes seleccionados.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>Obtiene el objeto que es el objeto principal actual seleccionado.</summary>
      <returns>Objeto que es el objeto seleccionado principal actual.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>Se produce cuando cambia la selección actual.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>Se produce cuando va a cambiar la selección actual.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>Obtiene el número de objetos seleccionados.</summary>
      <returns>Número de objetos seleccionados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>Selecciona la colección de componentes especificada.</summary>
      <param name="components">Colección de componentes que se va a seleccionar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>Selecciona los componentes de la colección de componentes especificada que coincidan con el tipo de selección especificada.</summary>
      <param name="components">Colección de componentes que se va a seleccionar.</param>
      <param name="selectionType">Un valor de la enumeración <see cref="T:System.ComponentModel.Design.SelectionTypes" />. De manera predeterminada, es <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>Proporciona un contenedor para servicios.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="callback">Objeto de devolución de llamada que se utiliza para crear el servicio. Esto permite declarar un servicio como disponible, pero retrasa la creación del objeto hasta que se solicita el servicio.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Agrega el servicio especificado al contenedor de servicios y, opcionalmente, promueve el servicio para los contenedores de servicios principales.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="callback">Objeto de devolución de llamada que se utiliza para crear el servicio. Esto permite declarar un servicio como disponible, pero retrasa la creación del objeto hasta que se solicita el servicio.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitud a cualquier contenedor de servicios principal; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="serviceInstance">Instancia del tipo de servicio que se agrega. Este objeto debe implementar o heredar del tipo indicado por el parámetro <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Agrega el servicio especificado al contenedor de servicios y, opcionalmente, promueve el servicio para los contenedores de servicios principales.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="serviceInstance">Instancia del tipo de servicio que se agrega. Este objeto debe implementar o heredar del tipo indicado por el parámetro <paramref name="serviceType" />.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitud a cualquier contenedor de servicios principal; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>Quita el tipo de servicio especificado del contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Quita el tipo de servicio especificado del contenedor de servicios y, opcionalmente, promueve el servicio para los contenedores de servicios principales.</summary>
      <param name="serviceType">Tipo de servicio que se va a quitar.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitud a cualquier contenedor de servicios principal; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>Proporciona compatibilidad para compilar un conjunto de diseñadores personalizados relacionados.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>Obtiene una colección de diseñadores secundarios.</summary>
      <returns>Interfaz <see cref="T:System.Collections.ICollection" /> que contiene la colección de objetos secundarios <see cref="T:System.ComponentModel.Design.IDesigner" /> del diseñador actual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>Obtiene el diseñador primario.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.Design.IDesigner" /> que representa el diseñador primario o <see langword="null" /> si no hay ningún elemento primario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>Proporciona una interfaz para modificar el conjunto de descriptores de miembro para un componente en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra los atributos que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Componente cuyos atributos se van a filtrar.</param>
      <param name="attributes">Diccionario de atributos que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de atributos filtrados se debe guardar en caché; <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra los eventos que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Componente cuyos eventos se van a filtrar.</param>
      <param name="events">Diccionario de eventos que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de eventos filtrados se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra las propiedades que expone un componente mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">Componente cuyas propiedades se van a filtrar.</param>
      <param name="properties">Diccionario de propiedades que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de propiedades filtradas se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>Detecta los tipos disponibles en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>Recupera la lista de tipos disponibles.</summary>
      <param name="baseType">Tipo base con el que deben coincidir. Puede ser <see langword="null" />.</param>
      <param name="excludeGlobalTypes">Indica si se deben comprobar los tipos procedentes de todos los ensamblados de referencia.</param>
      <returns>Colección de tipos que coinciden con los criterios especificados por <paramref name="baseType" /> y <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>Proporciona una interfaz para recuperar un ensamblado o un tipo por nombre.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>Obtiene el ensamblado solicitado.</summary>
      <param name="name">Nombre del ensamblado que se va a recuperar.</param>
      <returns>Instancia del ensamblado solicitado o <see langword="null" /> si no se encuentra ningún ensamblado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Obtiene el ensamblado solicitado.</summary>
      <param name="name">Nombre del ensamblado que se va a recuperar.</param>
      <param name="throwOnError">Es <see langword="true" /> si este método debe producir una excepción si no se puede localizar el ensamblado; en caso contrario, es <see langword="false" /> y este método devuelve <see langword="null" /> si no se puede localizar el ensamblado.</param>
      <returns>Instancia del ensamblado solicitado o <see langword="null" /> si no se encuentra ningún ensamblado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>Obtiene la ruta de acceso al archivo desde el que se cargó el ensamblado.</summary>
      <param name="name">Nombre del ensamblado.</param>
      <returns>Ruta de acceso al archivo desde el que se cargó el ensamblado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>Carga un tipo con el nombre especificado.</summary>
      <param name="name">Nombre del tipo. Si el nombre del tipo no es un nombre completo que indica un ensamblado, este servicio buscará su conjunto interno de ensamblados a los que se hace referencia.</param>
      <returns>Instancia de <see cref="T:System.Type" /> que corresponde al nombre especificado o <see langword="null" /> si no se encuentra ningún tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>Carga un tipo con el nombre especificado.</summary>
      <param name="name">Nombre del tipo. Si el nombre del tipo no es un nombre completo que indica un ensamblado, este servicio buscará su conjunto interno de ensamblados a los que se hace referencia.</param>
      <param name="throwOnError">Es <see langword="true" /> si este método debe producir una excepción si no se puede localizar el ensamblado; en caso contrario, es <see langword="false" /> y este método devuelve <see langword="null" /> si no se puede localizar el ensamblado.</param>
      <returns>Instancia de <see cref="T:System.Type" /> que corresponde al nombre especificado o <see langword="null" /> si no se encuentra ningún tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Carga un tipo con el nombre especificado.</summary>
      <param name="name">Nombre del tipo. Si el nombre del tipo no es un nombre completo que indica un ensamblado, este servicio buscará su conjunto interno de ensamblados a los que se hace referencia.</param>
      <param name="throwOnError">Es <see langword="true" /> si este método debe producir una excepción si no se puede localizar el ensamblado; en caso contrario, es <see langword="false" /> y este método devuelve <see langword="null" /> si no se puede localizar el ensamblado.</param>
      <param name="ignoreCase">Es <see langword="true" /> para no distinguir mayúsculas y minúsculas cuando se busca por tipos; en caso contrario, es <see langword="false" />.</param>
      <returns>Instancia de <see cref="T:System.Type" /> que corresponde al nombre especificado o <see langword="null" /> si no se encuentra ningún tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>Agrega una referencia al ensamblado especificado.</summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" /> que indica el ensamblado al que se va a hacer referencia.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Representa un elemento de comando de barra de herramientas o de menú de Windows.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler">Evento que se va a provocar cuando el usuario seleccione el elemento de menú o el botón de barra de herramientas.</param>
      <param name="command">Identificador de comando único que vincula este comando de menú al menú del entorno.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>Obtiene o establece un valor que indica si el elemento de menú está activado.</summary>
      <returns>Es <see langword="true" /> si el elemento está activado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>Se produce cuando cambia el comando de menú.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>Obtiene el <see cref="T:System.ComponentModel.Design.CommandID" /> asociado al comando de menú.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> asociado al comando de menú.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>Obtiene un valor que indica si el elemento de menú está disponible.</summary>
      <returns>Es <see langword="true" /> si el elemento está habilitado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>Invoca el comando.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>Llama al comando con el parámetro determinado.</summary>
      <param name="arg">Argumento opcional para ser utilizado por el comando.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>Obtiene el código de estado del comando OLE para el elemento de menú.</summary>
      <returns>Entero que contiene una combinación de marcadores de estado que reflejan el estado de este elemento de menú.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>Obtiene las propiedades públicas asociadas a la clase <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IDictionary" /> que contiene las propiedades públicas de la clase <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>Obtiene o establece un valor que indica si se admite el elemento de menú.</summary>
      <returns>Es <see langword="true" /> si se admite el elemento, que es el valor predeterminado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>Devuelve una representación en forma de cadena de este comando de menú.</summary>
      <returns>Cadena que contiene el valor de la propiedad <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> que tiene agregados los nombres de los marcadores establecidos, separados por barras verticales (| Entre las propiedades de los marcadores se incluyen <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> y <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>Obtiene o establece un valor que indica si el elemento de menú es visible.</summary>
      <returns>Es <see langword="true" /> si el elemento es visible; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>Define identificadores que indican el tipo de una selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>Selección de adición que agrega los componentes seleccionados a la selección actual, manteniendo el conjunto actual de componentes seleccionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>Representa una selección normal. El servicio de selección responde a las teclas CONTROL y MAYÚSCULAS para admitir la adición o eliminación de componentes en la selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>Representa la selección que se produce cuando un usuario hace clic en un componente. Si el componente que se acaba de seleccionar ya está seleccionado, pasa a ser el componente seleccionado principal en lugar de cancelarse su selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>Representa la selección que se produce cuando el usuario presiona el botón del mouse con el puntero situado sobre un componente. Si el componente situado bajo el puntero ya está seleccionado, pasa a ser el componente seleccionado principal en lugar de cancelarse su selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>Representa la selección que se produce cuando el usuario suelta el botón del mouse inmediatamente después de haberse seleccionado un componente. Si el componente que se acaba de seleccionar ya está seleccionado, pasa a ser el componente seleccionado principal en lugar de cancelarse su selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>Representa una selección normal. El servicio de selección responde a las teclas CONTROL y MAYÚSCULAS para admitir la adición o eliminación de componentes en la selección.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>Representa la selección principal que se produce cuando un usuario hace clic en un componente. Si ya se ha seleccionado un componente en la lista de selección, el componente pasa a ser el componente seleccionado principal.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>Representa la selección de eliminación que quita los componentes seleccionados de la selección actual, manteniendo el conjunto actual de componentes seleccionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>Representa la selección que se produce cuando se reemplaza el contenido de una selección. El servicio de selección reemplaza la selección actual por la de sustitución.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>Selección alternante que cambia entre la selección actual y la selección propuesta. Si ya se ha seleccionado un componente y se pasa éste a <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> con un tipo de selección <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, se cancelará la selección del componente.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>Identifica los tipos de selección válidos como <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> o <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>Proporciona la clase base para serializar un conjunto de componentes u objetos serializables en un almacén de serialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>Crea un nuevo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns>Un nuevo almacén de serialización creado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Deserializa el almacén determinado para generar una colección de objetos.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> que se va a deserializar.</param>
      <returns>Colección de objetos creada en función del estado almacenado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no contiene datos en un formato que pueda procesar el contenedor de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Deserializa el almacén determinado y rellena la interfaz <see cref="T:System.ComponentModel.IContainer" /> determinada con los objetos <see cref="T:System.ComponentModel.IComponent" /> deserializados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> que se va a deserializar.</param>
      <param name="container">Interfaz <see cref="T:System.ComponentModel.IContainer" /> a la que se van a agregar los objetos <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns>Colección de objetos creada en función del estado almacenado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no contiene datos en un formato que pueda procesar el contenedor de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Deserializa el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado en el contenedor determinado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> que se va a deserializar.</param>
      <param name="container">Contenedor al que se van a agregar los objetos <see cref="T:System.ComponentModel.IComponent" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no contiene datos en un formato que pueda procesar el contenedor de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>Deserializa el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado en el contenedor determinado, validando opcionalmente los tipos reciclados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> que se va a deserializar.</param>
      <param name="container">Contenedor al que se van a agregar los objetos <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes">Es <see langword="true" /> para garantizar que la deserialización sólo funcionará si se aplica a un objeto del mismo tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no contiene datos en un formato que pueda procesar el contenedor de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Deserializa el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado en el contenedor determinado, aplicando opcionalmente los valores de propiedades predeterminados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> que se va a deserializar.</param>
      <param name="container">Contenedor al que se van a agregar los objetos <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes">Es <see langword="true" /> para garantizar que la deserialización sólo funcionará si se aplica a un objeto del mismo tipo.</param>
      <param name="applyDefaults">Es <see langword="true" /> para indicar que se deben aplicar los valores de propiedades predeterminados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no contiene datos en un formato que pueda procesar el contenedor de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Carga un objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> de una secuencia.</summary>
      <param name="stream">Objeto <see cref="T:System.IO.Stream" /> del que se cargará el almacén.</param>
      <returns>Nueva instancia de <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> no contiene datos guardados por una llamada anterior a <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa el objeto especificado en el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se escribirá el estado de <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa el objeto dado, teniendo en cuenta los valores de propiedad predeterminados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se serializará el estado de <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa al miembro especificado en el objeto especificado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se serializará el estado de <paramref name="member" />.</param>
      <param name="owningObject">Objeto al que <paramref name="member" /> está asociado.</param>
      <param name="member">Objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> que especifica el miembro que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa el miembro especificado en el objeto determinado, teniendo en cuenta el valor de propiedad predeterminado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se serializará el estado de <paramref name="member" />.</param>
      <param name="owningObject">Objeto al que <paramref name="member" /> está asociado.</param>
      <param name="member">Miembro que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>Proporciona un objeto de pila que puede utilizar un serializador con el fin de ofrecer información a los serializadores anidados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>Anexa un objeto al final de la pila, en lugar de insertarlo en la parte superior de la pila.</summary>
      <param name="context">Objeto de contexto que se va a anexar a la pila.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>Obtiene el objeto actual de la pila.</summary>
      <returns>Objeto actual de la pila o <see langword="null" /> si no se insertara ningún objeto.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>Obtiene el objeto de la pila en el nivel especificado.</summary>
      <param name="level">Nivel del objeto que se va a recuperar en la pila. El nivel 0 es el más alto de la pila, el nivel 1 es el siguiente, y así sucesivamente. Este nivel debe ser 0 o superior. Si el nivel es mayor que el número de niveles de la pila, devuelve <see langword="null" />.</param>
      <returns>Objeto de la pila en el nivel especificado o <see langword="null" /> si no existe ningún objeto en dicho nivel.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> es menor que 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>Obtiene el primer objeto de la pila que se deriva del tipo especificado o lo implementa.</summary>
      <param name="type">Tipo que se va a recuperar de la pila de contexto.</param>
      <returns>Primer objeto de la pila que se deriva del tipo especificado o lo implementa, o <see langword="null" /> si ningún objeto de la pila implementa el tipo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>Quita el objeto actual de la pila y devuelve su valor.</summary>
      <returns>El objeto quitado de la pila; <see langword="null" /> si no hay objetos en la pila.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>Inserta o coloca el objeto especificado en la pila.</summary>
      <param name="context">Objeto de contexto que se va a insertar en la pila.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>El atributo <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> se coloca en un serializador para indicar la clase que se va a utilizar como proveedor predeterminado de ese tipo de serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> con el tipo de proveedor con nombre.</summary>
      <param name="providerTypeName">Nombre del tipo de proveedor de serialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> con el tipo de proveedor determinado.</summary>
      <param name="providerType">Objeto <see cref="T:System.Type" /> del proveedor de serialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>Obtiene el nombre de tipo del proveedor de serialización.</summary>
      <returns>Cadena que contiene el nombre del proveedor.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>Proporciona una interfaz básica de cargador de diseñadores que se puede utilizar para implementar un cargador de diseñadores personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>Empieza a cargar un diseñador.</summary>
      <param name="host">Host del cargador con el que este cargador carga los componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>Escribe los cambios almacenados en caché que se hayan producido en la ubicación desde la que se cargó el diseñador.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>Obtiene un valor que indica si el cargador está cargando un documento actualmente.</summary>
      <returns>Es <see langword="true" /> si el cargador está cargando un documento actualmente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indica un serializador con el fin de que el administrador de serialización lo utilice para serializar los valores del tipo al que se aplica este atributo. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nombre completo del tipo de datos del serializador.</param>
      <param name="baseSerializerTypeName">Nombre completo del tipo de datos base del serializador. Se pueden suministrar varios serializadores para una clase, siempre que estos tengan distintos tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nombre completo del tipo de datos del serializador.</param>
      <param name="baseSerializerType">Tipo de datos base del serializador. Se pueden suministrar varios serializadores para una clase, siempre que estos tengan distintos tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">Tipo de datos del serializador.</param>
      <param name="baseSerializerType">Tipo de datos base del serializador. Se pueden suministrar varios serializadores para una clase, siempre que estos tengan distintos tipos base.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtiene el nombre de tipo completo del tipo base del serializador.</summary>
      <returns>Nombre de tipo completo del tipo base del serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtiene el nombre de tipo completo del serializador.</summary>
      <returns>Nombre de tipo completo del serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indica un identificador único para este tipo de atributo.</summary>
      <returns>Identificador único para este tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>Proporciona una interfaz que puede extender un host de diseñador con el fin de admitir la carga a partir de un estado serializado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>Finaliza la operación de carga del diseñador.</summary>
      <param name="baseClassName">Nombre completo de la clase base del documento que diseña este diseñador.</param>
      <param name="successful">Es <see langword="true" /> si el diseñador se ha cargado correctamente; en caso contrario, es <see langword="false" />.</param>
      <param name="errorCollection">Colección que contiene los errores detectados durante la carga, en caso de haberlos. De no haberlos, se pasa una colección vacía o <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>Recarga el documento de diseño.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>Proporciona una interfaz que extiende <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> para especificar si se toleran los errores al cargar un documento de diseño.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>Obtiene o establece un valor que indica si es posible volver a realizar la carga con errores.</summary>
      <returns>Es <see langword="true" /> si el cargador de diseñadores puede volver a cargar el documento de diseño cuando se detectan los errores; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>Obtiene o establece un valor que indica si se deberían omitir los errores cuando se llama al método <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />.</summary>
      <returns>Es <see langword="true" /> si el cargador de diseñadores omitirá los errores al realizar la recarga; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>Proporciona una interfaz que puede ampliar un cargador de diseñadores para admitir cargas asincrónicas de componentes externos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>Registra un componente externo como parte del proceso de carga administrado por esta interfaz.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>Indica que ha finalizado una carga dependiente.</summary>
      <param name="successful">Es <see langword="true" /> si la carga del diseñador se realizó correctamente; es <see langword="false" /> si los errores impidieron que se completara la carga.</param>
      <param name="errorCollection">Colección que contiene los errores que se produjeron durante la carga, en caso de haberlos. De no haberlos, se pasa una colección vacía o <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>Recarga el documento de diseño.</summary>
      <returns>
        <see langword="true" /> si se acepta la petición de recarga, o <see langword="false" /> si el cargador no permite la recarga.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>Proporciona una interfaz que puede administrar la serialización en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Agrega el proveedor de serialización especificado al administrador de serialización.</summary>
      <param name="provider">Proveedor de serialización que se va a agregar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>Obtiene un área de almacenamiento definida por el usuario basada en pilas, útil para las comunicaciones entre los serializadores.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> que almacena datos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Crea una instancia del tipo especificado y la agrega a la colección de instancias designadas.</summary>
      <param name="type">Tipo de datos que se va crear.</param>
      <param name="arguments">Argumentos que se van a pasar al constructor para este tipo.</param>
      <param name="name">El nombre del objeto. Se puede utilizar este nombre para tener acceso al objeto más adelante a través de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Si se pasa <see langword="null" />, el objeto sigue creado pero no se puede tener acceso a él mediante el nombre.</param>
      <param name="addToContainer">Si es <see langword="true" />, el objeto se agrega al contenedor de diseño. El objeto debe implementar <see cref="T:System.ComponentModel.IComponent" /> para que esto surta efecto.</param>
      <returns>Instancia del objeto recién creada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>Obtiene una instancia de un objeto creado a partir del nombre especificado, o <see langword="null" /> si el objeto no existe.</summary>
      <param name="name">Nombre del objeto que se va a recuperar.</param>
      <returns>Instancia del objeto con el nombre dado, o <see langword="null" /> si no se encuentra ningún objeto por ese nombre.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>Obtiene el nombre del objeto especificado o <see langword="null" /> si el objeto no tiene nombre.</summary>
      <param name="value">Objeto para el que se va a recuperar el nombre.</param>
      <returns>Nombre del objeto, o <see langword="null" /> si el objeto no tiene nombre.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Obtiene un serializador del tipo solicitado para el tipo de objeto especificado.</summary>
      <param name="objectType">Tipo del objeto para el que se obtiene el serializador.</param>
      <param name="serializerType">Tipo del serializador que se va a recuperar.</param>
      <returns>Instancia del serializador solicitado, o <see langword="null" /> si no se encuentra ningún serializador adecuado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>Obtiene un tipo del nombre especificado.</summary>
      <param name="typeName">Nombre completo del tipo que se va a cargar.</param>
      <returns>Instancia del tipo, o <see langword="null" /> si no se puede cargar el tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>Indica las propiedades personalizadas que se pueden serializar con los serializadores disponibles.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las propiedades que se van a serializar.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Quita un proveedor de serialización personalizado del administrador de serialización.</summary>
      <param name="provider">Proveedor que se va a quitar. Se debe haber agregado este objeto con <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>Notifica un error en la serialización.</summary>
      <param name="errorInformation">Error que se va a notificar. Este objeto de información puede ser de cualquier tipo de objeto. Si es una excepción, se extrae el mensaje de la excepción y se notifica al usuario. Si es de algún otro tipo, se llama a <see cref="M:System.Object.ToString" /> para mostrar la información al usuario.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>Tiene lugar cuando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> no puede encontrar el nombre especificado en la tabla de nombres del administrador de serialización.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>Se produce al finalizar la serialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>Establece el nombre del objeto existente especificado.</summary>
      <param name="instance">Instancia del objeto a la que se va a asignar un nombre.</param>
      <param name="name">Nombre que se va a asignar a la instancia.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>Proporciona una interfaz que permite el acceso a un serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>Obtiene un serializador mediante el uso de los atributos especificados.</summary>
      <param name="manager">Administrador de serialización que solicita el serializador.</param>
      <param name="currentSerializer">Instancia del serializador actual del tipo especificado. Puede ser <see langword="null" /> si no existe ningún serializador del tipo especificado.</param>
      <param name="objectType">Tipo de datos del objeto que se va a serializar.</param>
      <param name="serializerType">Tipo de datos del serializador que se va a crear.</param>
      <returns>Instancia de un serializador del tipo solicitado o <see langword="null" /> si no se puede atender la solicitud.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>Proporciona una interfaz que puede invocar la serialización y la deserialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>Deserializa el objeto de datos de serialización especificado y devuelve una colección de objetos representada por dichos datos.</summary>
      <param name="serializationData">Objeto formado por datos serializados.</param>
      <returns>Una colección <see cref="T:System.Collections.ICollection" /> de objetos que se ha recompilado a partir del objeto de datos de serialización especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>Serializa la colección de objetos especificada y almacena dichos objetos en un objeto de datos de serialización.</summary>
      <param name="objects">Colección de objetos que se va a serializar.</param>
      <returns>Un objeto que contiene el estado serializado de la colección de objetos especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>Proporciona un servicio que puede generar nombre únicos para los objetos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>Crea un nombre nuevo que es único para todos los componentes del contenedor especificado.</summary>
      <param name="container">Contenedor al que se agrega el objeto nuevo.</param>
      <param name="dataType">Tipo de datos del objeto que recibe el nombre.</param>
      <returns>Nombre único para el tipo de datos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>Obtiene un valor que indica si el nombre especificado es válido.</summary>
      <param name="name">Nombre que se va a validar.</param>
      <returns>Es <see langword="true" /> si el nombre es válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>Obtiene un valor que indica si el nombre especificado es válido.</summary>
      <param name="name">Nombre que se va a validar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>Proporciona la información necesaria para crear una instancia de un objeto. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> con la información sobre el miembro y los argumentos especificados.</summary>
      <param name="member">Información sobre el miembro del descriptor. Ésta puede ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />. Si es <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, debe representar a un miembro <see langword="static" />.</param>
      <param name="arguments">Colección de argumentos que se pasan al miembro. Este parámetro puede ser <see langword="null" /> o una colección vacía si no existen argumentos. La colección también puede incluir otras instancias de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> es de tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, y no representa un miembro <see langword="static" />.  
O bien 
<paramref name="member" /> es de tipo <see cref="T:System.Reflection.PropertyInfo" /> y no es legible.  
o bien 
<paramref name="member" /> es de tipo <see cref="T:System.Reflection.MethodInfo" /> o <see cref="T:System.Reflection.ConstructorInfo" />, y el número de argumentos en <paramref name="arguments" /> no coincide con la firma de <paramref name="member" />.
O bien
<paramref name="member" /> es de tipo <see cref="T:System.Reflection.ConstructorInfo" /> y representa un miembro <see langword="static" />.  
o bien 
<paramref name="member" /> es de tipo <see cref="T:System.Reflection.FieldInfo" /> y el número de argumentos en <paramref name="arguments" /> no es cero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> con la información sobre el miembro y los argumentos especificados, y el valor que indica si la información especificada describe la instancia por completo.</summary>
      <param name="member">Información sobre el miembro del descriptor. Ésta puede ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />. Si es <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, debe representar a un miembro <see langword="static" />.</param>
      <param name="arguments">Colección de argumentos que se pasan al miembro. Este parámetro puede ser <see langword="null" /> o una colección vacía si no existen argumentos. La colección también puede incluir otras instancias de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete">Es <see langword="true" /> si la información especificada describe por completo la instancia; en caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> es de tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, y no representa un miembro <see langword="static" />. 
 <paramref name="member" /> es de tipo <see cref="T:System.Reflection.PropertyInfo" /> y no es legible.  
 <paramref name="member" /> es de tipo <see cref="T:System.Reflection.MethodInfo" /> o <see cref="T:System.Reflection.ConstructorInfo" />, y el número de argumentos en <paramref name="arguments" /> no coincide con la firma de <paramref name="member" />.  
 <paramref name="member" /> es de tipo <see cref="T:System.Reflection.ConstructorInfo" /> y representa un miembro <see langword="static" /><paramref name="member" /> es de tipo <see cref="T:System.Reflection.FieldInfo" /> y el número de argumentos en <paramref name="arguments" /> no es cero.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>Obtiene la colección de argumentos que se pueden utilizar para reconstruir una instancia del objeto que representar este descriptor de instancias.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> de argumentos que se puede utilizar para crear el objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>Invoca a este descriptor de instancias y devuelve el objeto que describe el descriptor.</summary>
      <returns>Objeto que describe este descriptor de instancias.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>Obtiene un valor que indica si el contenido de <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identifica la instancia por completo.</summary>
      <returns>Es <see langword="true" /> si describe la instancia por completo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>Obtiene información sobre el miembro en la que se describe la instancia a la que está asociada este descriptor.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> que describe la instancia a la que está asociada este objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>Representa una relación única entre un objeto y un miembro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner">Objeto propietario de <paramref name="member" />.</param>
      <param name="member">Miembro que se va a relacionar con <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> o <paramref name="member" /> es <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>Representa la relación de miembro vacía. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> son iguales.</summary>
      <param name="obj">Objeto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que se va a comparar con el objeto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificado es igual al objeto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>Obtiene un valor que indica si esta relación es igual a la relación <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns>
        <see langword="true" /> si esta relación es igual a la relación <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>Obtiene el miembro relacionado.</summary>
      <returns>Miembro que se pasa a <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Comprueba si dos estructuras <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas son equivalentes.</summary>
      <param name="left">Estructura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> situada a la izquierda del operador de igualdad.</param>
      <param name="right">Estructura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> situada a la derecha del operador de igualdad.</param>
      <returns>Este operador devuelve <see langword="true" /> si las dos estructuras <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Comprueba si dos estructuras <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas son distintas.</summary>
      <param name="left">Estructura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> situada a la izquierda del operador de no igualdad.</param>
      <param name="right">Estructura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> situada a la derecha del operador de no igualdad.</param>
      <returns>Este operador devuelve <see langword="true" /> si las dos estructuras <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> son distintas; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>Obtiene el objeto propietario.</summary>
      <returns>Objeto propietario que se pasa a <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>Proporciona la clase base para relacionar un miembro con otro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Obtiene una relación con la relación de origen determinada.</summary>
      <param name="source">Relación de origen.</param>
      <returns>Relación con <paramref name="source" /> o <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> si no existe ninguna relación.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Establece una relación entre el objeto de origen y el de destino.</summary>
      <param name="source">Relación de origen. Esta es la parte izquierda de una asignación de relación.</param>
      <returns>Relación actual asociada a <paramref name="source" /> o <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> si no hay ninguna relación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> está vacío o el servicio no admite la relación.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Establece una relación entre el objeto de origen y el de destino.</summary>
      <param name="sourceOwner">Propietario de una relación de origen.</param>
      <param name="sourceMember">Miembro de una relación de origen.</param>
      <returns>Estructura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que encapsula la relación entre un objeto de origen y un objeto de destino, o <see langword="null" /> si no hay ninguna relación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> o <paramref name="sourceMember" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> o <paramref name="sourceMember" /> está vacío o el servicio no admite la relación.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Crea una relación entre el objeto de origen y la relación de destino.</summary>
      <param name="source">Relación de origen.</param>
      <param name="relationship">Relación que se va a establecer en el origen.</param>
      <exception cref="T:System.ArgumentException">El servicio no admite la relación.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Obtiene un valor que indica si la relación determinada es compatible.</summary>
      <param name="source">Relación de origen.</param>
      <param name="relationship">Relación que se va a establecer en el origen.</param>
      <returns>
        <see langword="true" /> si es compatible una relación entre los dos objetos dados; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name">Nombre que se va a resolver.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>Obtiene el nombre del objeto que se va resolver.</summary>
      <returns>Nombre del objeto que se va a resolver.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>Obtiene o establece el objeto que coincide con el nombre.</summary>
      <returns>Objeto al que está asociado el nombre.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> de un administrador de serialización.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>Indica el serializador base que se va a utilizar para un objeto de diseñador raíz. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con los atributos especificados.</summary>
      <param name="serializerTypeName">Nombre completo del tipo de datos del serializador.</param>
      <param name="baseSerializerTypeName">Nombre del tipo base del serializador. Las clases pueden contener varios serializadores ya que todos tienen distintos tipos base.</param>
      <param name="reloadable">Es <see langword="true" /> si este serializador admite la recarga dinámica del documento; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con los atributos especificados.</summary>
      <param name="serializerTypeName">Nombre completo del tipo de datos del serializador.</param>
      <param name="baseSerializerType">Nombre del tipo base del serializador. Las clases pueden contener varios serializadores ya que todos tienen distintos tipos base.</param>
      <param name="reloadable">Es <see langword="true" /> si este serializador admite la recarga dinámica del documento; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con los atributos especificados.</summary>
      <param name="serializerType">Tipo de datos del serializador.</param>
      <param name="baseSerializerType">Tipo base del serializador. Las clases pueden contener varios serializadores ya que todos tienen distintos tipos base.</param>
      <param name="reloadable">Es <see langword="true" /> si este serializador admite la recarga dinámica del documento; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>Obtiene un valor que indica si el serializador raíz admite la recarga del documento de diseño sin haber eliminado previamente por completo el host del diseñador.</summary>
      <returns>Es <see langword="true" /> si el serializador raíz admite recarga; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtiene el nombre de tipo completo del tipo base del serializador.</summary>
      <returns>Nombre del tipo base del serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtiene el nombre de tipo completo del serializador.</summary>
      <returns>Nombre del tipo del serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>Obtiene un Identificador único para este tipo de atributo.</summary>
      <returns>Un objeto que contiene un identificador único para este tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>Proporciona la clase base con el fin de almacenar los datos de serialización para el objeto <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Cierra el almacén de serialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>Obtiene una colección de los errores que se han producido durante la serialización o deserialización.</summary>
      <returns>Interfaz <see cref="T:System.Collections.ICollection" /> que contiene los errores que se han producido durante la serialización o deserialización.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>Guarda el almacén en la secuencia especificada.</summary>
      <param name="stream">Secuencia en la que se serializará el almacén.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>Proporciona una implementación simple de la interfaz <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ServiceContainer" /> mediante el proveedor de servicios primario especificado.</summary>
      <param name="parentProvider">Proveedor de servicios primario.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="callback">Objeto de devolución de llamada que puede crear el servicio. Esto permite declarar un servicio como disponible, pero retarda la creación del objeto hasta que se solicita el servicio.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> o <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un servicio de tipo <paramref name="serviceType" /> en el contenedor.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="callback">Objeto de devolución de llamada que puede crear el servicio. Esto permite declarar un servicio como disponible, pero retarda la creación del objeto hasta que se solicita el servicio.</param>
      <param name="promote">
        <see langword="true" /> si este servicio debe agregarse a los contenedores de servicio primarios; en caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> o <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un servicio de tipo <paramref name="serviceType" /> en el contenedor.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="serviceInstance">Instancia del servicio que se va a agregar. Este objeto debe implementar o heredar del tipo indicado por el parámetro <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> o <paramref name="serviceInstance" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un servicio de tipo <paramref name="serviceType" /> en el contenedor.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Agrega el servicio especificado al contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a agregar.</param>
      <param name="serviceInstance">Instancia del tipo de servicio que se agrega. Este objeto debe implementar o heredar del tipo indicado por el parámetro <paramref name="serviceType" />.</param>
      <param name="promote">
        <see langword="true" /> si este servicio debe agregarse a los contenedores de servicio primarios; en caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> o <paramref name="serviceInstance" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un servicio de tipo <paramref name="serviceType" /> en el contenedor.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>Obtiene los servicios predeterminados implementados directamente por <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns>Servicios predeterminados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>Desecha este contenedor de servicios.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>Desecha este contenedor de servicios.</summary>
      <param name="disposing">
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.Design.ServiceContainer" /> está en el proceso de ser desechado; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>Obtiene el servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Una instancia del servicio si se pudo encontrar o <see langword="null" /> si no se pudo encontrar.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>Quita el tipo de servicio especificado del contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Quita el tipo de servicio especificado del contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a quitar.</param>
      <param name="promote">
        <see langword="true" /> si este servicio se debe quitar de los contenedores de servicio primarios; en caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>Proporciona un mecanismo de devolución de llamada que puede crear una instancia de un servicio a petición.</summary>
      <param name="container">Contenedor de servicios que solicitó la creación del servicio.</param>
      <param name="serviceType">Tipo de servicio que se va a crear.</param>
      <returns>Servicio especificado por <paramref name="serviceType" /> o <see langword="null" /> si no se ha podido crear el servicio.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>Define los identificadores para el conjunto estándar de comandos que están disponibles para la mayoría de aplicaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignBottom. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignHorizontalCenters. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignLeft. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignRight. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignToGrid. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignTop. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando AlignVerticalCenters. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ArrangeBottom. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ArrangeIcons. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ArrangeRight. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando BringForward. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando BringToFront. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando CenterHorizontally. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando CenterVertically. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Copy. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Cut. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Delete. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Document Outline. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando F1Help. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Group. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando HorizSpaceConcatenate. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando HorizSpaceDecrease. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando HorizSpaceIncrease. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando HorizSpaceMakeEqual. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando LineupIcons. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando LockControls. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando MultiLevelRedo. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando MultiLevelUndo. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Paste. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Properties. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando PropertiesWindow. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Redo. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Replace. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SelectAll. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SendBackward. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SendToBack. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ShowGrid. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ShowLargeIcons. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SizeToControl. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SizeToControlHeight. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SizeToControlWidth. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SizeToFit. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SizeToGrid. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando SnapToGrid. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando TabOrder. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Undo. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando Ungroup. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>Obtiene el primer conjunto de verbos. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>Obtiene el último conjunto de verbos. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando VertSpaceConcatenate. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando VertSpaceDecrease. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando VertSpaceIncrease. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando VertSpaceMakeEqual. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ViewCode. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>Obtiene <see cref="T:System.ComponentModel.Design.CommandID" /> del comando ViewGrid. Este campo es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>Define los identificadores GUID que corresponden al conjunto estándar de ventanas de herramientas que están disponibles en el entorno de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>Obtiene el GUID del examinador de objetos. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>Obtiene el GUID de la ventana de salida. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>Obtiene el GUID del explorador de soluciones. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>Obtiene el GUID de la ventana Propiedades. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>Obtiene el GUID del marco de vínculos relacionados. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>Obtiene el GUID del explorador de servidores. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>Obtiene el GUID de la lista de tareas. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>Obtiene el GUID del cuadro de herramientas. Este campo es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>Suministra un proveedor de descripción de tipos para un tipo concreto.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>Obtiene un proveedor de descripción de tipos para el objeto especificado.</summary>
      <param name="instance">Objeto para el que se va a obtener un proveedor de descripción de tipos.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se corresponde con <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>Obtiene un proveedor de descripción de tipos para el tipo especificado.</summary>
      <param name="type">Tipo para el que se va a obtener un proveedor de descripción de tipos.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se corresponde con <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>Define identificadores para un conjunto de tecnologías admitidas por los hosts de diseñador.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>Especifica la compatibilidad predeterminada con la tecnología de vista.
El diseñador raíz puede devolver cualquier tipo de objeto, pero el objeto debe ser compatible con un adaptador para la tecnología del host. Los entornos de hospedaje como Visual Studio proporcionan una manera de conectar nuevos adaptadores de tecnología de vista. El objeto de vista predeterminado para el Diseñador de Windows Forms es una instancia de <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>Representa un modo en que el objeto de vista se pasa directamente al entorno de desarrollo.
El objeto de vista debe implementar las interfaces que requiera el entorno de desarrollo. El entorno de desarrollo de Visual Studio admite objetos de vista que son un control ActiveX, un documento activo o un objeto que implementa la interfaz IVsWindowPane, que está disponible a través del programa VSI (Integración de Visual Studio). El entorno de desarrollo de Visual Studio proporciona compatibilidad con esta tecnología de vista. La compatibilidad con esta tecnología de vista no está necesariamente disponible en todos los entornos de desarrollo.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Representa un modo en el que un objeto de control de formularios Windows Forms proporciona la presentación para el diseñador raíz. El host del diseñador rellena la ventana de documento del entorno de desarrollo con el control de Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Especifica la clase utilizada para implementar, en tiempo de diseño, los servicios para un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DesignerAttribute" /> con el nombre del tipo que proporciona los servicios en tiempo de diseño.</summary>
      <param name="designerTypeName">Concatenación del nombre completo del tipo que proporciona servicios en tiempo de diseño para el componente al que está enlazado este atributo, y nombre del ensamblado en el que reside este tipo.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DesignerAttribute" /> con el tipo del diseñador y la clase base del diseñador.</summary>
      <param name="designerTypeName">Concatenación del nombre completo del tipo que proporciona servicios en tiempo de diseño para el componente al que está enlazado este atributo, y nombre del ensamblado en el que reside este tipo.</param>
      <param name="designerBaseTypeName">Nombre completo de la clase base que se va a asociar a la clase de diseñador.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DesignerAttribute" /> con el nombre de la clase de diseñador y la clase base del diseñador.</summary>
      <param name="designerTypeName">Concatenación del nombre completo del tipo que proporciona servicios en tiempo de diseño para el componente al que está enlazado este atributo, y nombre del ensamblado en el que reside este tipo.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> que representa la clase base que se va a asociar a <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DesignerAttribute" /> con el tipo que proporciona los servicios en tiempo de diseño.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> que representa la clase que proporciona servicios en tiempo de diseño para el componente al que está enlazado este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DesignerAttribute" /> con los tipos del diseñador y de la clase base del diseñador.</summary>
      <param name="designerType">
        <see cref="T:System.Type" /> que representa la clase que proporciona servicios en tiempo de diseño para el componente al que está enlazado este atributo.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> que representa la clase base que se va a asociar a <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Obtiene el nombre del tipo base de este diseñador.</summary>
      <returns>Nombre del tipo base de este diseñador.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Obtiene el nombre del tipo de diseñador asociado a este atributo de diseñador.</summary>
      <returns>Nombre del tipo de diseñador asociado a este atributo de diseñador.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DesignerAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Obtiene un Identificador único para este tipo de atributo.</summary>
      <returns>Identificador único para este tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> marca la visibilidad de un componente. Si está presente <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />, un diseñador visual puede mostrar este componente en un diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>Crea un nuevo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> establecido en el valor predeterminado <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>Crea un nuevo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> con la propiedad <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> establecida en el valor especificado en <paramref name="visible" />.</summary>
      <param name="visible">Valor en el que se establecerá la propiedad <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>Visibilidad predeterminada, que es <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia o una referencia nula (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>Obtiene un valor que indica si esta instancia es igual al valor <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns>Es <see langword="true" /> si esta instancia es igual al valor <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>Marca un componente como no visible en un diseñador visual.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>Obtiene o establece un valor que indica si el componente debe mostrarse en tiempo de diseño.</summary>
      <returns>Es <see langword="true" /> si el componente debe mostrarse en tiempo de diseño; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>Marca un componente como visible en un diseñador visual.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de números de punto flotante de doble precisión a otras representaciones o desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Especifica el editor que se va a utilizar para cambiar una propiedad. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorAttribute" /> con el editor predeterminado que es ningún editor.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorAttribute" /> con el nombre de tipo y nombre de tipo base del editor.</summary>
      <param name="typeName">Nombre de tipo completo del editor.</param>
      <param name="baseTypeName">Nombre de tipo completo de la clase base o interfaz que se utiliza como clave de búsqueda para el editor. Esta clase debe ser o derivarse de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorAttribute" /> con el nombre de tipo y el tipo base.</summary>
      <param name="typeName">Nombre de tipo completo del editor.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la clase base o interfaz que se utiliza como clave de búsqueda para el editor. Esta clase debe ser o derivarse de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorAttribute" /> con el tipo y el tipo base.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de editor.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> de la clase base o interfaz que se utiliza como clave de búsqueda para el editor. Esta clase debe ser o derivarse de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Obtiene el nombre de la clase base o interfaz que sirve como clave de búsqueda para este editor.</summary>
      <returns>Nombre de la clase base o interfaz que sirve como clave de búsqueda para este editor.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Obtiene el nombre de la clase de editor en el formato <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>Nombre de la clase de editor en el formato <see cref="P:System.Type.AssemblyQualifiedName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.EditorAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del objeto actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Obtiene un Identificador único para este tipo de atributo.</summary>
      <returns>Identificador único para este tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Enum" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EnumConverter" /> para el tipo especificado.</summary>
      <param name="type">Clase <see cref="T:System.Type" /> que representa el tipo de enumeración que se va a asociar a este convertidor de enumeraciones.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en un objeto de enumeración mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>Obtiene una interfaz de <see cref="T:System.Collections.IComparer" /> que se puede utilizar para ordenar los valores de la enumeración.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> para ordenar los valores de enumeración.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto de valor especificado en un objeto de enumeración.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado en el tipo de destino especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es un valor válido para la enumeración.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Especifica el tipo del enumerador a que está asociado este convertidor.</summary>
      <returns>El tipo del enumerador a que está asociado este convertidor.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene una colección de valores estándar para el tipo de datos para el que está diseñado este validador.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos, o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si la lista de valores estándar devueltos por el método <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exclusiva mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" />si el <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelto por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exhaustiva de posibles valores; <see langword="false" />si hay otros valores posibles.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque debe llamarse al método <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> para buscar un conjunto común de valores que sea compatible con el objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Obtiene un valor que indica si el valor especificado es válido para este tipo.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a probar.</param>
      <returns>
        <see langword="true" />si el valor especificado es válido para este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>Obtiene o establece una clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que especifica los valores posibles para la enumeración.</summary>
      <returns>Una clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que especifica los valores posibles para la enumeración.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>Proporciona información sobre un evento.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EventDescriptor" /> con el nombre y los atributos del <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre del evento y sus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EventDescriptor" /> con el nombre del <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado y los atributos de <see cref="T:System.ComponentModel.MemberDescriptor" /> y la matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre del miembro y sus atributos.</param>
      <param name="attrs">Matriz <see cref="T:System.Attribute" /> con los atributos que se desea agregar a esta descripción de evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EventDescriptor" /> con el nombre y la matriz de atributos especificados.</summary>
      <param name="name">Nombre del evento.</param>
      <param name="attrs">Matriz de tipo <see cref="T:System.Attribute" /> que contiene los atributos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>Cuando se reemplaza en una clase derivada, enlaza el evento al componente.</summary>
      <param name="component">Componente que proporciona eventos al delegado.</param>
      <param name="value">Delegado que representa el método que controla el evento.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo de componente al que está enlazado este evento.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazado el evento.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo de delegado para el evento.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de delegado para el evento.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>Cuando se reemplaza en una clase derivada, obtiene un valor que indica si el delegado de evento es un delegado multidifusión.</summary>
      <returns>
        <see langword="true" /> si el delegado de evento es multidifusión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Cuando se reemplaza en una clase derivada, desenlaza el delegado del componente de modo que el delegado ya no recibe eventos del componente.</summary>
      <param name="component">Componente al que está enlazado el delegado.</param>
      <param name="value">Delegado del que se va a desenlazar el componente.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con la matriz de objetos dada <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="events">Matriz de tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que proporciona los eventos de esta colección.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con la matriz de objetos dada <see cref="T:System.ComponentModel.EventDescriptor" />. La colección es de sólo lectura, opcionalmente.</summary>
      <param name="events">Matriz de tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que proporciona los eventos de esta colección.</param>
      <param name="readOnly">Es <see langword="true" /> si se especifica una colección de sólo lectura; en caso contrario, es <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>Agrega <see cref="T:System.ComponentModel.EventDescriptor" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a agregar a la colección.</param>
      <returns>Posición de <see cref="T:System.ComponentModel.EventDescriptor" /> en la colección.</returns>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>Quita todos los objetos de la colección.</summary>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>Devuelve si la colección contiene el <see cref="T:System.ComponentModel.EventDescriptor" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el parámetro <paramref name="value" /> especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>Obtiene el número de descriptores de eventos de la colección.</summary>
      <returns>Número de descriptores de eventos de la colección.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>Especifica una colección vacía que se va a usar en lugar de crear una nueva sin elementos. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Obtiene la descripción del evento con el nombre especificado en la colección.</summary>
      <param name="name">Nombre del evento del que se obtiene la colección.</param>
      <param name="ignoreCase">Es <see langword="true" /> si se desea omitir las mayúsculas y minúsculas del evento; en caso contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> con el nombre especificado, o <see langword="null" /> si no existe el evento.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>Obtiene un enumerador para este elemento <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns>Enumerador que implementa <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>Devuelve el índice del <see cref="T:System.ComponentModel.EventDescriptor" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a buscar en la colección.</param>
      <returns>Índice de <see cref="T:System.ComponentModel.EventDescriptor" /> que se ha especificado en la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>Inserta <see cref="T:System.ComponentModel.EventDescriptor" /> en la colección en un índice especificado.</summary>
      <param name="index">Índice en la colección donde se va a insertar el parámetro <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a insertar en la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mediante el <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="sorter">Comparador que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de esta colección.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" />. Se aplica primero el orden especificado, seguido del orden predeterminado para esta colección, el cual suele ser alfabético.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de esta colección.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>Obtiene o establece el evento con el número de índice especificado.</summary>
      <param name="index">Número de índice de base cero del <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a obtener o establecer.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> que tiene el número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> no es un índice válido para <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>Obtiene o establece el evento con el nombre especificado.</summary>
      <param name="name">Nombre del <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a obtener o establecer.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> con el nombre especificado, o <see langword="null" /> si no existe el evento.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>Quita el objeto <see cref="T:System.ComponentModel.EventDescriptor" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Quita el <see cref="T:System.ComponentModel.EventDescriptor" /> de la colección en el índice especificado.</summary>
      <param name="index">Índice del objeto <see cref="T:System.ComponentModel.EventDescriptor" /> que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" /> de acuerdo con el orden predeterminado de esta colección, el cual suele ser alfabético.</summary>
      <returns>Nuevo objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" /> mediante el <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de esta colección.</param>
      <returns>Nuevo objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" /> de acuerdo con un criterio de ordenación especificado.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de la colección.</param>
      <returns>Nuevo objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Ordena los miembros de <see cref="T:System.ComponentModel.EventDescriptorCollection" /> de acuerdo con un criterio de ordenación y un <see cref="T:System.Collections.IComparer" /> especificados.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de la colección.</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.EventDescriptor" /> de esta colección.</param>
      <returns>Nuevo objeto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la colección en un objeto <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de la colección. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos contenido en la colección.</summary>
      <returns>Número de elementos contenidos en la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado.</summary>
      <returns>
        <see langword="true" /> si el acceso a la colección está sincronizado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se agrega a la colección.</param>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de la colección.</summary>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la colección contiene un valor concreto.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Object" /> está en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a insertar en la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la colección tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la colección tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns>Elemento en el índice especificado.</returns>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es menor que 0.  
O bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto concreto de la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos expansibles a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de propiedades para el tipo de objeto especificado por el parámetro de valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de objeto para el que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utilizará como filtro.</param>
      <returns>Clase <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para el componente o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite propiedades que utilicen el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque se debe llamar al método <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> para buscar las propiedades de este objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Especifica una propiedad proporcionada por un proveedor extensor. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia o una referencia nula (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>Obtiene la propiedad que se va a proporcionar.</summary>
      <returns>Un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que encapsula la propiedad que se va a proporcionar.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>Proporciona una indicación de si el valor de esta instancia es el valor predeterminado para la clase derivada.</summary>
      <returns>
        <see langword="true" /> si esta instancia es el atributo predeterminado para la clase; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>Obtiene el proveedor extensor que va a proporcionar la propiedad.</summary>
      <returns>La interfaz <see cref="T:System.ComponentModel.IExtenderProvider" /> que proporciona la propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>Obtiene el tipo de objeto que puede recibir la propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que describe el tipo de objeto que puede recibir la propiedad.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Guid" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en un objeto GUID mediante el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un objeto GUID.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en otro tipo.</summary>
      <param name="context">Un contexto de formateador.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>Proporciona datos para los eventos que se pueden controlar completamente en un controlador de eventos.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.HandledEventArgs" /> con un valor <see langword="false" /> predeterminado para la propiedad <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.HandledEventArgs" /> con el valor predeterminado especificado para la propiedad <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue">Valor predeterminado para la propiedad <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>Obtiene o establece un valor que indica si el controlador de eventos ha controlado completamente el evento o si el sistema debe continuar con su propio procesamiento.</summary>
      <returns>
        <see langword="true" /> si se ha controlado completamente el evento; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>Representa un método que puede controlar eventos que pueden requerir o no un procesamiento adicional una vez devuelto el controlador de eventos.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.HandledEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>Proporciona las características necesarias para admitir escenarios tanto complejos como simples en el momento de enlazar a un origen de datos.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Agrega <see cref="T:System.ComponentModel.PropertyDescriptor" /> a los índices utilizados para las búsquedas.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a agregar a los índices utilizados para las búsquedas.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>Agrega un nuevo elemento a la lista.</summary>
      <returns>El elemento agregado a la lista.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>Obtiene si se pueden actualizar los elementos de la lista.</summary>
      <returns>
        <see langword="true" /> si se pueden actualizar los elementos de la lista; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>Obtiene si se pueden agregar elementos a la lista mediante <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>
        <see langword="true" /> si se pueden agregar elementos a la lista mediante <see cref="M:System.ComponentModel.IBindingList.AddNew" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>Obtiene si se pueden quitar elementos de la lista mediante <see cref="M:System.Collections.IList.Remove(System.Object)" /> o <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns>
        <see langword="true" /> si se pueden quitar elementos de la lista; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Ordena la lista basándose en <see cref="T:System.ComponentModel.PropertyDescriptor" /> y <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property">Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> por el que se ordena.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> es <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Devuelve el índice de la fila que tiene el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> por el que se realiza la búsqueda.</param>
      <param name="key">Valor del parámetro <paramref name="property" /> que se va a buscar.</param>
      <returns>Índice de la fila que tiene el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>Obtiene si están ordenados los elementos de la lista.</summary>
      <returns>
        <see langword="true" /> si se ha llamado a <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> y no se ha llamado a <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> es <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>Se produce cuando cambia la lista o un elemento de la lista.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Quita el <see cref="T:System.ComponentModel.PropertyDescriptor" /> de los índices utilizados para las búsquedas.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a quitar de los índices utilizados para las búsquedas.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>Quita cualquier ordenación aplicada mediante el <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>Obtiene la dirección de la ordenación.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>Obtiene <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se utiliza para ordenar.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se utiliza para ordenar.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>Obtiene si se provoca un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> cuando cambia la lista o un elemento de la lista.</summary>
      <returns>
        <see langword="true" /> si se provoca un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> cuando cambia la lista o un elemento de la lista; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>Obtiene si la lista admite búsquedas mediante el método <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns>
        <see langword="true" /> si la lista admite búsquedas mediante el método <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>Obtiene si la lista admite la ordenación.</summary>
      <returns>
        <see langword="true" /> si la lista admite la ordenación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>Extiende la interfaz <see cref="T:System.ComponentModel.IBindingList" /> proporcionando funciones avanzadas de ordenación y filtrado.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>Ordena el origen de datos en función de la colección <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> dada.</summary>
      <param name="sorts">Colección <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> que contiene los criterios de ordenación que se van a aplicar al origen de datos.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>Obtiene o establece el filtro que se va a utilizar para excluir elementos de la colección de elementos que devuelve el origen de datos.</summary>
      <returns>Cadena que se utiliza para filtrar los elementos y quitarlos de la colección de elementos que devuelve el origen de datos.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>Quita el filtro que se aplica actualmente al origen de datos.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>Obtiene la colección de descripciones de ordenación que se aplica actualmente al origen de datos.</summary>
      <returns>Colección <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> que se aplica actualmente al origen de datos.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>Obtiene un valor que indica si el origen de datos admite la ordenación avanzada.</summary>
      <returns>
        <see langword="true" /> si el origen de datos admite la ordenación avanzada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>Obtiene un valor que indica si el origen de datos admite el filtrado.</summary>
      <returns>
        <see langword="true" /> si el origen de datos admite el filtrado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>Agrega funcionalidad transaccional al agregar un nuevo elemento a una colección.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>Descarta un nuevo elemento pendiente de la colección.</summary>
      <param name="itemIndex">Índice del elemento previamente agregado a la colección.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>Confirma un nuevo elemento pendiente en la colección.</summary>
      <param name="itemIndex">Índice del elemento previamente agregado a la colección.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>Proporciona una capa de asignación de nivel superior entre un objeto COM y <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>Obtiene los atributos del componente especificado.</summary>
      <param name="component">Componente para el que se van a obtener atributos.</param>
      <returns>Colección de atributos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>Obtiene el nombre de la clase para el componente especificado.</summary>
      <param name="component">Componente para el que se va a obtener el nombre de clase.</param>
      <returns>Nombre de la clase correspondiente a <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>Obtiene el convertidor de tipos para el componente especificado.</summary>
      <param name="component">Componente para el que se va a obtener <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns>El objeto <see cref="T:System.ComponentModel.TypeConverter" /> para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>Obtiene el evento predeterminado para el componente especificado.</summary>
      <param name="component">Componente para el que se va a obtener el evento predeterminado.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> que representa el evento predeterminado de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>Obtiene la propiedad predeterminada del componente especificado.</summary>
      <param name="component">Componente para el que obtener la propiedad predeterminada.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa la propiedad predeterminada de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>Obtiene el editor para el componente especificado.</summary>
      <param name="component">Componente para el que se obtendrá el editor.</param>
      <param name="baseEditorType">Tipo base del editor de <paramref name="component" />.</param>
      <returns>Editor de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>Obtiene los eventos del componente especificado.</summary>
      <param name="component">Componente cuyos eventos se van a obtener.</param>
      <returns>Colección de descriptores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>Obtiene los eventos con los atributos especificados del componente indicado.</summary>
      <param name="component">Componente cuyos eventos se van a obtener.</param>
      <param name="attributes">Atributos usados para filtrar eventos.</param>
      <returns>Colección de descriptores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>Obtiene el nombre del componente especificado.</summary>
      <param name="component">Componente cuyo nombre se va a obtener.</param>
      <returns>Nombre de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>Obtiene las propiedades con los atributos especificados del componente indicado.</summary>
      <param name="component">Componente cuyos eventos se van a obtener.</param>
      <param name="attributes">Atributos usados para filtrar propiedades.</param>
      <returns>Colección de descriptores de propiedades para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>Obtiene el valor de la propiedad que tiene el identificador de envío especificado.</summary>
      <param name="component">Objeto al que pertenece la propiedad.</param>
      <param name="dispid">Identificador de envío.</param>
      <param name="success">
        <see cref="T:System.Boolean" />, pasado por referencia, que representa si la propiedad se ha recuperado.</param>
      <returns>Valor de la propiedad que tiene el identificador de envío especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>Obtiene el valor de la propiedad que tiene el nombre especificado.</summary>
      <param name="component">Objeto al que pertenece la propiedad.</param>
      <param name="propertyName">Nombre de la propiedad.</param>
      <param name="success">
        <see cref="T:System.Boolean" />, pasado por referencia, que representa si la propiedad se ha recuperado.</param>
      <returns>Valor de la propiedad que tiene el nombre especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>Proporciona una interfaz que suministra información dinámica personalizada sobre el tipo de un objeto.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>Devuelve una colección de atributos personalizados para esta instancia de un componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> que contiene los atributos de este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>Devuelve el nombre de clase de esta instancia de un componente.</summary>
      <returns>Nombre de clase del objeto o <see langword="null" /> si la clase no tiene nombre.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>Devuelve los eventos para esta instancia de un componente.</summary>
      <returns>El nombre del objeto, o <see langword="null" /> si el objeto no tiene un nombre.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>Devuelve un convertidor de tipos para instancia de un componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> que es el convertidor para este objeto o <see langword="null" /> si no hay ningún <see cref="T:System.ComponentModel.TypeConverter" /> para este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>Devuelve el evento predeterminado para esta instancia de un componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> que representa el evento predeterminado para este objeto o <see langword="null" /> si este objeto no tiene eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>Devuelve la propiedad predeterminada para esta instancia de un componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa la propiedad predeterminada de este objeto o <see langword="null" /> si el objeto no tiene propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Devuelve un editor del tipo especificado para esta instancia de un componente.</summary>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> que representa el editor para este objeto.</param>
      <returns>Un <see cref="T:System.Object" /> del tipo especificado que es el editor para este objeto o <see langword="null" /> si no se encuentra el editor.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>Devuelve los eventos para esta instancia de un componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa los eventos de esta instancia de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Devuelve los eventos de esta instancia de un componente utilizando la matriz de atributos especificada como filtro.</summary>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se usa como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa los eventos filtrados de esta instancia de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>Devuelve las propiedades para esta instancia de un componente.</summary>
      <returns>Un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa las propiedades de esta instancia de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Devuelve las propiedades para esta instancia de un componente usando la matriz de atributos como filtro.</summary>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se usa como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa las propiedades filtradas de esta instancia de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Devuelve un objeto que contiene la propiedad que describe el descriptor de propiedades especificado.</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa la propiedad cuyo propietario se va a buscar.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el propietario de la propiedad especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>Proporciona la funcionalidad para facilitar información de error personalizada a la que puede enlazar una interfaz de usuario.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>Obtiene un mensaje de error que indica lo que le pasa a este objeto.</summary>
      <returns>Mensaje de error que indica lo que le pasa a este objeto. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>Obtiene el mensaje de error correspondiente a la propiedad con el nombre especificado.</summary>
      <param name="columnName">Nombre de la propiedad cuyo mensaje de error se va a obtener.</param>
      <returns>Mensaje de error correspondiente a la propiedad. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>Define la interfaz para extender propiedades a otros componentes de un contenedor.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>Especifica si este objeto puede proporcionar las propiedades Extender al objeto especificado.</summary>
      <param name="extendee">
        <see cref="T:System.Object" /> para recibir las propiedades Extender.</param>
      <returns>
        <see langword="true" />si este objeto puede proporcionar propiedades extensoras al objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>Proporciona una interfaz que facilita la recuperación del nombre del generador y que presenta el generador.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>Obtiene un nombre traducido.</summary>
      <returns>Nombre traducido.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>Muestra el generador.</summary>
      <param name="language">Servicio de lenguaje al que llama el generador.</param>
      <param name="value">Expresión que se está editando.</param>
      <param name="newValue">Nuevo valor.</param>
      <returns>
        <see langword="true" /> si el valor se debe reemplazar con <paramref name="newValue" />; de lo contrario, <see langword="false" /> (por ejemplo, si el usuario cancela).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>Proporciona funcionalidad a un objeto para que devuelva una lista que puede enlazarse a un origen de datos.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>Obtiene un valor que indica si la colección es una colección de objetos <see cref="T:System.Collections.IList" />.</summary>
      <returns>
        <see langword="true" /> si la colección es una colección de objetos <see cref="T:System.Collections.IList" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>Devuelve un <see cref="T:System.Collections.IList" /> que se puede enlazar a un origen de datos de un objeto que no implementa un <see cref="T:System.Collections.IList" /> por sí mismo.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> que se puede enlazar a un origen de datos del objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>Proporciona funcionalidad para contenedores anidados que, desde el punto de vista lógico, contienen cero o varios componentes y son propiedad de un componente primario.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>Obtiene el componente propietario del contenedor anidado.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.IComponent" /> que posee el contenedor anidado.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>Proporciona la posibilidad de recuperar el nombre anidado completo de un componente.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>Obtiene el nombre completo del componente en este sitio.</summary>
      <returns>Nombre completo del componente en este sitio.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>Indica si el componente asociado a este atributo se ha heredado de una clase base. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InheritanceAttribute" /> con el nivel de herencia especificado.</summary>
      <param name="inheritanceLevel">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> que indica el nivel de herencia en el que se va a establecer este atributo.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>Especifica que el valor predeterminado para <see cref="T:System.ComponentModel.InheritanceAttribute" /> es <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>Reemplace para comprobar la igualdad.</summary>
      <param name="value">El objeto que se va a probar.</param>
      <returns>
        <see langword="true" /> si el objeto es igual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>Devuelve el código hash de este objeto.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.InheritanceAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>Obtiene o establece el nivel de herencia actual almacenado en este atributo.</summary>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceLevel" /> almacenado en este atributo.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>Especifica que el componente se hereda. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>Especifica que el componente se hereda y es de sólo lectura. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>Obtiene un valor que indica si el valor actual del atributo es su valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si el valor actual del atributo es el valor predeterminado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>Especifica que el componente no se hereda. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>Convierte este atributo en una cadena.</summary>
      <returns>Cadena que representa esta <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>Define los identificadores de los tipos de niveles de herencia.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>Se hereda el objeto.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>Se hereda el objeto pero el acceso es de sólo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>No se hereda el objeto.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>Especifica el instalador de un tipo que instala componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> con el nombre del tipo de instalador del componente.</summary>
      <param name="typeName">Nombre de un <see cref="T:System.Type" /> que representa el instalador del componente con el que está enlazado este atributo. Esta clase debe implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InstallerTypeAttribute" />, cuando se especifica un <see cref="T:System.Type" /> que representa el instalador de un componente.</summary>
      <param name="installerType">
        <see cref="T:System.Type" /> que representa el instalador del componente con el que está enlazado este atributo. Esta clase debe implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>Devuelve el código hash de este objeto.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>Obtiene el tipo de instalador asociado a este atributo.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de instalador asociado a este atributo, o <see langword="null" /> si no existe ningún instalador.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>Crea una instancia de un tipo determinado de propiedad a partir de un cuadro desplegable situado dentro del objeto <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Cuando se reemplaza en una clase derivada, devuelve una instancia del tipo especificado.</summary>
      <param name="context">Información de contexto.</param>
      <param name="instanceType">El tipo especificado.</param>
      <returns>Instancia del tipo especificado o <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>Obtiene el texto especificado.</summary>
      <returns>Es el texto especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros con signo de 16 bits a otras representaciones o desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros con signo de 32 bits a otras representaciones o desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros con signo de 64 bits a otras representaciones o desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Se inicia cuando un subproceso en el que se debe ejecutar una operación ya no existe o no tiene ningún bucle de mensajes.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con los objetos <see cref="T:System.Runtime.Serialization.SerializationInfo" /> y <see cref="T:System.Runtime.Serialization.StreamingContext" />dados.</summary>
      <param name="info">Clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a utilizar para la deserialización.</param>
      <param name="context">Destino que se va a utilizar para la deserialización.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con la descripción detallada especificada.</summary>
      <param name="message">Descripción detallada del error.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con la descripción detallada especificada y la excepción especificada.</summary>
      <param name="message">Descripción detallada del error.</param>
      <param name="innerException">Referencia a la excepción interna que es la causa de esta excepción.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>Indica si una clase convierte los eventos de cambio de propiedad en los eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> provoca eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> provoca eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> cuando se produce algún cambio en uno de sus valores de propiedad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>Permite coordinar la inicialización de un componente y sus propiedades dependientes.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>Se produce cuando finaliza la inicialización del componente.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>Obtiene un valor que indica si el componente está inicializado.</summary>
      <returns>
        <see langword="true" /> para indicar que el componente ha completado la inicialización; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Proporciona información contextual sobre un componente, como su contenedor y descriptor de propiedades.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtiene el contenedor que representa esta solicitud <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.IContainer" /> con el conjunto de objetos de este objeto <see cref="T:System.ComponentModel.TypeDescriptor" />; de lo contrario, <see langword="null" />, si no hay ningún contenedor o si el objeto <see cref="T:System.ComponentModel.TypeDescriptor" /> no utiliza objetos externos.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtiene el objeto que se conecta a esta solicitud del descriptor de tipos.</summary>
      <returns>Objeto que invoca al método en el objeto <see cref="T:System.ComponentModel.TypeDescriptor" />; de lo contrario, <see langword="null" />, si no hay ningún objeto responsable de la llamada.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns>
        <see langword="true" /> si se puede cambiar este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtiene el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está asociado al elemento de contexto especificado.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describe el elemento de contexto especificado; de lo contrario, <see langword="null" /> si no hay un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsable de la llamada.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>Proporciona funcionalidad para detectar el esquema de una lista enlazable, donde las propiedades disponibles para el enlace se diferencian de las propiedades públicas del objeto al que se va a enlazar.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Devuelve el <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa las propiedades de cada elemento utilizado para enlazar datos.</summary>
      <param name="listAccessors">Matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se encuentran en la colección como enlazables. Puede ser <see langword="null" />.</param>
      <returns>El <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa las propiedades de cada elemento utilizado para enlazar datos.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>Devuelve el nombre de la lista.</summary>
      <param name="listAccessors">Matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" />, para la que se devuelve el nombre de lista. Puede ser <see langword="null" />.</param>
      <returns>Nombre de la lista.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>Proporciona la clase base <see langword="abstract" /> para todas las licencias. Las licencias se conceden a una instancia específica de un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>Cuando se reemplaza en una clase derivada, elimina los recursos utilizados por la licencia.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>Cuando se reemplaza en una clase derivada, obtiene la clave de licencia concedida a este componente.</summary>
      <returns>Clave de licencia concedida a este componente.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>Especifica el momento en que puede utilizarse un objeto con licencia y proporciona un medio para obtener los servicios adicionales necesarios para admitir licencias que se ejecutan dentro de su dominio.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Cuando se reemplaza en una clase derivada, devuelve una clave de licencia guardada correspondiente al tipo especificado, desde el ensamblado de recursos especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de componente.</param>
      <param name="resourceAssembly">
        <see cref="T:System.Reflection.Assembly" /> con la clave de licencia.</param>
      <returns>
        <see cref="P:System.ComponentModel.License.LicenseKey" /> del tipo especificado. Este método devuelve <see langword="null" /> a menos que sea reemplazado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>Obtiene el servicio solicitado si está disponible.</summary>
      <param name="type">Tipo de servicio que se va a recuperar.</param>
      <returns>Instancia del servicio o <see langword="null" /> si no se encuentra ningún servicio.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Cuando se reemplaza en una clase derivada, establece una clave de licencia para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el componente asociado a la clave de licencia.</param>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> que se va a guardar para el tipo de componente.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>Cuando se reemplaza en una clase derivada, obtiene un valor que especifica cuándo se puede utilizar una licencia.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.LicenseUsageMode" /> que especifica cuándo se puede utilizar una licencia. De manera predeterminada, es <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>Representa la excepción que se produce cuando no se puede conceder una licencia a un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseException" /> con los objetos <see cref="T:System.Runtime.Serialization.SerializationInfo" /> y <see cref="T:System.Runtime.Serialization.StreamingContext" />dados.</summary>
      <param name="info">Clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a utilizar para la deserialización.</param>
      <param name="context">Destino que se va a utilizar para la deserialización.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseException" /> correspondiente al tipo de componente al que se ha denegado una licencia.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de componente al que no se ha concedido una licencia.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseException" /> correspondiente al tipo y a la instancia del componente al que se ha denegado una licencia.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de componente al que no se ha concedido una licencia.</param>
      <param name="instance">Instancia del componente al que no se ha concedido una licencia.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseException" /> correspondiente al tipo y a la instancia del componente al que se ha denegado una licencia, junto con un mensaje que se va a mostrar.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de componente al que no se ha concedido una licencia.</param>
      <param name="instance">Instancia del componente al que no se ha concedido una licencia.</param>
      <param name="message">Mensaje de excepción que se va a mostrar.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseException" /> correspondiente al tipo y a la instancia del componente al que se ha denegado una licencia, junto con un mensaje que se va a mostrar y la excepción original que se ha producido.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de componente al que no se ha concedido una licencia.</param>
      <param name="instance">Instancia del componente al que no se ha concedido una licencia.</param>
      <param name="message">Mensaje de excepción que se va a mostrar.</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> que representa la excepción original.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con información sobre la excepción.</summary>
      <param name="info">Clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a utilizar para la deserialización.</param>
      <param name="context">Destino que se va a utilizar para la deserialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>Obtiene el tipo de componente al que no se ha concedido una licencia.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de componente al que no se ha concedido una licencia.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>Proporciona propiedades y métodos para agregar una licencia a un componente y administrar un <see cref="T:System.ComponentModel.LicenseProvider" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>Crea una instancia del tipo especificado, dado un contexto en el que se puede usar la instancia con licencia.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo que se va a crear.</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar la instancia con licencia.</param>
      <returns>Instancia del tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>Crea una instancia del tipo especificado con los argumentos especificados, dado un contexto en el que se puede usar la instancia con licencia.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo que se va a crear.</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar la instancia con licencia.</param>
      <param name="args">Matriz de tipo <see cref="T:System.Object" /> que representa los argumentos correspondientes al tipo.</param>
      <returns>Instancia del tipo especificado con la matriz de argumentos especificada.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>Obtiene o establece el actual <see cref="T:System.ComponentModel.LicenseContext" />, que especifica cuándo puede utilizarse el objeto con licencia.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar el objeto con licencia.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> está bloqueada actualmente y no se puede modificar.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>Devuelve si el tipo especificado tiene una licencia válida.</summary>
      <param name="type">
        <see cref="T:System.Type" /> para el que se va a buscar una licencia válida.</param>
      <returns>
        <see langword="true" /> si el tipo especificado tiene licencia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>Determina si se puede conceder una licencia válida para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de objeto que solicita <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> si se puede conceder una licencia válida; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>Determina si se puede conceder una licencia válida para la instancia especificada del tipo. Este método crea un <see cref="T:System.ComponentModel.License" /> válido.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</param>
      <param name="instance">Objeto del tipo especificado o un tipo derivado del tipo especificado.</param>
      <param name="license">
        <see cref="T:System.ComponentModel.License" /> que es una licencia válida, o <see langword="null" /> si no se puede conceder una licencia válida.</param>
      <returns>
        <see langword="true" /> si se puede conceder un <see cref="T:System.ComponentModel.License" /> válido; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>Impide que se realicen cambios en el <see cref="T:System.ComponentModel.LicenseContext" /> actual del objeto especificado.</summary>
      <param name="contextUser">Objeto cuyo contexto actual se desea bloquear.</param>
      <exception cref="T:System.InvalidOperationException">El contexto ya está bloqueado.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>Permite que se realicen cambios en el <see cref="T:System.ComponentModel.LicenseContext" /> actual del objeto especificado.</summary>
      <param name="contextUser">Objeto cuyo contexto actual se desea desbloquear.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> representa un usuario diferente del especificado en una llamada anterior al método <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>Obtiene <see cref="T:System.ComponentModel.LicenseUsageMode" /> que especifica cuándo se puede utilizar el objeto con licencia para <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.LicenseUsageMode" />, tal como se especifica en la propiedad <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>Determina si se puede conceder una licencia para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</param>
      <exception cref="T:System.ComponentModel.LicenseException">No se puede conceder un <see cref="T:System.ComponentModel.License" />.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>Determina si se puede conceder una licencia para la instancia del tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</param>
      <param name="instance">
        <see cref="T:System.Object" /> del tipo especificado o un tipo derivado del tipo especificado.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> válido.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">El tipo tiene licencia pero no se puede conceder una <see cref="T:System.ComponentModel.License" />.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>Proporciona la clase base <see langword="abstract" /> para implementar un proveedor de licencia.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Cuando se reemplaza en una clase derivada, obtiene una licencia para una instancia o un tipo de componente con un contexto dado y si la denegación de una licencia produce una excepción.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" /> que especifica dónde se puede utilizar el objeto con licencia.</param>
      <param name="type">
        <see cref="T:System.Type" /> que representa el componente que solicita la licencia.</param>
      <param name="instance">Objeto que solicita la licencia.</param>
      <param name="allowExceptions">
        <see langword="true" /> si debe producirse una excepción <see cref="T:System.ComponentModel.LicenseException" /> cuando no se puede conceder una licencia al componente; en caso contrario, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> válido.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>Especifica el <see cref="T:System.ComponentModel.LicenseProvider" /> que se utiliza con una clase. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> sin un proveedor de licencia.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> con el tipo especificado.</summary>
      <param name="typeName">Nombre completo de la clase de proveedor de licencia.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> con el tipo de proveedor de licencia especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de la clase de proveedor de licencia.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>Especifica el valor predeterminado, que no es ningún proveedor. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>Indica si esta instancia y un objeto especificado son iguales.</summary>
      <param name="value">Otro objeto con el que se va a realizar la comparación.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> es igual a esta instancia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>Obtiene el proveedor de licencia que se debe utilizar con la clase asociada.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo del proveedor de licencia. El valor predeterminado es <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>Indica un identificador único para este tipo de atributo.</summary>
      <returns>Identificador único para este tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>Especifica cuándo se puede utilizar <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>Utilizado durante el tiempo de diseño por un diseñador visual o por el compilador.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>Utilizado durante el tiempo de ejecución.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>Proporciona una implementación de un <see cref="T:System.ComponentModel.LicenseProvider" />. El proveedor funciona de forma similar al modelo de licencias estándar de Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>Devuelve una clave para el tipo especificado.</summary>
      <param name="type">Tipo de objeto para devolver la clave.</param>
      <returns>Confirmación de que el parámetro <paramref name="type" /> tiene licencia.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Devuelve una licencia para la instancia del componente si está disponible.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" /> que especifica dónde se puede utilizar el objeto con licencia.</param>
      <param name="type">
        <see cref="T:System.Type" /> que representa el componente que solicita el objeto <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance">Objeto que solicita el <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions">
        <see langword="true" /> si debe producirse una excepción <see cref="T:System.ComponentModel.LicenseException" /> cuando no se puede conceder una licencia a un componente; en caso contrario, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.License" /> válido. Si este método no encuentra <see cref="T:System.ComponentModel.License" /> válido o un parámetro <paramref name="context" /> válido, devolverá <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>Determina si la clave recuperada por el método <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> es válida para el tipo especificado.</summary>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> que se va a comprobar.</param>
      <param name="type">
        <see cref="T:System.Type" /> que representa el componente que solicita el objeto <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> si la clave es una propiedad <see cref="P:System.ComponentModel.License.LicenseKey" /> válida del tipo especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>Especifica que se puede utilizar una lista como origen de datos. Un diseñador visual debe utilizar este atributo para determinar si se va a mostrar una lista determinada en un selector de enlace de datos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListBindableAttribute" /> mediante un valor para indicar si la lista es enlazable.</summary>
      <param name="listBindable">
        <see langword="true" /> si la lista es enlazable; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListBindableAttribute" /> mediante el objeto <see cref="T:System.ComponentModel.BindableSupport" /> para indicar si la lista es enlazable.</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> que indica si la lista es enlazable.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>Representa el valor predeterminado de <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>Devuelve si el objeto pasado es igual a este <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj">El objeto con el que se va a probar la igualdad.</param>
      <returns>Es <see langword="true" /> si el objeto pasado es igual a <see cref="T:System.ComponentModel.ListBindableAttribute" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.ListBindableAttribute" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>Devuelve si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> está establecida en el valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> está establecida en el valor predeterminado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>Obtiene si la lista es enlazable.</summary>
      <returns>
        <see langword="true" /> si la lista es enlazable; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>Especifica que la lista no es enlazable. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>Especifica que la lista es enlazable. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListChangedEventArgs" /> teniendo en cuenta el tipo de cambio y el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> afectado.</summary>
      <param name="listChangedType">Valor de <see cref="T:System.ComponentModel.ListChangedType" /> que indica el tipo de cambio.</param>
      <param name="propDesc">Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se ha agregado, quitado o cambiado.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListChangedEventArgs" /> teniendo en cuenta el tipo de cambio y el índice del elemento afectado.</summary>
      <param name="listChangedType">Valor de <see cref="T:System.ComponentModel.ListChangedType" /> que indica el tipo de cambio.</param>
      <param name="newIndex">Índice del elemento que se ha agregado, cambiado o quitado.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListChangedEventArgs" /> teniendo en cuenta el tipo de cambio, el índice del elemento afectado y un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describe el elemento afectado.</summary>
      <param name="listChangedType">Valor de <see cref="T:System.ComponentModel.ListChangedType" /> que indica el tipo de cambio.</param>
      <param name="newIndex">Índice del elemento que se ha agregado o cambiado.</param>
      <param name="propDesc">Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describe el elemento.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListChangedEventArgs" /> teniendo en cuenta el tipo de cambio, así como el índice anterior y nuevo del elemento que se ha desplazado.</summary>
      <param name="listChangedType">Valor de <see cref="T:System.ComponentModel.ListChangedType" /> que indica el tipo de cambio.</param>
      <param name="newIndex">Nuevo índice del elemento que se ha desplazado.</param>
      <param name="oldIndex">Anterior índice del elemento que se ha desplazado.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>Obtiene el tipo de cambio.</summary>
      <returns>Valor de <see cref="T:System.ComponentModel.ListChangedType" /> que indica el tipo de cambio.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>Obtiene el índice del elemento al que afecta el cambio.</summary>
      <returns>Índice del elemento al que afecta el cambio.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>Obtiene el índice anterior de un elemento que se ha desplazado.</summary>
      <returns>Índice anterior del elemento que se ha desplazado.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>Obtiene el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se ha agregado, cambiado o eliminado.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> afectado por el cambio.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> de la clase <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>Especifica el modo en que ha cambiado la lista.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>Elemento que se agrega a la lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene el índice del elemento que se agregó.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>Elemento modificado en la lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene el índice del elemento que se ha modificado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>Elemento eliminado de la lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene el índice del elemento que se ha eliminado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>Elemento movido dentro de la lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contiene el índice anterior del elemento, mientras que <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene el nuevo índice del elemento.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>Se ha agregado un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" />, por lo que ha cambiado el esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>Se ha modificado un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" />, por lo que ha cambiado el esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>Se ha eliminado un objeto <see cref="T:System.ComponentModel.PropertyDescriptor" />, por lo que ha cambiado el esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>Gran parte de la lista ha cambiado. Todos los controles de escucha deben actualizar todos sus datos de la lista.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>Proporciona una descripción de la operación de ordenación aplicada a un origen de datos.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListSortDescription" /> con la dirección y la descripción de propiedades especificadas.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que describe la propiedad mediante la cual se ordena el origen de datos.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>Obtiene o establece la descripción abstracta de una propiedad de clase asociada a <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> asociada a esta <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>Obtiene o establece la dirección de la operación de ordenación asociada a <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns>Uno de los valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> con la matriz especificada de objetos <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts">Matriz de objetos <see cref="T:System.ComponentModel.ListSortDescription" /> que va a contener la colección.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>Determina si <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contiene un valor específico.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Object" /> está en la colección; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia el contenido de la colección a la matriz especificada, empezando por el índice que se indique de la matriz de destino.</summary>
      <param name="array">Matriz de destino para los elementos copiados de la colección.</param>
      <param name="index">Índice de la matriz de destino donde va a comenzar la copia.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>Devuelve el índice del elemento específico de la colección.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index">Índice de base cero de <see cref="T:System.ComponentModel.ListSortDescription" /> que se va a obtener o establecer en la colección.</param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> con el índice especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Se ha establecido un elemento en la colección <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, que es de sólo lectura.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección es seguro para la ejecución de subprocesos.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene la instancia actual que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Instancia actual de la colección <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a la colección.</summary>
      <param name="value">Elemento que se va a agregar a la colección.</param>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de la colección.</summary>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero del objeto <see cref="T:System.ComponentModel.ListSortDescription" /> que se va a obtener o establecer en la colección.</param>
      <param name="value">Elemento que se va a insertar en la colección.</param>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la colección tiene un tamaño fijo.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene el objeto <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index">Índice de base cero del objeto <see cref="T:System.ComponentModel.ListSortDescription" /> que se va a obtener de la colección.</param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> con el índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un elemento de la colección.</summary>
      <param name="value">Elemento que se va a quitar de la colección.</param>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita un elemento de la colección en un índice especificado.</summary>
      <param name="index">Índice de base cero del objeto <see cref="T:System.ComponentModel.ListSortDescription" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Especifica la dirección de una operación de ordenación.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Ordena de manera ascendente.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Ordena de manera descendente.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>Especifica las propiedades que admiten el enlace basado en búsqueda. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> sin ningún parámetro.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource">Nombre de la propiedad que se va a utilizar como origen de datos.</param>
      <param name="displayMember">Nombre de la propiedad que se va a utilizar como nombre para mostrar.</param>
      <param name="valueMember">Nombre de la propiedad que se va a utilizar como origen para los valores.</param>
      <param name="lookupMember">Nombre de la propiedad que se va a utilizar en las búsquedas.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>Obtiene el nombre de la propiedad de origen de datos del componente al que está enlazado el atributo <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Propiedad de origen de datos del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>Representa el valor predeterminado de la clase <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>Obtiene el nombre de la propiedad de miembro de presentación del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Nombre de la propiedad de miembro de presentación del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a la instancia actual del objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="obj">Objeto <see cref="T:System.Object" /> que se va a comparar con la instancia actual de <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</param>
      <returns>Es <see langword="true" /> si el objeto es igual a la instancia actual; de lo contrario, es <see langword="false" />, lo que indica que no son iguales.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>Obtiene el nombre del miembro de búsqueda del componente al que está enlazado este atributo.</summary>
      <returns>Nombre del miembro de búsqueda del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>Obtiene el nombre de la propiedad de miembro de valor del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns>Nombre de la propiedad de miembro de valor del componente al que está enlazado el objeto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>Implementa <see cref="T:System.ComponentModel.IComponent" /> y proporciona la implementación base de componentes utilizables en modo remoto cuyas referencias se calculan por valor (se pasa una copia del objeto serializado).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>Obtiene el contenedor del componente.</summary>
      <returns>Objeto que implementa la interfaz <see cref="T:System.ComponentModel.IContainer" /> que representa el contenedor del componente, o <see langword="null" /> si el componente no tiene un sitio.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>Obtiene un valor que indica si el componente está actualmente en modo de diseño.</summary>
      <returns>Es <see langword="true" /> si el componente está en modo de diseño; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.MarshalByValueComponent" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>Agrega un controlador de eventos para escuchar el evento <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> en el componente.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>Obtiene la lista de controladores de eventos asociados a este componente.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" /> que proporciona los delegados correspondientes a este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>Permite que un objeto intente liberar recursos y realizar otras operaciones de limpieza antes de que sea reclamado por la recolección de elementos no utilizados.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>Obtiene el implementador de <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service">
        <see cref="T:System.Type" /> que representa el tipo de servicio que se desea.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el implementador de <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>Obtiene o establece el sitio del componente.</summary>
      <returns>Objeto que implementa la interfaz <see cref="T:System.ComponentModel.ISite" /> que representa el sitio del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>Devuelve una <see cref="T:System.String" /> que contiene el nombre del <see cref="T:System.ComponentModel.Component" />, si existe. Este método no se debe invalidar.</summary>
      <returns>Una <see cref="T:System.String" /> que contiene el nombre de la clase <see cref="T:System.ComponentModel.Component" /> si la hay.  
 Es <see langword="null" /> si la clase <see cref="T:System.ComponentModel.Component" /> no tiene nombre.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>Representa un servicio de análisis de máscaras que cualquier control compatible con el uso de máscaras puede utilizar como, por ejemplo, <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara especificada.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara y el valor de restricción ASCII especificados.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="restrictToAscii">Se establece en <see langword="true" /> para restringir la entrada a caracteres compatibles con ASCII; de lo contrario, se establece en <see langword="false" /> para permitir el juego de caracteres Unicode completo.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara, el carácter de contraseña y el valor de uso del carácter de petición de datos que se hayan especificado.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="passwordChar">Valor <see cref="T:System.Char" /> que se va a mostrar para los caracteres especificados en una cadena de contraseña.</param>
      <param name="allowPromptAsInput">Se establece en <see langword="true" /> para permitir como entrada el carácter de petición de datos; de lo contrario, se establece en <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara y referencia cultural especificadas.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se utiliza para establecer los caracteres separadores según la región.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara, la referencia cultural y el valor de restricción ASCII especificados.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se utiliza para establecer los caracteres separadores según la región.</param>
      <param name="restrictToAscii">Se establece en <see langword="true" /> para restringir la entrada a caracteres compatibles con ASCII; de lo contrario, se establece en <see langword="false" /> para permitir el juego de caracteres Unicode completo.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara, la referencia cultural, el valor de uso del carácter de petición de datos, el carácter de petición de datos, el carácter de contraseña y valor de restricción ASCII especificados.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se utiliza para establecer los caracteres separadores según la región.</param>
      <param name="allowPromptAsInput">Valor <see cref="T:System.Boolean" /> que especifica si se permite utilizar el carácter de petición de datos como un carácter de entrada válido.</param>
      <param name="promptChar">Valor <see cref="T:System.Char" /> que se va a mostrar como marcador de posición para los datos proporcionados por el usuario.</param>
      <param name="passwordChar">Valor <see cref="T:System.Char" /> que se va a mostrar para los caracteres especificados en una cadena de contraseña.</param>
      <param name="restrictToAscii">Se establece en <see langword="true" /> para restringir la entrada a caracteres compatibles con ASCII; de lo contrario, se establece en <see langword="false" /> para permitir el juego de caracteres Unicode completo.</param>
      <exception cref="T:System.ArgumentException">El parámetro de máscara es <see langword="null" /> o <see cref="F:System.String.Empty" />.  
O bien 
La máscara contiene uno o varios caracteres no imprimibles.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MaskedTextProvider" /> con la máscara, la referencia cultural, el carácter de contraseña y el valor de uso del carácter de petición de datos que se hayan especificado.</summary>
      <param name="mask">Objeto <see cref="T:System.String" /> que representa la máscara de entrada.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se utiliza para establecer los caracteres separadores según la región.</param>
      <param name="passwordChar">Valor <see cref="T:System.Char" /> que se va a mostrar para los caracteres especificados en una cadena de contraseña.</param>
      <param name="allowPromptAsInput">Se establece en <see langword="true" /> para permitir como entrada el carácter de petición de datos; de lo contrario, se establece en <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>Agrega el carácter de entrada especificado al final de la cadena con formato.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> que se va a anexar a la cadena con formato.</param>
      <returns>Es <see langword="true" /> si el carácter de entrada se ha agregado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Agrega el carácter de entrada especificado al final de la cadena con formato y, a continuación, genera información sobre la posición e información descriptiva.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> que se va a anexar a la cadena con formato.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato a la que se intentó agregar el carácter. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter de entrada se ha agregado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>Agrega los caracteres de la cadena de entrada especificada al final de la cadena con formato.</summary>
      <param name="input">Objeto <see cref="T:System.String" /> que contiene los valores de caracteres que se van a anexar a la cadena con formato.</param>
      <returns>Es <see langword="true" /> si todos los caracteres de la cadena de entrada se han agregado correctamente; de lo contrario, es <see langword="false" /> para indicar que no se ha agregado ningún carácter.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Agrega los caracteres de la cadena de entrada especificada al final de la cadena con formato y, a continuación, genera información sobre la posición e información descriptiva.</summary>
      <param name="input">Objeto <see cref="T:System.String" /> que contiene los valores de caracteres que se van a anexar a la cadena con formato.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato a la que se intentó agregar el carácter. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si todos los caracteres de la cadena de entrada se han agregado correctamente; de lo contrario, es <see langword="false" /> para indicar que no se ha agregado ningún carácter.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>Obtiene un valor que indica si el carácter de petición de datos debe considerarse como un carácter de entrada válido o no.</summary>
      <returns>Es <see langword="true" /> si el usuario puede especificar <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> en el control; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>Obtiene un valor que indica si la máscara acepta caracteres que no pertenecen al juego de caracteres ASCII.</summary>
      <returns>Es <see langword="true" /> si sólo se aceptan caracteres ASCII; es <see langword="false" /> si el objeto <see cref="T:System.ComponentModel.MaskedTextProvider" /> puede aceptar cualquier carácter Unicode arbitrario. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>Obtiene el número de posiciones de caracteres modificables a las que ya se les ha asignado correctamente un valor de entrada.</summary>
      <returns>
        <see cref="T:System.Int32" /> que contiene el número de posiciones de caracteres modificables en la máscara de entrada a los que ya se ha asignado un valor de carácter en la cadena con formato.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>Obtiene el número de posiciones de caracteres modificables de la máscara de entrada a las que aún no se les ha asignado un valor de entrada.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene el número de posiciones de caracteres modificables a las que aún no se les ha asignado un valor de carácter.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>Borra todos los caracteres de entrada modificables de la cadena con formato, reemplazándolos por caracteres de petición de datos.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>Borra todos los caracteres de entrada modificables de la cadena con formato, reemplazándolos por caracteres de petición de datos y, a continuación, genera información descriptiva.</summary>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>Crea una copia del objeto <see cref="T:System.ComponentModel.MaskedTextProvider" /> actual.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.MaskedTextProvider" /> que crea este método, convertido en objeto.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>Obtiene la referencia cultural que determina el valor de los separadores y marcadores de posición localizables de la máscara de entrada.</summary>
      <returns>Objeto <see cref="T:System.Globalization.CultureInfo" /> que contiene la información de referencia cultural asociada a la máscara de entrada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>Obtiene el carácter de contraseña predeterminado que se utiliza para ocultar los datos proporcionados por el usuario.</summary>
      <returns>Valor <see cref="T:System.Char" /> que representa el carácter de contraseña predeterminado.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>Obtiene el número de posiciones modificables de la cadena con formato.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene el número de posiciones modificables de la cadena con formato.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>Obtiene un enumerador recién creado para las posiciones modificables de la cadena con formato.</summary>
      <returns>Interfaz <see cref="T:System.Collections.IEnumerator" /> que admite la enumeración de las posiciones modificables de la cadena con formato.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable asignada que se encuentre después de la posición especificada utilizando la dirección de búsqueda indicada.</summary>
      <param name="position">Posición de base cero de la cadena con formato donde debe iniciarse la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable asignada encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable asignada que se encuentre entre las posiciones especificadas utilizando la dirección de búsqueda indicada.</summary>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia la búsqueda.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable asignada encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable situada después de la posición especificada utilizando la dirección de búsqueda indicada.</summary>
      <param name="position">Posición de base cero de la cadena con formato donde debe iniciarse la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable que se encuentre entre las posiciones especificadas utilizando la dirección de búsqueda indicada.</summary>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia la búsqueda.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición no modificable situada después de la posición especificada utilizando la dirección de búsqueda indicada.</summary>
      <param name="position">Posición de base cero de la cadena con formato donde debe iniciarse la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición literal encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición no modificable que se encuentre entre las posiciones especificadas utilizando la dirección de búsqueda indicada.</summary>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia la búsqueda.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición literal encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable sin asignar situada después de la posición especificada utilizando la dirección de búsqueda indicada.</summary>
      <param name="position">Posición de base cero de la cadena con formato donde debe iniciarse la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable sin asignar encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Devuelve la posición de la primera posición modificable sin asignar que se encuentre entre las posiciones especificadas utilizando la dirección de búsqueda indicada.</summary>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia la búsqueda.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza la búsqueda.</param>
      <param name="direction">Valor <see cref="T:System.Boolean" /> que indica la dirección de búsqueda: se establece en <see langword="true" /> para busca hacia delante y en <see langword="false" /> para buscar hacia atrás.</param>
      <returns>Si la búsqueda da resultados, valor <see cref="T:System.Int32" /> que representa la posición de base cero de la primera posición modificable sin asignar encontrada; de lo contrario, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>Determina si la enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificada denota éxito o error.</summary>
      <param name="hint">Valor de <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que se obtiene normalmente como parámetro de salida de una operación anterior.</param>
      <returns>Es <see langword="true" /> si el valor de <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificado indica éxito; es <see langword="false" /> si indica error.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>Obtiene o establece un valor que indica si los caracteres literales de la máscara de entrada deben incluirse en la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si los literales se incluyen en la cadena; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>Obtiene o establece un valor que indica si la propiedad <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> se utiliza para representar que el usuario no ha especificado ningún dato cuando se muestra la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si el carácter de petición de datos se utiliza para representar las posiciones en las que el usuario no ha especificado ningún dato; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>Inserta el carácter especificado en la posición indicada de la cadena con formato.</summary>
      <param name="input">Objeto <see cref="T:System.Char" /> que se va a insertar.</param>
      <param name="position">Posición de base cero de la cadena con formato donde debe insertarse el carácter.</param>
      <returns>Es <see langword="true" /> si el carácter se ha insertado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Inserta el carácter especificado en la posición indicada de la cadena con formato y devuelve la última posición de inserción y el estado de la operación.</summary>
      <param name="input">Objeto <see cref="T:System.Char" /> que se va a insertar.</param>
      <param name="position">Posición de base cero de la cadena con formato donde debe insertarse el carácter.</param>
      <param name="testPosition">Última posición donde se haya insertado un carácter, en caso de que el método se haya llevado a cabo correctamente; de lo contrario, primera posición donde no se haya podido efectuar la inserción. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de inserción. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha insertado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>Inserta la cadena especificada en la posición indicada de la cadena con formato.</summary>
      <param name="input">Objeto <see cref="T:System.String" /> que se va a insertar.</param>
      <param name="position">Posición de base cero de la cadena con formato donde debe insertarse la cadena de entrada.</param>
      <returns>Es <see langword="true" /> si el carácter se ha insertado correctamente; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Inserta la cadena especificada en la posición indicada de la cadena con formato y devuelve la última posición de inserción y el estado de la operación.</summary>
      <param name="input">Objeto <see cref="T:System.String" /> que se va a insertar.</param>
      <param name="position">Posición de base cero de la cadena con formato donde debe insertarse la cadena de entrada.</param>
      <param name="testPosition">Última posición donde se haya insertado un carácter, en caso de que el método se haya llevado a cabo correctamente; de lo contrario, primera posición donde no se haya podido efectuar la inserción. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de inserción. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha insertado correctamente; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>Obtiene el límite superior del intervalo de índices que no son válidos.</summary>
      <returns>Valor que representa el índice no válido mayor, según se determine en la implementación del proveedor. Por ejemplo, si el índice válido menor es 0, esta propiedad devolverá -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>Determina si la posición especificada está disponible para asignarse.</summary>
      <param name="position">Posición de base cero de la máscara que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la posición especificada en la cadena con formato es modificable y aún no se ha asignado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>Determina si la posición especificada es modificable.</summary>
      <param name="position">Posición de base cero de la máscara que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la posición especificada en la cadena con formato es modificable; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>Obtiene o establece un valor que determina si se debe aplicar protección con contraseña a la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si la cadena de entrada va a considerarse como una cadena de contraseña; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>Determina si el carácter especificado es un carácter de entrada válido.</summary>
      <param name="c">Valor <see cref="T:System.Char" /> que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el carácter especificado contiene un valor de entrada válido; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>Determina si el carácter especificado es un carácter de máscara válido.</summary>
      <param name="c">Valor <see cref="T:System.Char" /> que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el carácter especificado contiene un valor de máscara válido; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>Determina si el carácter especificado es un carácter de contraseña válido.</summary>
      <param name="c">Valor <see cref="T:System.Char" /> que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el carácter especificado contiene un valor de contraseña válido; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>Obtiene el elemento situado en la posición especificada de la cadena con formato.</summary>
      <param name="index">Índice de base cero del elemento que se va a recuperar.</param>
      <returns>Valor <see cref="T:System.Char" /> situado en la posición especificada de la cadena con formato.</returns>
      <exception cref="T:System.IndexOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que la longitud <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> de la máscara.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>Obtiene el índice de la máscara correspondiente al carácter de entrada situado más a la derecha que se haya asignado a la máscara.</summary>
      <returns>Si se ha asignado a la máscara un carácter de entrada como mínimo, valor <see cref="T:System.Int32" /> que contiene el índice de la posición asignada que está situada más a la derecha; de lo contrario, si no se ha asignado ninguna posición, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>Obtiene la longitud de la máscara, sin ningún carácter modificador de máscara.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene el número de posiciones de la máscara, a excepción de los caracteres que modifican su entrada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>Obtiene la máscara de entrada.</summary>
      <returns>Objeto <see cref="T:System.String" /> que contiene la máscara completa.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>Obtiene un valor que indica si se han especificado todas las entradas obligatorias en la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si se han especificado todas las entradas obligatorias en la máscara; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>Obtiene un valor que indica si se han especificado todas las entradas obligatorias y opcionales en la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si se han especificado todas las entradas obligatorias y opcionales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>Obtiene o establece el carácter que se va a sustituir por los caracteres de entrada reales.</summary>
      <returns>Valor <see cref="T:System.Char" /> que se utiliza como carácter de contraseña.</returns>
      <exception cref="T:System.InvalidOperationException">El carácter de contraseña que se especificó al establecer esta propiedad es el mismo que el carácter de petición de datos actual, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Es necesario que los dos caracteres sean distintos.</exception>
      <exception cref="T:System.ArgumentException">El carácter que se especificó al establecer esta propiedad no es un carácter de contraseña válido, tal y como determina el método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>Obtiene o establece el carácter que se utiliza para representar que el usuario no ha especificado ningún dato para todas las posiciones de edición disponibles.</summary>
      <returns>Carácter que se utiliza para pedir al usuario que introduzca datos. El valor predeterminado es el carácter de subrayado (_).</returns>
      <exception cref="T:System.InvalidOperationException">El carácter de petición de datos que se especificó al establecer esta propiedad es el mismo que el carácter de contraseña actual, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Es necesario que los dos caracteres sean distintos.</exception>
      <exception cref="T:System.ArgumentException">El carácter que se especificó al establecer esta propiedad no es un carácter de contraseña válido, tal y como determina el método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>Quita el último carácter asignado de la cadena con formato.</summary>
      <returns>Es <see langword="true" /> si el carácter se ha quitado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Quita el último carácter asignado de la cadena con formato y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="testPosition">Posición de base cero de la cadena con formato de la que se ha quitado realmente el carácter. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha quitado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>Quita el carácter asignado de la posición especificada de la cadena con formato.</summary>
      <param name="position">Posición de base cero del carácter asignado que se va a quitar.</param>
      <returns>Es <see langword="true" /> si el carácter se ha quitado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>Quita los caracteres asignados situados entre las posiciones especificadas de la cadena con formato.</summary>
      <param name="startPosition">Índice de base cero del primer carácter asignado que se va a quitar.</param>
      <param name="endPosition">Índice de base cero del último carácter asignado que se va a quitar.</param>
      <returns>Es <see langword="true" /> si el carácter se ha quitado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Quita los caracteres asignados situados entre las posiciones especificadas de la cadena con formato y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="startPosition">Índice de base cero del primer carácter asignado que se va a quitar.</param>
      <param name="endPosition">Índice de base cero del último carácter asignado que se va a quitar.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato de la que se hayan quitado realmente los caracteres, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha quitado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>Reemplaza un carácter individual por el valor de carácter especificado en la posición indicada o más allá de la misma.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> por el que se reemplaza el valor existente.</param>
      <param name="position">Posición de base cero en la que buscar el primer carácter modificable que se va a reemplazar.</param>
      <returns>Es <see langword="true" /> si el carácter se ha reemplazado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Reemplaza un carácter individual situado entre las posiciones inicial y final especificadas por el valor de carácter especificado y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> por el que se reemplaza el valor existente.</param>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia el reemplazo.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza el reemplazo.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato en la que se haya reemplazado realmente el último carácter, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de reemplazo. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha reemplazado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Reemplaza un único carácter situado en la posición especificada o más allá de la misma por el valor de carácter especificado y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> por el que se reemplaza el valor existente.</param>
      <param name="position">Posición de base cero en la que buscar el primer carácter modificable que se va a reemplazar.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato en la que se haya reemplazado realmente el último carácter, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de reemplazo. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter se ha reemplazado correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>Reemplaza un intervalo de caracteres modificables por la cadena especificada comenzando en la posición indicada.</summary>
      <param name="input">Valor de <see cref="T:System.String" /> que se utiliza para reemplazar los caracteres modificables existentes.</param>
      <param name="position">Posición de base cero en la que buscar el primer carácter modificable que se va a reemplazar.</param>
      <returns>Es <see langword="true" /> si todos los caracteres se han reemplazado correctamente; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Reemplaza un intervalo de caracteres modificables por la cadena especificada entre las posiciones inicial y final indicadas, y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="input">Valor de <see cref="T:System.String" /> que se utiliza para reemplazar los caracteres modificables existentes.</param>
      <param name="startPosition">Posición de base cero de la cadena con formato donde se inicia el reemplazo.</param>
      <param name="endPosition">Posición de base cero de la cadena con formato donde finaliza el reemplazo.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato en la que se haya reemplazado realmente el último carácter, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de reemplazo. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si todos los caracteres se han reemplazado correctamente; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Reemplaza un intervalo de caracteres modificables por la cadena especificada comenzando en la posición indicada y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="input">Valor de <see cref="T:System.String" /> que se utiliza para reemplazar los caracteres modificables existentes.</param>
      <param name="position">Posición de base cero en la que buscar el primer carácter modificable que se va a reemplazar.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato en la que se haya reemplazado realmente el último carácter, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de reemplazo. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si todos los caracteres se han reemplazado correctamente; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>Obtiene o establece un valor que determina la forma en que debe controlarse un carácter de entrada que coincida con el de petición de datos.</summary>
      <returns>Es <see langword="true" /> si el carácter de petición de datos especificado como entrada hace que se restablezca la posición modificable actual de la máscara; de lo contrario, sería <see langword="false" /> para indicar que el carácter de petición de datos debe procesarse como un carácter de entrada normal. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>Obtiene o establece un valor que determina la forma en que debe controlarse un carácter de entrada de espacio.</summary>
      <returns>Es <see langword="true" /> si el carácter de entrada de espacio hace que se restablezca la posición modificable actual de la máscara; de lo contrario, es <see langword="false" /> para indicar que se debe procesar como un carácter de entrada normal. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>Establece la cadena con formato en la cadena de entrada especificada.</summary>
      <param name="input">Valor de <see cref="T:System.String" /> que se utiliza para establecer la cadena con formato.</param>
      <returns>Es <see langword="true" /> si todos los caracteres se han establecido correctamente; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Establece la cadena con formato en la cadena de entrada especificada y, a continuación, genera información sobre la posición de eliminación e información descriptiva.</summary>
      <param name="input">Valor de <see cref="T:System.String" /> que se utiliza para establecer la cadena con formato.</param>
      <param name="testPosition">Posición de base cero de la cadena con formato en la que se haya establecido realmente el último carácter, en caso de que se haya realizado correctamente la operación; de lo contrario, primera posición en la que no haya podido realizarse la operación. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de establecimiento. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si todos los caracteres se han establecido correctamente; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>Obtiene o establece un valor que indica si las posiciones de caracteres literales de la máscara se pueden sobrescribir con sus mismos valores.</summary>
      <returns>Se establece en <see langword="true" /> para permitir que se vuelvan a agregar los literales sobrescribiéndolos; de lo contrario, se establece en <see langword="false" /> para que no se permita al usuario sobrescribir los caracteres literales. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>Devuelve la cadena con formato en un formato que se pueda mostrar.</summary>
      <returns>Cadena <see cref="T:System.String" /> con formato que incluye caracteres de petición de datos y literales de máscara.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>Devuelve la cadena con formato que contiene todos los valores de caracteres asignados.</summary>
      <returns>Cadena <see cref="T:System.String" /> con formato que contiene todos los valores de caracteres asignados.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>Devuelve la cadena con formato, que puede incluir los caracteres de contraseña.</summary>
      <param name="ignorePasswordChar">Se establece en <see langword="true" /> para devolver los caracteres modificables reales; se establece en <see langword="false" /> para indicar que se va a respetar la propiedad <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <returns>Cadena <see cref="T:System.String" /> con formato que incluye caracteres literales, caracteres de petición de datos y, opcionalmente, caracteres de contraseña.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>Devuelve la cadena con formato, que puede incluir caracteres de petición de datos y caracteres literales.</summary>
      <param name="includePrompt">Se establece en <see langword="true" /> para incluir caracteres de petición de datos en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <param name="includeLiterals">Se establece en <see langword="true" /> para incluir caracteres literales en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <returns>Cadena <see cref="T:System.String" /> con formato que incluye todos los valores de caracteres asignados y, opcionalmente, caracteres literales y caracteres de petición de datos.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Devuelve una subcadena de la cadena con formato, que puede incluir caracteres de petición de datos, caracteres literales y caracteres de contraseña.</summary>
      <param name="ignorePasswordChar">Se establece en <see langword="true" /> para devolver los caracteres modificables reales; se establece en <see langword="false" /> para indicar que se va a respetar la propiedad <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="includePrompt">Se establece en <see langword="true" /> para incluir caracteres de petición de datos en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <param name="includeLiterals">Se establece en <see langword="true" /> para devolver caracteres literales en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <param name="startPosition">Posición de base cero de la cadena con formato donde comienza la salida.</param>
      <param name="length">Número de caracteres que se van a devolver.</param>
      <returns>Subcadena de la cadena <see cref="T:System.String" /> con formato que incluye todos los valores de caracteres asignados y, opcionalmente, caracteres literales, caracteres de petición de datos y caracteres de contraseña, en caso de que la operación se haya realizado correctamente; de lo contrario, cadena <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Devuelve una subcadena de la cadena con formato, que puede incluir caracteres de petición de datos y caracteres literales.</summary>
      <param name="includePrompt">Se establece en <see langword="true" /> para incluir caracteres de petición de datos en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <param name="includeLiterals">Se establece en <see langword="true" /> para incluir caracteres literales en la cadena devuelta; de lo contrario, se establece en <see langword="false" />.</param>
      <param name="startPosition">Posición de base cero de la cadena con formato donde comienza la salida.</param>
      <param name="length">Número de caracteres que se van a devolver.</param>
      <returns>Subcadena de la cadena <see cref="T:System.String" /> con formato que incluye todos los valores de caracteres asignados y, opcionalmente, caracteres literales y caracteres de petición de datos, en caso de que la operación se haya realizado correctamente; de lo contrario, cadena <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>Devuelve una subcadena de la cadena con formato, que puede incluir caracteres de contraseña.</summary>
      <param name="ignorePasswordChar">Se establece en <see langword="true" /> para devolver los caracteres modificables reales; se establece en <see langword="false" /> para indicar que se va a respetar la propiedad <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="startPosition">Posición de base cero de la cadena con formato donde comienza la salida.</param>
      <param name="length">Número de caracteres que se van a devolver.</param>
      <returns>Subcadena de la cadena <see cref="T:System.String" /> con formato que incluye caracteres literales, caracteres de petición de datos y, opcionalmente, caracteres de contraseña, en caso de que la operación se haya realizado correctamente; de lo contrario, cadena <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>Devuelve una subcadena de la cadena con formato.</summary>
      <param name="startPosition">Posición de base cero de la cadena con formato donde comienza la salida.</param>
      <param name="length">Número de caracteres que se van a devolver.</param>
      <returns>Subcadena de la cadena <see cref="T:System.String" /> con formato que incluye todos los valores de caracteres asignados, en caso de que la operación se haya realizado correctamente; de lo contrario, cadena <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Comprueba si el carácter especificado se ha podido establecer correctamente en la posición indicada.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> que se va a comprobar.</param>
      <param name="position">Posición de la máscara donde se va a comprobar el carácter de entrada.</param>
      <param name="hint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si el carácter especificado es válido para la posición indicada; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>Comprueba si el carácter especificado sería un carácter de escape en la posición especificada.</summary>
      <param name="input">Valor <see cref="T:System.Char" /> que se va a comprobar.</param>
      <param name="position">Posición de la máscara donde se va a comprobar el carácter de entrada.</param>
      <returns>Es <see langword="true" /> si el carácter especificado fuese un carácter de escape en la posición especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>Comprueba si la cadena especificada ha podido establecerse correctamente.</summary>
      <param name="input">Valor <see cref="T:System.String" /> que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la cadena especificada representa una entrada válida; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Comprueba si la cadena especificada ha podido establecerse correctamente y, a continuación, genera información sobre la posición e información descriptiva.</summary>
      <param name="input">Valor <see cref="T:System.String" /> que se va a comprobar.</param>
      <param name="testPosition">Posición de base cero del último carácter que se ha comprobado realmente, en caso de que la operación se haya realizado correctamente; de lo contrario, primera posición donde la comprobación haya producido errores. Es un parámetro de salida.</param>
      <param name="resultHint">Enumeración <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que describe sucintamente el resultado de la operación de comprobación. Es un parámetro de salida.</param>
      <returns>Es <see langword="true" /> si la cadena especificada representa una entrada válida; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>Especifica una serie de valores que describen brevemente los resultados de una operación de análisis de texto enmascarado.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>La operación no se realizó correctamente. Se encontró un carácter de entrada que no era alfanumérico. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>La operación no se realizó correctamente. Se encontró un carácter de entrada que no pertenecía al juego de caracteres ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>Correcto. La operación se realizó correctamente porque un carácter literal, un carácter de petición de datos o un carácter de espacio en blanco era un carácter de escape. Para obtener más información sobre los caracteres de escape, vea el método <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>La operación no se realizó correctamente. Se encontró un carácter de entrada que no era un dígito.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>La operación no se realizó correctamente. El programa encontró un carácter de entrada que no era válido. Para obtener más información sobre los caracteres que no son válidos, vea el método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>La operación no se realizó correctamente. Se encontró un carácter de entrada que no era una letra.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>Correcto. No se realizó la operación principal porque no era necesario; por lo tanto, no se ha producido ningún efecto secundario.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>La operación no se realizó correctamente. La posición actual en la cadena con formato es un carácter literal.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>La operación no se realizó correctamente. La posición especificada no se encuentra en el intervalo de la cadena de destino; normalmente, se debe a que la posición especificada es menor que cero o mayor que la longitud de la cadena de destino.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>La operación no se realizó correctamente. El carácter de petición de datos no es válido en la entrada; puede deberse a que la propiedad <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> esté establecida en <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>Correcto. No se realizó la operación principal porque no era necesario, pero el método ha producido un efecto secundario. Por ejemplo, el método <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> puede eliminar una posición de edición sin asignar, lo que produce un desplazamiento hacia la izquierda de los siguientes caracteres de la cadena con formato.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>La operación no se realizó correctamente. Se encontró un carácter de entrada que no era un dígito con signo.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>Correcto. La operación principal se realizó correctamente.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>La operación no se realizó correctamente. No había suficientes posiciones de edición disponibles para atender la solicitud.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>Desconocido. No se pudo determinar el resultado de la operación.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>Representa un miembro de clase, como una propiedad o un evento. Ésta es una clase base abstracta.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MemberDescriptor" /> con el objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre del miembro y sus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MemberDescriptor" /> con el nombre en la clase <see cref="T:System.ComponentModel.MemberDescriptor" /> especificada y los atributos en la antigua clase <see cref="T:System.ComponentModel.MemberDescriptor" /> y en la matriz <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre del miembro y sus atributos.</param>
      <param name="newAttributes">Matriz de objetos <see cref="T:System.Attribute" /> con los atributos que se desea agregar al miembro.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MemberDescriptor" /> con el nombre especificado del miembro.</summary>
      <param name="name">Nombre del miembro.</param>
      <exception cref="T:System.ArgumentException">El nombre es una cadena vacía ("") o <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MemberDescriptor" /> con el nombre especificado del miembro y una matriz de atributos.</summary>
      <param name="name">Nombre del miembro.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que contiene los atributos del miembro.</param>
      <exception cref="T:System.ArgumentException">El nombre es una cadena vacía ("") o <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>Obtiene o establece una matriz de atributos.</summary>
      <returns>Matriz de tipo <see cref="T:System.Attribute" /> que contiene los atributos de este miembro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>Obtiene la colección de atributos de este miembro.</summary>
      <returns>Una clase <see cref="T:System.ComponentModel.AttributeCollection" /> que proporciona los atributos para este miembro o una colección vacía si no hay atributos en la propiedad <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>Obtiene el nombre de la categoría a la que pertenece el miembro, tal como se especifica en <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>Nombre de la categoría a la que pertenece el miembro. Si no hay ningún <see cref="T:System.ComponentModel.CategoryAttribute" />, el nombre de categoría se establece en la categoría predeterminada, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>Crea una colección de atributos mediante la matriz de atributos que se pasó al constructor.</summary>
      <returns>Un nuevo <see cref="T:System.ComponentModel.AttributeCollection" /> que contiene los atributos de <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>Obtiene la descripción del miembro tal como se especifica en <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>Descripción del miembro. Si no hay ningún objeto <see cref="T:System.ComponentModel.DescriptionAttribute" />, el valor de propiedad se establece en el valor predeterminado, que es una cadena vacía ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>Obtiene si este miembro debe establecerse sólo en tiempo de diseño según se especifica en <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" /> si este miembro debe establecerse sólo en tiempo de diseño; <see langword="false" /> si el miembro puede establecerse en tiempo de ejecución.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>Obtiene el nombre que se puede mostrar en una ventana, como la ventana Propiedades.</summary>
      <returns>Nombre que se va a mostrar para el miembro.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>Compara esta instancia con el objeto especificado para comprobar si son equivalentes.</summary>
      <param name="obj">Objeto que se va a comparar con la actual instancia.</param>
      <returns>
        <see langword="true" /> si son equivalentes; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Cuando se reemplaza en una clase derivada, agrega los atributos de la clase heredada a la lista especificada de atributos en la clase principal.</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> que enumera los atributos de la clase principal. Inicialmente, se encuentra vacío.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>Busca el método especificado mediante reflexión, buscando sólo los métodos públicos.</summary>
      <param name="componentClass">Componente que contiene el método.</param>
      <param name="name">Nombre del método que se va a buscar.</param>
      <param name="args">Matriz de parámetros del método que se utiliza para elegir entre métodos sobrecargados.</param>
      <param name="returnType">Tipo que se va a devolver para el método.</param>
      <returns>Una clase <see cref="T:System.Reflection.MethodInfo" /> que representa el método o <see langword="null" /> si no se encuentra el método.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>Busca el método especificado mediante reflexión con una opción de buscar sólo los métodos públicos.</summary>
      <param name="componentClass">Componente que contiene el método.</param>
      <param name="name">Nombre del método que se va a buscar.</param>
      <param name="args">Matriz de parámetros del método que se utiliza para elegir entre métodos sobrecargados.</param>
      <param name="returnType">Tipo que se va a devolver para el método.</param>
      <param name="publicOnly">Si debe limitarse la búsqueda a los métodos públicos.</param>
      <returns>Una clase <see cref="T:System.Reflection.MethodInfo" /> que representa el método o <see langword="null" /> si no se encuentra el método.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Recupera el objeto que se debe utilizar durante la invocación de miembros.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del destino de la invocación.</param>
      <param name="instance">Destino de la invocación potencial.</param>
      <returns>El objeto que se va a utilizar durante las invocaciones de miembros.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>Obtiene el componente en el que se debe invocar a un método.</summary>
      <param name="componentClass">
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazado <see cref="T:System.ComponentModel.MemberDescriptor" />. Por ejemplo, si esta clase <see cref="T:System.ComponentModel.MemberDescriptor" /> describe una propiedad, este parámetro deberá ser la clase en la que se declare la propiedad.</param>
      <param name="component">Instancia del objeto al que se va a llamar.</param>
      <returns>Instancia del componente al que se va a invocar. Este método devuelve un diseñador visual cuando la propiedad está asociada a un diseñador visual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> o <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>Obtiene un sitio de componente para el componente especificado.</summary>
      <param name="component">Componente para el que se desea buscar un sitio.</param>
      <returns>Sitio del componente, o <see langword="null" /> si no existe ningún sitio.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>Obtiene un valor que indica si se puede examinar el miembro, según se especifica en <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns>
        <see langword="true" />si se puede examinar el miembro; en caso contrario, <see langword="false" />. Si no hay ningún <see cref="T:System.ComponentModel.BrowsableAttribute" />, el valor de propiedad se establece en el valor predeterminado, siendo éste <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>Obtiene el nombre del miembro.</summary>
      <returns>Nombre del miembro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>Obtiene el código hash para el nombre del miembro, según se especifica en <see cref="M:System.String.GetHashCode" />.</summary>
      <returns>Código hash para el nombre del miembro.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Proporciona un convertidor de tipo para convertir varias cadenas en una sola.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor determinado al tipo especificado usando el contexto y la información de referencia cultural especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" /> , se supone que se va a usar la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Devuelve una colección de propiedades para el tipo de matriz especificado por el parámetro <paramref name="value" />, utilizando el contexto y los atributos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se usa como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene si este objeto admite propiedades, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> si se ha de llamar a <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>Proporciona la implementación base para la interfaz <see cref="T:System.ComponentModel.INestedContainer" /> que permite que los contenedores tengan un componente propietario.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner">Interfaz <see cref="T:System.ComponentModel.IComponent" /> propietaria del contenedor anidado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Crea un sitio para el componente en el contenedor.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> para la que se va a crear un sitio.</param>
      <param name="name">Nombre que se va a asignar a <paramref name="component" />; o bien, <see langword="null" /> para omitir la asignación de nombre.</param>
      <returns>Colección <see cref="T:System.ComponentModel.ISite" /> creada recientemente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>Libera los recursos utilizados por el contenedor anidado.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>Obtiene el objeto de servicio del tipo especificado, si está disponible.</summary>
      <param name="service">
        <see cref="T:System.Type" /> del servicio que se va a recuperar.</param>
      <returns>
        <see cref="T:System.Object" /> que implementa el servicio solicitado o <see langword="null" /> si no se puede resolver el servicio.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>Obtiene el componente propietario de este contenedor anidado.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.IComponent" /> propietaria del contenedor anidado.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>Obtiene el nombre del componente propietario.</summary>
      <returns>Nombre del componente propietario.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Proporciona la conversión automática entre un tipo que acepta valores NULL y su tipo primitivo subyacente.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type">Tipo especificado que acepta valores NULL.</param>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="type" /> no es un tipo que acepta valores NULL.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir un objeto del tipo especificado al tipo de este convertidor, mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo a partir del cual se desea realizar la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado, con el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se quiere convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto determinado al tipo de este convertidor usando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor determinado al tipo especificado usando el contexto y la información de referencia cultural especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea una instancia del tipo al que está asociado este <see cref="T:System.ComponentModel.TypeConverter" />, mediante el contexto especificado, según un conjunto de valores de propiedad para el objeto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> de nuevos valores de propiedad.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el <see cref="T:System.Collections.IDictionary" /> especificado o <see langword="null" /> si no es posible crear el objeto. Este método devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve un valor que indica si, al cambiar un valor en este objeto, es necesario llamar al método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> si al cambiar una propiedad de este objeto es necesario llamar a <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Devuelve una colección de propiedades para el tipo de matriz especificado por el valor del parámetro, utilizando el contexto y los atributos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utiliza como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene si este objeto admite propiedades, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> si se ha de llamar a <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve una colección de valores estándar para el tipo de datos para el que está diseñado este convertidor de tipos cuando se proporciona un contexto de formato.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato que puede utilizarse para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Este parámetro o las propiedades de este parámetro pueden ser <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos, o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve si la colección de valores estándar devueltos por <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exclusiva de posibles valores, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" />si el <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelto por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exhaustiva de posibles valores; <see langword="false" />si hay otros valores posibles.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve si este objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>Es <see langword="true" /> si debe llamarse a <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> para buscar un conjunto común de valores que sea compatible con el objeto; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve si el valor de objeto dado es válido para este tipo y para el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> cuya validez se va a comprobar.</param>
      <returns>
        <see langword="true" />si el valor especificado es válido para este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Obtiene el tipo que acepta valores NULL.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa el tipo que acepta valores NULL.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Obtiene el tipo subyacente.</summary>
      <returns>Objeto <see cref="T:System.Type" /> que representa el tipo subyacente.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Obtiene el convertidor del tipo subyacente.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.TypeConverter" /> que representa el convertidor del tipo subyacente.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>Indica los caracteres que ocultan la representación del texto de un objeto, como asteriscos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> y, opcionalmente, muestra el texto de la contraseña.</summary>
      <param name="password">Se establece en <see langword="true" /> para indicar que la propiedad debe mostrarse en forma de texto de contraseña; de lo contrario, se establece en <see langword="false" />. De manera predeterminada, es <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>Especifica el valor predeterminado del atributo <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> son iguales.</summary>
      <param name="o">Objeto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> que se va a comparar con el objeto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>Devuelve un valor que indica si el valor de esta instancia es el predeterminado.</summary>
      <returns>
        <see langword="true" /> si esta instancia es el atributo predeterminado para la clase; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>Especifica que no se utiliza una propiedad de texto como contraseña. Este campo <see langword="static" /> (<see langword="Shared" /> en Visual Basic) es de sólo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>Obtiene un valor que indica si la propiedad para la que se define el atributo <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> debe mostrarse en forma de texto de contraseña.</summary>
      <returns>Se establece en <see langword="true" /> si la propiedad debe mostrarse en forma de texto de contraseña; de lo contrario, se establece en <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>Especifica que se utiliza una propiedad de texto como contraseña. Este campo <see langword="static" /> (<see langword="Shared" /> en Visual Basic) es de sólo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Proporciona una abstracción de una propiedad en una clase.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre y los atributos del <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre de la propiedad y sus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre del <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado y los atributos de <see cref="T:System.ComponentModel.MemberDescriptor" /> y la matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> que contiene el nombre del miembro y sus atributos.</param>
      <param name="attrs">Matriz <see cref="T:System.Attribute" /> que contiene los atributos que se desea asociar a la propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre y los atributos especificados.</summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="attrs">Matriz de tipo <see cref="T:System.Attribute" /> que contiene los atributos de la propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Habilita la notificación a otros objetos cuando cambia esta propiedad.</summary>
      <param name="component">Componente para el cual se va a agregar el controlador.</param>
      <param name="handler">Delegado que se va a agregar como agente de escucha.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> o <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, devuelve si al restablecer un objeto cambia su valor.</summary>
      <param name="component">Componente cuya capacidad de restablecerse se va a probar.</param>
      <returns>
        <see langword="true" /> si al restablecer el componente cambia su valor; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo de componente al que está enlazada esta propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazada esta propiedad. Cuando se llama al método <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> o al método <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />, el objeto especificado puede ser una instancia de este tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>Obtiene el convertidor de tipos de esta propiedad.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> que se utiliza para convertir el <see cref="T:System.Type" /> de esta propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>Crea una instancia del tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo que se va a crear.</param>
      <returns>Nueva instancia del tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>Compara esto con otro objeto para ver si son equivalentes.</summary>
      <param name="obj">Objeto que se va a comparar con <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns>
        <see langword="true" /> si los valores son equivalentes; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Agrega los atributos de <see cref="T:System.ComponentModel.PropertyDescriptor" /> a la lista de atributos especificada en la clase principal.</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> que enumera los atributos de la clase principal. Inicialmente, se encuentra vacío.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>Devuelve el valor predeterminado de <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <returns>Colección de descriptor de propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>Devuelve <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> utilizando una matriz especificada de atributos como filtro.</summary>
      <param name="filter">Matriz de tipo <see cref="T:System.Attribute" /> que se va a utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades que coinciden con los atributos especificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>Devuelve <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> para un objeto especificado.</summary>
      <param name="instance">Componente del que se van a obtener las propiedades.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades del componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Devuelve <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> de un objeto dado utilizando como filtro una matriz especificada de atributos.</summary>
      <param name="instance">Componente del que se van a obtener las propiedades.</param>
      <param name="filter">Matriz de tipo <see cref="T:System.Attribute" /> que se va a utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades que coinciden con los atributos especificados del componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>Obtiene un editor del tipo especificado.</summary>
      <param name="editorBaseType">Tipo base del editor que se utiliza para diferenciar entre varios editores compatibles con una propiedad.</param>
      <returns>Instancia del tipo de editor solicitado o <see langword="null" /> si no se encuentra ningún editor.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>Devuelve el código hash de este objeto.</summary>
      <returns>El código hash de este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Este método devuelve el objeto que se debe utilizar durante la invocación de miembros.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del destino de la invocación.</param>
      <param name="instance">Destino de la invocación potencial.</param>
      <returns>La clase <see cref="T:System.Object" /> que se debe utilizar durante la invocación de miembros.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>Devuelve un tipo mediante su nombre.</summary>
      <param name="typeName">Nombre calificado con el ensamblado del tipo que se va a recuperar.</param>
      <returns>
        <see cref="T:System.Type" /> que coincide con el nombre de tipo especificado, o <see langword="null" /> si no se encuentra ninguna coincidencia.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el valor actual de la propiedad de un componente.</summary>
      <param name="component">Componente con la propiedad cuyo valor se va a recuperar.</param>
      <returns>Valor de una propiedad de un componente dado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>Recupera el conjunto actual de controladores de eventos <c>ValueChanged</c> para un componente concreto</summary>
      <param name="component">Componente para el que se recuperan controladores de eventos.</param>
      <returns>Un controlador de eventos de multidifusión combinado, o <see langword="null" /> si ningún controlador de eventos está asignado actualmente a <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>Obtiene un valor que indica si esta propiedad se debe traducir, según se especifica en <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>
        <see langword="true" /> si el miembro está marcado con el valor <see cref="T:System.ComponentModel.LocalizableAttribute" /> establecido en <see langword="true" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>Cuando se reemplaza en una clase derivada, obtiene un valor que indica si esta propiedad es de sólo lectura.</summary>
      <returns>
        <see langword="true" /> si la propiedad es de sólo lectura; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>Provoca el evento <c>ValueChanged</c> que se ha implementado.</summary>
      <param name="component">Objeto que genera el evento.</param>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo de propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Habilita la notificación a otros objetos cuando cambia esta propiedad.</summary>
      <param name="component">Componente para el cual se va a quitar el controlador.</param>
      <param name="handler">Delegado que se va a quitar como agente de escucha.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> o <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, restablece el valor predeterminado de esta propiedad del componente.</summary>
      <param name="component">Componente cuyo valor de propiedad se va a restablecer en el valor predeterminado.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>Obtiene un valor que indica si esta propiedad se debe serializar, según se especifica en <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns>Uno de los valores de enumeración de <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> que especifica si esta propiedad se debe serializar.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, establece el valor del componente en otro diferente.</summary>
      <param name="component">Componente con el valor de propiedad que se va a establecer.</param>
      <param name="value">Nuevo valor.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, determina un valor que indica si el valor de esta propiedad debe almacenarse.</summary>
      <param name="component">Componente con la propiedad cuya persistencia se va a examinar.</param>
      <returns>
        <see langword="true" /> si se debe almacenar la propiedad; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>Obtiene un valor que indica si las notificaciones de cambios de valores para esta propiedad se pueden originar fuera del descriptor de propiedades.</summary>
      <returns>
        <see langword="true" /> si las notificaciones de cambios de valores se pueden originar fuera del descriptor de propiedades; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties">Matriz de tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que proporciona las propiedades de esta colección.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que, opcionalmente, es de sólo lectura.</summary>
      <param name="properties">Matriz de tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que proporciona las propiedades de esta colección.</param>
      <param name="readOnly">Si es <see langword="true" />, especifica que la colección no se puede modificar.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>Agrega el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado a la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se agrega a la colección.</param>
      <returns>Índice del objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se ha agregado a la colección.</returns>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>Quita todos los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de la colección.</summary>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>Devuelve si la colección contiene el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia toda la colección a una matriz, empezando por el número de índice especificado.</summary>
      <param name="array">Matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> a la que se van a copiar elementos de la colección.</param>
      <param name="index">Índice del parámetro <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>Obtiene el número de descriptores de propiedades de la colección.</summary>
      <returns>Número de descriptores de propiedades de la colección.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>Especifica una colección vacía que se puede utilizar en lugar de crear una nueva sin elementos. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Devuelve <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre especificado, utilizando un valor Boolean para indicar si se debe omitir la diferencia entre mayúsculas y minúsculas.</summary>
      <param name="name">Nombre del <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a devolver de la colección.</param>
      <param name="ignoreCase">Es <see langword="true" /> si se desea omitir la diferencia entre mayúsculas y minúsculas del nombre de la propiedad; en caso contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre especificado, o <see langword="null" /> si no existe la propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>Devuelve un enumerador para esta clase.</summary>
      <returns>Enumerador de tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>Devuelve el índice del <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> cuyo índice se va a devolver.</param>
      <returns>Índice del <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Agrega <see cref="T:System.ComponentModel.PropertyDescriptor" /> a la colección en el número de índice especificado.</summary>
      <param name="index">Índice de la colección donde se va a agregar el parámetro <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se agrega a la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Ordena los miembros de esta colección, utilizando el <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="sorter">Comparador que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>Ordena los miembros de esta colección. Se aplica primero el orden especificado, seguido del orden predeterminado para esta colección, el cual suele ser alfabético.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>Obtiene o establece <see cref="T:System.ComponentModel.PropertyDescriptor" /> en el número de índice especificado.</summary>
      <param name="index">Índice de base cero de <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a obtener o establecer.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que tiene el número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">El parámetro <paramref name="index" /> no es un índice válido para <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>Obtiene o establece el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre especificado.</summary>
      <param name="name">Nombre del objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a obtener de la colección.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> con el nombre especificado, o <see langword="null" /> si no existe la propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>Quita el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Quita el <see cref="T:System.ComponentModel.PropertyDescriptor" /> de la colección en el índice especificado.</summary>
      <param name="index">Índice de <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>Ordena los miembros de esta colección, de acuerdo con el orden predeterminado de esta colección, el cual suele ser alfabético.</summary>
      <returns>Nuevo <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordenados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Ordena los miembros de esta colección, utilizando el <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="comparer">Comparador que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
      <returns>Nuevo <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordenados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>Ordena los miembros de esta colección. Se aplica primero el orden especificado, seguido del orden predeterminado para esta colección, el cual suele ser alfabético.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
      <returns>Nuevo <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordenados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Ordena los miembros de esta colección. Se aplica primero el orden especificado, seguido del orden de acuerdo con el <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="names">Matriz de cadenas que describe la forma en que se ordenan los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
      <param name="comparer">Comparador que se va a utilizar para ordenar los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> de esta colección.</param>
      <returns>Nuevo <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene los objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordenados.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos contenido en la colección.</summary>
      <returns>Número de elementos contenidos en la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados a <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">
        <see cref="T:System.Object" /> que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a utilizar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se buscará en <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>Es <see langword="true" /> si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un enumerador para esta clase.</summary>
      <returns>Enumerador de tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IDictionary" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">La clave del elemento que se obtiene o establece.</param>
      <returns>El elemento con la clave especificada.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada de <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene los valores de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> para la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.IEnumerator" /> para la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Elemento que se va a agregar a la colección.</param>
      <returns>Posición en la que se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de la colección.</summary>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la colección contiene un valor concreto.</summary>
      <param name="value">El elemento que se va a buscar en la colección.</param>
      <returns>Es <see langword="true" /> si el elemento se encuentra en la colección; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento especificado de la colección.</summary>
      <param name="value">El elemento que se va a buscar en la colección.</param>
      <returns>El índice de <paramref name="value" /> si se encuentra en la lista; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Elemento que se va a insertar en la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la colección tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la colección tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece un elemento de la colección en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns>Elemento en el índice especificado.</returns>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es un <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es menor que 0.  
O bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un valor especificado de la colección.</summary>
      <param name="value">Elemento que se va a quitar de la colección.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">La colección es de solo lectura.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>Identifica la ficha o fichas de propiedades que se van a mostrar para la clase o clases especificadas.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyTabAttribute" /> con el nombre de clase de ficha especificado.</summary>
      <param name="tabClassName">Nombre completo de ensamblado del tipo de ficha que se va a crear. Para obtener un ejemplo de esta convención de formato, vea <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyTabAttribute" /> utilizando el nombre de clase de ficha y ámbito de ficha especificados.</summary>
      <param name="tabClassName">Nombre completo de ensamblado del tipo de ficha que se va a crear. Para obtener un ejemplo de esta convención de formato, vea <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica el ámbito de esta ficha. Si el ámbito es <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, sólo se muestra para los componentes con el correspondiente <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Si es <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, se muestra para todos los componentes del documento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> no es <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyTabAttribute" /> utilizando el tipo de ficha especificado.</summary>
      <param name="tabClass">Tipo de ficha que se va a crear.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyTabAttribute" /> utilizando el tipo de ficha y ámbito de ficha especificados.</summary>
      <param name="tabClass">Tipo de ficha que se va a crear.</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica el ámbito de esta ficha. Si el ámbito es <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, sólo se muestra para los componentes con el correspondiente <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Si es <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, se muestra para todos los componentes del documento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> no es <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un atributo especificado.</summary>
      <param name="other">Clase <see cref="T:System.ComponentModel.PropertyTabAttribute" /> que se va a comparar con esta instancia o <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si las instancias de <see cref="T:System.ComponentModel.PropertyTabAttribute" /> son iguales; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">No se pueden encontrar los tipos especificados por la propiedad <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> del parámetro <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
      <param name="other">Objeto que se va a comparar con esta instancia o <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="other" /> hace referencia a la misma instancia de <see cref="T:System.ComponentModel.PropertyTabAttribute" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">No se encontraron los tipos especificados por la propiedad <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> del parámetro <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>Obtiene el código hash de este objeto.</summary>
      <returns>Código hash del objeto al que pertenece el atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>Inicializa el atributo mediante los nombres de clases de ficha y la matriz de ámbitos de ficha especificados.</summary>
      <param name="tabClassNames">Matriz de nombres completos de los tipos que se van a crear para las fichas en la ventana Propiedades.</param>
      <param name="tabScopes">Ámbito de cada ficha. Si el ámbito es <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, sólo se muestra para los componentes con el correspondiente <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Si es <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, se muestra para todos los componentes del documento.</param>
      <exception cref="T:System.ArgumentException">Uno o varios valores de <paramref name="tabScopes" /> no son <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
O bien 
La longitud de las matrices de <paramref name="tabClassNames" /> y <paramref name="tabScopes" /> no coincide.  
o bien 
 <paramref name="tabClassNames" /> o <paramref name="tabScopes" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>Inicializa el atributo mediante los nombres de clases de ficha y la matriz de ámbitos de ficha especificados.</summary>
      <param name="tabClasses">Tipos de ficha que se van a crear.</param>
      <param name="tabScopes">Ámbito de cada ficha. Si el ámbito es <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, sólo se muestra para los componentes con el correspondiente <see cref="T:System.ComponentModel.PropertyTabAttribute" />. Si es <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, se muestra para todos los componentes del documento.</param>
      <exception cref="T:System.ArgumentException">Uno o varios valores de <paramref name="tabScopes" /> no son <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ni <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
O bien 
La longitud de las matrices de <paramref name="tabClassNames" /> y <paramref name="tabScopes" /> no coincide.  
O bien 
 <paramref name="tabClassNames" /> o <paramref name="tabScopes" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>Obtiene los tipos de fichas que utiliza este atributo.</summary>
      <returns>Una matriz de tipos que indica los tipos de fichas que utiliza este atributo.</returns>
      <exception cref="T:System.TypeLoadException">No se han podido encontrar los tipos especificados por la propiedad <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>Obtiene los nombres de las clases de ficha que utiliza este atributo.</summary>
      <returns>Nombres de las clases de ficha que utiliza este atributo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>Obtiene una matriz de ámbitos de cada ficha de <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica los ámbitos de las fichas.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>Define los identificadores que indican el ámbito de persistencia de una ficha en la ventana Propiedades.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>Esta ficha es específica del componente actual. Esta ficha se agrega a la ventana Propiedades sólo para el actual componente y se quita cuando ya no está seleccionado el componente.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>Esta ficha es específica del documento actual. Esta ficha se agrega a la ventana Propiedades y se quita cuando cambia el documento actualmente seleccionado.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>Esta ficha se agrega a la ventana Propiedades y sólo la puede quitar explícitamente un componente principal.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>Esta ficha se agrega a la ventana Propiedades y no se puede quitar.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>Especifica el nombre de la propiedad que un implementador de <see cref="T:System.ComponentModel.IExtenderProvider" /> ofrece a otros componentes. Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> con el nombre de la propiedad y del tipo del receptor correspondiente.</summary>
      <param name="propertyName">Nombre de la propiedad que se extiende a un objeto del tipo especificado.</param>
      <param name="receiverTypeName">Nombre del tipo de datos que puede extender la propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> con el nombre de la propiedad y el <see cref="T:System.Type" /> correspondiente.</summary>
      <param name="propertyName">Nombre de la propiedad que se extiende a un objeto del tipo especificado.</param>
      <param name="receiverType">El <see cref="T:System.Type" /> del tipo de datos del objeto puede recibir la propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el valor del objeto especificado es igual al del actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>Obtiene el nombre de una propiedad proporcionada por esta clase.</summary>
      <returns>El nombre de una propiedad proporcionada por esta clase.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>Obtiene el nombre del tipo de datos que puede extender la propiedad.</summary>
      <returns>Nombre del tipo de datos que puede extender la propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>Obtiene un identificador único para este atributo.</summary>
      <returns>
        <see cref="T:System.Object" /> que es un identificador único para el atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>Especifica que la propiedad se puede utilizar como configuración de la aplicación.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable">
        <see langword="true" /> si la propiedad a la que está enlazado este atributo se puede utilizar como configuración de la aplicación; en todos los demás casos, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, que es <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>Indica si esta instancia y un objeto especificado son iguales.</summary>
      <param name="obj">Otro objeto con el que se va a realizar la comparación.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> es igual a esta instancia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>Indica si el valor de esta instancia es el valor predeterminado de la clase.</summary>
      <returns>
        <see langword="true" /> si esta instancia es el atributo predeterminado para la clase; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>Especifica que no se puede utilizar una propiedad como configuración de la aplicación. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>Obtiene un valor que indica si la propiedad a la que está enlazado este atributo se puede utilizar como configuración de la aplicación.</summary>
      <returns>
        <see langword="true" /> si la propiedad a la que está enlazado este atributo se puede utilizar como configuración de la aplicación; en todos los demás casos, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>Especifica que una propiedad puede utilizarse como configuración de la aplicación. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>Proporciona un convertidor de tipos para convertir referencias de objeto en otras representaciones y desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo que se va a asociar a este convertidor de referencias.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en un objeto de referencia mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este objeto puede llevar a cabo la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en el tipo de referencia.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural que representa la fuente.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor dado en el tipo de referencia mediante el contexto y los argumentos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural que representa la fuente.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene una colección de valores estándar para el tipo de datos de referencia.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos, o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si la lista de valores estándar devueltos por el método <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exclusiva.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque la clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelta por el método <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exhaustiva de valores posibles. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque se puede llamar al método <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> para buscar un conjunto común de valores que sea compatible con el objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve un valor que indica si un determinado valor puede agregarse a la colección de valores estándar.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto adicional.</param>
      <param name="value">El valor que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si se permite este valor y se puede agregar a la colección de valores estándar; <see langword="false" /> si no se puede agregar.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RefreshEventArgs" /> con el componente que ha cambiado.</summary>
      <param name="componentChanged">Componente que ha cambiado.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RefreshEventArgs" /> con el tipo de componente que ha cambiado.</summary>
      <param name="typeChanged">
        <see cref="T:System.Type" /> que ha cambiado.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>Obtiene el componente cuyas propiedades, eventos o propiedades Extender han cambiado.</summary>
      <returns>Componente cuyas propiedades, eventos o extensores han cambiado, o <see langword="null" /> si todos los componentes del mismo tipo han cambiado.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>Obtiene el <see cref="T:System.Type" /> cuyas propiedades o eventos han cambiado.</summary>
      <returns>
        <see cref="T:System.Type" /> cuyas propiedades o eventos han cambiado.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>Representa el método que controla al evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> que se provoca cuando cambia <see cref="T:System.Type" /> o un componente durante el tiempo de diseño.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.RefreshEventArgs" /> que contiene el componente o <see cref="T:System.Type" /> que ha cambiado.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>Especifica si se debe invocar el instalador de acción personalizada de Visual Studio o Installutil.exe (herramienta Installer) cuando se instala el ensamblado.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller">
        <see langword="true" /> si se debe invocar un instalador durante la instalación de un ensamblado; en cualquier otro caso, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>Especifica la visibilidad predeterminada, que es <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>Determina si el valor del objeto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado es equivalente al objeto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actual.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>Genera código hash para la clase <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actual.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> actual.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>Determina si este atributo es el valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si el atributo es el valor predeterminado de esta clase de atributos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>Especifica que no se debe invocar el instalador de acción personalizada de Visual Studio o Installutil.exe (herramienta Installer) cuando se instala el ensamblado. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>Obtiene un valor que indica si se debe invocar un instalador durante la instalación de un ensamblado.</summary>
      <returns>
        <see langword="true" /> si se debe invocar un instalador durante la instalación de un ensamblado; en cualquier otro caso, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>Especifica que debe invocarse el instalador de acción personalizada de Visual Studio o Installutil.exe (herramienta Installer) cuando se instala el ensamblado. Este campo <see langword="static" /> es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros sin signo de 8 bits en una cadena o desde una cadena.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>Especifica cuándo se puede enlazar una propiedad de componente a una configuración de aplicación.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable">Es <see langword="true" /> para especificar que una propiedad es adecuada para enlazarla a la configuración; de lo contrario, es <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>Obtiene un valor que indica si una propiedad es apropiada para enlazarla a la configuración.</summary>
      <returns>
        <see langword="true" /> si la propiedad es adecuada para enlazarla a la configuración; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia o una referencia nula (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>Especifica que una propiedad no es apropiada para enlazarla a la configuración.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>Especifica que una propiedad es apropiada para enlazarla a la configuración.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de números de punto flotante de precisión sencilla a otras representaciones o desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de cadena en otras representaciones y desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en una estructura mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto de valor especificado en un objeto <see cref="T:System.String" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a usar.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se pudo llevar a cabo la conversión.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>Proporciona métodos para comprobar que el nombre de equipo y la ruta de acceso cumplen una sintaxis especificada. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>Comprueba la sintaxis del nombre de equipo para confirmar que no contiene "\".</summary>
      <param name="value">Cadena que contiene el nombre de equipo que se debe comprobar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> coincide con el formato del nombre de equipo correcto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>Comprueba la sintaxis de la ruta de acceso para ver si empieza por "\\".</summary>
      <param name="value">Cadena que contiene la ruta de acceso que se debe comprobar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> coincide con el formato de ruta de acceso correcto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>Comprueba la sintaxis de la ruta de acceso para ver si empieza por "\" o por la letra de unidad "C:".</summary>
      <param name="value">Cadena que contiene la ruta de acceso que se debe comprobar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> coincide con el formato de ruta de acceso correcto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.TimeSpan" /> en otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en una estructura <see cref="T:System.TimeSpan" /> mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en una estructura <see cref="T:System.TimeSpan" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor válido para el tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en otro tipo.</summary>
      <param name="context">Un contexto de formateador.</param>
      <param name="culture">Referencia cultural en que se convertirá <paramref name="value" />.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>Representa un atributo de un elemento del cuadro de herramientas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> y especifica si se van a utilizar los valores de inicialización predeterminados.</summary>
      <param name="defaultType">
        <see langword="true" /> para crear un atributo del elemento del cuadro de herramientas de un tipo predeterminado; <see langword="false" /> para no asociar un elemento del cuadro de herramientas compatible con este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> con el nombre especificado del tipo.</summary>
      <param name="toolboxItemTypeName">Nombres del tipo de elemento del cuadro de herramientas y del ensamblado que contiene el tipo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> utilizando el tipo especificado de elemento del cuadro de herramientas.</summary>
      <param name="toolboxItemType">Tipo de elemento del cuadro de herramientas.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> y establece el tipo en el valor predeterminado, <see cref="T:System.Drawing.Design.ToolboxItem" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia o una referencia nula (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>Obtiene un valor que indica si el valor actual del atributo es su valor predeterminado.</summary>
      <returns>
        <see langword="true" /> si el valor actual del atributo es el valor predeterminado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> y establece el tipo en <see langword="null" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>Obtiene o establece el tipo de elemento del cuadro de herramientas.</summary>
      <returns>Tipo de elemento del cuadro de herramientas.</returns>
      <exception cref="T:System.ArgumentException">No se puede encontrar el tipo.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>Obtiene o establece el nombre del tipo del <see cref="T:System.Drawing.Design.ToolboxItem" /> actual.</summary>
      <returns>Nombre completo del tipo de elemento del cuadro de herramientas.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>Especifica la cadena de filtro y el tipo de filtro que se van a utilizar para un elemento de cuadro de herramientas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con la cadena de filtro especificada.</summary>
      <param name="filterString">Cadena de filtro para el elemento del cuadro de herramientas.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con la cadena de filtro y el tipo de filtro especificados.</summary>
      <param name="filterString">Cadena de filtro para el elemento del cuadro de herramientas.</param>
      <param name="filterType">
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica el tipo de filtro.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia o una referencia nula (<see langword="Nothing" /> en Visual Basic).</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>Obtiene la cadena de filtro para el elemento del cuadro de herramientas.</summary>
      <returns>Cadena de filtro para el elemento del cuadro de herramientas.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>Obtiene el tipo del filtro.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica el tipo del filtro.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>Indica si el objeto especificado tiene una cadena de filtro coincidente.</summary>
      <param name="obj">Objeto para el que se va a comprobar si existe una cadena coincidente.</param>
      <returns>
        <see langword="true" /> si el objeto especificado tiene una cadena de filtro coincidente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Una cadena que representa el objeto actual.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>Obtiene el identificador del tipo del atributo.</summary>
      <returns>Identificador del tipo de este atributo. Todos los objetos <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con la misma cadena de filtro devuelven el mismo identificador del tipo.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>Define identificadores que indican el tipo del filtro utilizado por un <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>Indica que la cadena de filtro de un elemento del cuadro de herramientas está permitida, pero no es necesario.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>Indica que se requiere procesamiento personalizado para determinar si se debe utilizar una cadena de filtro de elemento del cuadro de herramientas. Normalmente se especifica en una clase de diseñador raíz para indicar que el diseñador quiere aceptar o rechazar un elemento de cuadro de herramientas mediante código. El diseñador debe implementar el método <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> de la interfaz <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>Indica que no está permitida una cadena de filtro de un elemento del cuadro de herramientas. Si un diseñador y una clase de componente tienen una cadena de filtro y el valor de uno es <c>ToolboxItemFilterType.Prevent</c>, el elemento de cuadro de herramientas no estará disponible.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>Indica que debe haber una cadena de filtro de elemento del cuadro de herramientas para que el elemento esté habilitado.  Para habilitar un elemento de cuadro de herramientas con un tipo de filtro <c>Require</c>, el diseñador y la clase de componente deben tener una cadena de filtro que coincida. Además, ni el diseñador ni la clase de componente pueden tener un tipo de filtro <c>Prevent</c> para que el elemento de cuadro de herramientas se pueda habilitar.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Proporciona un modo unificado para convertir los tipos de valores en otros tipos, así como para obtener acceso a valores estándar y a subpropiedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir un objeto del tipo especificado al tipo de este convertidor, mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo a partir del cual se desea realizar la conversión.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Devuelve si este convertidor puede convertir un objeto del tipo dado al tipo de este convertidor.</summary>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo desde el que se quiere convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado, con el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se quiere convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado.</summary>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se quiere convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto determinado al tipo de este convertidor usando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Convierte el valor especificado en el tipo de este convertidor.</summary>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Convierte la cadena dada en el tipo de este convertidor, utilizando el contexto especificado y la referencia cultural invariable.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="text">Valor <see cref="T:System.String" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Convierte la cadena dada al tipo de este convertidor, utilizando la referencia cultural invariable.</summary>
      <param name="text">Valor <see cref="T:System.String" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Convierte el texto dado a un objeto, utilizando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" /> , se supone que se va a usar la referencia cultural actual.</param>
      <param name="text">Valor <see cref="T:System.String" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Convierte el texto dado a un objeto, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="text">Valor <see cref="T:System.String" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Convierte el texto especificado a un objeto.</summary>
      <param name="text">Representación de texto del objeto que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede convertir la cadena en el objeto apropiado.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor determinado al tipo especificado usando el contexto y la información de referencia cultural especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" /> , se supone que se va a usar la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Convierte el objeto de valor dado al tipo especificado, utilizando los argumentos.</summary>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Convierte el valor especificado a una representación de cadena invariable de la referencia cultural, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>Una clase <see cref="T:System.String" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Convierte el valor especificado a una representación de cadena invariable de la referencia cultural.</summary>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>Una clase <see cref="T:System.String" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el valor dado a una representación de cadena, utilizando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" /> , se supone que se va a usar la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Convierte el valor dado a una representación de cadena, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Convierte el valor especificado a una representación de cadena.</summary>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>Vuelve a crear un <see cref="T:System.Object" /> dado un conjunto de valores de propiedad del objeto.</summary>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> que representa un diccionario de nuevos valores de propiedad.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el <see cref="T:System.Collections.IDictionary" /> especificado o <see langword="null" /> si no es posible crear el objeto. Este método devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea una instancia del tipo al que está asociado este <see cref="T:System.ComponentModel.TypeConverter" />, mediante el contexto especificado, según un conjunto de valores de propiedad para el objeto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> de nuevos valores de propiedad.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el <see cref="T:System.Collections.IDictionary" /> especificado o <see langword="null" /> si no es posible crear el objeto. Este método devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Devuelve una excepción que se va a producir cuando no puede realizarse una conversión.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a convertir, o <see langword="null" /> si no está disponible el objeto.</param>
      <returns>
        <see cref="T:System.Exception" /> que representa la excepción que se va a producir cuando no se puede realizar una conversión.</returns>
      <exception cref="T:System.NotSupportedException">Este método la produce automáticamente.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Devuelve una excepción que se va a producir cuando no puede realizarse una conversión.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a convertir, o <see langword="null" /> si no está disponible el objeto.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se intenta convertir.</param>
      <returns>
        <see cref="T:System.Exception" /> que representa la excepción que se va a producir cuando no se puede realizar una conversión.</returns>
      <exception cref="T:System.NotSupportedException">Este método la produce automáticamente.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>Devuelve un valor que indica si, al cambiar un valor en este objeto, es necesario llamar al método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor.</summary>
      <returns>
        <see langword="true" /> si, al cambiar una propiedad de este objeto, es necesario llamar al método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve un valor que indica si, al cambiar un valor en este objeto, es necesario llamar al método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> si, al cambiar una propiedad de este objeto, es necesario llamar al método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para crear un nuevo valor; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve una colección de propiedades para el tipo de matriz especificado por valor del parámetro, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener propiedades.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Devuelve una colección de propiedades para el tipo de matriz especificado por el valor del parámetro, utilizando el contexto y los atributos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se utiliza como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>Devuelve una colección de propiedades para el tipo de matriz especificado por el valor del parámetro.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que especifica el tipo de matriz para el que se van a obtener propiedades.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades expuestas para este tipo de datos o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>Devuelve si este objeto admite propiedades.</summary>
      <returns>
        <see langword="true" /> si se ha de llamar a <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene si este objeto admite propiedades, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> si se ha de llamar a <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>Devuelve una colección de valores estándar del contexto predeterminado para el tipo de datos para el que está diseñado este convertidor de tipos.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve una colección de valores estándar para el tipo de datos para el que está diseñado este convertidor de tipos cuando se proporciona un contexto de formato.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato que puede utilizarse para extraer información adicional sobre el entorno desde el que se llama a este convertidor. Este parámetro o las propiedades de este parámetro pueden ser <see langword="null" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos, o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>Devuelve si la colección de valores estándar devueltos por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exclusiva.</summary>
      <returns>
        <see langword="true" />si el <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelto por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exhaustiva de posibles valores; <see langword="false" />si hay otros valores posibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve si la colección de valores estándar devueltos por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exclusiva de posibles valores, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" />si el <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelto por <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> es una lista exhaustiva de posibles valores; <see langword="false" />si hay otros valores posibles.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>Devuelve un valor que indica si este objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista.</summary>
      <returns>Es <see langword="true" /> si debe llamarse a <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> para buscar un conjunto común de valores que sea compatible con el objeto; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve si este objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>Es <see langword="true" /> si debe llamarse a <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> para buscar un conjunto común de valores que sea compatible con el objeto; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve si el valor de objeto dado es válido para este tipo y para el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> cuya validez se va a comprobar.</param>
      <returns>
        <see langword="true" />si el valor especificado es válido para este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>Devuelve si el valor de objeto dado es válido para este tipo.</summary>
      <param name="value">Objeto cuya validez se va a comprobar.</param>
      <returns>
        <see langword="true" />si el valor especificado es válido para este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>Representa una clase <see langword="abstract" /> que proporciona propiedades a objetos que no tienen propiedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazado este descriptor de propiedad.</param>
      <param name="name">Nombre de la propiedad.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> que representa el tipo de datos de esta propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazado este descriptor de propiedad.</param>
      <param name="name">Nombre de la propiedad.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> que representa el tipo de datos de esta propiedad.</param>
      <param name="attributes">Matriz <see cref="T:System.Attribute" /> que contiene los atributos que se van a asociar a la propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>Devuelve si al restablecer el componente cambia su valor.</summary>
      <param name="component">Componente cuya capacidad de restablecerse se va a probar.</param>
      <returns>Es <see langword="true" /> si al restablecer el componente cambia su valor; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>Obtiene el tipo de componente al que está enlazada esta descripción de propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazada esta propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>Obtiene un valor que indica si esta propiedad es de sólo lectura.</summary>
      <returns>Es <see langword="true" /> si la propiedad es de sólo lectura; es <see langword="false" /> si la propiedad es de lectura y escritura.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>Obtiene el tipo de propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de propiedad.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>Restablece el valor de esta propiedad del componente.</summary>
      <param name="component">Componente con el valor de propiedad que se va a restablecer.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Devuelve si puede persistir el valor de esta propiedad.</summary>
      <param name="component">Componente con la propiedad cuya persistencia se va a examinar.</param>
      <returns>Es <see langword="true" /> si el valor de la propiedad puede persistir; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>Ordena una colección de propiedades.</summary>
      <param name="props">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las propiedades que se van a ordenar.</param>
      <param name="names">Matriz de nombres que aparecen en el orden en el que desea que aparezcan las propiedades en la colección.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las propiedades ordenadas.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>Representa una colección de valores.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values">
        <see cref="T:System.Collections.ICollection" /> que representa los objetos que se van a colocar en la colección.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia el contenido de esta colección en una matriz.</summary>
      <param name="array">
        <see cref="T:System.Array" /> que representa la matriz en la que se va a copiar.</param>
      <param name="index">Índice por el que se va a comenzar.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>Obtiene el número de objetos de la colección.</summary>
      <returns>Número de objetos de la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>Devuelve un enumerador para esta colección.</summary>
      <returns>Enumerador de tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>Obtiene el objeto en el número de índice especificado.</summary>
      <param name="index">Índice basado en cero de <see cref="T:System.Object" /> que se va a obtener de la colección.</param>
      <returns>
        <see cref="T:System.Object" /> con el índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>
        <see langword="false" /> en todos los casos.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>
        <see langword="null" /> en todos los casos.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Especifica el tipo que se debe utilizar como convertidor para el objeto al que está enlazado este atributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> con el convertidor de tipos predeterminado, que es una cadena vacía ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el nombre de tipo especificado como convertidor de datos para el objeto al que este atributo está enlazado.</summary>
      <param name="typeName">Nombre completo de la clase que se utiliza para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el tipo especificado como convertidor de datos para el objeto al que está enlazado este atributo.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo de la clase de convertidor que se utiliza para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtiene el nombre completo de <see cref="T:System.Type" /> que se utilizará como convertidor del objeto al que está enlazado este atributo.</summary>
      <returns>Obtiene el nombre completo de <see cref="T:System.Type" /> que se utilizará como convertidor del objeto al que está enlazado este atributo, o una cadena vacía ("") si no existe ninguno. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Especifica el tipo que se debe utilizar como convertidor para el objeto al que está enlazado este atributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual.</summary>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el valor del objeto especificado es igual al del objeto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> actual.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>Proporciona metadatos complementarios a la clase <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> con un proveedor de descripción de tipo primario.</summary>
      <param name="parent">Proveedor de descripción de tipo primario.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Crea un objeto que puede sustituir a otro tipo de datos.</summary>
      <param name="provider">Proveedor de servicios opcional.</param>
      <param name="objectType">Tipo de objeto que se va a crear. Este parámetro nunca es <see langword="null" />.</param>
      <param name="argTypes">Matriz opcional de tipos que representan los tipos de parámetro que se van a pasar al constructor del objeto. Esta matriz puede ser <see langword="null" /> o de longitud cero.</param>
      <param name="args">Matriz opcional de valores de parámetros que se pasarán al constructor del objeto.</param>
      <returns>Objeto <see cref="T:System.Object" /> sustituto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>Obtiene una memoria caché por cada objeto, a la que se obtiene acceso como una interfaz <see cref="T:System.Collections.IDictionary" /> de pares de clave y valor.</summary>
      <param name="instance">Objeto para el que se va a obtener la memoria caché.</param>
      <returns>Interfaz <see cref="T:System.Collections.IDictionary" /> si el objeto proporcionado admite almacenamiento en caché; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Obtiene un descriptor de tipos extendido personalizado para el objeto dado.</summary>
      <param name="instance">Objeto para el que se va a obtener el descriptor de tipos extendido.</param>
      <returns>Interfaz <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que puede proporcionar metadatos extendidos para el objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>Obtiene los proveedores extensores del objeto especificado.</summary>
      <param name="instance">Objeto para el que se van a obtener proveedores extensores.</param>
      <returns>Matriz de proveedores extensores para <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>Obtiene el nombre del componente especificado o <see langword="null" /> si el componente no tiene nombre.</summary>
      <param name="component">Componente especificado.</param>
      <returns>Nombre del componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>Realiza una reflexión normal en el objeto indicado.</summary>
      <param name="instance">Instancia del tipo (no debe ser <see langword="null" />).</param>
      <returns>El tipo de reflexión para esta <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>Realiza una reflexión normal en un tipo.</summary>
      <param name="objectType">Tipo de objeto para el que va a recuperar la interfaz <see cref="T:System.Reflection.IReflect" />.</param>
      <returns>El tipo de reflexión para esta <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Realiza una reflexión normal en el objeto indicado con el tipo especificado.</summary>
      <param name="objectType">Tipo de objeto para el que va a recuperar la interfaz <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance">Instancia del tipo. Puede ser <see langword="null" />.</param>
      <returns>El tipo de reflexión para esta <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>Convierte un tipo de reflexión en un tipo en tiempo de ejecución.</summary>
      <param name="reflectionType">Tipo que se va a convertir en su equivalente en tiempo de ejecución.</param>
      <returns>
        <see cref="T:System.Type" /> que representa el equivalente en tiempo de ejecución de <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>Obtiene un descriptor de tipos personalizado para el objeto indicado.</summary>
      <param name="instance">Instancia del tipo. Puede ser <see langword="null" /> si no se ha pasado ninguna instancia a la clase <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>Interfaz <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que puede proporcionar metadatos para el tipo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>Obtiene un descriptor de tipos personalizado para el tipo indicado.</summary>
      <param name="objectType">Tipo de objeto para el que se va a recuperar el descriptor de tipos.</param>
      <returns>Interfaz <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que puede proporcionar metadatos para el tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Obtiene un descriptor de tipos personalizado para el tipo y el objeto indicados.</summary>
      <param name="objectType">Tipo de objeto para el que se va a recuperar el descriptor de tipos.</param>
      <param name="instance">Instancia del tipo. Puede ser <see langword="null" /> si no se ha pasado ninguna instancia a la clase <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>Interfaz <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que puede proporcionar metadatos para el tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>Obtiene un valor que indica si el tipo especificado es compatible con la descripción de tipos y su cadena de proveedores de descripción de tipos.</summary>
      <param name="type">Tipo cuya compatibilidad se va a probar.</param>
      <returns>Es <see langword="true" /> si <paramref name="type" /> es compatible con la descripción de tipos y su cadena de proveedores de descripción de tipos; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Especifica el proveedor de descripción de tipo personalizado de una clase. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> con el nombre de tipo especificado.</summary>
      <param name="typeName">Nombre completo del tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizando el tipo especificado.</summary>
      <param name="type">Tipo que se va a almacenar en el atributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtiene el nombre de tipo para el proveedor de descripción de tipo.</summary>
      <returns>Objeto <see cref="T:System.String" /> que contiene el nombre de tipo calificado para <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Proporciona información sobre las características de un componente, como sus atributos, propiedades y eventos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>Agrega atributos de nivel de clase para la instancia del componente de destino.</summary>
      <param name="instance">Instancia del componente de destino.</param>
      <param name="attributes">Matriz de objetos <see cref="T:System.Attribute" /> que se va a agregar a la clase del componente.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recién creado que se usó para agregar los atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>Agrega atributos de nivel de clase para el tipo de componente de destino.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <param name="attributes">Matriz de objetos <see cref="T:System.Attribute" /> que se va a agregar a la clase del componente.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recién creado que se usó para agregar los atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>Agrega una tabla de editor para el tipo base del editor determinado.</summary>
      <param name="editorBaseType">El tipo base del editor para agregar la tabla de editor. Si ya existe una tabla de este tipo, este método no hará nada.</param>
      <param name="table">
        <see cref="T:System.Collections.Hashtable" /> que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Agrega un proveedor de descripción de tipos para una sola instancia de un componente.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a agregar.</param>
      <param name="instance">Instancia del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Agrega un proveedor de descripción de tipos para una clase de componente.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a agregar.</param>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Agrega un proveedor de descripción de tipos para una sola instancia de un componente.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a agregar.</param>
      <param name="instance">Instancia del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Agrega un proveedor de descripción de tipos para una clase de componente.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a agregar.</param>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>Obtiene o establece el proveedor de la información de tipo de Modelo de objetos componentes (COM) del componente de destino.</summary>
      <returns>Una instancia de <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> que representa el proveedor de información de tipos COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>Obtiene el tipo del objeto del Modelo de objetos componentes (COM) representado por el componente de destino.</summary>
      <returns>
        <see cref="T:System.Type" /> del objeto del COM representado por este componente o <see langword="null" /> para objetos que no son del COM.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>Crea una asociación principal-secundario entre dos objetos.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary">
        <see cref="T:System.Object" /> secundario.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> es igual a <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>Crea una instancia del diseñador asociada al componente especificado y del tipo especificado del diseñador.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que especifica el componente que se va a asociar al diseñador.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> que representa el tipo de diseñador que se va a crear.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> que es una instancia del diseñador para el componente, o <see langword="null" /> si no se encuentra ningún diseñador.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>Crea un descriptor de eventos nuevo que es idéntico a otro existente, cuando se pasa al <see cref="T:System.ComponentModel.EventDescriptor" /> existente.</summary>
      <param name="componentType">El tipo de componente para el que se va a crear el nuevo evento.</param>
      <param name="oldEventDescriptor">Información del evento existente.</param>
      <param name="attributes">Los nuevos atributos.</param>
      <returns>Un nuevo <see cref="T:System.ComponentModel.EventDescriptor" /> que ha combinado los atributos de metadatos especificados con los atributos de metadatos existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Crea un nuevo descriptor de eventos que es idéntico a otro existente generando dinámicamente la información del descriptor desde un evento especificado en un tipo.</summary>
      <param name="componentType">Tipo del componente en el que se encuentra el evento.</param>
      <param name="name">Nombre del evento.</param>
      <param name="type">Tipo de delegado que controla el evento.</param>
      <param name="attributes">Atributos para este evento.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> enlazado a un tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Crea un objeto que puede sustituir a otro tipo de datos.</summary>
      <param name="provider">El proveedor de servicios que ofrece un servicio <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Este parámetro puede ser <see langword="null" />.</param>
      <param name="objectType">Objeto <see cref="T:System.Type" />que se va a crear.</param>
      <param name="argTypes">Matriz opcional de tipos de parámetros que se pasarán al constructor del objeto. Este parámetro puede ser <see langword="null" /> o una matriz de longitud cero.</param>
      <param name="args">Matriz opcional de valores de parámetros que se pasarán al constructor del objeto. Si no es <see langword="null" />, el número de elementos debe ser el mismo que <paramref name="argTypes" />.</param>
      <returns>Instancia del tipo de datos de sustituto si se encuentra un asociado <see cref="T:System.ComponentModel.TypeDescriptionProvider" />; en caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> es <see langword="null" />, o <paramref name="args" /> es <see langword="null" /> cuando <paramref name="argTypes" /> no es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> y <paramref name="args" /> tienen un número diferente de elementos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Crea un nuevo descriptor de propiedad a partir de un descriptor de propiedad existente, usando el <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado existente y la matriz de atributos.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente del que es miembro la propiedad.</param>
      <param name="oldPropertyDescriptor">El descriptor de la propiedad existente.</param>
      <param name="attributes">Los nuevos atributos de esta propiedad.</param>
      <returns>Un nuevo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que tiene los atributos de metadatos especificados combinados con los atributos de metadatos existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Crea y enlaza de forma dinámica un descriptor de propiedad a un tipo, mediante el nombre de propiedad especificado, el tipo y la matriz de atributos.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente del que es miembro la propiedad.</param>
      <param name="name">Nombre de la propiedad.</param>
      <param name="type">
        <see cref="T:System.Type" /> de la propiedad.</param>
      <param name="attributes">Los nuevos atributos de esta propiedad.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está enlazado al tipo especificado y que tiene los atributos de metadatos especificados combinados con los atributos de metadatos existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>Devuelve una instancia del tipo asociado al objeto principal especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <param name="primary">Objeto principal de la asociación.</param>
      <returns>Si existe una asociación, instancia del tipo secundario que se ha asociado al objeto principal; de lo contrario, si no hay ninguna asociación especificada, <paramref name="primary" />.</returns>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>Devuelve la colección de atributos para el componente especificado.</summary>
      <param name="component">Componente del que se desea obtener atributos.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.AttributeCollection" /> que contiene los atributos para el componente. Si <paramref name="component" /> es <see langword="null" />, este método devuelve una colección vacía.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>Devuelve una colección de atributos para el componente especificado, así como un valor Boolean que indica que se ha creado un descriptor de tipos personalizado.</summary>
      <param name="component">Componente del que se desea obtener atributos.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para utilizar un conjunto básico de atributos del descriptor de tipos personalizado si <paramref name="component" /> es de tipo <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> con los atributos del componente. Si el componente es <see langword="null" />, este método devolverá una colección vacía.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>Devuelve una colección de atributos para el tipo de componente especificado.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> con los atributos del tipo del componente. Si el componente es <see langword="null" />, este método devolverá una colección vacía.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>Devuelve el nombre de la clase para el componente especificado utilizando el descriptor de tipos predeterminado.</summary>
      <param name="component">
        <see cref="T:System.Object" /> para el que se desea obtener el nombre de clase.</param>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de la clase para el componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>Devuelve el nombre de la clase para el componente especificado utilizando un descriptor de tipos personalizado.</summary>
      <param name="component">
        <see cref="T:System.Object" /> para el que se desea obtener el nombre de clase.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de la clase para el componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>Devuelve el nombre de la clase para el tipo especificado.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de la clase para el tipo de componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>Devuelve el nombre del componente especificado utilizando el descriptor de tipos predeterminado.</summary>
      <param name="component">
        <see cref="T:System.Object" /> para el que se desea obtener el nombre de clase.</param>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre del componente especificado o <see langword="null" /> si no hay ningún nombre de componente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>Devuelve el nombre del componente especificado utilizando un descriptor de tipos personalizado.</summary>
      <param name="component">
        <see cref="T:System.Object" /> para el que se desea obtener el nombre de clase.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>Nombre de la clase para el componente especificado o <see langword="null" /> si no hay ningún nombre de componente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>Devuelve un convertidor de tipos para el tipo del componente especificado.</summary>
      <param name="component">Componente para el que se va a obtener el convertidor.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.TypeConverter" /> para el componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>Devuelve un convertidor de tipos para el tipo del componente especificado con un descriptor de tipos personalizado.</summary>
      <param name="component">Componente para el que se va a obtener el convertidor.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.TypeConverter" /> para el componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Devuelve un convertidor de tipos para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>Devuelve el evento predeterminado para el componente especificado.</summary>
      <param name="component">Componente para el que se va a obtener el evento.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> con el evento predeterminado o <see langword="null" /> si no hay eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>Devuelve el evento predeterminado para un componente con un descriptor de tipos personalizado.</summary>
      <param name="component">Componente para el que se va a obtener el evento.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> con el evento predeterminado o <see langword="null" /> si no hay eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>Devuelve el evento predeterminado para el tipo especificado de componente.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> con el evento predeterminado o <see langword="null" /> si no hay eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>Devuelve la propiedad predeterminada para el componente especificado.</summary>
      <param name="component">Componente para el que obtener la propiedad predeterminada.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la propiedad predeterminada o <see langword="null" /> si no hay propiedades.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>Devuelve la propiedad predeterminada para el componente especificado con un descriptor de tipos personalizado.</summary>
      <param name="component">Componente para el que obtener la propiedad predeterminada.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la propiedad predeterminada o <see langword="null" /> si no hay propiedades.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>Devuelve la propiedad predeterminada para el tipo de componente especificado.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> que representa la clase de la que se va a obtener la propiedad.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la propiedad predeterminada o <see langword="null" /> si no hay propiedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>Obtiene un editor con el tipo base especificado para el componente especificado.</summary>
      <param name="component">Componente para el que se obtendrá el editor.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> que representa el tipo base del editor que se desea buscar.</param>
      <returns>Instancia del editor que se puede convertir al tipo de editor especificado o <see langword="null" /> si no se puede encontrar ningún editor del tipo solicitado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> o <paramref name="editorBaseType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>Devuelve un editor con el tipo base especificado y con un descriptor de tipos personalizado para el componente especificado.</summary>
      <param name="component">Componente para el que se obtendrá el editor.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> que representa el tipo base del editor que se desea buscar.</param>
      <param name="noCustomTypeDesc">Marcador que especifica si se debe considerar la información de descripción de tipos personalizada.</param>
      <returns>Instancia del editor que se puede convertir al tipo de editor especificado o <see langword="null" /> si no se puede encontrar ningún editor del tipo solicitado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> o <paramref name="editorBaseType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>Devuelve un editor con el tipo base determinado para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> que representa el tipo base del editor que se intenta buscar.</param>
      <returns>Instancia del objeto de editor que se puede convertir al tipo base especificado o <see langword="null" /> si no se puede encontrar ningún editor del tipo solicitado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> o <paramref name="editorBaseType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>Devuelve la colección de eventos para el componente especificado.</summary>
      <param name="component">Componente para el que se van a obtener los eventos.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>Devuelve la colección de eventos para un componente especificado utilizando una matriz de atributos determinada que sirve como filtro.</summary>
      <param name="component">Componente para el que se van a obtener los eventos.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se puede utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos que coinciden con los atributos especificados de este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>Devuelve la colección de eventos para un componente especificado utilizando una matriz de atributos determinada que sirve como filtro y un descriptor de tipos personalizado.</summary>
      <param name="component">Componente para el que se van a obtener los eventos.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se va a utilizar como filtro.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos que coinciden con los atributos especificados de este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>Devuelve la colección de eventos para un componente especificado con un descriptor de tipos personalizado.</summary>
      <param name="component">Componente para el que se van a obtener los eventos.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>Devuelve la colección de eventos para un tipo especificado de componente.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos para este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>Devuelve la colección de eventos para un tipo de componente especificado utilizando una matriz de atributos determinada que sirve como filtro.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se puede utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con los eventos que coinciden con los atributos especificados de este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>Devuelve el nombre completo del componente.</summary>
      <param name="component">Objeto <see cref="T:System.ComponentModel.Component" /> para el que se va a buscar el nombre.</param>
      <returns>Nombre completo del componente especificado o <see langword="null" /> si el componente no tiene nombre.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>Devuelve la colección de propiedades para un componente especificado.</summary>
      <param name="component">Componente del que se van a obtener las propiedades.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades del componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>Devuelve la colección de propiedades para un componente especificado utilizando una matriz de atributos determinada que sirve como filtro.</summary>
      <param name="component">Componente del que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se va a utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades que coinciden con los atributos especificados del componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>Devuelve la colección de propiedades para un componente especificado utilizando una matriz de atributos determinada que sirve como filtro y un descriptor de tipos personalizado.</summary>
      <param name="component">Componente del que se van a obtener las propiedades.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se va a usar como filtro.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con los eventos que coinciden con los atributos especificados del componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>Devuelve la colección de propiedades para un componente especificado utilizando el descriptor de tipos predeterminado.</summary>
      <param name="component">Componente del que se van a obtener las propiedades.</param>
      <param name="noCustomTypeDesc">Es <see langword="true" /> para no tener en cuenta la información de descripción de tipos personalizada; de lo contrario, es <see langword="false" />.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades de un componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> es un objeto remoto entre procesos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>Devuelve la colección de propiedades para un tipo especificado de componente.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> que representa el componente para el que se van a obtener propiedades.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades de un tipo de componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>Devuelve la colección de propiedades para un tipo de componente especificado utilizando una matriz de atributos determinada que sirve como filtro.</summary>
      <param name="componentType">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <param name="attributes">Matriz de tipo <see cref="T:System.Attribute" /> que se va a utilizar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades que coinciden con los atributos especificados de este tipo de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>Devuelve el proveedor de descripción de tipos para el componente especificado.</summary>
      <param name="instance">Instancia del componente de destino.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> asociado al componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>Devuelve el proveedor de descripción de tipos para el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> asociado al tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que se puede utilizar para llevar a cabo la reflexión teniendo en cuenta un objeto.</summary>
      <param name="instance">Instancia del componente de destino.</param>
      <returns>
        <see cref="T:System.Type" /> para el objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>Devuelve un objeto <see cref="T:System.Type" /> que se puede utilizar para realizar la reflexión teniendo en cuenta un tipo de clase.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <returns>
        <see cref="T:System.Type" /> de la clase especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>Obtiene un tipo que representa un proveedor de descripción de tipo para todos los tipos de interfaz.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa un proveedor de descripción de tipo personalizado para todos los tipos de interfaz.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>Borra de la memoria caché las propiedades y los eventos correspondientes al componente especificado.</summary>
      <param name="component">Componente para el que han cambiado las propiedades o eventos.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>Borra de la memoria caché las propiedades y los eventos correspondientes al ensamblado especificado.</summary>
      <param name="assembly">
        <see cref="T:System.Reflection.Assembly" /> que representa el ensamblado que se va a actualizar. Se actualizará cada <see cref="T:System.Type" /> de este ensamblado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>Borra de la memoria caché las propiedades y los eventos correspondientes al módulo especificado.</summary>
      <param name="module">
        <see cref="T:System.Reflection.Module" /> que representa el módulo que se va a actualizar. Se actualizará cada <see cref="T:System.Type" /> de este módulo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>Borra de la memoria caché las propiedades y los eventos correspondientes al tipo de componente especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>Se produce cuando se borra la caché de un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>Quita una asociación entre dos objetos.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal.</param>
      <param name="secondary">
        <see cref="T:System.Object" /> secundario.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>Quita todas las asociaciones de un objeto principal.</summary>
      <param name="primary">
        <see cref="T:System.Object" /> principal de una asociación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Quita un proveedor de descripción de tipos previamente agregado que está asociado al objeto especificado.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a quitar.</param>
      <param name="instance">Instancia del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Quita un proveedor de descripción de tipos previamente agregado que está asociado al tipo especificado.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a quitar.</param>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Quita un proveedor de descripción de tipos previamente agregado que está asociado al objeto especificado.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a quitar.</param>
      <param name="instance">Instancia del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Quita un proveedor de descripción de tipos previamente agregado que está asociado al tipo especificado.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que se va a quitar.</param>
      <param name="type">
        <see cref="T:System.Type" /> del componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>Ordena los descriptores utilizando el nombre del descriptor.</summary>
      <param name="infos">
        <see cref="T:System.Collections.IList" /> que contiene los descriptores que se van a ordenar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Proporciona un convertidor de tipos que se puede utilizar para llenar un cuadro de lista con los tipos disponibles.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeListConverter" /> utilizando la matriz de tipos como tipos disponibles.</summary>
      <param name="types">Matriz de tipo <see cref="T:System.Type" /> que se va a utilizar como tipos disponibles.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir la clase <see cref="T:System.Type" /> especificada del objeto de origen mediante el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">Clase <see cref="T:System.Type" /> del objeto de origen.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado al tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural que representa la fuente.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado en el tipo de destino especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> opcional. Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> en que se va convertir el valor.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene una colección de valores estándar para el tipo de datos para el que está diseñado este validador.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contiene un conjunto estándar de valores válidos, o <see langword="null" /> si el tipo de datos no es compatible con un conjunto estándar de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si la lista de valores estándar devuelta por el método <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exclusiva.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque la clase <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> devuelta por el método <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> es una lista exhaustiva de valores posibles. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtiene un valor que indica si el objeto admite un conjunto estándar de valores que se pueden seleccionar de una lista, utilizando el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <returns>
        <see langword="true" /> porque debe llamarse al método <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> para buscar un conjunto común de valores que sea compatible con el objeto. Este método nunca devuelve <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros sin signo de 16 bits en otras representaciones o desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros sin signo de 32 bits a otras representaciones o desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Proporciona un convertidor de tipos para convertir objetos de enteros sin signo de 64 bits en otras representaciones o desde otras representaciones varias.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>Proporciona un convertidor de tipos para convertir objetos <see cref="T:System.Version" /> a otras representaciones y desde otras representaciones.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto del tipo de origen especificado en una <see cref="T:System.Version" />.</summary>
      <param name="context">Objeto que proporciona información contextual.</param>
      <param name="sourceType">El tipo del objeto que se va a convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede convertir sourceType en <see cref="T:System.Version" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">Objeto que proporciona información contextual.</param>
      <param name="destinationType">Tipo de destino para la conversión.</param>
      <returns>
        <see langword="true" /> si el convertidor puede convertir un objeto en el tipo de destino dado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un tipo de datos <see cref="T:System.Version" />.</summary>
      <param name="context">Objeto que proporciona información contextual.</param>
      <param name="culture">Referencia cultural que se va a usar para la conversión.</param>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Version" />.</param>
      <returns>Elemento <paramref name="value" /> convertido en un valor <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es una cadena <see cref="T:System.Version" /> válida.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el valor especificado en el tipo de destino especificado usando el contexto y los argumentos especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Referencia cultural que proporciona información de formato para la conversión.</param>
      <param name="value">El valor que se va a convertir.</param>
      <param name="destinationType">Tipo al que se va a convertir el parámetro de valor.</param>
      <returns>Objeto que representa el valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve un valor que indica si el objeto de valor dado es válido para este tipo y para el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">Objeto cuya validez se va a comprobar.</param>
      <returns>
        <see langword="true" />si el valor especificado es válido para este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>Especifica una excepción que se controla como una advertencia en lugar de como un error.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" /> con el contexto y los datos de serialización especificados.</summary>
      <param name="info">Clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a utilizar para la deserialización.</param>
      <param name="context">Destino que se va a utilizar para la deserialización.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" /> con el mensaje especificado, sin archivo de ayuda.</summary>
      <param name="message">Mensaje que se debe mostrar al usuario final.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" /> con la descripción detallada especificada y la excepción especificada.</summary>
      <param name="message">Descripción detallada del error.</param>
      <param name="innerException">Referencia a la excepción interna que es la causa de esta excepción.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" /> con el mensaje especificado y con acceso al archivo de Ayuda especificado.</summary>
      <param name="message">Mensaje que se debe mostrar al usuario final.</param>
      <param name="helpUrl">Archivo de Ayuda que se debe mostrar si el usuario pide ayuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.WarningException" /> con el mensaje especificado y con acceso al archivo y al tema de Ayuda especificados.</summary>
      <param name="message">Mensaje que se debe mostrar al usuario final.</param>
      <param name="helpUrl">Archivo de Ayuda que se debe mostrar si el usuario pide ayuda.</param>
      <param name="helpTopic">Tema de Ayuda que se debe mostrar si el usuario pide ayuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con el nombre del parámetro y la información adicional de excepción.</summary>
      <param name="info">Almacena los datos que se estaban utilizado para serializar o deserializar el objeto que el serializador <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> se encontraba serializando o deserializando.</param>
      <param name="context">Describe el origen y el destino de la cadena que generó la excepción, así como un modo de serialización para retener dicho contexto y un contexto adicional definido por el llamador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>Obtiene el tema de Ayuda asociado a la advertencia.</summary>
      <returns>Tema de la Ayuda asociado a la advertencia.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>Obtiene el archivo de Ayuda asociado a la advertencia.</summary>
      <returns>Archivo de la Ayuda asociado a la advertencia.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>Convierte los colores de un tipo de datos a otro. Obtenga acceso a esta clase a través de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si este convertidor puede convertir un objeto del tipo de origen indicado al tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato. Puede usar este objeto para obtener información adicional del entorno desde el que se está invocando este convertidor.</param>
      <param name="sourceType">Tipo desde el que se desea convertir.</param>
      <returns>
        <see langword="true" /> si este objeto puede llevar a cabo la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si este convertidor puede convertir un objeto en el tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se va a convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la operación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en el tipo nativo del convertidor.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.TypeDescriptor" /> que proporciona un contexto de formato. Puede usar este objeto para obtener información adicional del entorno desde el que se está invocando este convertidor.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural para representar el color.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en otro tipo.</summary>
      <param name="context">Un contexto de formateador. Use este objeto para obtener información adicional del entorno desde el que se está invocando este convertidor. Compruebe siempre si este valor es <see langword="null" />. Además, las propiedades del objeto de contexto pueden devolver <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que especifica la referencia cultural para representar el color.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Recupera una colección que contiene un conjunto de valores estándar para el tipo de datos para el que se ha diseñado este validador. Devolverá <see langword="null" /> si el tipo de datos no admite un conjunto estándar de valores.</summary>
      <param name="context">Un contexto de formateador. Use este objeto para obtener información adicional del entorno desde el que se está invocando este convertidor. Compruebe siempre si este valor es <see langword="null" />. Además, las propiedades del objeto de contexto pueden devolver <see langword="null" />.</param>
      <returns>Colección que contiene <see langword="null" /> o un conjunto estándar de valores válidos. La implementación predeterminada siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si este objeto admite un conjunto estándar de valores que se puedan elegir de una lista.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>
        <see langword="true" /> si se debe llamar a <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> para buscar un conjunto común de valores que sea compatible con el objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>Convierte objetos <see cref="T:System.Drawing.Point" /> de un tipo de datos en otro.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si este convertidor puede convertir un objeto del tipo de origen indicado al tipo nativo del convertidor.</summary>
      <param name="context">Un contexto de formateador. Este objeto se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="sourceType">Tipo del que desea convertir.</param>
      <returns>
        <see langword="true" /> si este objeto puede llevar a cabo la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">Objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <param name="destinationType">Objeto <see cref="T:System.Type" /> que representa el tipo al que desea convertir.</param>
      <returns>
        <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un objeto <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context">Un contexto de formateador. Este objeto se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">Objeto que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociadas a una referencia cultural específica. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en el tipo especificado.</summary>
      <param name="context">Un contexto de formateador. Este objeto se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">Objeto que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociadas a una referencia cultural específica. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea una instancia de este tipo dado un conjunto de valores de propiedad para el objeto.</summary>
      <param name="context">Un descriptor de tipo a través del que se puede proporcionar contexto adicional.</param>
      <param name="propertyValues">Diccionario de nuevos valores de propiedad. El diccionario tiene una serie de pares de nombre-valor, uno para cada propiedad devuelta desde <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>El objeto recién creado o <see langword="null" /> si no se pudo crear el objeto. La implementación predeterminada devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si, al cambiar un valor en este objeto, es necesario llamar a <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> para crear un nuevo valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>
        <see langword="true" /> en caso de que se deba llamar al método <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> cuando se varíe una o varias de las propiedades del objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera el conjunto de propiedades de este tipo. De forma predeterminada, un tipo no devuelve ninguna propiedad.</summary>
      <param name="context">Un descriptor de tipo a través del que se puede proporcionar contexto adicional.</param>
      <param name="value">Valor del objeto del que se van a obtener las propiedades.</param>
      <param name="attributes">Una matriz de objetos <see cref="T:System.Attribute" /> que describen las propiedades.</param>
      <returns>Conjunto de propiedades que se exponen para este tipo de datos. Si se exponen propiedades, podría devolver <see langword="null" />. La implementación predeterminada siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si este objeto admite propiedades. De forma predeterminada, es <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>
        <see langword="true" /> si se ha de llamar a <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>Convierte rectángulos de un tipo en otro tipo. Obtenga acceso a esta clase a través de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si este convertidor puede convertir un objeto del tipo de origen indicado al tipo nativo del convertidor.</summary>
      <param name="context">Un contexto de formateador. Este objeto se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="sourceType">Tipo del que desea convertir.</param>
      <returns>Este método devuelve <see langword="true" /> si el objeto puede realizar la conversión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">Objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato. Puede ser <see langword="null" />, por lo que hay que comprobarlo siempre. Asimismo, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="destinationType">Objeto <see cref="T:System.Type" /> que representa el tipo al que desea convertir.</param>
      <returns>Este método devuelve <see langword="true" /> si este convertidor puede llevar a cabo la conversión; en caso contrario, devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un objeto <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociados a una referencia cultural concreta. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en el tipo especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociados a una referencia cultural concreta. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea una instancia de este tipo dado un conjunto de valores de propiedad para el objeto. Resulta útil para objetos que son inmutables, pero de los cuales se desea que proporcionen propiedades modificables.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <param name="propertyValues">Diccionario de nuevos valores de propiedad. El diccionario tiene una serie de pares de nombre-valor, uno para cada propiedad devuelta desde una llamada al método <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>El objeto recién creado o <see langword="null" /> si no se pudo crear el objeto. La implementación predeterminada devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si, al cambiar un valor en este objeto, es necesario llamar a <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> para crear un nuevo valor.</summary>
      <param name="context">Un descriptor de tipo a través del que se puede proporcionar contexto adicional.</param>
      <returns>Este método devuelve <see langword="true" /> si se debe llamar a <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> cuando se hace un cambio en una o varias de las propiedades de este objeto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera el conjunto de propiedades de este tipo. De forma predeterminada, un tipo no devuelve ninguna propiedad.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <param name="value">Valor del objeto del que se van a obtener las propiedades.</param>
      <param name="attributes">Una matriz de objetos <see cref="T:System.Attribute" /> que describen las propiedades.</param>
      <returns>Conjunto de propiedades que se deben exponer para este tipo de datos. Si no se debe exponer ninguna propiedad, podría devolver <see langword="null" />. La implementación predeterminada siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si este objeto admite propiedades. De forma predeterminada, es <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>Este método devuelve <see langword="true" /> si se debe llamar a <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> para buscar las propiedades de este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> es una clase que se utiliza para convertir un tipo de datos en otro. Obtenga acceso a esta clase mediante el objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>Inicializa un nuevo objeto <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si este convertidor puede convertir un objeto del tipo de origen especificado al tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="sourceType">Tipo del que desea convertir.</param>
      <returns>Este método devuelve <see langword="true" /> si este objeto puede llevar a cabo la conversión.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtiene un valor que indica si este convertidor puede convertir un objeto al tipo de destino especificado usando el contexto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarse siempre. Asimismo, las propiedades del objeto de contexto pueden devolver <see langword="null" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se quiere convertir.</param>
      <returns>Este método devuelve <see langword="true" /> si este convertidor puede llevar a cabo la conversión; en caso contrario, devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado al tipo nativo del convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociadas a una referencia cultural específica. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto especificado en el tipo especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que se puede usar para obtener información adicional del entorno desde el que se llama a este convertidor. Puede ser <see langword="null" />, por lo que debe comprobarlo siempre. Además, las propiedades del objeto de contexto también pueden devolver <see langword="null" />.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que contiene información específica de la referencia cultural, como el idioma, el calendario y las convenciones culturales asociadas a una referencia cultural específica. Se basa en el estándar RFC 1766.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <returns>El objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede completar la conversión.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea un objeto de este tipo mediante un conjunto especificado de valores de propiedad para el objeto. Resulta útil para crear objetos no modificables con propiedades modificables.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <param name="propertyValues">Diccionario de nuevos valores de propiedad. El diccionario tiene una serie de pares de nombre-valor, uno para cada propiedad devuelta desde el método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>El objeto recién creado o <see langword="null" /> si no se pudo crear el objeto. La implementación predeterminada devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si, al cambiar un valor en este objeto, es necesario llamar al método <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> para crear un nuevo valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>
        <see langword="true" /> si debe llamarse al objeto <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> cuando se realiza un cambio en una o más propiedades de este objeto.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera el conjunto de propiedades de este tipo. De forma predeterminada, un tipo no tiene ninguna propiedad para devolver.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <param name="value">Valor del objeto del que se van a obtener las propiedades.</param>
      <param name="attributes">Una matriz de objetos <see cref="T:System.Attribute" /> que describen las propiedades.</param>
      <returns>Conjunto de propiedades que se deben exponer para este tipo de datos. Si no se debe exponer ninguna propiedad, podría devolver <see langword="null" />. La implementación predeterminada siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina si este objeto admite propiedades. De forma predeterminada, es <see langword="false" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> mediante el cual se puede proporcionar contexto adicional.</param>
      <returns>
        <see langword="true" /> si se debe llamar al método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> para buscar las propiedades de este objeto.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>Convierte el tipo de los objetos <see cref="T:System.Drawing.SizeF" /> en otro.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si el convertidor puede convertir el tipo especificado en el tipo <see cref="T:System.Drawing.SizeF" />, utilizando el contexto especificado.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante la cual se puede proporcionar un contexto adicional.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>Es <see langword="true" /> para indicar que se puede llevar a cabo la conversión; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si <see cref="T:System.Drawing.SizeFConverter" /> puede convertir un tipo <see cref="T:System.Drawing.SizeF" /> en el tipo especificado.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante la cual se puede proporcionar un contexto adicional.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo desde el que se quiere convertir.</param>
      <returns>Es <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto determinado al tipo de este convertidor usando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor determinado al tipo especificado usando el contexto y la información de referencia cultural especificados.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa un valor null, se supone que se va a usar la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Crea una instancia de un tipo <see cref="T:System.Drawing.SizeF" /> con los valores de propiedad especificados utilizando el contexto indicado.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante la cual se puede proporcionar un contexto adicional.</param>
      <param name="propertyValues">Interfaz <see cref="T:System.Collections.IDictionary" /> que contiene nombres y valores de propiedad.</param>
      <returns>Un <see cref="T:System.Object" /> que representa el nuevo tipo <see cref="T:System.Drawing.SizeF" />, o bien, <see langword="null" /> si no es posible crear el objeto.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve un valor que indica si, al cambiar un valor en este objeto, es necesario llamar al método <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> para crear un nuevo valor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato. Puede ser <see langword="null" />.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera un conjunto de propiedades del tipo <see cref="T:System.Drawing.SizeF" /> utilizando el contexto y los atributos especificados.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante la cual se puede proporcionar un contexto adicional.</param>
      <param name="value">
        <see cref="T:System.Object" /> cuyas propiedades se van a devolver.</param>
      <param name="attributes">Una matriz de objetos <see cref="T:System.Attribute" /> que describen las propiedades.</param>
      <returns>Una colección <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las propiedades.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Devuelve si el tipo <see cref="T:System.Drawing.SizeF" /> admite propiedades.</summary>
      <param name="context">Interfaz <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante la cual se puede proporcionar un contexto adicional.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>La clase <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> representa el convertidor de tipos para la directiva de protección extendida usada por el servidor para validar las conexiones de cliente entrantes.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado.</summary>
      <param name="context">Objeto que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo al que se quiere convertir.</param>
      <returns>Es <see langword="true" /> si este convertidor puede realizar la conversión; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto al tipo especificado</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" />, se supone que se trata de la actual información de referencia cultural.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir. Debería ser un objeto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el parámetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se pudo llevar a cabo la conversión.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>Obtiene la fecha y hora en que se generó el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Hora a la que se produjo el evento <see cref="E:System.Timers.Timer.Elapsed" />.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Timers.Timer.Elapsed" /> de <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.Timers.ElapsedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>Genera un evento después de un intervalo establecido, con la opción de generar eventos recurrentes.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Timers.Timer" /> y establece todas las propiedades en sus valores iniciales.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Timers.Timer" /> y establece la propiedad <see cref="P:System.Timers.Timer.Interval" /> en el número de milisegundos especificado.</summary>
      <param name="interval">Tiempo, en milisegundos, entre eventos. Este valor debe ser mayor que cero y menor o igual que <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="interval" /> es menor o igual a cero, o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>Obtiene o establece un valor booleano que indica si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> solo una vez (<see langword="false" />) o repetidamente (<see langword="true" />).</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> cada vez que transcurre el intervalo; es <see langword="false" /> si debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> solo una vez, cuando el intervalo transcurre por primera vez. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>Comienza la inicialización en tiempo de ejecución de un objeto <see cref="T:System.Timers.Timer" /> que se usa en un formulario o que lo usa otro componente.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>Libera los recursos que usa <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>Libera todos los recursos que usa la clase <see cref="T:System.Timers.Timer" /> actual.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>Se produce cuando transcurre el intervalo.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>Obtiene o establece un valor que indica si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Timers.Timer" /> debe generar el evento <see cref="E:System.Timers.Timer.Elapsed" />; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">No se puede establecer esta propiedad porque se ha desechado el temporizador.</exception>
      <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.Timers.Timer.Interval" /> se estableció en un valor mayor que <see cref="F:System.Int32.MaxValue" /> antes de que el temporizador estuviera habilitado.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>Finaliza la inicialización en tiempo de ejecución de un objeto <see cref="T:System.Timers.Timer" /> que se usa en un formulario o que lo usa otro componente.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>Obtiene o establece el intervalo, expresado en milisegundos, en el que se generará el evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>Tiempo, en milisegundos, entre eventos <see cref="E:System.Timers.Timer.Elapsed" />. Este valor debe ser mayor que cero y menor o igual que <see cref="F:System.Int32.MaxValue" />. El valor predeterminado es de 100 milisegundos.</returns>
      <exception cref="T:System.ArgumentException">El intervalo es menor o igual que cero.  
O bien 
El intervalo es mayor que <see cref="F:System.Int32.MaxValue" /> y el temporizador está habilitado actualmente. (Si el temporizador no está habilitado actualmente, no se produce ninguna excepción hasta que se habilita.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>Obtiene o establece el sitio que enlaza el objeto <see cref="T:System.Timers.Timer" /> a su contenedor en modo de diseño.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.ISite" /> que representa el sitio que enlaza el objeto <see cref="T:System.Timers.Timer" /> a su contenedor.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>Empieza a generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> al establecer <see cref="P:System.Timers.Timer.Enabled" /> en <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" /> se crea con un intervalo igual o superior a <see cref="F:System.Int32.MaxValue" /> + 1 o se establece en un intervalo inferior a cero.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>Deja de generar el evento <see cref="E:System.Timers.Timer.Elapsed" /> al establecer <see cref="P:System.Timers.Timer.Enabled" /> en <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>Obtiene o establece el objeto que se utiliza para calcular las referencias de las llamadas del controlador de eventos que se emiten al transcurrir un intervalo.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> que representa el objeto que se usa para calcular las referencias de las llamadas del controlador de eventos que se emiten al transcurrir un intervalo. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>Establece la descripción que los diseñadores visuales pueden mostrar cuando se hace referencia a un evento, un extensor o una propiedad.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description">Descripción que se va a utilizar.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>Obtiene la descripción que los diseñadores visuales pueden mostrar cuando se hace referencia a un evento, un extensor o una propiedad.</summary>
      <returns>Descripción del evento, extensor o propiedad.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Convierte un tipo <see cref="T:System.String" /> en un tipo <see cref="T:System.Uri" /> y viceversa.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir un objeto del tipo dado al tipo de este convertidor.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo a partir del cual se desea realizar la conversión.</param>
      <returns>
        <see langword="true" /> si <paramref name="sourceType" /> es un tipo <see cref="T:System.String" /> o un tipo <see cref="T:System.Uri" /> se puede asignar de <paramref name="sourceType" />; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="sourceType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado, con el contexto especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo de destino de la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="destinationType" /> es de tipo <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> o <see cref="T:System.Uri" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto determinado al tipo de este convertidor usando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte un objeto de valor determinado al tipo especificado usando el contexto especificado y la información de referencia cultural.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" />. Si se pasa <see langword="null" /> , se supone que se va a usar la referencia cultural actual.</param>
      <param name="value">Valor <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Devuelve si el objeto de valor determinado es <see cref="T:System.Uri" /> o se puede crear <see cref="T:System.Uri" /> a partir de él.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="value">
        <see cref="T:System.Object" /> cuya validez se va a comprobar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> es <see cref="T:System.Uri" /> o <see cref="T:System.String" /> a partir del que se puede crear <see cref="T:System.Uri" />; de lo contrario, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary vsli:raw="Represents a 3x2 matrix.">Representa una matriz de 3 x 2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a 3x2 matrix from the specified components.">Crea una matriz de 3 x 2 de los componentes especificados.</summary>
      <param name="m11" vsli:raw="The value to assign to the first element in the first row.">Valor que se asigna al primer elemento de la primera fila.</param>
      <param name="m12" vsli:raw="The value to assign to the second element in the first row.">Valor que se asigna al segundo elemento de la primera fila.</param>
      <param name="m21" vsli:raw="The value to assign to the first element in the second row.">Valor que se asigna al primer elemento de la segunda fila.</param>
      <param name="m22" vsli:raw="The value to assign to the second element in the second row.">Valor que se asigna al segundo elemento de la segunda fila.</param>
      <param name="m31" vsli:raw="The value to assign to the first element in the third row.">Valor que se asigna al primer elemento de la tercera fila.</param>
      <param name="m32" vsli:raw="The value to assign to the second element in the third row.">Valor que se asigna al segundo elemento de la tercera fila.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Matriz que contiene los valores sumados de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary vsli:raw="Creates a rotation matrix using the given rotation in radians.">Crea una matriz de rotación usando la rotación especificadas en radianes.</summary>
      <param name="radians" vsli:raw="The amount of rotation, in radians.">Magnitud de la rotación, en radianes.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a rotation matrix using the specified rotation in radians and a center point.">Crea una matriz de rotación usando la rotación especificada en radianes y un punto central.</summary>
      <param name="radians" vsli:raw="The amount of rotation, in radians.">Magnitud de la rotación, en radianes.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale.">Crea una matriz de escala a partir de la escala del vector especificado.</summary>
      <param name="scales" vsli:raw="The scale to use.">Escala que se va a usar.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale with an offset from the specified center point.">Crea una matriz de escala a partir de la escala del vector especificado con una desviación desde el punto central especificado.</summary>
      <param name="scales" vsli:raw="The scale to use.">Escala que se va a usar.</param>
      <param name="centerPoint" vsli:raw="The center offset.">Desviación desde el centro.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary vsli:raw="Creates a scaling matrix that scales uniformly with the given scale.">Crea una matriz de escala que escala de manera uniforme con la escala especificada.</summary>
      <param name="scale" vsli:raw="The uniform scale to use.">Escala uniforme para que se usará.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix that scales uniformly with the specified scale with an offset from the specified center.">Crea una matriz de escala que escala de manera uniforme con la escala especificada con una desviación desde el centro especificado.</summary>
      <param name="scale" vsli:raw="The uniform scale to use.">Escala uniforme para que se usará.</param>
      <param name="centerPoint" vsli:raw="The center offset.">Desviación desde el centro.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary vsli:raw="Creates a scaling matrix from the specified X and Y components.">Crea una matriz de escala a partir de los componentes X e Y especificados.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valor que se va a escalar en el eje X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valor que se va a escalar en el eje Y.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a scaling matrix that is offset by a given center point.">Crea una matriz de escala con un desvío con respecto a un punto central especificado.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valor que se va a escalar en el eje X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valor que se va a escalar en el eje Y.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary vsli:raw="Creates a skew matrix from the specified angles in radians.">Crea una matriz de sesgado a partir de los ángulos especificados en radianes.</summary>
      <param name="radiansX" vsli:raw="The X angle, in radians.">Ángulo X en radianes.</param>
      <param name="radiansY" vsli:raw="The Y angle, in radians.">Ángulo Y en radianes.</param>
      <returns vsli:raw="The skew matrix.">Matriz de sesgado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Creates a skew matrix from the specified angles in radians and a center point.">Crea una matriz de sesgado a partir de los ángulos especificados en radianes y un pun to central.</summary>
      <param name="radiansX" vsli:raw="The X angle, in radians.">Ángulo X en radianes.</param>
      <param name="radiansY" vsli:raw="The Y angle, in radians.">Ángulo Y en radianes.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The skew matrix.">Matriz de sesgado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary vsli:raw="Creates a translation matrix from the specified 2-dimensional vector.">Crea una matriz de traslación a partir del vector bidimensional especificado.</summary>
      <param name="position" vsli:raw="The translation position.">Posición de traslación.</param>
      <returns vsli:raw="The translation matrix.">Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary vsli:raw="Creates a translation matrix from the specified X and Y components.">Crea una matriz de traslación a partir de los componentes X e Y especificados.</summary>
      <param name="xPosition" vsli:raw="The X position.">Posición X.</param>
      <param name="yPosition" vsli:raw="The Y position.">Posición Y.</param>
      <returns vsli:raw="The translation matrix.">Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another 3x2 matrix are equal.">Devuelve un valor que indica si esta instancia y otra matriz de 3 x 2 son iguales.</summary>
      <param name="other" vsli:raw="The other matrix.">Otra matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two matrices are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las matrices son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary vsli:raw="Calculates the determinant for this matrix.">Calcula el factor determinante para esta matriz.</summary>
      <returns vsli:raw="The determinant.">Factor determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary vsli:raw="Gets the multiplicative identity matrix.">Obtiene la matriz de identidad de multiplicación.</summary>
      <returns vsli:raw="The multiplicative identify matrix.">Matriz de identidad de multiplicación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary vsli:raw="Inverts the specified matrix. The return value indicates whether the operation succeeded.">Invierte la matriz especificada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix" vsli:raw="The matrix to invert.">Matriz que se va a invertir.</param>
      <param name="result" vsli:raw="When this method returns, contains the inverted matrix if the operation succeeded.">Cuando este método finaliza, contiene la matriz invertida si la operación se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was converted successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> se ha convertido correctamente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary vsli:raw="Indicates whether the current matrix is the identity matrix.">Indica si la matriz actual es la matriz de identidad.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current matrix is the identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la matriz actual es la matriz de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.">Realiza una interpolación lineal desde una matriz a una segunda matriz basándose en un valor que especifica la ponderación de la segunda matriz.</summary>
      <param name="matrix1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="matrix2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <param name="amount" vsli:raw="The relative weighting of &lt;paramref name=&quot;matrix2&quot; /&gt;.">Ponderación relativa de <paramref name="matrix2" />.</param>
      <returns vsli:raw="The interpolated matrix.">Matriz de interpolación.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary vsli:raw="The first element of the first row.">Primer elemento de la matriz.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary vsli:raw="The second element of the first row.">Segundo elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary vsli:raw="The first element of the second row.">Primer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary vsli:raw="The second element of the second row.">Segundo elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary vsli:raw="The first element of the third row.">Primer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary vsli:raw="The second element of the third row.">Segundo elemento de la tercera fila.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The product matrix.">Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matriz que se va a escalar.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valor de escala que se va a usar.</param>
      <returns vsli:raw="The scaled matrix.">Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matriz que se va a convertir en negativa.</param>
      <returns vsli:raw="The negated matrix.">Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix that contains the summed values.">Matriz que contiene los valores de sumado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are equal.">Devuelve un valor que indica si las matrices especificadas son iguales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Primera matriz que se va a comparar.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Segunda matriz que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are not equal.">Devuelve un valor que indica si las matrices especificadas no son iguales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Primera matriz que se va a comparar.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Segunda matriz que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The product matrix.">Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matriz que se va a escalar.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valor de escala que se va a usar.</param>
      <returns vsli:raw="The scaled matrix.">Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matriz que se va a convertir en negativa.</param>
      <returns vsli:raw="The negated matrix.">Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary vsli:raw="Returns a string that represents this matrix.">Devuelve una cadena que representa esta matriz.</summary>
      <returns vsli:raw="The string representation of this matrix.">Representación de cadena de esta matriz.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary vsli:raw="Gets or sets the translation component of this matrix.">Obtiene o establece el componente de traslación de esta matriz.</summary>
      <returns vsli:raw="The translation component of the current instance.">Componente de traslación de la instancia actual.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary vsli:raw="Represents a 4x4 matrix.">Representa una matriz de 4 x 4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Matrix4x4&quot; /&gt; object from a specified &lt;see cref=&quot;T:System.Numerics.Matrix3x2&quot; /&gt; object.">Crea un objeto <see cref="T:System.Numerics.Matrix4x4" /> a partir de un objeto <see cref="T:System.Numerics.Matrix3x2" />.</summary>
      <param name="value" vsli:raw="A 3x2 matrix.">Matriz de 3 x 2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a 4x4 matrix from the specified components.">Crea una matriz de 4 x 4 a partir de los componentes especificados.</summary>
      <param name="m11" vsli:raw="The value to assign to the first element in the first row.">Valor que se asigna al primer elemento de la primera fila.</param>
      <param name="m12" vsli:raw="The value to assign to the second element in the first row.">Valor que se asigna al segundo elemento de la primera fila.</param>
      <param name="m33" vsli:raw="The value to assign to the third element in the third row.">Valor que se asigna al tercer elemento de la tercera fila.</param>
      <param name="m34" vsli:raw="The value to assign to the fourth element in the third row.">Valor que se asigna al cuarto elemento de la tercera fila.</param>
      <param name="m41" vsli:raw="The value to assign to the first element in the fourth row.">Valor que se asigna al primer elemento de la cuarta fila.</param>
      <param name="m42" vsli:raw="The value to assign to the second element in the fourth row.">Valor que se asigna al segundo elemento de la cuarta fila.</param>
      <param name="m43" vsli:raw="The value to assign to the third element in the fourth row.">Valor que se asigna al tercer elemento de la cuarta fila.</param>
      <param name="m44" vsli:raw="The value to assign to the fourth element in the fourth row.">Valor que se asigna al cuarto elemento de la cuarta fila.</param>
      <param name="m13" vsli:raw="The value to assign to the third element in the first row.">Valor que se asigna al tercer elemento de la primera fila.</param>
      <param name="m14" vsli:raw="The value to assign to the fourth element in the first row.">Valor que se asigna al cuarto elemento de la primera fila.</param>
      <param name="m21" vsli:raw="The value to assign to the first element in the second row.">Valor que se asigna al primer elemento de la segunda fila.</param>
      <param name="m22" vsli:raw="The value to assign to the second element in the second row.">Valor que se asigna al segundo elemento de la segunda fila.</param>
      <param name="m23" vsli:raw="The value to assign to the third element in the second row.">Valor que se asigna al tercer elemento de la segunda fila.</param>
      <param name="m24" vsli:raw="The value to assign to the fourth element in the second row.">Valor que se asigna al tercer elemento de la segunda fila.</param>
      <param name="m31" vsli:raw="The value to assign to the first element in the third row.">Valor que se asigna al primer elemento de la tercera fila.</param>
      <param name="m32" vsli:raw="The value to assign to the second element in the third row.">Valor que se asigna al segundo elemento de la tercera fila.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Matriz que contiene los valores sumados de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a spherical billboard that rotates around a specified object position.">Crea una cartelera esférica que gira en torno a una posición del objeto especificado.</summary>
      <param name="objectPosition" vsli:raw="The position of the object that the billboard will rotate around.">Posición del objeto en torno a la cual girará la cartelera.</param>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Posición de la cámara.</param>
      <param name="cameraUpVector" vsli:raw="The up vector of the camera.">Vector hacia arriba de la cámara.</param>
      <param name="cameraForwardVector" vsli:raw="The forward vector of the camera.">Vector hacia delante de la cámara.</param>
      <returns vsli:raw="The created billboard.">Cartelera creada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a cylindrical billboard that rotates around a specified axis.">Crea una cartelera cilíndrica que gira en torno a un eje especificado.</summary>
      <param name="objectPosition" vsli:raw="The position of the object that the billboard will rotate around.">Posición del objeto en torno a la cual girará la cartelera.</param>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Posición de la cámara.</param>
      <param name="rotateAxis" vsli:raw="The axis to rotate the billboard around.">Eje en torno al cual girará la cartelera.</param>
      <param name="cameraForwardVector" vsli:raw="The forward vector of the camera.">Vector hacia delante de la cámara.</param>
      <param name="objectForwardVector" vsli:raw="The forward vector of the object.">Vector hacia delante del objeto.</param>
      <returns vsli:raw="The billboard matrix.">Matriz de cartelera.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a matrix that rotates around an arbitrary vector.">Crea una matriz que gira en torno a un vector arbitrario.</summary>
      <param name="axis" vsli:raw="The axis to rotate around.">Eje en torno al cual se girará.</param>
      <param name="angle" vsli:raw="The angle to rotate around &lt;paramref name=&quot;axis&quot; /&gt;, in radians.">Ángulo en torno al cual se gira <paramref name="axis" />, en radianes.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary vsli:raw="Creates a rotation matrix from the specified Quaternion rotation value.">Crea una matriz de rotación a partir del valor de rotación del cuaternión especificado.</summary>
      <param name="quaternion" vsli:raw="The source Quaternion.">Valor cuaternión de origen.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a rotation matrix from the specified yaw, pitch, and roll.">Crea una matriz de rotación de los valores especificados de rotación, rotación alrededor del eje X y rotación alrededor del eje Y.</summary>
      <param name="yaw" vsli:raw="The angle of rotation, in radians, around the Y axis.">Ángulo de rotación, en radianes, alrededor del eje Y.</param>
      <param name="pitch" vsli:raw="The angle of rotation, in radians, around the X axis.">Ángulo de rotación, en radianes, alrededor del eje X.</param>
      <param name="roll" vsli:raw="The angle of rotation, in radians, around the Z axis.">Ángulo de rotación, en radianes, alrededor del eje Z.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a view matrix.">Crea una matriz de vista.</summary>
      <param name="cameraPosition" vsli:raw="The position of the camera.">Posición de la cámara.</param>
      <param name="cameraTarget" vsli:raw="The target towards which the camera is pointing.">Destino hacia el que apunta la cámara.</param>
      <param name="cameraUpVector" vsli:raw="The direction that is &quot;up&quot; from the camera's point of view.">Dirección que representa "arriba" desde el punto de vista de la cámara.</param>
      <returns vsli:raw="The view matrix.">Matriz de vista.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates an orthographic perspective matrix from the given view volume dimensions.">Crea una matriz de perspectiva ortográfica a partir de las dimensiones de la vista especificada.</summary>
      <param name="width" vsli:raw="The width of the view volume.">Ancho del volumen de vista.</param>
      <param name="height" vsli:raw="The height of the view volume.">Alto del volumen de vista.</param>
      <param name="zNearPlane" vsli:raw="The minimum Z-value of the view volume.">Valor Z mínimo del volumen de vista.</param>
      <param name="zFarPlane" vsli:raw="The maximum Z-value of the view volume.">Valor Z máximo del volumen de vista.</param>
      <returns vsli:raw="The orthographic projection matrix.">Matriz de proyección ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a customized orthographic projection matrix.">Crea una matriz de una proyección ortográfica personalizada.</summary>
      <param name="left" vsli:raw="The minimum X-value of the view volume.">Valor X mínimo del volumen de vista.</param>
      <param name="right" vsli:raw="The maximum X-value of the view volume.">Valor X máximo del volumen de vista.</param>
      <param name="bottom" vsli:raw="The minimum Y-value of the view volume.">Valor Y mínimo del volumen de vista.</param>
      <param name="top" vsli:raw="The maximum Y-value of the view volume.">Valor Y máximo del volumen de vista.</param>
      <param name="zNearPlane" vsli:raw="The minimum Z-value of the view volume.">Valor Z mínimo del volumen de vista.</param>
      <param name="zFarPlane" vsli:raw="The maximum Z-value of the view volume.">Valor Z máximo del volumen de vista.</param>
      <returns vsli:raw="The orthographic projection matrix.">Matriz de proyección ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a perspective projection matrix from the given view volume dimensions.">Crea una matriz de proyección en perspectiva a partir de las dimensiones de volumen de la vista dada.</summary>
      <param name="width" vsli:raw="The width of the view volume at the near view plane.">Ancho del volumen de vista en un plano de vista próximo.</param>
      <param name="height" vsli:raw="The height of the view volume at the near view plane.">Alto del volumen de vista en un plano de vista próximo.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distancia al plano de vista lejano.</param>
      <returns vsli:raw="The perspective projection matrix.">Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.">Crea una matriz de proyección de perspectiva basada en un campo de vista, relación de aspecto y distancias de plano de vista próximo y lejano.</summary>
      <param name="fieldOfView" vsli:raw="The field of view in the y direction, in radians.">Campo de vista y la dirección, en radianes.</param>
      <param name="aspectRatio" vsli:raw="The aspect ratio, defined as view space width divided by height.">Relación de aspecto, definida como el ancho del espacio de la vista dividido por el alto.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distancia al plano de vista lejano.</param>
      <returns vsli:raw="The perspective projection matrix.">Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;fieldOfView&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fieldOfView&quot; /&gt; is greater than or equal to &lt;see cref=&quot;F:System.Math.PI&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="fieldOfView" /> es menor o igual que cero.  
o bien 
 <paramref name="fieldOfView" /> es mayor o igual que <see cref="F:System.Math.PI" />.  
 <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
o bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a customized perspective projection matrix.">Crea una matriz de proyección en perspectiva personalizada.</summary>
      <param name="left" vsli:raw="The minimum x-value of the view volume at the near view plane.">Valor X mínimo del volumen de vista en el plano de vista próximo.</param>
      <param name="right" vsli:raw="The maximum x-value of the view volume at the near view plane.">Valor X máximo del volumen de vista en el plano de vista próximo.</param>
      <param name="bottom" vsli:raw="The minimum y-value of the view volume at the near view plane.">Valor Y mínimo del volumen de vista en el plano de vista próximo.</param>
      <param name="top" vsli:raw="The maximum y-value of the view volume at the near view plane.">Valor Y máximo del volumen de vista en el plano de vista próximo.</param>
      <param name="nearPlaneDistance" vsli:raw="The distance to the near view plane.">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance" vsli:raw="The distance to the far view plane.">Distancia al plano de vista lejano.</param>
      <returns vsli:raw="The perspective projection matrix.">Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;farPlaneDistance&quot; /&gt; is less than or equal to zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;nearPlaneDistance&quot; /&gt; is greater than or equal to &lt;paramref name=&quot;farPlaneDistance&quot; /&gt;.">
        <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
o bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary vsli:raw="Creates a matrix that reflects the coordinate system about a specified plane.">Crea una matriz que refleja el sistema de coordenadas sobre un plano especificado.</summary>
      <param name="value" vsli:raw="The plane about which to create a reflection.">Plano sobre el que se va a crear una reflexión.</param>
      <returns vsli:raw="A new matrix expressing the reflection.">Nueva matriz que expresa la reflexión.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the X axis.">Crea una matriz de puntos de rotación alrededor del eje X.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the X axis.">Cantidad, en radianes, por la que va a girar alrededor del eje X.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a matrix for rotating points around the X axis from a center point.">Crea una matriz de puntos de rotación alrededor del eje X desde un punto central.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the X axis.">Cantidad, en radianes, por la que va a girar alrededor del eje X.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the Y axis.">Crea una matriz de puntos de rotación alrededor del eje Y.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Y-axis.">Cantidad, en radianes, por la que va a girar alrededor del eje Y.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="The amount, in radians, by which to rotate around the Y axis from a center point.">Cantidad, en radianes, por la que se va a rotar alrededor del eje Y desde un punto central.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Y-axis.">Cantidad, en radianes, por la que va a girar alrededor del eje Y.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary vsli:raw="Creates a matrix for rotating points around the Z axis.">Crea una matriz de puntos de rotación alrededor del eje Z.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Z-axis.">Cantidad, en radianes, por la que va a girar alrededor del eje Z.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a matrix for rotating points around the Z axis from a center point.">Crea una matriz de puntos de rotación alrededor del eje Z desde un punto central.</summary>
      <param name="radians" vsli:raw="The amount, in radians, by which to rotate around the Z-axis.">Cantidad, en radianes, por la que va a girar alrededor del eje Z.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The rotation matrix.">Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix from the specified vector scale.">Crea una matriz de escala a partir de la escala del vector especificado.</summary>
      <param name="scales" vsli:raw="The scale to use.">Escala que se va a usar.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix with a center point.">Crea una matriz de escala con un punto central.</summary>
      <param name="scales" vsli:raw="The vector that contains the amount to scale on each axis.">Vector que contiene la cantidad escalar en cada eje.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary vsli:raw="Creates a uniform scaling matrix that scale equally on each axis.">Crea una matriz de escala uniforme que escala equitativamente en cada eje.</summary>
      <param name="scale" vsli:raw="The uniform scaling factor.">Factor de escala uniforme.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a uniform scaling matrix that scales equally on each axis with a center point.">Crea una matriz de escala uniforme que escala equitativamente en cada eje con un punto central.</summary>
      <param name="scale" vsli:raw="The uniform scaling factor.">Factor de escala uniforme.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a scaling matrix from the specified X, Y, and Z components.">Crea una matriz de escala a partir de los componentes X, Y y Z.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valor que se va a escalar en el eje X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valor que se va a escalar en el eje Y.</param>
      <param name="zScale" vsli:raw="The value to scale by on the Z axis.">Valor que se va a escalar en el eje Z.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a scaling matrix that is offset by a given center point.">Crea una matriz de escala con un desvío con respecto a un punto central especificado.</summary>
      <param name="xScale" vsli:raw="The value to scale by on the X axis.">Valor que se va a escalar en el eje X.</param>
      <param name="yScale" vsli:raw="The value to scale by on the Y axis.">Valor que se va a escalar en el eje Y.</param>
      <param name="zScale" vsli:raw="The value to scale by on the Z axis.">Valor que se va a escalar en el eje Z.</param>
      <param name="centerPoint" vsli:raw="The center point.">Punto central.</param>
      <returns vsli:raw="The scaling matrix.">Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary vsli:raw="Creates a matrix that flattens geometry into a specified plane as if casting a shadow from a specified light source.">Crea una matriz que aplana la geometría en un plano especificado como si proyectara una sombra desde una fuente de luz especificada.</summary>
      <param name="lightDirection" vsli:raw="The direction from which the light that will cast the shadow is coming.">Dirección de la que procede la luz que proyectará la sombra.</param>
      <param name="plane" vsli:raw="The plane onto which the new matrix should flatten geometry so as to cast a shadow.">Plano en el que la nueva matriz debe aplanar la geometría con el fin de convertir una sombra.</param>
      <returns vsli:raw="A new matrix that can be used to flatten geometry onto the specified plane from the specified direction.">Matriz nueva que puede usarse para aplanar la geometría en el plano especificado desde la dirección especificada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary vsli:raw="Creates a translation matrix from the specified 3-dimensional vector.">Crea una matriz de traslación a partir del vector tridimensional especificado.</summary>
      <param name="position" vsli:raw="The amount to translate in each axis.">Cantidad de traslación de cada eje.</param>
      <returns vsli:raw="The translation matrix.">Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a translation matrix from the specified X, Y, and Z components.">Crea una matriz de traslación a partir de los componentes X, Y y Z especificados.</summary>
      <param name="xPosition" vsli:raw="The amount to translate on the X axis.">Cantidad de traslación del eje X.</param>
      <param name="yPosition" vsli:raw="The amount to translate on the Y axis.">Cantidad de traslación del eje Y.</param>
      <param name="zPosition" vsli:raw="The amount to translate on the Z axis.">Cantidad de traslación del eje Z.</param>
      <returns vsli:raw="The translation matrix.">Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a world matrix with the specified parameters.">Crea una matriz universal con los parámetros especificados.</summary>
      <param name="position" vsli:raw="The position of the object.">Posición del objeto.</param>
      <param name="forward" vsli:raw="The forward direction of the object.">Dirección de avance del objeto.</param>
      <param name="up" vsli:raw="The upward direction of the object. Its value is usually &lt;c&gt;[0, 1, 0]&lt;/c&gt;.">Dirección ascendente del objeto. Normalmente su valor es <c>[0, 1, 0]</c>.</param>
      <returns vsli:raw="The world matrix.">Matriz universal.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary vsli:raw="Attempts to extract the scale, translation, and rotation components from the given scale, rotation, or translation matrix. The return value indicates whether the operation succeeded.">Intenta extraer los componentes de escala, traslación y rotación de la matriz de escala, rotación o traducción determinada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix" vsli:raw="The source matrix.">Matriz de origen.</param>
      <param name="scale" vsli:raw="When this method returns, contains the scaling component of the transformation matrix if the operation succeeded.">Cuando este método vuelve, contiene el componente de escala de la matriz de transformación si la operación se realizó correctamente.</param>
      <param name="rotation" vsli:raw="When this method returns, contains the rotation component of the transformation matrix if the operation succeeded.">Cuando este método vuelve, contiene el componente de rotación de la matriz de transformación si la operación se realizó correctamente.</param>
      <param name="translation" vsli:raw="When the method returns, contains the translation component of the transformation matrix if the operation succeeded.">Cuando el método vuelve, contiene el componente de traducción de la matriz de transformación si la operación se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was decomposed successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> se descomponen correctamente; en caso contrario,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another 4x4 matrix are equal.">Devuelve un valor que indica si esta instancia y otra matriz de 4 x 4 son iguales.</summary>
      <param name="other" vsli:raw="The other matrix.">Otra matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two matrices are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las matrices son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary vsli:raw="Calculates the determinant of the current 4x4 matrix.">Calcula el factor determinante de la matriz de 4 x 4 actual.</summary>
      <returns vsli:raw="The determinant.">Factor determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary vsli:raw="Gets the multiplicative identity matrix.">Obtiene la matriz de identidad de multiplicación.</summary>
      <returns vsli:raw="Gets the multiplicative identity matrix.">Obtiene la matriz de identidad de multiplicación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary vsli:raw="Inverts the specified matrix. The return value indicates whether the operation succeeded.">Invierte la matriz especificada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix" vsli:raw="The matrix to invert.">Matriz que se va a invertir.</param>
      <param name="result" vsli:raw="When this method returns, contains the inverted matrix if the operation succeeded.">Cuando este método finaliza, contiene la matriz invertida si la operación se realizó correctamente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix&quot; /&gt; was converted successfully; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="matrix" /> se ha convertido correctamente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary vsli:raw="Indicates whether the current matrix is the identity matrix.">Indica si la matriz actual es la matriz de identidad.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current matrix is the identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la matriz actual es la matriz de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.">Realiza una interpolación lineal desde una matriz a una segunda matriz basándose en un valor que especifica la ponderación de la segunda matriz.</summary>
      <param name="matrix1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="matrix2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <param name="amount" vsli:raw="The relative weighting of &lt;paramref name=&quot;matrix2&quot; /&gt;.">Ponderación relativa de <paramref name="matrix2" />.</param>
      <returns vsli:raw="The interpolated matrix.">Matriz de interpolación.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary vsli:raw="The first element of the first row.">Primer elemento de la matriz.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary vsli:raw="The second element of the first row.">Segundo elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary vsli:raw="The third element of the first row.">Tercer elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary vsli:raw="The fourth element of the first row.">Cuarto elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary vsli:raw="The first element of the second row.">Primer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary vsli:raw="The second element of the second row.">Segundo elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary vsli:raw="The third element of the second row.">Tercer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary vsli:raw="The fourth element of the second row.">Cuarto elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary vsli:raw="The first element of the third row.">Primer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary vsli:raw="The second element of the third row.">Segundo elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary vsli:raw="The third element of the third row.">Tercer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary vsli:raw="The fourth element of the third row.">Cuarto elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary vsli:raw="The first element of the fourth row.">Primer elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary vsli:raw="The second element of the fourth row.">Segundo elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary vsli:raw="The third element of the fourth row.">Tercer elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary vsli:raw="The fourth element of the fourth row.">Cuarto elemento de la cuarta fila.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The product matrix.">Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matriz que se va a escalar.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valor de escala que se va a usar.</param>
      <returns vsli:raw="The scaled matrix.">Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matriz que se va a convertir en negativa.</param>
      <returns vsli:raw="The negated matrix.">Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Adds each element in one matrix with its corresponding element in a second matrix.">Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix that contains the summed values.">Matriz que contiene los valores de sumado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are equal.">Devuelve un valor que indica si las matrices especificadas son iguales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Primera matriz que se va a comparar.</param>
      <param name="value2" vsli:raw="The second matrix to care.">Segunda matriz que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns a value that indicates whether the specified matrices are not equal.">Devuelve un valor que indica si las matrices especificadas no son iguales.</summary>
      <param name="value1" vsli:raw="The first matrix to compare.">Primera matriz que se va a comparar.</param>
      <param name="value2" vsli:raw="The second matrix to compare.">Segunda matriz que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Returns the matrix that results from multiplying two matrices together.">Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The product matrix.">Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary vsli:raw="Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.">Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1" vsli:raw="The matrix to scale.">Matriz que se va a escalar.</param>
      <param name="value2" vsli:raw="The scaling value to use.">Valor de escala que se va a usar.</param>
      <returns vsli:raw="The scaled matrix.">Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Negates the specified matrix by multiplying all its values by -1.">Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value" vsli:raw="The matrix to negate.">Matriz que se va a convertir en negativa.</param>
      <returns vsli:raw="The negated matrix.">Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Subtracts each element in a second matrix from its corresponding element in a first matrix.">Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1" vsli:raw="The first matrix.">Primera matriz.</param>
      <param name="value2" vsli:raw="The second matrix.">Segunda matriz.</param>
      <returns vsli:raw="The matrix containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary vsli:raw="Returns a string that represents this matrix.">Devuelve una cadena que representa esta matriz.</summary>
      <returns vsli:raw="The string representation of this matrix.">Representación de cadena de esta matriz.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms the specified matrix by applying the specified Quaternion rotation.">Transforma la matriz especificada mediante la aplicación de la rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The matrix to transform.">Matriz que se va a transformar.</param>
      <param name="rotation" vsli:raw="The rotation t apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed matrix.">Matriz transformada.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary vsli:raw="Gets or sets the translation component of this matrix.">Obtiene o establece el componente de traslación de esta matriz.</summary>
      <returns vsli:raw="The translation component of the current instance.">Componente de traslación de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transposes the rows and columns of a matrix.">Transpone las filas y las columnas de una matriz.</summary>
      <param name="matrix" vsli:raw="The matrix to transpose.">Matriz que se va a transponer.</param>
      <returns vsli:raw="The transposed matrix.">Matriz transpuesta.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary vsli:raw="Represents a plane in three-dimensional space.">Representa un plano en un espacio tridimensional.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from a specified normal and the distance along the normal from the origin.">Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de una normal especificada y la distancia a lo largo del vector normal desde el origen.</summary>
      <param name="normal" vsli:raw="The plane's normal vector.">Vector normal del plano.</param>
      <param name="d" vsli:raw="The plane's distance from the origin along its normal vector.">Distancia del plano desde el origen a lo largo de su vector normal.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from a specified four-dimensional vector.">Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de un vector de cuatro dimensiones especificado.</summary>
      <param name="value" vsli:raw="A vector whose first three elements describe the normal vector, and whose &lt;see cref=&quot;F:System.Numerics.Vector4.W&quot; /&gt; defines the distance along that normal from the origin.">Vector cuyos tres primeros elementos describen el vector normal y cuyo <see cref="F:System.Numerics.Vector4.W" /> define la distancia a lo largo de ese vector normal desde el origen.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.">Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de los componentes X, Y y Z de su vector normal y su distancia desde el origen en esa normal.</summary>
      <param name="x" vsli:raw="The X component of the normal.">Componente X del vector normal.</param>
      <param name="y" vsli:raw="The Y component of the normal.">Componente Y del vector normal.</param>
      <param name="z" vsli:raw="The Z component of the normal.">Componente Z del vector normal.</param>
      <param name="d" vsli:raw="The distance of the plane along its normal from the origin.">Distancia del plano a lo largo de su vector normal desde el origen.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object that contains three specified points.">Crea un objeto <see cref="T:System.Numerics.Plane" /> que contiene tres puntos especificados.</summary>
      <param name="point1" vsli:raw="The first point defining the plane.">Primer punto que define el plano.</param>
      <param name="point2" vsli:raw="The second point defining the plane.">Segundo punto que define el plano.</param>
      <param name="point3" vsli:raw="The third point defining the plane.">Tercer punto que define el plano.</param>
      <returns vsli:raw="The plane containing the three points.">Plano que contiene los tres puntos.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary vsli:raw="The distance of the plane along its normal from the origin.">Distancia del plano a lo largo de su vector normal desde el origen.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary vsli:raw="Calculates the dot product of a plane and a 4-dimensional vector.">Calcula el producto escalar de un plano y un vector de 4 dimensiones.</summary>
      <param name="plane" vsli:raw="The plane.">Plano.</param>
      <param name="value" vsli:raw="The four-dimensional vector.">Vector de cuatro dimensiones.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (&lt;see cref=&quot;F:System.Numerics.Plane.D&quot; /&gt;) value of the plane.">Devuelve el producto escalar de un vector tridimensional especificado y el vector normal de este plano más el valor de la distancia (<see cref="F:System.Numerics.Plane.D" />) del plano.</summary>
      <param name="plane" vsli:raw="The plane.">Plano.</param>
      <param name="value" vsli:raw="The 3-dimensional vector.">Vector tridimensional.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of a specified three-dimensional vector and the &lt;see cref=&quot;F:System.Numerics.Plane.Normal&quot; /&gt; vector of this plane.">Devuelve el producto escalar de un vector tridimensional especificado y el vector <see cref="F:System.Numerics.Plane.Normal" /> de este plano.</summary>
      <param name="plane" vsli:raw="The plane.">Plano.</param>
      <param name="value" vsli:raw="The three-dimensional vector.">Vector tridimensional.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another plane object are equal.">Devuelve un valor que indica si esta instancia y otro objeto de plano son iguales.</summary>
      <param name="other" vsli:raw="The other plane.">Otro plano.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two planes are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos planos son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary vsli:raw="The normal vector of the plane.">Vector normal del plano.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object whose normal vector is the source plane's normal vector normalized.">Crea un nuevo objeto <see cref="T:System.Numerics.Plane" /> cuyo vector normal es el vector normal del plano de origen normalizado.</summary>
      <param name="value" vsli:raw="The source plane.">Plano de origen.</param>
      <returns vsli:raw="The normalized plane.">Plano normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether two planes are equal.">Devuelve un valor que indica si dos planos son iguales.</summary>
      <param name="value1" vsli:raw="The first plane to compare.">Primer plano que se va a comparar.</param>
      <param name="value2" vsli:raw="The second plane to compare.">Segundo plano que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary vsli:raw="Returns a value that indicates whether two planes are not equal.">Devuelve un valor que indica si dos planos no son iguales.</summary>
      <param name="value1" vsli:raw="The first plane to compare.">Primer plano que se va a comparar.</param>
      <param name="value2" vsli:raw="The second plane to compare.">Segundo plano que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary vsli:raw="Returns the string representation of this plane object.">Devuelve la representación de cadena de este objeto de plano.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.Numerics.Plane&quot; /&gt; object.">Cadena que representa este objeto <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a normalized plane by a 4x4 matrix.">Transforma un plano normalizado mediante una matriz de 4x4.</summary>
      <param name="plane" vsli:raw="The normalized plane to transform.">Plano normalizado que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix to apply to &lt;paramref name=&quot;plane&quot; /&gt;.">Matriz de transformación que se va a aplicar a <paramref name="plane" />.</param>
      <returns vsli:raw="The transformed plane.">Plano transformado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a normalized plane by a Quaternion rotation.">Transforma un plano normalizado mediante una rotación de cuaternión.</summary>
      <param name="plane" vsli:raw="The normalized plane to transform.">Plano normalizado que se va a transformar.</param>
      <param name="rotation" vsli:raw="The Quaternion rotation to apply to the plane.">Rotación de cuaternión que se va a aplicar al plano.</param>
      <returns vsli:raw="A new plane that results from applying the Quaternion rotation.">Plano nuevo que es el resultado de aplicar la rotación de cuaternión.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary vsli:raw="Represents a vector that is used to encode three-dimensional physical rotations.">Representa un vector que se usa para codificar rotaciones físicas tridimensionales.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a quaternion from the specified vector and rotation parts.">Crea un cuaternión desde los elementos de vector y rotación especificados.</summary>
      <param name="vectorPart" vsli:raw="The vector part of the quaternion.">Elemento de vector del cuaternión.</param>
      <param name="scalarPart" vsli:raw="The rotation part of the quaternion.">Elemento de vector del cuaternión.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Constructs a quaternion from the specified components.">Construye un cuaternión a partir de los componentes especificados.</summary>
      <param name="x" vsli:raw="The value to assign to the X component of the quaternion.">Valor que se va a asignar al componente X del cuaternión.</param>
      <param name="y" vsli:raw="The value to assign to the Y component of the quaternion.">Valor que se va a asignar al componente Y del cuaternión.</param>
      <param name="z" vsli:raw="The value to assign to the Z component of the quaternion.">Valor que se va a asignar al componente Z del cuaternión.</param>
      <param name="w" vsli:raw="The value to assign to the W component of the quaternion.">Valor que se va a asignar al componente W del cuaternión.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Adds each element in one quaternion with its corresponding element in a second quaternion.">Agrega cada elemento en un cuaternión con su elemento correspondiente en un segundo cuaternión.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The quaternion that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Cuaternión que contiene los valores de la suma de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Concatenates two quaternions.">Concatena dos cuaterniones.</summary>
      <param name="value1" vsli:raw="The first quaternion rotation in the series.">Primera rotación de cuaternión de la serie.</param>
      <param name="value2" vsli:raw="The second quaternion rotation in the series.">Segunda rotación de cuaternión de la serie.</param>
      <returns vsli:raw="A new quaternion representing the concatenation of the &lt;paramref name=&quot;value1&quot; /&gt; rotation followed by the &lt;paramref name=&quot;value2&quot; /&gt; rotation.">Nuevo cuaternión que representa la concatenación de la rotación de <paramref name="value1" /> seguido por la rotación de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the conjugate of a specified quaternion.">Devuelve el valor conjugado de un cuaternión especificado.</summary>
      <param name="value" vsli:raw="The quaternion.">Cuaternión.</param>
      <returns vsli:raw="A new quaternion that is the conjugate of &lt;see langword=&quot;value&quot; /&gt;.">Nuevo cuaternión que es el conjugado de <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Creates a quaternion from a unit vector and an angle to rotate around the vector.">Crea un cuaternión a partir de un vector de unidad y un ángulo para girar en torno al vector.</summary>
      <param name="axis" vsli:raw="The unit vector to rotate around.">Vector de unidad en torno al que se va a girar.</param>
      <param name="angle" vsli:raw="The angle, in radians, to rotate around the vector.">Ángulo, en radianes, para girar alrededor del vector.</param>
      <returns vsli:raw="The newly created quaternion.">Cuaternión recién creado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary vsli:raw="Creates a quaternion from the specified rotation matrix.">Crea un cuaternión a partir de la matriz de rotación especificada.</summary>
      <param name="matrix" vsli:raw="The rotation matrix.">Matriz de rotación.</param>
      <returns vsli:raw="The newly created quaternion.">Cuaternión recién creado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a new quaternion from the given yaw, pitch, and roll.">Crea un nuevo cuaternión a partir de los valores especificados de rotación, rotación alrededor del eje X y rotación alrededor del eje Y.</summary>
      <param name="yaw" vsli:raw="The yaw angle, in radians, around the Y axis.">Ángulo de rotación alrededor del eje Y, en radianes.</param>
      <param name="pitch" vsli:raw="The pitch angle, in radians, around the X axis.">Ángulo de rotación alrededor del eje X, en radianes.</param>
      <param name="roll" vsli:raw="The roll angle, in radians, around the Z axis.">Ángulo de rotación alrededor del eje Z, en radianes.</param>
      <returns vsli:raw="The resulting quaternion.">Cuaternión resultante.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Divides one quaternion by a second quaternion.">Divide un cuaternión entre un segundo cuaternión.</summary>
      <param name="value1" vsli:raw="The dividend.">Dividendo.</param>
      <param name="value2" vsli:raw="The divisor.">Divisor.</param>
      <returns vsli:raw="The quaternion that results from dividing &lt;paramref name=&quot;value1&quot; /&gt; by &lt;paramref name=&quot;value2&quot; /&gt;.">Cuaternión resultante de dividir <paramref name="value1" /> entre <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Calculates the dot product of two quaternions.">Calcula el producto escalar de dos cuaterniones.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another quaternion are equal.">Devuelve un valor que indica si esta instancia y otro cuaternión son iguales.</summary>
      <param name="other" vsli:raw="The other quaternion.">Otro cuaternión.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two quaternions are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos cuaterniones son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary vsli:raw="Gets a quaternion that represents no rotation.">Obtiene un cuaternión que no representa nunguna rotación.</summary>
      <returns vsli:raw="A quaternion whose values are &lt;c&gt;(0, 0, 0, 1)&lt;/c&gt;.">Cuaternión cuyos valores son <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the inverse of a quaternion.">Devuelve el inverso de un cuaternión.</summary>
      <param name="value" vsli:raw="The quaternion.">Cuaternión.</param>
      <returns vsli:raw="The inverted quaternion.">Cuaternión invertido.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary vsli:raw="Gets a value that indicates whether the current instance is the identity quaternion.">Obtiene un valor que indica si la instancia actual es el cuaternión de identidad.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is the identity quaternion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual es el cuaternión de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary vsli:raw="Calculates the length of the quaternion.">Calcula la longitud del cuaternión.</summary>
      <returns vsli:raw="The computed length of the quaternion.">Longitud calculada del cuaternión.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary vsli:raw="Calculates the squared length of the quaternion.">Calcula la longitud al cuadrado del cuaternión.</summary>
      <returns vsli:raw="The length squared of the quaternion.">Longitud del cuaternión al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.">Realiza una interpolación lineal entre dos cuaterniones basándose en un valor que especifica la ponderación del segundo cuaternión.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <param name="amount" vsli:raw="The relative weight of &lt;paramref name=&quot;quaternion2&quot; /&gt; in the interpolation.">Peso relativo de <paramref name="quaternion2" /> en la interpolación.</param>
      <returns vsli:raw="The interpolated quaternion.">Cuaternión interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the quaternion that results from multiplying two quaternions together.">Devuelve el cuaternión resultante de multiplicar dos cuaterniones juntos.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The product quaternion.">Cuaternión de producto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.">Devuelve el cuaternión que resulta de la escala de todos los componentes de un cuaternión especificado por un factor escalar.</summary>
      <param name="value1" vsli:raw="The source quaternion.">Cuaternión de origen.</param>
      <param name="value2" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled quaternion.">Cuaternión escalado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary vsli:raw="Reverses the sign of each component of the quaternion.">Invierte el signo de cada componente del cuaternión.</summary>
      <param name="value" vsli:raw="The quaternion to negate.">Cuaternión que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated quaternion.">Cuaternión convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary vsli:raw="Divides each component of a specified &lt;see cref=&quot;T:System.Numerics.Quaternion&quot; /&gt; by its length.">Divide cada componente de un <see cref="T:System.Numerics.Quaternion" /> especificado ente su longitud.</summary>
      <param name="value" vsli:raw="The quaternion to normalize.">Cuaternión que se va a normalizar.</param>
      <returns vsli:raw="The normalized quaternion.">Cuaternión normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Adds each element in one quaternion with its corresponding element in a second quaternion.">Agrega cada elemento en un cuaternión con su elemento correspondiente en un segundo cuaternión.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The quaternion that contains the summed values of &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;.">Cuaternión que contiene los valores de la suma de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Divides one quaternion by a second quaternion.">Divide un cuaternión entre un segundo cuaternión.</summary>
      <param name="value1" vsli:raw="The dividend.">Dividendo.</param>
      <param name="value2" vsli:raw="The divisor.">Divisor.</param>
      <returns vsli:raw="The quaternion that results from dividing &lt;paramref name=&quot;value1&quot; /&gt; by &lt;paramref name=&quot;value2&quot; /&gt;.">Cuaternión resultante de dividir <paramref name="value1" /> entre <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether two quaternions are equal.">Devuelve un valor que indica si dos cuaterniones son iguales.</summary>
      <param name="value1" vsli:raw="The first quaternion to compare.">Primer cuaternión que se va a comparar.</param>
      <param name="value2" vsli:raw="The second quaternion to compare.">Segundo cuaternión que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two quaternions are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos cuaterniones son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns a value that indicates whether two quaternions are not equal.">Devuelve un valor que indica si dos cuaterniones no son iguales.</summary>
      <param name="value1" vsli:raw="The first quaternion to compare.">Primer cuaternión que se va a comparar.</param>
      <param name="value2" vsli:raw="The second quaternion to compare.">Segundo cuaternión que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Returns the quaternion that results from multiplying two quaternions together.">Devuelve el cuaternión resultante de multiplicar dos cuaterniones juntos.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The product quaternion.">Cuaternión de producto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.">Devuelve el cuaternión que resulta de la escala de todos los componentes de un cuaternión especificado por un factor escalar.</summary>
      <param name="value1" vsli:raw="The source quaternion.">Cuaternión de origen.</param>
      <param name="value2" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled quaternion.">Cuaternión escalado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Subtracts each element in a second quaternion from its corresponding element in a first quaternion.">Resta cada elemento de un segundo cuaternión del elemento correspondiente de un primer cuaternión.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The quaternion containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Cuaternión que contiene los valores resultantes de restar cada elemento <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary vsli:raw="Reverses the sign of each component of the quaternion.">Invierte el signo de cada componente del cuaternión.</summary>
      <param name="value" vsli:raw="The quaternion to negate.">Cuaternión que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated quaternion.">Cuaternión convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary vsli:raw="Interpolates between two quaternions, using spherical linear interpolation.">Interpola entre dos cuaterniones mediante la interpolación lineal esférica.</summary>
      <param name="quaternion1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="quaternion2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <param name="amount" vsli:raw="The relative weight of the second quaternion in the interpolation.">Peso relativo del segundo cuaternión en la interpolación.</param>
      <returns vsli:raw="The interpolated quaternion.">Cuaternión interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary vsli:raw="Subtracts each element in a second quaternion from its corresponding element in a first quaternion.">Resta cada elemento de un segundo cuaternión del elemento correspondiente de un primer cuaternión.</summary>
      <param name="value1" vsli:raw="The first quaternion.">Primer cuaternión.</param>
      <param name="value2" vsli:raw="The second quaternion.">Segundo cuaternión.</param>
      <returns vsli:raw="The quaternion containing the values that result from subtracting each element in &lt;paramref name=&quot;value2&quot; /&gt; from its corresponding element in &lt;paramref name=&quot;value1&quot; /&gt;.">Cuaternión que contiene los valores resultantes de restar cada elemento <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary vsli:raw="Returns a string that represents this quaternion.">Devuelve una cadena que representa este cuaternión.</summary>
      <returns vsli:raw="The string representation of this quaternion.">Representación de cadena de este cuaternión.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary vsli:raw="The rotation component of the quaternion.">Componente de rotación del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary vsli:raw="The X value of the vector component of the quaternion.">Valor X del componente de vector del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary vsli:raw="The Y value of the vector component of the quaternion.">Valor Y del componente de vector del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary vsli:raw="The Z value of the vector component of the quaternion.">Valor Z del componente de vector del cuaternión.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary vsli:raw="Provides a collection of static methods for creating, manipulating, and otherwise operating on generic vectors.">Proporciona una colección de métodos estáticos para crear, manipular, combinar y convertir vectores genéricos.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the absolute values of the given vector's elements.">Devuelve un nuevo vector cuyos elementos son los valores absolutos de los elementos del vector especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The absolute value vector.">Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the sum of each pair of elements from two given vectors.">Devuelve un nuevo vector cuyos valores son la suma de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.">Devuelve un nuevo vector realizando una operación bit a bit AND NOT en cada par de elementos correspondientes de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.">Reinterpreta los bits de un vector especificado en los de un vector de bytes sin signo.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.">Reinterpreta los bits de un vector especificado en los de un vector de punto flotante de doble precisión.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros de 16 bits.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of long integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros largos.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of signed bytes.">Reinterpreta los bits de un vector especificado en los de un vector de bytes con signo.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.">Reinterpreta los bits de un vector especificado en los de un vector de punto flotante de precisión sencilla.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros de 16 bits sin signo.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros sin signo.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.">Reinterpreta los bits de un vector especificado en los de un vector de enteros largos sin signo.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on each pair of elements in two vectors.">Devuelve un nuevo vector realizando una operación <see langword="And" /> bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on each pair of elements in two vectors.">Devuelve un nuevo vector realizando una operación <see langword="Or" /> bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.">Crea un nuevo vector de precisión sencilla con elementos seleccionados entre dos vectores de origen de precisión sencilla especificados según un vector de máscara entero.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left" vsli:raw="The first source vector.">Primer vector de origen.</param>
      <param name="right" vsli:raw="The second source vector.">Segundo vector de origen.</param>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.">Crea un nuevo vector de doble precisión con elementos seleccionados entre dos vectores de origen de doble precisión especificados según un vector de máscara entero.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left" vsli:raw="The first source vector.">Primer vector de origen.</param>
      <param name="right" vsli:raw="The second source vector.">Segundo vector de origen.</param>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.">Crea un nuevo vector de un tipo especificado con elementos seleccionados entre dos vectores de origen especificados del mismo tipo según un vector de máscara entero.</summary>
      <param name="condition" vsli:raw="The integral mask vector used to drive selection.">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left" vsli:raw="The first source vector.">Primer vector de origen.</param>
      <param name="right" vsli:raw="The second source vector.">Segundo vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The new vector with elements selected based on the mask.">Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Int64}" /> en <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.UInt64}" /> en <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Single}" /> en <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Double}" /> en <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Int32}" /> en <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.UInt32}" /> en <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Single}" /> en <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Converts a &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; to a &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt;.">Convierte <see cref="System.Numerics.Vector{System.Double}" /> en <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The converted vector.">Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.">Devuelve un nuevo vector cuyos valores son el resultado de dividir los elementos del primer vector por los elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The divided vector.">Vector dividido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns the dot product of two vectors.">Devuelve el producto escalar de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores de doble precisión especificados son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores enteros especificados son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores enteros largos especificados son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting long integer vector.">Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores de precisión sencilla especificados son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.">Devuelve un nuevo vector de un tipo especificado cuyos elementos indican si los elementos de los dos vectores especificados del mismo tipo son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in the given vectors is equal.">Devuelve un valor que indica si cada par de elementos de los vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de <paramref name="left" /> y <paramref name="right" /> son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any single pair of elements in the given vectors is equal.">Devuelve un valor que indica si cada par de elementos individual de los vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element pair in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; is equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún par elementos de <paramref name="left" /> y <paramref name="right" /> es igual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son mayores que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son mayores que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.">Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son mayores que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting long integer vector.">Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de precisión sencilla son mayores que sus elementos correspondientes de un segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.">Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector de un tipo especificado son mayores que sus elementos correspondientes del segundo vector del mismo tipo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.">Devuelve un valor que indica si todos los elementos del primer vector son mayores que los elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; are greater than the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son mayores que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.">Devuelve un valor que indica si algún elemento del primer vector es mayor que el elemento correspondiente del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is greater than the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de <paramref name="left" /> es mayor que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector son mayores o iguales que sus elementos correspondientes del segundo vector de punto flotante de doble precisión.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son mayores o iguales que sus elementos correspondientes del segundo vector entero.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.">Devuelve un nuevo nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son mayores o iguales que sus elementos correspondientes del segundo vector entero largo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting long integer vector.">Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector son mayores o iguales que sus elementos correspondientes del segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.">Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector de un tipo especificado son mayores o iguales que sus elementos correspondientes del segundo vector del mismo tipo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.">Devuelve un valor que indica si todos los elementos del primer vector son mayores o iguales que todos los elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all elements in &lt;paramref name=&quot;left&quot; /&gt; are greater than or equal to the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son mayores o iguales que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.">Devuelve un valor que indica si algún elemento del primer vector es mayor o igual que el elemento correspondiente del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is greater than or equal to the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de <paramref name="left" /> es mayor o igual que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary vsli:raw="Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.">Obtiene un valor que indica si las operaciones de vector están sujetas a la aceleración de hardware mediante la compatibilidad intrínseca de JIT.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if vector operations are subject to hardware acceleration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las operaciones de vector están sujetas a la aceleración de hardware; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son menores que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son menores que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.">Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son menores que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting long integer vector.">Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de precisión sencilla son menores que sus elementos correspondientes de un segundo vector de precisión sencilla.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.">Devuelve un nuevo vector de un tipo especificado cuyos elementos indican si los elementos de un vector son menores que sus elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.">Devuelve un valor que indica si todos los elementos del primer vector son menores que los elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all of the elements in &lt;paramref name=&quot;left&quot; /&gt; are less than the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son menores que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.">Devuelve un valor que indica si algún elemento elemento del primer vector es menor que el elemento correspondiente del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is less than the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de <paramref name="left" /> es menor que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son menores o iguales que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son menores o iguales que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.">Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son menores o iguales que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting long integer vector.">Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary vsli:raw="Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.">Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de precisión sencilla son menores o iguales que sus elementos correspondientes de un segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="The resulting integral vector.">Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.">Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector son menores o iguales que sus elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.">Devuelve un valor que indica si todos los elementos del primer vector son menores o iguales que los elementos correspondientes del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all of the elements in &lt;paramref name=&quot;left&quot; /&gt; are less than or equal to the corresponding elements in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son menores o iguales que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.">Devuelve un valor que indica si algún elemento del primer vector es menor o igual que el elemento correspondiente del segundo vector.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element in &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to the corresponding element in &lt;paramref name=&quot;right&quot; /&gt;; otherwise,  &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de <paramref name="left" /> es menor o igual que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.">Devuelve un nuevo vector cuyos elementos son el máximo de cada par de elementos de dos vectores dados.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The maximum vector.">Vector máximo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.">Devuelve un nuevo vector cuyos elementos son el mínimo de cada par de elementos de dos vectores dados.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The minimum vector.">Vector mínimo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.">Devuelve un nuevo vector cuyos valores son un valor escalar multiplicado por cada uno de los valores de un vector especificado.</summary>
      <param name="left" vsli:raw="The scalar value.">Valor escalar.</param>
      <param name="right" vsli:raw="The vector.">Vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary vsli:raw="Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.">Devuelve un nuevo vector cuyos valores son los valores de un vector especificado, multiplicado cada uno por un valor escalar.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.Double}" /> a un objeto <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.Single}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int16}" /> a un objeto <see cref="System.Numerics.Vector{System.SByte}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.SByte}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int32}" /> a un objeto <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.Int16}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int64}" /> a un objeto <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.Int32}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt16}" /> a un objeto <see cref="System.Numerics.Vector{System.Byte}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.Byte}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt32}" /> a un objeto <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.UInt16}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary vsli:raw="Narrows two &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; instances into one &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt;.">Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt64}" /> a un objeto <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns vsli:raw="A &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; containing elements narrowed from the source vectors.">Objeto <see cref="System.Numerics.Vector{System.UInt32}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the negation of the corresponding element in the specified vector.">Devuelve un nuevo vector cuyos elementos son la negación del elemento correspondiente del vector especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.">Devuelve un nuevo vector cuyos elementos se obtienen tomando el complemento de uno de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose elements are the square roots of a specified vector's elements.">Devuelve un nuevo vector cuyos elementos son la raíz cuadrada de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The square root vector.">Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.">Devuelve un nuevo vector cuyos valores son la diferencia entre los elementos del segundo vector y los elementos correspondientes del primer vector.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The difference vector.">Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Byte&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.Byte}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.Int16}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Int32&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int64&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.Int32}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;SByte&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Int16&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.SByte}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;Single&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;Double&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.Single}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;UInt16&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.UInt16}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary vsli:raw="Widens a &lt;c&gt;Vector&amp;lt;UInt32&amp;gt;&lt;/c&gt; into two &lt;c&gt;Vector&amp;lt;UInt64&amp;gt;&lt;/c&gt; instances.">Amplía un objeto <see cref="System.Numerics.Vector{System.UInt32}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="source" vsli:raw="The source vector whose elements are widened into the outputs.">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise exclusive Or (&lt;see langword=&quot;XOr&quot; /&gt;) operation on each pair of elements in two vectors.">Devuelve un nuevo vector realizando una operación O exclusiva (<see langword="XOr" />) bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <typeparam name="T" vsli:raw="The vector type. &lt;c&gt;T&lt;/c&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns vsli:raw="The resulting vector.">Vector resultante.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary vsli:raw="Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.">Representa un vector único de un tipo numérico especificado que es adecuado para la optimización de bajo nivel de algoritmos paralelos.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the vector. &lt;typeparamref name=&quot;T&quot; /&gt; can be any primitive numeric type.">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary vsli:raw="Creates a vector whose components are of a specified type.">Crea un vector cuyos componentes son de un tipo especificado.</summary>
      <param name="value" vsli:raw="The numeric type that defines the type of the components in the vector.">Tipo numérico que define el tipo de los componentes del vector.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary vsli:raw="Creates a vector from a specified array.">Crea un vector a partir de una matriz especificada.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as an array of objects of type T. The array must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Matriz numérica.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary vsli:raw="Creates a vector from a specified array starting at a specified index position.">Crea un vector a partir de una matriz especificada comenzando en una posición de índice especificada.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as an array of objects of type T. The array must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements from the specified index and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Matriz numérica.</param>
      <param name="index" vsli:raw="The starting index position from which to create the vector.">Posición de índice inicial a partir de la cual se va a crear el vector.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;values&quot; /&gt; minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
O bien 
La longitud de <paramref name="values" /> menos <paramref name="index" /> es menor que <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Constructs a vector from the given &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">Construye un vector a partir del objeto <see cref="T:System.ReadOnlySpan`1" /> dado.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as a read-only span of objects of type &lt;see langword=&quot;T&quot; /&gt;. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Valores que se van a agregar al vector, como un intervalo de solo lectura de objetos de tipo T. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Constructs a vector from the given read-only span of bytes.">Construye un vector a partir del intervalo de bytes de solo lectura dado.</summary>
      <param name="values" vsli:raw="A read-only span of bytes that contains the values to add to the vector. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Intervalo de bytes de solo lectura que contiene los valores que se van a agregar al vector. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary vsli:raw="Constructs a vector from the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Construye un vector a partir del objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="values" vsli:raw="The values to add to the vector, as a span of objects of type T. The span must contain at least &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements and only the first &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt; elements are used.">Valores que se van a agregar al vector, como un intervalo de objetos de tipo T. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the vector instance to a specified destination array.">Copia la instancia de vector en una matriz de destino especificada.</summary>
      <param name="destination" vsli:raw="The array to receive a copy of the vector values.">Matriz que se va a recibir una copia de los valores del vector.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current vector is greater than the number of elements available in the &lt;paramref name=&quot;destination&quot; /&gt; array.">El número de elementos del vector actual es mayor que el número de elementos disponibles en la matriz <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the vector instance to a specified destination array starting at a specified index position.">Copia la instancia de vector en una matriz de destino especificada a partir de una posición de índice especificada.</summary>
      <param name="destination" vsli:raw="The array to receive a copy of the vector values.">Matriz que se va a recibir una copia de los valores del vector.</param>
      <param name="startIndex" vsli:raw="The starting index in &lt;paramref name=&quot;destination&quot; /&gt; at which to begin the copy operation.">Índice inicial de <paramref name="destination" /> donde debe comenzar la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than the number of elements available from &lt;paramref name=&quot;startIndex&quot; /&gt; to the end of the &lt;paramref name=&quot;destination&quot; /&gt; array.">El número de elementos de la instancia actual es mayor que el número de elementos disponibles desde <paramref name="startIndex" /> hasta el final de la matriz <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than the last index in &lt;paramref name=&quot;destination&quot; /&gt;.">
        <paramref name="index" /> es menor que cero o mayor que el último indice de <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary vsli:raw="Copies the vector to the given span. .">Copia el vector en el intervalo determinado. .</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source vector is greater than those available in the destination span.">El número de elementos del vector de origen es mayor que los que hay disponibles en el intervalo de destino.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary vsli:raw="Copies the vector to the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Copia el vector en el objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source vector is greater than those available in the destination span.">El número de elementos del vector de origen es mayor que los que hay disponibles en el intervalo de destino.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary vsli:raw="Returns the number of elements stored in the vector.">Devuelve el número de elementos almacenado en el vector.</summary>
      <returns vsli:raw="The number of elements stored in the vector.">Número de elementos almacenado en el vector.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Access to the property getter via reflection is not supported.&#xA;        &#xA;-or-&#xA;        &#xA;.NET 5 and later: Type &lt;see langword=&quot;T&quot; /&gt; is not supported.">No se admite el acceso al captador de propiedad mediante reflexión.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified vector.">Devuelve un valor que indica si esta instancia es igual que un vector especificado.</summary>
      <param name="other" vsli:raw="The vector to compare with this instance.">Vector con el que se va a comparar esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;other&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="other" /> son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">Objeto que se va a comparar con esta instancia.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is null, or if &lt;paramref name=&quot;obj&quot; /&gt; is a vector of a different type than the current instance.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. El método devuelve <see langword="false" /> si <paramref name="obj" /> es NULL o si <paramref name="obj" /> es un vector de un tipo diferente al de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at a specified index.">Obtiene el elemento situado en un índice especificado.</summary>
      <param name="index" vsli:raw="The index of the element to return.">Índice del elemento que se va a devolver.</param>
      <returns vsli:raw="The element at index &lt;paramref name=&quot;index&quot; /&gt;.">Elemento situado en el índice <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary vsli:raw="Returns a vector containing all ones.">Devuelve un vector que únicamente contiene unos.</summary>
      <returns vsli:raw="A vector containing all ones.">Vector que contiene únicamente unos.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on each of the elements in two vectors.">Devuelve un nuevo vector realizando una operación <see langword="And" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;And&quot; /&gt; of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de la operación <see langword="And" /> bit a bit de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on each of the elements in two vectors.">Devuelve un nuevo vector realizando una operación <see langword="Or" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;Or&quot; /&gt; of the elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de la operación <see langword="Or" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors are equal.">Devuelve un valor que indica si cada par de elementos de los dos vectores especificados son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector by performing a bitwise &lt;see langword=&quot;XOr&quot; /&gt; operation on each of the elements in two vectors.">Devuelve un nuevo vector realizando una operación <see langword="XOr" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from the bitwise &lt;see langword=&quot;XOr&quot; /&gt; of the elements in &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de la operación <see langword="XOr" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary vsli:raw="Reinterprets the bits of the specified vector into a vector of type &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="The vector to reinterpret.">Vector que se va a reinterpretar.</param>
      <returns vsli:raw="The reinterpreted vector.">Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a value that indicates whether any single pair of elements in the specified vectors is equal.">Devuelve un valor que indica si cada par de elementos de los vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any element pairs in left and right are equal. &lt;see langword=&quot;false&quot; /&gt; if no element pairs are equal.">
        <see langword="true" /> si los pares de elementos de la izquierda y la derecha son iguales. <see langword="false" /> si no hay ningún par de elementos iguales.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary vsli:raw="Multiplies a vector by a specified scalar value.">Multiplica un vector por un valor escalar especificado.</summary>
      <param name="factor" vsli:raw="The scalar value.">Valor escalar.</param>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary vsli:raw="Multiplies a vector by a specified scalar value.">Multiplica un vector por un valor escalar especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="factor" vsli:raw="A scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary vsli:raw="Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.">Devuelve un nuevo vector cuyos elementos se obtienen tomando el complemento de uno de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="The source vector.">Vector de origen.</param>
      <returns vsli:raw="The one's complement vector.">Vector complemento de uno.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary vsli:raw="Negates a given vector.">Convierte en negativo un vector concreto.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary vsli:raw="Returns the string representation of this vector using default formatting.">Devuelve la representación de cadena de este vector usando el formato predeterminado.</summary>
      <returns vsli:raw="The string representation of this vector.">Representación de cadena de este vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of this vector using the specified format string to format individual elements.">Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales.</summary>
      <param name="format" vsli:raw="The format of individual elements.">o  que define el formato de los elementos individuales.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format" vsli:raw="The format of individual elements.">o  que define el formato de los elementos individuales.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Attempts to copy the vector to the given &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Intenta copiar el vector en el objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source vector was successfully copied to &lt;paramref name=&quot;destination&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is not large enough to hold the source vector.">
        <see langword="true" /> si el vector de origen se copió correctamente en <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> no es lo suficientemente grande como para contener el vector de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary vsli:raw="Attempts to copy the vector to the given byte span.">Intenta copiar el vector en el intervalo de bytes especificado.</summary>
      <param name="destination" vsli:raw="The destination span to which the values are copied. The destination span must be at least size &lt;see cref=&quot;P:System.Numerics.Vector`1.Count&quot; /&gt;.">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source vector was successfully copied to &lt;paramref name=&quot;destination&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is not large enough to hold the source vector.">
        <see langword="true" /> si el vector de origen se copió correctamente en <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> no es lo suficientemente grande como para contener el vector de origen.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary vsli:raw="Returns a vector containing all zeroes.">Devuelve un vector que únicamente contiene ceros.</summary>
      <returns vsli:raw="A vector containing all zeroes.">Vector que contiene únicamente  ceros.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary vsli:raw="Represents a vector with two single-precision floating-point values.">Representa un vector con dos valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object whose two elements have the same value.">Crea un nuevo objeto <see cref="T:System.Numerics.Vector2" /> cuyos dos elementos tienen el mismo valor.</summary>
      <param name="value" vsli:raw="The value to assign to both elements.">Valor que se va a asignar a ambos elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector2.X&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector2.Y&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The absolute value vector.">Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vector que se va a restringir.</param>
      <param name="min" vsli:raw="The minimum value.">Valor mínimo.</param>
      <param name="max" vsli:raw="The maximum value.">Valor máximo.</param>
      <returns vsli:raw="The restricted vector.">Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance.">Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance squared.">Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector resulting from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The vector that results from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the dot product of two vectors.">Devuelve el producto escalar de dos vectores.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other" vsli:raw="The other vector.">Otro vector.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary vsli:raw="Returns the length of the vector.">Devuelve la longitud del vector.</summary>
      <returns vsli:raw="The vector's length.">Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Devuelve la longitud al cuadrado del vector.</summary>
      <returns vsli:raw="The vector's length squared.">Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The maximized vector.">Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The minimized vector.">Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vector que se va a multiplicar.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left" vsli:raw="The scaled value.">Valor escalado.</param>
      <param name="right" vsli:raw="The vector.">Vector.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary vsli:raw="Negates a specified vector.">Convierte en negativo un vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="value" vsli:raw="The vector to normalize.">Vector que se va a normalizar.</param>
      <returns vsli:raw="The normalized vector.">Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary vsli:raw="Gets a vector whose 2 elements are equal to one.">Obtiene un vector cuyos 2 elementos son iguales a uno.</summary>
      <returns vsli:raw="A vector whose two elements are equal to one (that is, it returns the vector &lt;c&gt;(1,1)&lt;/c&gt;).">Vector cuyos dos elementos son iguales a uno (es decir, devuelve el vector <c>(1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1" vsli:raw="The vector.">Vector.</param>
      <param name="value2" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The result of the division.">Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary vsli:raw="Negates the specified vector.">Convierte en negativo el vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Returns the reflection of a vector off a surface that has the specified normal.">Devuelve la reflexión de un vector en una superficie con la normal especificada.</summary>
      <param name="vector" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="normal" vsli:raw="The normal of the surface being reflected off.">Valor normal de la superficie que se refleja.</param>
      <returns vsli:raw="The reflected vector.">Vector reflejado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The square root vector.">Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The difference vector.">Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Transforms a vector by a specified 3x2 matrix.">Transforma un vector por una matriz de 3 x 2 especificada.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector by a specified 4x4 matrix.">Transforma un vector por una matriz de 4 x 4 especificada.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a vector by the specified Quaternion rotation value.">Transforma un vector por el valor de rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vector que se va a girar.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary vsli:raw="Transforms a vector normal by the given 3x2 matrix.">Transforma el valor normal de un vector por la matriz de 3 x 2 especificada.</summary>
      <param name="normal" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="matrix" vsli:raw="The matrix.">Matriz.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector normal by the given 4x4 matrix.">Transforma un vector normal por la matriz especificada de 4 x 4.</summary>
      <param name="normal" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="matrix" vsli:raw="The matrix.">Matriz.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary vsli:raw="Gets the vector (1,0).">Obtiene el vector (1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0)&lt;/c&gt;.">Vector <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary vsli:raw="Gets the vector (0,1).">Obtiene el vector (0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1)&lt;/c&gt;.">Vector <c>(0,0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary vsli:raw="The X component of the vector.">Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary vsli:raw="The Y component of the vector.">Componente Y del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary vsli:raw="Returns a vector whose 2 elements are equal to zero.">Devuelve un vector cuyos 2 elementos son iguales a cero.</summary>
      <returns vsli:raw="A vector whose two elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0)&lt;/c&gt;).">Vector cuyos dos elementos son iguales a cero (es decir, devuelve el vector <c>(0,0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary vsli:raw="Represents a vector with three  single-precision floating-point values.">Representa un vector con tres valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary vsli:raw="Creates a   new &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object and the specified value.">Crea un nuevo objeto <see cref="T:System.Numerics.Vector3" /> a partir de objeto <see cref="T:System.Numerics.Vector2" /> y el valor especificados.</summary>
      <param name="value" vsli:raw="The vector with two elements.">Vector con dos elementos.</param>
      <param name="z" vsli:raw="The additional value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Z&quot; /&gt; field.">Valor adicional que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object whose three elements have the same value.">Crea un nuevo objeto <see cref="T:System.Numerics.Vector3" /> cuyos tres elementos tienen el mismo valor.</summary>
      <param name="value" vsli:raw="The value to assign to all three elements.">Valor que se va a asignar a los tres elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.X&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Y&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector3.Z&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The absolute value vector.">Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vector que se va a restringir.</param>
      <param name="min" vsli:raw="The minimum value.">Valor mínimo.</param>
      <param name="max" vsli:raw="The maximum value.">Valor máximo.</param>
      <returns vsli:raw="The restricted vector.">Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Computes the cross product of two vectors.">Calcula el producto cruzado de dos vectores.</summary>
      <param name="vector1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="vector2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The cross product.">Producto cruzado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance.">Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance squared.">Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector resulting from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The vector that results from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the dot product of two vectors.">Devuelve el producto escalar de dos vectores.</summary>
      <param name="vector1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="vector2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other" vsli:raw="The other vector.">Otro vector.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary vsli:raw="Returns the length of this vector object.">Devuelve la longitud de este objeto vector.</summary>
      <returns vsli:raw="The vector's length.">Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Devuelve la longitud al cuadrado del vector.</summary>
      <returns vsli:raw="The vector's length squared.">Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The maximized vector.">Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The minimized vector.">Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vector que se va a multiplicar.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left" vsli:raw="The scaled value.">Valor escalado.</param>
      <param name="right" vsli:raw="The vector.">Vector.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary vsli:raw="Negates a specified vector.">Convierte en negativo un vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="value" vsli:raw="The vector to normalize.">Vector que se va a normalizar.</param>
      <returns vsli:raw="The normalized vector.">Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary vsli:raw="Gets a vector whose 3 elements are equal to one.">Obtiene un vector cuyos 3 elementos son iguales a uno.</summary>
      <returns vsli:raw="A vector whose three elements are equal to one (that is, it returns the vector &lt;c&gt;(1,1,1)&lt;/c&gt;).">Vector cuyos tres elementos son iguales a uno (es decir, devuelve el vector <c>(1, 1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1" vsli:raw="The vector.">Vector.</param>
      <param name="value2" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The result of the division.">Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary vsli:raw="Negates the specified vector.">Convierte en negativo el vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Returns the reflection of a vector off a surface that has the specified normal.">Devuelve la reflexión de un vector en una superficie con la normal especificada.</summary>
      <param name="vector" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="normal" vsli:raw="The normal of the surface being reflected off.">Valor normal de la superficie que se refleja.</param>
      <returns vsli:raw="The reflected vector.">Vector reflejado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The square root vector.">Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The difference vector.">Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector by a specified 4x4 matrix.">Transforma un vector por una matriz de 4 x 4 especificada.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a vector by the specified Quaternion rotation value.">Transforma un vector por el valor de rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vector que se va a girar.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a vector normal by the given 4x4 matrix.">Transforma un vector normal por la matriz especificada de 4 x 4.</summary>
      <param name="normal" vsli:raw="The source vector.">Vector de origen.</param>
      <param name="matrix" vsli:raw="The matrix.">Matriz.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary vsli:raw="Gets the vector (1,0,0).">Obtiene el vector (1,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0,0)&lt;/c&gt;.">Vector <c>(1, 0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary vsli:raw="Gets the vector (0,1,0).">Obtiene el vector (0,1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1,0)&lt;/c&gt;.">Vector <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary vsli:raw="Gets the vector (0,0,1).">Obtiene el vector (0,0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,1)&lt;/c&gt;.">Vector <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary vsli:raw="The X component of the vector.">Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary vsli:raw="The Y component of the vector.">Componente Y del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary vsli:raw="The Z component of the vector.">Componente Z del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary vsli:raw="Gets a vector whose 3 elements are equal to zero.">Obtiene un vector cuyos 3 elementos son iguales a cero.</summary>
      <returns vsli:raw="A vector whose three elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0,0)&lt;/c&gt;).">Vector cuyos tres elementos son iguales a cero (es decir, devuelve el vector <c>(0,0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary vsli:raw="Represents a vector with four single-precision floating-point values.">Representa un vector con cuatro valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary vsli:raw="Creates a   new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector2&quot; /&gt; object and a Z and a W component.">Crea un nuevo objeto <see cref="T:System.Numerics.Vector4" /> a partir del objeto <see cref="T:System.Numerics.Vector2" /> especificado y un componente W y Z.</summary>
      <param name="value" vsli:raw="The vector to use for the X and Y components.">Vector que se va a usar para los componentes de X e Y.</param>
      <param name="z" vsli:raw="The Z component.">Componente Z.</param>
      <param name="w" vsli:raw="The W component.">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object from the specified &lt;see cref=&quot;T:System.Numerics.Vector3&quot; /&gt; object and a W component.">Construye un nuevo objeto <see cref="T:System.Numerics.Vector4" />  a partir del objeto <see cref="T:System.Numerics.Vector3" /> especificado y un componente W.</summary>
      <param name="value" vsli:raw="The vector to use for the X, Y, and Z components.">Vector que se va a usar para los componentes X, Y y Z.</param>
      <param name="w" vsli:raw="The W component.">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt; object whose four elements have the same value.">Crea un nuevo objeto <see cref="T:System.Numerics.Vector4" /> cuyos cuatro elementos tienen el mismo valor.</summary>
      <param name="value" vsli:raw="The value to assign to all four elements.">Valor que se va a asignar a los cuatro elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary vsli:raw="Creates a vector whose elements have the specified values.">Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.X&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.Y&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.Z&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w" vsli:raw="The value to assign to the &lt;see cref=&quot;F:System.Numerics.Vector4.W&quot; /&gt; field.">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the absolute values of each of the specified vector's elements.">Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The absolute value vector.">Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Restricts a vector between a minimum and a maximum value.">Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1" vsli:raw="The vector to restrict.">Vector que se va a restringir.</param>
      <param name="min" vsli:raw="The minimum value.">Valor mínimo.</param>
      <param name="max" vsli:raw="The maximum value.">Valor máximo.</param>
      <returns vsli:raw="The restricted vector.">Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary vsli:raw="Copies the elements of the vector to a specified array.">Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary vsli:raw="Copies the elements of the vector to a specified array starting at a specified index position.">Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array" vsli:raw="The destination array.">Matriz de destino.</param>
      <param name="index" vsli:raw="The index at which to copy the first element of the vector.">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the current instance is greater than in the array.">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the array length.">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Computes the Euclidean distance between the two given points.">Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance.">Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns the Euclidean distance squared between two specified points.">Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1" vsli:raw="The first point.">Primer punto.</param>
      <param name="value2" vsli:raw="The second point.">Segundo punto.</param>
      <returns vsli:raw="The distance squared.">Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector resulting from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="divisor" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The vector that results from the division.">Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns the dot product of two vectors.">Devuelve el producto escalar de dos vectores.</summary>
      <param name="vector1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="vector2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The dot product.">Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether this instance and another vector are equal.">Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other" vsli:raw="The other vector.">Otro vector.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two vectors are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance and a specified object are equal.">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Objeto que se va a comparar con la instancia actual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Devuelve el código hash de esta instancia.</summary>
      <returns vsli:raw="The hash code.">Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary vsli:raw="Returns the length of this vector object.">Devuelve la longitud de este objeto vector.</summary>
      <returns vsli:raw="The vector's length.">Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary vsli:raw="Returns the length of the vector squared.">Devuelve la longitud al cuadrado del vector.</summary>
      <returns vsli:raw="The vector's length squared.">Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Performs a linear interpolation between two vectors based on the given weighting.">Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <param name="amount" vsli:raw="A value between 0 and 1 that indicates the weight of &lt;paramref name=&quot;value2&quot; /&gt;.">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns vsli:raw="The interpolated vector.">Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The maximized vector.">Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.">Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1" vsli:raw="The first vector.">Primer vector.</param>
      <param name="value2" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The minimized vector.">Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Multiplies a vector by a specified scalar.">Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector to multiply.">Vector que se va a multiplicar.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary vsli:raw="Multiplies a scalar value by a specified vector.">Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left" vsli:raw="The scaled value.">Valor escalado.</param>
      <param name="right" vsli:raw="The vector.">Vector.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary vsli:raw="Negates a specified vector.">Convierte en negativo un vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector with the same direction as the specified vector, but with a length of one.">Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="vector" vsli:raw="The vector to normalize.">Vector que se va a normalizar.</param>
      <returns vsli:raw="The normalized vector.">Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary vsli:raw="Gets a vector whose 4 elements are equal to one.">Obtiene un vector cuyos 4 elementos son iguales a uno.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Numerics.Vector4&quot; /&gt;.">Devuelva <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Adds two vectors together.">Suma dos vectores.</summary>
      <param name="left" vsli:raw="The first vector to add.">Primer vector que se va a agregar.</param>
      <param name="right" vsli:raw="The second vector to add.">Segundo vector que se va a agregar.</param>
      <returns vsli:raw="The summed vector.">Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Divides the first vector by the second.">Divide el primer vector entre el segundo.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Divides the specified vector by a specified scalar value.">Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1" vsli:raw="The vector.">Vector.</param>
      <param name="value2" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The result of the division.">Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether each pair of elements in two specified vectors is equal.">Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a value that indicates whether two specified vectors are not equal.">Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left" vsli:raw="The first vector to compare.">Primer vector que se va a comparar.</param>
      <param name="right" vsli:raw="The second vector to compare.">Segundo vector que se va a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Returns a new vector whose values are the product of each pair of elements in two specified vectors.">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The element-wise product vector.">El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary vsli:raw="Multiples the specified vector by the specified scalar value.">Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary vsli:raw="Multiples the scalar value by the specified vector.">Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left" vsli:raw="The vector.">Vector.</param>
      <param name="right" vsli:raw="The scalar value.">Valor escalar.</param>
      <returns vsli:raw="The scaled vector.">Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The vector that results from subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary vsli:raw="Negates the specified vector.">Convierte en negativo el vector especificado.</summary>
      <param name="value" vsli:raw="The vector to negate.">Vector que se va a convertir en negativo.</param>
      <returns vsli:raw="The negated vector.">Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary vsli:raw="Returns a vector whose elements are the square root of each of a specified vector's elements.">Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value" vsli:raw="A vector.">Vector.</param>
      <returns vsli:raw="The square root vector.">Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary vsli:raw="Subtracts the second vector from the first.">Resta el segundo vector del primero.</summary>
      <param name="left" vsli:raw="The first vector.">Primer vector.</param>
      <param name="right" vsli:raw="The second vector.">Segundo vector.</param>
      <returns vsli:raw="The difference vector.">Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary vsli:raw="Returns the string representation of the current instance using default formatting.">Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.">Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string that defines the format of individual elements.">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider" vsli:raw="A format provider that supplies culture-specific formatting information.">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns vsli:raw="The string representation of the current instance.">Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a two-dimensional vector by a specified 4x4 matrix.">Transforma un vector bidimensional mediante una matriz de 4 x 4 especificada.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a two-dimensional vector by the specified Quaternion rotation value.">Transforma un vector bidimensional mediante el valor de rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vector que se va a girar.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a three-dimensional vector by a specified 4x4 matrix.">Transforma un vector tridimensional mediante una matriz de 4 x 4 especificada.</summary>
      <param name="position" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a three-dimensional vector by the specified Quaternion rotation value.">Transforma un vector tridimensional en el valor de rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vector que se va a girar.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary vsli:raw="Transforms a four-dimensional vector by a specified 4x4 matrix.">Transforma un vector de cuatro dimensiones mediante una matriz de 4 x 4 especificada.</summary>
      <param name="vector" vsli:raw="The vector to transform.">Vector que se va a transformar.</param>
      <param name="matrix" vsli:raw="The transformation matrix.">Matriz de transformación.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary vsli:raw="Transforms a four-dimensional vector by the specified Quaternion rotation value.">Transforma un vector de cuatro dimensiones mediante el valor de rotación del cuaternión especificado.</summary>
      <param name="value" vsli:raw="The vector to rotate.">Vector que se va a girar.</param>
      <param name="rotation" vsli:raw="The rotation to apply.">Rotación que se va a aplicar.</param>
      <returns vsli:raw="The transformed vector.">Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary vsli:raw="Gets the vector (0,0,0,1).">Obtiene el vector (0,0,0,1).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,0,1)&lt;/c&gt;.">Vector <c>(0,0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary vsli:raw="Gets the vector (1,0,0,0).">Obtiene el vector (1,0,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(1,0,0,0)&lt;/c&gt;.">Vector <c>(1,0, 0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary vsli:raw="Gets the vector (0,1,0,0).">Obtiene el vector (0,1,0,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,1,0,0)&lt;/c&gt;.">Vector <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary vsli:raw="Gets the vector (0,0,1,0).">Obtiene el vector (0,0,1,0).</summary>
      <returns vsli:raw="The vector &lt;c&gt;(0,0,1,0)&lt;/c&gt;.">Vector <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary vsli:raw="The W component of the vector.">Componente W del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary vsli:raw="The X component of the vector.">Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary vsli:raw="The Y component of the vector.">Componente Y del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary vsli:raw="The Z component of the vector.">Componente Z del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary vsli:raw="Gets a vector whose 4 elements are equal to zero.">Obtiene un vector cuyos 4 cuyos elementos son iguales a cero.</summary>
      <returns vsli:raw="A vector whose four elements are equal to zero (that is, it returns the vector &lt;c&gt;(0,0,0,0)&lt;/c&gt;).">Vector cuyos cuatro elementos son iguales a cero (es decir, devuelve el vector <c>(0,0</c>, 0,0).</returns>
    </member>
  </members>
</doc>
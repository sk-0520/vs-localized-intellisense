<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.EventBasedAsync</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary vsli:raw="Provides data for the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event.">Proporciona datos para el evento MethodName<see langword="Completed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AsyncCompletedEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error" vsli:raw="Any error that occurred during the asynchronous operation.">Cualquier error que se haya producido durante la operación asincrónica.</param>
      <param name="cancelled" vsli:raw="A value indicating whether the asynchronous operation was canceled.">Valor que indica si se canceló la operación asincrónica.</param>
      <param name="userState" vsli:raw="The optional user-supplied state object passed to the &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)&quot; /&gt; method.">Objeto de estado opcional proporcionado por el usuario que se ha pasado al método <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary vsli:raw="Gets a value indicating whether an asynchronous operation has been canceled.">Obtiene un valor que indica si se ha cancelado una operación asincrónica.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the background operation has been canceled; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si se canceló la operación en segundo plano; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary vsli:raw="Gets a value indicating which error occurred during an asynchronous operation.">Obtiene un valor que indica el error que se produjo durante una operación asincrónica.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; instance, if an error occurred during an asynchronous operation; otherwise &lt;see langword=&quot;null&quot; /&gt;.">Instancia de <see cref="T:System.Exception" />, si se ha producido un error durante una operación asincrónica; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary vsli:raw="Raises a user-supplied exception if an asynchronous operation failed.">Genera una excepción proporcionada por el usuario si se ha producido un error en una operación asincrónica.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">La propiedad <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> es <see langword="true" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt; property has been set by the asynchronous operation. The &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property holds a reference to &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt;.">La operación asincrónica ha establecido la propiedad <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />. La propiedad <see cref="P:System.Exception.InnerException" /> contiene una referencia a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary vsli:raw="Gets the unique identifier for the asynchronous task.">Obtiene el identificador único de la tarea asincrónica.</summary>
      <returns vsli:raw="An object reference that uniquely identifies the asynchronous task; otherwise, &lt;see langword=&quot;null&quot; /&gt; if no value has been set.">Referencia a un objeto que identifica de forma única la tarea asincrónica; de lo contrario, <see langword="null" /> si no se ha establecido ningún valor.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary vsli:raw="Represents the method that will handle the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event of an asynchronous operation.">Representa el método que controlará el evento MethodName<see langword="Completed" /> de una operación asincrónica.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AsyncCompletedEventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary vsli:raw="Tracks the lifetime of an asynchronous operation.">Realiza un seguimiento de la duración de una operación asincrónica.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary vsli:raw="Finalizes the asynchronous operation.">Finaliza la operación asincrónica.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary vsli:raw="Ends the lifetime of an asynchronous operation.">Pone fin a la duración de una operación asincrónica.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.OperationCompleted&quot; /&gt; has been called previously for this task.">Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes a delegate on the thread or context appropriate for the application model.">Invoca un delegado en el subproceso o contexto adecuado para el modelo de aplicaciones.</summary>
      <param name="d" vsli:raw="A &lt;see cref=&quot;T:System.Threading.SendOrPostCallback&quot; /&gt; object that wraps the delegate to be called when the operation ends.">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
      <param name="arg" vsli:raw="An argument for the delegate contained in the &lt;paramref name=&quot;d&quot; /&gt; parameter.">Argumento del delegado incluido en el parámetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method has been called previously for this task.">Se ha llamado anteriormente al método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> para esta tarea.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Ends the lifetime of an asynchronous operation.">Pone fin a la duración de una operación asincrónica.</summary>
      <param name="d" vsli:raw="A &lt;see cref=&quot;T:System.Threading.SendOrPostCallback&quot; /&gt; object that wraps the delegate to be called when the operation ends.">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
      <param name="arg" vsli:raw="An argument for the delegate contained in the &lt;paramref name=&quot;d&quot; /&gt; parameter.">Argumento del delegado incluido en el parámetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.AsyncOperation.OperationCompleted&quot; /&gt; has been called previously for this task.">Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Threading.SynchronizationContext&quot; /&gt; object that was passed to the constructor.">Obtiene el objeto <see cref="T:System.Threading.SynchronizationContext" /> que se ha pasado al constructor.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.SynchronizationContext&quot; /&gt; object that was passed to the constructor.">Objeto <see cref="T:System.Threading.SynchronizationContext" /> que se ha pasado al constructor.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary vsli:raw="Gets or sets an object used to uniquely identify an asynchronous operation.">Obtiene o establece un objeto que se utiliza para identificar de forma única una operación asincrónica.</summary>
      <returns vsli:raw="The state object passed to the asynchronous method invocation.">Objeto de estado que se ha pasado a la invocación al método asincrónico.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary vsli:raw="Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.">Proporciona administración de simultaneidad para las clases que admiten llamadas de métodos asincrónicos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.ComponentModel.AsyncOperation&quot; /&gt; for tracking the duration of a particular asynchronous operation.">Devuelve un objeto <see cref="T:System.ComponentModel.AsyncOperation" /> para realizar un seguimiento de la duración de una operación asincrónica determinada.</summary>
      <param name="userSuppliedState" vsli:raw="An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.">Objeto que se utiliza para asociar un fragmento de estado del cliente, como un id. de tarea, a una operación asincrónica determinada.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AsyncOperation&quot; /&gt; that you can use to track the duration of an asynchronous method invocation.">Objeto <see cref="T:System.ComponentModel.AsyncOperation" /> que se puede utilizar para realizar un seguimiento de la duración de una invocación a un método asincrónico.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary vsli:raw="Gets or sets the synchronization context for the asynchronous operation.">Obtiene o establece el contexto de sincronización de la operación asincrónica.</summary>
      <returns vsli:raw="The synchronization context for the asynchronous operation.">Contexto de sincronización de la operación asincrónica.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary vsli:raw="Executes an operation on a separate thread.">Ejecuta una operación en un subproceso distinto.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary vsli:raw="Requests cancellation of a pending background operation.">Solicita la cancelación de una operación en segundo plano pendiente.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> es <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary vsli:raw="Gets a value indicating whether the application has requested cancellation of a background operation.">Obtiene un valor que indica si la aplicación ha solicitado la cancelación de una operación en segundo plano.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the application has requested cancellation of a background operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la aplicación ha solicitado la cancelación de una operación en segundo plano; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)">
      <param name="disposing" vsli:raw="This method does not do anything." />
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.RunWorkerAsync&quot; /&gt; is called.">Se produce cuando se llama a <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; is running an asynchronous operation.">Obtiene un valor que indica si el objeto <see cref="T:System.ComponentModel.BackgroundWorker" /> está ejecutando una operación asincrónica.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; is running an asynchronous operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> está ejecutando una operación asincrónica; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event.">Genera el evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Genera el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&quot; /&gt; event.">Genera el evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)&quot; /&gt; is called.">Se produce cuando se llama a <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Genera el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress" vsli:raw="The percentage, from 0 to 100, of the background operation that is complete.">Porcentaje, de 0 a 100, de la operación en segundo plano que se ha completado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">La propiedad <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> se establece en <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Genera el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress" vsli:raw="The percentage, from 0 to 100, of the background operation that is complete.">Porcentaje, de 0 a 100, de la operación en segundo plano que se ha completado.</param>
      <param name="userState" vsli:raw="A unique &lt;see cref=&quot;T:System.Object&quot; /&gt; indicating the user state. Returned as the &lt;see cref=&quot;P:System.ComponentModel.ProgressChangedEventArgs.UserState&quot; /&gt; property of the &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt;.">Objeto de estado que se ha pasado a <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">La propiedad <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> se establece en <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary vsli:raw="Starts execution of a background operation.">Inicia la ejecución de una operación en segundo plano.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.IsBusy&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">El valor de <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> es <see langword="true" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary vsli:raw="Starts execution of a background operation.">Inicia la ejecución de una operación en segundo plano.</summary>
      <param name="argument" vsli:raw="A parameter for use by the background operation to be executed in the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event handler.">Parámetro que utiliza la operación en segundo plano que se va a ejecutar en el controlador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.BackgroundWorker.IsBusy&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">El valor de <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> es <see langword="true" />.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary vsli:raw="Occurs when the background operation has completed, has been canceled, or has raised an exception.">Se produce cuando la operación en segundo plano se ha completado, se ha cancelado o ha producido una excepción.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; can report progress updates.">Obtiene o establece un valor que indica si <see cref="T:System.ComponentModel.BackgroundWorker" /> puede crear informes sobre las actualizaciones de progreso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports progress updates; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite las actualizaciones de progreso; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports asynchronous cancellation.">Obtiene o establece un valor que indica si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite la cancelación asincrónica.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; supports cancellation; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite la cancelación; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event handler.">Proporciona datos para el controlador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoWorkEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument" vsli:raw="Specifies an argument for an asynchronous operation.">Especifica un argumento para una operación asincrónica.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary vsli:raw="Gets a value that represents the argument of an asynchronous operation.">Obtiene un valor que representa el argumento de una operación asincrónica.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the argument of an asynchronous operation.">Objeto <see cref="T:System.Object" /> que representa el argumento de una operación asincrónica.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary vsli:raw="Gets or sets a value that represents the result of an asynchronous operation.">Obtiene o establece un valor que representa el resultado de una operación asincrónica.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the result of an asynchronous operation.">Objeto <see cref="T:System.Object" /> que representa el resultado de una operación asincrónica.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.DoWork&quot; /&gt; event. This class cannot be inherited.">Representa el método que controlará el evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />. Esta clase no puede heredarse.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.DoWorkEventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.ComponentModel.DoWorkEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event.">Proporciona datos para el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage" vsli:raw="The percentage of an asynchronous task that has been completed.">Porcentaje completado hasta el momento de una tarea asincrónica.</param>
      <param name="userState" vsli:raw="A unique user state.">Estado de usuario único.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary vsli:raw="Gets the asynchronous task progress percentage.">Obtiene el porcentaje de progreso de una tarea asincrónica.</summary>
      <returns vsli:raw="A percentage value indicating the asynchronous task progress.">Valor porcentual que indica el progreso de una tarea asincrónica.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary vsli:raw="Gets a unique user state.">Obtiene un estado de usuario único.</summary>
      <returns vsli:raw="A unique &lt;see cref=&quot;T:System.Object&quot; /&gt; indicating the user state.">Objeto <see cref="T:System.Object" /> único que indica el estado del usuario.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.ProgressChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class. This class cannot be inherited.">Representa el método que controlará el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> de la clase <see cref="T:System.ComponentModel.BackgroundWorker" />. Esta clase no puede heredarse.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ProgressChangedEventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary vsli:raw="Provides data for the MethodName&lt;see langword=&quot;Completed&quot; /&gt; event.">Proporciona datos para el evento MethodName<see langword="Completed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunWorkerCompletedEventArgs&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result" vsli:raw="The result of an asynchronous operation.">Resultado de una operación asincrónica.</param>
      <param name="error" vsli:raw="Any error that occurred during the asynchronous operation.">Cualquier error que se haya producido durante la operación asincrónica.</param>
      <param name="cancelled" vsli:raw="A value indicating whether the asynchronous operation was canceled.">Valor que indica si se canceló la operación asincrónica.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary vsli:raw="Gets a value that represents the result of an asynchronous operation.">Obtiene un valor que representa el resultado de una operación asincrónica.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the result of an asynchronous operation.">Objeto <see cref="T:System.Object" /> que representa el resultado de una operación asincrónica.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;. The &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property holds a reference to &lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Error&quot; /&gt;.">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> no es <see langword="null" />. La propiedad <see cref="P:System.Exception.InnerException" /> contiene una referencia a <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> es <see langword="true" />.</exception>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary vsli:raw="Gets a value that represents the user state.">Obtiene un valor que representa el estado del usuario.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the user state.">Objeto <see cref="T:System.Object" /> que representa el estado del usuario.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&quot; /&gt; event of a &lt;see cref=&quot;T:System.ComponentModel.BackgroundWorker&quot; /&gt; class.">Representa el método que controlará el evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> de una clase <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origen del evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RunWorkerCompletedEventArgs&quot; /&gt; that contains the event data.">Objeto <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> que contiene los datos del evento.</param>
    </member>
  </members>
</doc>
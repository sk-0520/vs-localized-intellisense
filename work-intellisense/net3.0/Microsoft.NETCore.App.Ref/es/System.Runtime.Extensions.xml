<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>Representa un dominio de aplicación, que es un entorno aislado donde se ejecutan las aplicaciones. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>Anexa el nombre de directorio especificado a la lista de rutas de acceso privadas.</summary>
      <param name="path">Nombre del directorio que hay que agregar a la ruta de acceso privada.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>Devuelve el nombre para mostrar del ensamblado después de aplicar la directiva.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado, en el formato que proporciona la propiedad <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Cadena que contiene el nombre para mostrar del ensamblado después de aplicar la directiva.</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>Se produce cuando se carga un ensamblado.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>Se produce cuando la resolución de un ensamblado produce errores.</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>Obtiene el directorio base que la resolución de ensamblado usa para buscar ensamblados.</summary>
      <returns>Directorio base que la resolución de ensamblado usa para buscar ensamblados.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>Restablece la ruta de acceso que especifica la ubicación de ensamblados privados en la cadena vacía ("").</summary>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>Restablece la lista de directorios que contienen instantáneas de ensamblados en la cadena vacía ("").</summary>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>Crea un nuevo dominio de aplicación con el nombre especificado.</summary>
      <param name="friendlyName">Nombre descriptivo del dominio.</param>
      <returns>Dominio de aplicación recién creado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Método no admitido en .NET Core.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>Crea una nueva instancia del tipo especificado definido en el ensamblado especificado.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <returns>Objeto contenedor de la nueva instancia especificada por <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el ensamblado especificado. Los parámetros especifican un enlazador, marcas de enlace, argumentos de constructor, información específica de la referencia cultural usada para interpretar argumentos y atributos de activación opcionales.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valor booleano que especifica si va a realizarse una búsqueda con distinción de mayúsculas y minúsculas.</param>
      <param name="bindingAttr">Combinación de cero o más marcadores de bits que afectan a la búsqueda del constructor de <paramref name="typeName" />. Si <paramref name="bindingAttr" /> es cero, se realiza una búsqueda de constructores públicos que distingue mayúsculas de minúsculas.</param>
      <param name="binder">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante la reflexión. Si <paramref name="binder" /> es null, se usará el enlazador predeterminado.</param>
      <param name="args">Argumentos que se van a pasar al constructor. Esta matriz de argumentos debe coincidir en número, orden y tipo con los parámetros del constructor que se va a invocar. Si se prefiere usar el constructor sin parámetros, <paramref name="args" /> debe ser una matriz vacía o null.</param>
      <param name="culture">Información específica de la referencia cultural que controla la conversión de <paramref name="args" /> en los tipos formales declarados para el constructor de <paramref name="typeName" />. Si <paramref name="culture" /> es <see langword="null" />, se usa <see cref="T:System.Globalization.CultureInfo" /> del subproceso actual.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva por compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto contenedor de la nueva instancia especificada por <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
 <paramref name="assemblyName" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor coincidente.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el ensamblado especificado. Un parámetro especifica una matriz de atributos de activación.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva para la compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto contenedor de la nueva instancia especificada por <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>Crea una nueva instancia del tipo especificado. Los parámetros especifican el ensamblado en el que se definen el tipo y el nombre del tipo.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <returns>Instancia del objeto especificado por <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el ensamblado indicado, especificando si se pasa por alto el modelo de mayúsculas y minúsculas del nombre de tipo, los atributos de enlace y el enlazador que se usan para seleccionar el tipo que se va a crear, los argumentos del constructor, la referencia cultural y los atributos de activación.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valor booleano que especifica si va a realizarse una búsqueda con distinción de mayúsculas y minúsculas.</param>
      <param name="bindingAttr">Combinación de cero o más marcadores de bits que afectan a la búsqueda del constructor de <paramref name="typeName" />. Si <paramref name="bindingAttr" /> es cero, se realiza una búsqueda de constructores públicos que distingue mayúsculas de minúsculas.</param>
      <param name="binder">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante la reflexión. Si <paramref name="binder" /> es null, se usará el enlazador predeterminado.</param>
      <param name="args">Argumentos que se van a pasar al constructor. Esta matriz de argumentos debe coincidir en número, orden y tipo con los parámetros del constructor que se va a invocar. Si se prefiere usar el constructor sin parámetros, <paramref name="args" /> debe ser una matriz vacía o null.</param>
      <param name="culture">Objeto específico de la referencia cultural que se usa para regir la conversión de tipos. Si <paramref name="culture" /> es <see langword="null" />, se usa <see langword="CultureInfo" /> del subproceso actual.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un solo objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />. que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva por compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Instancia del objeto especificado por <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor coincidente.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
o bien 
 <paramref name="assemblyName" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado. Los parámetros especifican el ensamblado en el que se definen el tipo, el nombre del tipo y una matriz de atributos de activación.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva para la compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Instancia del objeto especificado por <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> o <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typename" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MethodAccessException">El llamador no tiene permiso para llamar a este constructor.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado especificado.</summary>
      <param name="assemblyFile">Nombre, incluida la ruta de acceso, de un archivo que contiene un ensamblado que define el tipo solicitado. El ensamblado se carga mediante el método <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <returns>Objeto contenedor de la nueva instancia o <see langword="null" />, si no se encuentra el parámetro <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.  
o bien 
 <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typeName" /> en <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.MissingMethodException">No se ha encontrado ningún constructor público sin parámetros.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyFile" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado especificado.</summary>
      <param name="assemblyFile">Nombre, incluida la ruta de acceso, de un archivo que contiene un ensamblado que define el tipo solicitado. El ensamblado se carga mediante el método <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valor booleano que especifica si va a realizarse una búsqueda con distinción de mayúsculas y minúsculas.</param>
      <param name="bindingAttr">Combinación de cero o más marcadores de bits que afectan a la búsqueda del constructor de <paramref name="typeName" />. Si <paramref name="bindingAttr" /> es cero, se realiza una búsqueda de constructores públicos que distingue mayúsculas de minúsculas.</param>
      <param name="binder">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión. Si <paramref name="binder" /> es null, se usará el enlazador predeterminado.</param>
      <param name="args">Argumentos que se van a pasar al constructor. Esta matriz de argumentos debe coincidir en número, orden y tipo con los parámetros del constructor que se va a invocar. Si se prefiere usar el constructor sin parámetros, <paramref name="args" /> debe ser una matriz vacía o null.</param>
      <param name="culture">Información específica de la referencia cultural que controla la conversión de <paramref name="args" /> en los tipos formales declarados para el constructor de <paramref name="typeName" />. Si <paramref name="culture" /> es <see langword="null" />, se usa <see cref="T:System.Globalization.CultureInfo" /> del subproceso actual.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva por compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto contenedor de la nueva instancia o <see langword="null" />, si no se encuentra el parámetro <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.  
o bien 
 <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró<paramref name="typeName" /> en <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
O bien 
 <paramref name="assemblyFile" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado especificado.</summary>
      <param name="assemblyFile">Nombre, incluida la ruta de acceso, de un archivo que contiene un ensamblado que define el tipo solicitado. El ensamblado se carga mediante el método <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva para la compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto contenedor de la nueva instancia o <see langword="null" />, si no se encuentra el parámetro <paramref name="typeName" />. El valor devuelto debe desempaquetarse para obtener acceso al objeto real.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typeName" /> en <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyFile" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.NullReferenceException">La instancia es <see langword="null" />.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado especificado.</summary>
      <param name="assemblyName">Nombre de archivo y ruta de acceso del ensamblado que define el tipo solicitado.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <returns>Objeto solicitado o <see langword="null" /> si no se encuentra <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> es <see langword="null" />.  
O bien 
 <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typeName" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">No se ha encontrado ningún constructor público sin parámetros.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado indicado, especificando si se pasa por alto el modelo de mayúsculas y minúsculas del nombre de tipo, los atributos de enlace y el enlazador que se usan para seleccionar el tipo que se va a crear, los argumentos del constructor, la referencia cultural y los atributos de activación.</summary>
      <param name="assemblyFile">Nombre de archivo y ruta de acceso del ensamblado que define el tipo solicitado.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres, pero no el ensamblado, tal y como lo devuelve la propiedad <see cref="P:System.Type.FullName" />.</param>
      <param name="ignoreCase">Valor booleano que especifica si va a realizarse una búsqueda con distinción de mayúsculas y minúsculas.</param>
      <param name="bindingAttr">Combinación de cero o más marcadores de bits que afectan a la búsqueda del constructor de <paramref name="typeName" />. Si <paramref name="bindingAttr" /> es cero, se realiza una búsqueda de constructores públicos que distingue mayúsculas de minúsculas.</param>
      <param name="binder">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión. Si <paramref name="binder" /> es null, se usará el enlazador predeterminado.</param>
      <param name="args">Argumentos que se van a pasar al constructor. Esta matriz de argumentos debe coincidir en número, orden y tipo con los parámetros del constructor que se va a invocar. Si se prefiere usar el constructor sin parámetros, <paramref name="args" /> debe ser una matriz vacía o null.</param>
      <param name="culture">Información específica de la referencia cultural que controla la conversión de <paramref name="args" /> en los tipos formales declarados para el constructor de <paramref name="typeName" />. Si <paramref name="culture" /> es <see langword="null" />, se usa <see cref="T:System.Globalization.CultureInfo" /> del subproceso actual.</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva por compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto solicitado o <see langword="null" /> si no se encuentra <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> es <see langword="null" />.  
O bien 
 <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró<paramref name="typeName" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">No se encontró ningún constructor público coincidente.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
o bien 
 <paramref name="assemblyName" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>Crea una nueva instancia del tipo especificado definido en el archivo de ensamblado especificado.</summary>
      <param name="assemblyName">Nombre de archivo y ruta de acceso del ensamblado que define el tipo solicitado.</param>
      <param name="typeName">Nombre completo del tipo solicitado, incluido el espacio de nombres pero no el ensamblado (vea la propiedad <see cref="P:System.Type.FullName" />).</param>
      <param name="activationAttributes">Matriz de uno o más atributos que puede participar en la activación. Normalmente, una matriz que contiene un único objeto <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> que especifica la dirección URL necesaria para activar un objeto remoto.  
Este parámetro está relacionado con los objetos activados por el cliente. La activación por parte del cliente es una tecnología heredada que se conserva para la compatibilidad con versiones anteriores, pero no se recomienda para nuevo desarrollo. Las aplicaciones distribuidas deberían usar Windows Communication Foundation.</param>
      <returns>Objeto solicitado o <see langword="null" /> si no se encuentra <paramref name="typeName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> es <see langword="null" />.  
o bien 
 <paramref name="typeName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El llamador no puede ofrecer atributos de activación para un objeto que no hereda de <see cref="T:System.MarshalByRefObject" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se encontró <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.TypeLoadException">No se encontró <paramref name="typeName" /> en <paramref name="assemblyName" />.</exception>
      <exception cref="T:System.MissingMethodException">No se ha encontrado ningún constructor público sin parámetros.</exception>
      <exception cref="T:System.MethodAccessException">El autor de la llamada no tiene permiso suficiente para llamar a este constructor.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior del Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>Obtiene el actual dominio de aplicación del actual <see cref="T:System.Threading.Thread" />.</summary>
      <returns>Dominio de aplicación actual.</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>Se produce cuando un <see cref="T:System.AppDomain" /> está a punto de descargarse.</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>Obtiene el directorio que la resolución de ensamblado usa para buscar ensamblados creados de forma dinámica.</summary>
      <returns>Directorio que la resolución de ensamblado usa para buscar ensamblados creados de forma dinámica.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>Ejecuta el ensamblado que contiene el archivo especificado.</summary>
      <param name="assemblyFile">Nombre del archivo que contiene el ensamblado que se va a ejecutar.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se ha encontrado <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="assemblyFile" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>Ejecuta el ensamblado contenido en el archivo especificado, usando los argumentos especificados.</summary>
      <param name="assemblyFile">Nombre del archivo que contiene el ensamblado que se va a ejecutar.</param>
      <param name="args">Argumentos del punto de entrada del ensamblado.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se ha encontrado <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
O bien 
 <paramref name="assemblyFile" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>Ejecuta el ensamblado contenido en el archivo especificado, usando los argumentos, el valor hash y el algoritmo hash especificados.</summary>
      <param name="assemblyFile">Nombre del archivo que contiene el ensamblado que se va a ejecutar.</param>
      <param name="args">Argumentos del punto de entrada del ensamblado.</param>
      <param name="hashValue">Representa el valor del código hash calculado.</param>
      <param name="hashAlgorithm">Representa el algoritmo hash que usa el manifiesto del ensamblado.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se ha encontrado <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.  
O bien 
 <paramref name="assemblyFile" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>Ejecuta el ensamblado a partir de un objeto <see cref="T:System.Reflection.AssemblyName" />, usando los argumentos especificados.</summary>
      <param name="assemblyName">Objeto <see cref="T:System.Reflection.AssemblyName" /> que representa el nombre del ensamblado.</param>
      <param name="args">Argumentos de línea de comandos que se van a pasar al iniciar el proceso.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.IO.FileNotFoundException">El ensamblado especificado por <paramref name="assemblyName" /> no se encuentra.</exception>
      <exception cref="T:System.IO.FileLoadException">El ensamblado especificado por <paramref name="assemblyName" /> se encontró, pero no se pudo cargar.</exception>
      <exception cref="T:System.BadImageFormatException">El ensamblado especificado por <paramref name="assemblyName" /> no es válido.  
o bien 
 <paramref name="assemblyName" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>Ejecuta un ensamblado a partir de su nombre para mostrar.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">El ensamblado especificado por <paramref name="assemblyName" /> no se encuentra.</exception>
      <exception cref="T:System.BadImageFormatException">El ensamblado especificado por <paramref name="assemblyName" /> no es válido.  
o bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="assemblyName" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">El ensamblado especificado por <paramref name="assemblyName" /> se encontró, pero no se pudo cargar.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>Ejecuta el ensamblado a partir de su nombre para mostrar, usando los argumentos especificados.</summary>
      <param name="assemblyName">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <param name="args">Argumentos de línea de comandos que se van a pasar al iniciar el proceso.</param>
      <returns>Valor devuelto por el punto de entrada del ensamblado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">El ensamblado especificado por <paramref name="assemblyName" /> no se encuentra.</exception>
      <exception cref="T:System.IO.FileLoadException">El ensamblado especificado por <paramref name="assemblyName" /> se encontró, pero no se pudo cargar.</exception>
      <exception cref="T:System.BadImageFormatException">El ensamblado especificado por <paramref name="assemblyName" /> no es válido.  
O bien 
 <paramref name="assemblyName" /> se compiló con una versión de Common Language Runtime posterior a la versión que está cargada actualmente.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.MissingMethodException">El ensamblado especificado no tiene ningún punto de entrada.</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>Ocurre cuando se produce una excepción en código administrado, antes de que el runtime busque un controlador de excepciones en la pila de llamadas del dominio de aplicación.</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>Obtiene el nombre descriptivo de este dominio de aplicación.</summary>
      <returns>Nombre descriptivo de este dominio de aplicación.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>Obtiene los ensamblados que se han cargado en el contexto de ejecución de este dominio de aplicación.</summary>
      <returns>Matriz de ensamblados de este dominio de aplicación.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>Obtiene el identificador del subproceso actual.</summary>
      <returns>Entero de 32 bits con signo que representa el identificador del actual subproceso.</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>Obtiene el valor almacenado en el dominio de aplicación actual para el nombre especificado.</summary>
      <param name="name">Nombre de una propiedad de dominio de aplicación predefinida o nombre de una propiedad de dominio de aplicación que se haya definido.</param>
      <returns>El valor de la propiedad o <paramref name="name" /> o <see langword="null" /> si la propiedad no existe.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>Obtiene un entero que identifica únicamente el dominio de aplicación en el proceso.</summary>
      <returns>Entero que identifica el dominio de aplicación.</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>Obtiene un valor booleano que acepta valores NULL que indica si se ha establecido algún modificador de compatibilidad y, en ese caso, si se ha establecido el modificador de compatibilidad especificado.</summary>
      <param name="value">Modificador de compatibilidad que se va a comprobar.</param>
      <returns>Una referencia nula (<see langword="Nothing" /> en Visual Basic) si no se estableció ningún modificador de compatibilidad; de lo contrario, es un valor booleano que indica si se estableció el modificador de compatibilidad especificado por <paramref name="value" />.</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>Devuelve un valor que indica si el dominio de aplicación es el dominio de aplicación predeterminado para el proceso.</summary>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.AppDomain" /> actual representa el dominio de aplicación predeterminado para el proceso; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>Indica si se está descargando este dominio de aplicación y si Common Language Runtime está finalizando los objetos que contiene.</summary>
      <returns>Es <see langword="true" /> si se está descargando este dominio de aplicación y si Common Language Runtime comenzó el proceso de invocación de los finalizadores; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>Obtiene un valor que indica si los ensamblados que se cargan en el dominio de aplicación actual se ejecutan con plena confianza.</summary>
      <returns>Es <see langword="true" /> si los ensamblados que se cargan en el dominio de aplicación actual se ejecutan con plena confianza; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>Obtiene un valor que indica si el dominio de aplicación actual tiene un conjunto de permisos concedido a todos los ensamblados que se cargan en el dominio de aplicación.</summary>
      <returns>Es <see langword="true" /> si el dominio de aplicación actual tiene un conjunto homogéneo de permisos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>Carga el <see cref="T:System.Reflection.Assembly" /> con una imagen basada en el formato COFF (Common Object File Format) que contiene un <see cref="T:System.Reflection.Assembly" /> emitido.</summary>
      <param name="rawAssembly">Matriz de tipo <see langword="byte" /> que es una imagen basada en COFF que contiene un ensamblado emitido.</param>
      <returns>Ensamblado cargado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> es <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="rawAssembly" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>Carga el <see cref="T:System.Reflection.Assembly" /> con una imagen basada en el formato COFF (Common Object File Format) que contiene un <see cref="T:System.Reflection.Assembly" /> emitido. También se cargan los bytes sin formato que representan los símbolos del <see cref="T:System.Reflection.Assembly" />.</summary>
      <param name="rawAssembly">Matriz de tipo <see langword="byte" /> que es una imagen basada en COFF que contiene un ensamblado emitido.</param>
      <param name="rawSymbolStore">Matriz de tipo <see langword="byte" /> que contiene los bytes sin formato que representan los símbolos del ensamblado.</param>
      <returns>Ensamblado cargado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> es <see langword="null" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="rawAssembly" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>Carga un <see cref="T:System.Reflection.Assembly" /> a partir de su <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <param name="assemblyRef">Objeto que describe el ensamblado que se va a cargar.</param>
      <returns>Ensamblado cargado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se ha encontrado <paramref name="assemblyRef" />.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> no es un ensamblado válido.  
o bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="assemblyRef" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>Carga un <see cref="T:System.Reflection.Assembly" /> a partir de su nombre de presentación.</summary>
      <param name="assemblyString">Nombre para mostrar del ensamblado. Vea <see cref="P:System.Reflection.Assembly.FullName" />.</param>
      <returns>Ensamblado cargado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> es <see langword="null" /></exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> .</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> no es un ensamblado válido.  
O bien 
La versión 2.0 u otra posterior de Common Language Runtime está cargada actualmente y <paramref name="assemblyString" /> se compiló con una versión posterior.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
      <exception cref="T:System.IO.FileLoadException">Se cargó un ensamblado o módulo dos veces con dos evidencias diferentes.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>Obtiene o establece un valor que indica si la supervisión de la CPU y de la memoria del dominio de aplicación está habilitada para el proceso actual. Una vez que se habilita la supervisión para un proceso, no se puede deshabilitar.</summary>
      <returns>Es <see langword="true" /> si la supervisión está habilitada; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">El proceso actual ha intentado asignar el valor <see langword="false" /> a esta propiedad.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>Obtiene el número de bytes que sobrevivieron a la última recolección y a la que se sabe que hace referencia el dominio de aplicación actual.</summary>
      <returns>Número de bytes supervivientes.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> propiedad está establecida en <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>Obtiene los bytes totales que sobrevivieron a la última recolección para todos los dominios de aplicación del proceso.</summary>
      <returns>Número total de bytes supervivientes para el proceso.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> propiedad está establecida en <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>Obtiene el tamaño total, en bytes, de todas las asignaciones de memoria realizadas por el dominio de aplicación desde que se creó, sin restar la memoria recopilada.</summary>
      <returns>Tamaño total de todas las asignaciones de memoria.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> propiedad está establecida en <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>Obtiene el tiempo total de procesador usado por todos los subprocesos mientras se ejecutaban en el dominio de aplicación actual, desde que el proceso se inició.</summary>
      <returns>Tiempo total de procesador para el dominio de aplicación actual.</returns>
      <exception cref="T:System.InvalidOperationException">La propiedad <see langword="static" /> (<see langword="Shared" /> en Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> propiedad está establecida en <see langword="false" />.</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>Obtiene el conjunto de permisos de un dominio de aplicación en un espacio aislado.</summary>
      <returns>Conjunto de permisos del dominio de aplicación en un espacio aislado.</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>Se produce al salir del proceso primario del dominio de aplicación predeterminado.</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>Aparece cuando se produce un error en la resolución de un ensamblado en el contexto de solo reflexión.</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>Devuelve los ensamblados que se han cargado en el contexto de solo reflexión del dominio de aplicación.</summary>
      <returns>Matriz de objetos <see cref="T:System.Reflection.Assembly" /> que representan los ensamblados cargados en el contexto de solo reflexión del dominio de aplicación.</returns>
      <exception cref="T:System.AppDomainUnloadedException">Se ha intentado realizar una operación en un dominio de aplicación descargado.</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>Obtiene la ruta de acceso del directorio base en que la resolución de ensamblado debe buscar ensamblados privados.</summary>
      <returns>La ruta de acceso del directorio base en que la resolución de ensamblado debe buscar ensamblados privados.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>Aparece cuando se produce un error en la resolución de un recurso porque éste no es un recurso vinculado válido o incrustado en el ensamblado.</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>Establece la ruta de acceso al directorio especificado como la ubicación donde se almacenan las instantáneas de los ensamblados.</summary>
      <param name="path">Ruta de acceso completa a la ubicación de la instantánea.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>Asigna el valor especificado a la propiedad especificada del dominio de aplicación.</summary>
      <param name="name">Nombre de una propiedad de dominio de aplicación definida por el usuario que se va a crear o cambiar.</param>
      <param name="data">Valor de la propiedad.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>Establece la ruta de acceso al directorio especificado como directorio base de los subdirectorios donde se almacenan los archivos generados de forma dinámica y se obtiene acceso a ellos.</summary>
      <param name="path">Ruta de acceso completa que es el directorio base de los subdirectorios donde se almacenan los ensamblados dinámicos.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>Especifica la forma en que los objetos principales y de identidad deben asociarse a un subproceso si éste intenta enlazarse a un principal mientas se ejecuta en este dominio de aplicación.</summary>
      <param name="policy">Uno de los valores de <see cref="T:System.Security.Principal.PrincipalPolicy" /> que especifica el tipo del objeto principal que se va a asociar a los subprocesos.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>Activa la creación de instantáneas.</summary>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>Establece la ruta de acceso al directorio especificado como la ubicación de las instantáneas de los ensamblados.</summary>
      <param name="path">Lista de nombres de directorio separados por puntos y comas.</param>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>Establece el objeto principal predeterminado que se va a asociar a los subprocesos si éstos intentan enlazarse a un principal mientras se ejecutan en este dominio de aplicación.</summary>
      <param name="principal">Objeto principal que se va a asociar a los subprocesos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.Policy.PolicyException">Ya se ha establecido la entidad de seguridad del subproceso.</exception>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>Obtiene la información de configuración del dominio de aplicación correspondiente a esta instancia.</summary>
      <returns>Información de inicialización del dominio de aplicación.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>Obtiene una indicación si el dominio de aplicación se configura para archivos de instantánea.</summary>
      <returns>
        <see langword="true" /> si el dominio de aplicación se configura para archivos de instantánea; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.AppDomainUnloadedException">La operación se intenta en un dominio de aplicación descargado.</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>Obtiene una representación en forma de cadena que incluye el nombre descriptivo del dominio de aplicación y cualquier directiva del contexto.</summary>
      <returns>Cadena formada al concatenar la cadena literal "Nombre:", el nombre descriptivo del dominio de aplicación y las representaciones en forma de cadena de las directivas de contexto o la cadena "No hay directivas de contexto".</returns>
      <exception cref="T:System.AppDomainUnloadedException">Se ha descargado el dominio de aplicación que representa el objeto <see cref="T:System.AppDomain" /> actual.</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>Se produce cuando la resolución de un tipo produce errores.</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>Se produce cuando no se detecta una excepción.</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>Descarga el dominio de aplicación especificado.</summary>
      <param name="domain">Dominio de aplicación que se va a descargar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> es <see langword="null" />.</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">No se pudo descargar <paramref name="domain" />.</exception>
      <exception cref="T:System.Exception">Error durante el proceso de descarga.</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>Representa la información de enlace del ensamblado que puede agregarse a una instancia de <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>Obtiene o establece el nombre del directorio que contiene la aplicación.</summary>
      <returns>El nombre del directorio base de la aplicación.</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>Obtiene o establece una cadena que especifica la versión de destino y el perfil de .NET Framework para el dominio de aplicación, en un formato que el constructor <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> pueda analizar.</summary>
      <returns>Versión de destino y perfil de .NET Framework.</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>Excepción que se produce al intentar obtener acceso a un dominio de aplicaciones descargado.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AppDomainUnloadedException" />.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AppDomainUnloadedException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AppDomainUnloadedException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AppDomainUnloadedException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es una referencia nula, se provoca la excepción actual en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>Contiene información utilizada para identificar de forma única una aplicación basada en manifiesto. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ApplicationId" />.</summary>
      <param name="publicKeyToken">Matriz de bytes que representa los datos de clave pública sin formato.</param>
      <param name="name">El nombre de la aplicación.</param>
      <param name="version">Objeto <see cref="T:System.Version" /> que especifica la versión de la aplicación.</param>
      <param name="processorArchitecture">Arquitectura del procesador de la aplicación.</param>
      <param name="culture">Referencia cultural de la aplicación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.  
o bien 
 <paramref name="version" /> es <see langword="null" />.  
o bien 
 <paramref name="publicKeyToken" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> es una cadena vacía.</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>Crea y devuelve una copia idéntica de la identidad de aplicación actual.</summary>
      <returns>Objeto <see cref="T:System.ApplicationId" /> que representa una copia exacta del original.</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>Obtiene una cadena que representa la información de referencia cultural de la aplicación.</summary>
      <returns>Información de referencia cultural de la aplicación.</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.ApplicationId" /> especificado es equivalente al <see cref="T:System.ApplicationId" /> actual.</summary>
      <param name="o">Objeto <see cref="T:System.ApplicationId" /> que se va a comparar con el objeto <see cref="T:System.ApplicationId" /> actual.</param>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.ApplicationId" /> especificado es equivalente al <see cref="T:System.ApplicationId" /> actual; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>Obtiene el código hash de la identidad de aplicación actual.</summary>
      <returns>Código hash de la identidad de aplicación actual.</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>Obtiene el nombre de la aplicación.</summary>
      <returns>El nombre de la aplicación.</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>Obtiene la arquitectura del procesador de destino de la aplicación.</summary>
      <returns>Arquitectura del procesador de la aplicación.</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>Obtiene el símbolo (token) de clave pública de la aplicación.</summary>
      <returns>Matriz de bytes que contiene el símbolo (token) de clave pública de la aplicación.</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>Crea y devuelve una representación de cadena de la identidad de aplicación.</summary>
      <returns>Representación de cadena de la identidad de aplicación.</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>Obtiene la versión de la aplicación.</summary>
      <returns>
        <see cref="T:System.Version" /> que especifica la versión de la aplicación.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.AppDomain.AssemblyLoad" />.</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.AssemblyLoadEventArgs" /> utilizando la clase <see cref="T:System.Reflection.Assembly" /> especificada.</summary>
      <param name="loadedAssembly">Instancia que representa el ensamblado actualmente cargado.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>Obtiene un <see cref="T:System.Reflection.Assembly" /> que representa el ensamblado actualmente cargado.</summary>
      <returns>Instancia de <see cref="T:System.Reflection.Assembly" /> que representa el ensamblado actualmente cargado.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.AppDomain.AssemblyLoad" /> de un <see cref="T:System.AppDomain" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="args">Objeto <see cref="T:System.AssemblyLoadEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>Especifica si los métodos <see cref="Overload:System.Convert.ToBase64CharArray" /> y <see cref="Overload:System.Convert.ToBase64String" /> relevantes insertan saltos de línea en su salida.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>Inserta saltos de línea después de cada 76 caracteres en la representación de cadena.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>No inserta saltos de línea después de cada 76 caracteres en la representación de cadena.</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>Convierte tipos de datos base en una matriz de bytes, y una matriz de bytes en tipos de datos base.</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>Convierte el número de punto flotante de precisión doble especificado en un entero de 64 bits con signo.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Entero de 64 bits con signo cuyo valor es equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>Devuelve el valor booleano especificado como una matriz de bytes.</summary>
      <param name="value">Valor Boolean.</param>
      <returns>Matriz de bytes con una longitud de 1.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>Devuelve el valor de carácter Unicode especificado como una matriz de bytes.</summary>
      <param name="value">Carácter que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>Devuelve el valor de punto flotante de doble precisión especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>Devuelve el valor entero con signo de 16 bytes especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>Devuelve el valor del entero de 32 bits con signo especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>Devuelve el valor del entero de 64 bits con signo especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 8.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>Devuelve el valor de punto flotante de precisión sencilla especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>Devuelve el valor entero sin signo de 16 bits especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 2.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>Devuelve el valor del entero sin signo de 32 bits especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 4.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>Devuelve el valor del entero sin signo de 64 bits especificado como una matriz de bytes.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Matriz de bytes con una longitud de 8.</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>Convierte el entero de 64 bits con signo especificado en un número de punto flotante de precisión doble.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Número de punto flotante de precisión doble cuyo valor es equivalente al valor de <paramref name="value" />.</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>Indica el orden de bytes ("modos endian") en los datos que se almacenan en la arquitectura de este equipo.</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>Devuelve un valor booleano convertido a partir del byte en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Índice del byte de <paramref name="value" />.</param>
      <returns>Es <see langword="true" /> si el byte de <paramref name="startIndex" /> situado en <paramref name="value" /> es distinto de cero; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>Devuelve un carácter Unicode convertido a partir de dos bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Carácter formado por dos bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es igual a la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>Devuelve un número de punto flotante de precisión doble convertido a partir de ocho bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Número de punto flotante de precisión doble formado por ocho bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 7 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 16 bits con signo convertido a partir de dos bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 16 bits con signo formado por dos bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es igual a la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 32 bits con signo convertido a partir de cuatro bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 32 bits con signo formado por cuatro bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 3 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 64 bits con signo convertido a partir de ocho bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 64 bits con signo formado por ocho bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 7 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>Devuelve un número de punto flotante de precisión sencilla convertido a partir de cuatro bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Número de punto flotante de precisión sencilla formado por cuatro bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 3 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>Convierte el valor numérico de cada elemento de una matriz especificada de bytes en su representación de cadena hexadecimal equivalente.</summary>
      <param name="value">Matriz de bytes.</param>
      <returns>Cadena de pares hexadecimales separados por guiones, donde cada par representa el elemento correspondiente en <paramref name="value" />; por ejemplo, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>Convierte el valor numérico de cada elemento de una submatriz especificada de bytes en su representación de cadena hexadecimal equivalente.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Cadena de pares hexadecimales separados por guiones, donde cada par representa el elemento correspondiente en una submatriz de <paramref name="value" />; por ejemplo, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte el valor numérico de cada elemento de una submatriz especificada de bytes en su representación de cadena hexadecimal equivalente.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <param name="length">Número de elementos de matriz de <paramref name="value" /> que se van a convertir.</param>
      <returns>Cadena de pares hexadecimales separados por guiones, donde cada par representa el elemento correspondiente en una submatriz de <paramref name="value" />; por ejemplo, "7F-2C-4A-00".</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> o <paramref name="length" /> es menor que cero.  
O bien 
 <paramref name="startIndex" /> es mayor que cero y es mayor o igual que la longitud de <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentException">La combinación de <paramref name="startIndex" /> y <paramref name="length" /> no especifica ninguna posición dentro de <paramref name="value" />; es decir, el parámetro <paramref name="startIndex" /> es mayor que la longitud de <paramref name="value" /> menos el parámetro <paramref name="length" />.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 16 bits sin signo convertido a partir de dos bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 16 bits sin signo formado por dos bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es igual a la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 32 bits sin signo convertido a partir de cuatro bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 32 bits sin signo formado por cuatro bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 3 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>Devuelve un entero de 64 bits sin signo convertido a partir de ocho bytes en la posición especificada de una matriz de bytes.</summary>
      <param name="value">Matriz de bytes.</param>
      <param name="startIndex">Posición inicial de <paramref name="value" />.</param>
      <returns>Entero de 64 bits sin signo formado por ocho bytes que comienzan en <paramref name="startIndex" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="startIndex" /> es mayor o igual que la longitud de <paramref name="value" /> menos 7 y es menor o igual que la longitud de <paramref name="value" /> menos 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> es menor que cero o mayor que la longitud de <paramref name="value" /> menos 1.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <param name="destination" />
      <param name="value" />
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>Excepción que se produce cuando no se puede descargar un dominio de aplicación.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CannotUnloadAppDomainException" />.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CannotUnloadAppDomainException" /> a partir de datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CannotUnloadAppDomainException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CannotUnloadAppDomainException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es una referencia nula (<see langword="Nothing" /> en Visual Basic), la excepción actual se inicia en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>Proporciona un escritor de texto que puede aplicar una sangría a las nuevas líneas mediante un token de cadena de tabulación.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> utilizando el escritor de texto especificado y la cadena de tabulación predeterminada.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a utilizar para los resultados.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> utilizando el escritor de texto y la cadena de tabulación especificados.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a utilizar para los resultados.</param>
      <param name="tabString">Cadena de tabulación que se va a utilizar para aplicar sangrías.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>Cierra el documento en el que se está escribiendo.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>Especifica la cadena de tabulación predeterminada. Este campo es constante.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>Obtiene la codificación del escritor de texto que se va a utilizar.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> que indica la codificación del escritor de texto que se va a utilizar.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>Vacía la secuencia.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>Obtiene o establece el número de espacios para la sangría.</summary>
      <returns>Número de espacios para la sangría.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>Obtiene el <see cref="T:System.IO.TextWriter" /> que se va a utilizar.</summary>
      <returns>Objeto <see cref="T:System.IO.TextWriter" /> que se va a usar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>Obtiene o establece el carácter de nueva línea que se va a utilizar.</summary>
      <returns>Carácter de nueva línea que se va a utilizar.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>Proporciona la cadena de tabulación una vez  para cada nivel de tabulación de acuerdo con la propiedad <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>Escribe la representación de texto de un valor de tipo Boolean en la secuencia de texto.</summary>
      <param name="value">Valor de tipo Boolean que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>Escribe un carácter en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Índice de inicio del búfer.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Escribe la representación textual de un Double en la secuencia de texto.</summary>
      <param name="value">
        <see langword="double" /> que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>Escribe la representación textual de un entero en la secuencia de texto.</summary>
      <param name="value">Entero que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>Escribe la representación textual de un entero de 8 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>Escribe la representación textual de un objeto en la secuencia de texto.</summary>
      <param name="value">Objeto que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Escribe la representación textual de un Single en la secuencia de texto.</summary>
      <param name="value">
        <see langword="single" /> que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>Escribe la cadena especificada en la secuencia de texto.</summary>
      <param name="s">Cadena que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Escribe una cadena con formato utilizando la misma semántica especificada.</summary>
      <param name="format">Cadena con formato.</param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato utilizando la misma semántica especificada.</summary>
      <param name="format">Cadena con formato que se va a utilizar.</param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato.</param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Escribe una cadena con formato utilizando la misma semántica especificada.</summary>
      <param name="format">Cadena con formato que se va a utilizar.</param>
      <param name="arg">Matriz de argumentos que se va a devolver.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>Escribe un terminador de línea.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Escribe la representación de texto de un Boolean seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Boolean que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Escribe un carácter seguido de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Escribe una matriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Índice de inicio del búfer.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Escribe la representación de texto de un Double seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">
        <see langword="double" /> que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Escribe la representación de texto de un entero seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Escribe la representación de texto de un entero de 8 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Escribe la representación de texto de un objeto seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Objeto que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Escribe la representación de texto de un Single seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">
        <see langword="single" /> que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>Escribe la cadena especificada seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="s">Cadena que se va a escribir.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, utilizando la misma semántica que se especificó.</summary>
      <param name="format">Cadena con formato.</param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, utilizando la misma semántica que se especificó.</summary>
      <param name="format">Cadena con formato que se va a utilizar.</param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato.</param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, utilizando la misma semántica que se especificó.</summary>
      <param name="format">Cadena con formato que se va a utilizar.</param>
      <param name="arg">Matriz de argumentos que se va a devolver.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Escribe la representación de texto de un UInt32 seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">UInt32 que se va a obtener como resultado.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Escribe la cadena especificada en una línea sin tabulaciones.</summary>
      <param name="s">Cadena que se va a escribir.</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>Implementa la interfaz <see cref="T:System.Collections.IList" /> utilizando una matriz cuyo tamaño aumenta dinámicamente cuando es necesario.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ArrayList" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ArrayList" /> que contiene elementos copiados de la colección especificada y que tiene la misma capacidad inicial que el número de elementos copiados.</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> cuyos elementos se copian en la nueva lista.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ArrayList" /> que está vacía y tiene la capacidad inicial especificada.</summary>
      <param name="capacity">Número de elementos que puede almacenar inicialmente la lista nueva.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>Crea un contenedor de <see cref="T:System.Collections.ArrayList" /> para una interfaz <see cref="T:System.Collections.IList" /> concreta.</summary>
      <param name="list">
        <see cref="T:System.Collections.IList" /> que se va a incluir.</param>
      <returns>Contenedor de <see cref="T:System.Collections.ArrayList" /> para <see cref="T:System.Collections.IList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>Agrega un objeto al final de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a agregar al final de la colección <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <returns>Índice de <see cref="T:System.Collections.ArrayList" /> en el que se ha agregado <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
o bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>Agrega los elementos de <see cref="T:System.Collections.ICollection" /> al final de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> cuyos elementos deben agregarse al final de <see cref="T:System.Collections.ArrayList" />. La propia colección no puede ser <see langword="null" />, pero puede contener elementos que sean <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Busca un elemento en un intervalo de elementos del objeto <see cref="T:System.Collections.ArrayList" /> ordenado usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Clase <see cref="T:System.Object" /> que se va a localizar. El valor puede ser <see langword="null" />.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.  
o bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <returns>Índice de base cero de <paramref name="value" /> en la <see cref="T:System.Collections.ArrayList" /> ordenada si se encuentra <paramref name="value" />; en caso contrario, número negativo, que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de la propiedad <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido en <see cref="T:System.Collections.ArrayList" />.  
O bien 
 <paramref name="comparer" /> es <see langword="null" /> y ni <paramref name="value" /> ni los elementos de <see cref="T:System.Collections.ArrayList" /> implementan la interfaz de <see cref="T:System.IComparable" /></exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es <see langword="null" /> y <paramref name="value" /> no es del mismo tipo que los elementos de <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="count" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>Busca la <see cref="T:System.Collections.ArrayList" /> completa ordenada para un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="value">Clase <see cref="T:System.Object" /> que se va a localizar. El valor puede ser <see langword="null" />.</param>
      <returns>Índice de base cero de <paramref name="value" /> en la <see cref="T:System.Collections.ArrayList" /> ordenada si se encuentra <paramref name="value" />; en caso contrario, número negativo, que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de la propiedad <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="value" /> ni los elementos de <see cref="T:System.Collections.ArrayList" /> implementan la interfaz <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> no es del mismo tipo que los elementos de <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>Busca la <see cref="T:System.Collections.ArrayList" /> completa ordenada para un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="value">Clase <see cref="T:System.Object" /> que se va a localizar. El valor puede ser <see langword="null" />.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.  
o bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <returns>Índice de base cero de <paramref name="value" /> en la <see cref="T:System.Collections.ArrayList" /> ordenada si se encuentra <paramref name="value" />; en caso contrario, número negativo, que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de la propiedad <see cref="P:System.Collections.ArrayList.Count" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> es <see langword="null" /> y ni <paramref name="value" /> ni los elementos de <see cref="T:System.Collections.ArrayList" /> implementan la interfaz de <see cref="T:System.IComparable" /></exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es <see langword="null" /> y <paramref name="value" /> no es del mismo tipo que los elementos de <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>Obtiene o establece el número de elementos que puede contener <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Número de elementos que puede contener <see cref="T:System.Collections.ArrayList" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" /> se establece en un valor que es menor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente en el sistema.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>Crea una copia superficial de la colección <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Copia superficial de la colección <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>Determina si un elemento se encuentra en <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="item">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.ArrayList" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>Copia la <see cref="T:System.Collections.ArrayList" /> completa en una <see cref="T:System.Array" /> unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ArrayList" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
O bien 
El número de elementos del <see cref="T:System.Collections.ArrayList" /> de origen es mayor que el número de elementos que puede contener el <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException">El tipo de la <see cref="T:System.Collections.ArrayList" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>Copia la totalidad de <see cref="T:System.Collections.ArrayList" /> en una matriz <see cref="T:System.Array" /> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ArrayList" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
O bien 
El número de elementos de la <see cref="T:System.Collections.ArrayList" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException">El tipo de la <see cref="T:System.Collections.ArrayList" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copia un intervalo de elementos de <see cref="T:System.Collections.ArrayList" /> en una <see cref="T:System.Array" /> unidimensional compatible, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="index">Índice de base cero de la <see cref="T:System.Collections.ArrayList" /> de origen donde comienza la copia.</param>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ArrayList" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count">Número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="arrayIndex" /> es menor que cero.  
O bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
O bien 
 <paramref name="index" /> es igual o mayor que la longitud de <see cref="P:System.Collections.ArrayList.Count" /> de <see cref="T:System.Collections.ArrayList" />de origen.  
O bien 
El número de elementos de <paramref name="index" /> hasta el final de <see cref="T:System.Collections.ArrayList" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException">El tipo de la <see cref="T:System.Collections.ArrayList" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>Obtiene el número de elementos contenido realmente en <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Número de elementos contenido realmente en <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>Devuelve un contenedor de <see cref="T:System.Collections.ArrayList" /> con un tamaño fijo.</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> que se va a incluir.</param>
      <returns>Contenedor de <see cref="T:System.Collections.ArrayList" /> con un tamaño fijo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>Devuelve un contenedor de <see cref="T:System.Collections.IList" /> con un tamaño fijo.</summary>
      <param name="list">
        <see cref="T:System.Collections.IList" /> que se va a incluir.</param>
      <returns>Contenedor de <see cref="T:System.Collections.IList" /> con un tamaño fijo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>Devuelve un enumerador para la <see cref="T:System.Collections.ArrayList" /> completa.</summary>
      <returns>Interfaz <see cref="T:System.Collections.IEnumerator" /> para toda la colección <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>Devuelve un enumerador para un intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Índice inicial de base cero de la sección de <see cref="T:System.Collections.ArrayList" /> a la que debe hacer referencia el enumerador.</param>
      <param name="count">Número de elementos de la sección de <see cref="T:System.Collections.ArrayList" /> a la que debe hacer referencia el enumerador.</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> para el intervalo de elementos especificado de la matriz <see cref="T:System.Collections.ArrayList" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no especifican un intervalo válido en <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>Devuelve una <see cref="T:System.Collections.ArrayList" /> que representa un subconjunto de los elementos de la <see cref="T:System.Collections.ArrayList" /> de origen.</summary>
      <param name="index">Índice de <see cref="T:System.Collections.ArrayList" /> de base cero en el que empieza el intervalo.</param>
      <param name="count">Número de elementos del intervalo.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> que representa un subconjunto de los elementos de la <see cref="T:System.Collections.ArrayList" /> de origen.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>Busca el objeto <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la primera aparición en toda la colección <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> en la totalidad de <see cref="T:System.Collections.ArrayList" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>Busca el objeto <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" /> que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> dentro del intervalo de elementos de <see cref="T:System.Collections.ArrayList" /> que abarca desde <paramref name="startIndex" /> hasta el último elemento, si se encuentra; de lo contrario, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Busca el objeto <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> dentro del intervalo de elementos de <see cref="T:System.Collections.ArrayList" /> que comienza en <paramref name="startIndex" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; de lo contrario, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.ArrayList" />.  
o bien 
 <paramref name="count" /> es menor que cero.  
o bien 
 <paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en <see cref="T:System.Collections.ArrayList" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a insertar. El valor puede ser <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>Inserta los elementos de una colección en <see cref="T:System.Collections.ArrayList" /> en el índice especificado.</summary>
      <param name="index">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> cuyos elementos se deben insertar en <see cref="T:System.Collections.ArrayList" />. La propia colección no puede ser <see langword="null" />, pero puede contener elementos que sean <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
o bien 
La <see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</summary>
      <returns>Es<see langword="true" /> si la interfaz <see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.ArrayList" /> es de solo lectura; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ArrayList" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es<see langword="true" /> si el acceso a <see cref="T:System.Collections.ArrayList" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns>Elemento en el índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>Busca el <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la última aparición en la <see cref="T:System.Collections.ArrayList" /> completa.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="value" /> en todo el objeto <see cref="T:System.Collections.ArrayList" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>Busca el objeto <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" /> que abarca desde el primer elemento hasta el último índice especificado.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="value" /> dentro del intervalo de elementos de <see cref="T:System.Collections.ArrayList" /> que abarca desde el primer elemento hasta <paramref name="startIndex" />, si se encuentra; de lo contrario, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>Busca el objeto <see cref="T:System.Object" /> especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" /> que contiene el número de elementos especificado y termina en el índice especificado.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="value" /> dentro del intervalo de elementos de <see cref="T:System.Collections.ArrayList" /> que contiene el número de elementos de <paramref name="count" /> y termina en <paramref name="startIndex" />, si se encuentra; de lo contrario, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fuera del intervalo de índices válidos para <see cref="T:System.Collections.ArrayList" />.  
O bien 
 <paramref name="count" /> es menor que cero.  
o bien 
 <paramref name="startIndex" /> y <paramref name="count" /> no especifican una sección válida en <see cref="T:System.Collections.ArrayList" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>Devuelve un contenedor de <see cref="T:System.Collections.ArrayList" /> de solo lectura.</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> que se va a incluir.</param>
      <returns>Contenedor de <see cref="T:System.Collections.ArrayList" /> de solo lectura para <paramref name="list" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>Devuelve un contenedor de <see cref="T:System.Collections.IList" /> de solo lectura.</summary>
      <param name="list">
        <see cref="T:System.Collections.IList" /> que se va a incluir.</param>
      <returns>Contenedor de <see cref="T:System.Collections.IList" /> de solo lectura para <paramref name="list" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a quitar de <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
o bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
o bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Índice inicial de base cero del intervalo de elementos que se va a quitar.</param>
      <param name="count">Número de elementos que se va a quitar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>Devuelve una <see cref="T:System.Collections.ArrayList" /> cuyos elementos son copias del valor especificado.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a copiar varias veces en la nueva <see cref="T:System.Collections.ArrayList" />. El valor puede ser <see langword="null" />.</param>
      <param name="count">Número de veces que se debe copiar el parámetro <paramref name="value" />.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> con un número <paramref name="count" /> de elementos que son todos ellos copias de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>Invierte el orden de los elementos en la <see cref="T:System.Collections.ArrayList" /> completa.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>Invierte el orden de los elementos en el intervalo especificado.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count">Número de elementos del intervalo que se va a invertir.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido de elementos en la <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>Copia los elementos de una colección en un intervalo de elementos de <see cref="T:System.Collections.ArrayList" />.</summary>
      <param name="index">Índice de <see cref="T:System.Collections.ArrayList" /> de base cero en el que empiezan a copiarse los elementos de <paramref name="c" />.</param>
      <param name="c">
        <see cref="T:System.Collections.ICollection" /> cuyos elementos se copian en <see cref="T:System.Collections.ArrayList" />. La propia colección no puede ser <see langword="null" />, pero puede contener elementos que sean <see langword="null" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="index" /> más el número de elementos de <paramref name="c" /> es mayor que <see cref="P:System.Collections.ArrayList.Count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>Ordena todos los elementos de <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>Ordena los elementos en la <see cref="T:System.Collections.ArrayList" /> completa usando el comparador especificado.</summary>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.  
o bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para usar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
      <exception cref="T:System.InvalidOperationException">Se produjo un error al comparar dos elementos.</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> se pasa para <paramref name="comparer" />, y los elementos de la lista no implementan <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Ordena los elementos en un intervalo de elementos de la matriz <see cref="T:System.Collections.ArrayList" /> usando el comparador especificado.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.IComparer" /> que se va a usar al comparar elementos.  
O bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para usar la implementación de <see cref="T:System.IComparable" /> de cada elemento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no especifican un intervalo válido en <see cref="T:System.Collections.ArrayList" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.</exception>
      <exception cref="T:System.InvalidOperationException">Se produjo un error al comparar dos elementos.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>Devuelve un contenedor de la clase <see cref="T:System.Collections.ArrayList" /> que está sincronizado (es seguro para subprocesos).</summary>
      <param name="list">
        <see cref="T:System.Collections.ArrayList" /> que se va a sincronizar.</param>
      <returns>Contenedor de la clase <see cref="T:System.Collections.ArrayList" /> que está sincronizado (es seguro para subprocesos).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>Devuelve un contenedor de la clase <see cref="T:System.Collections.IList" /> que está sincronizado (es seguro para subprocesos).</summary>
      <param name="list">
        <see cref="T:System.Collections.IList" /> que se va a sincronizar.</param>
      <returns>Contenedor de la clase <see cref="T:System.Collections.IList" /> que está sincronizado (es seguro para subprocesos).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ArrayList" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>Copia los elementos de <see cref="T:System.Collections.ArrayList" /> en una nueva matriz de <see cref="T:System.Object" />.</summary>
      <returns>Matriz de <see cref="T:System.Object" /> que contiene copias de los elementos de <see cref="T:System.Collections.ArrayList" />.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>Copia los elementos de la matriz <see cref="T:System.Collections.ArrayList" /> a una nueva matriz del tipo de elemento especificado.</summary>
      <param name="type">
        <see cref="T:System.Type" /> de elemento de la matriz de destino que se va a crear y en la que se van a copiar los elementos.</param>
      <returns>Una matriz del tipo de elemento especificado que contiene copias de los elementos de la matriz <see cref="T:System.Collections.ArrayList" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">El tipo del origen <see cref="T:System.Collections.ArrayList" /> no puede convertirse automáticamente al tipo especificado.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>Establece la capacidad en el número real de elementos que hay en <see cref="T:System.Collections.ArrayList" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.ArrayList" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>Compara dos objetos para ver si son iguales teniendo en cuenta la distinción entre mayúsculas y minúsculas de las cadenas.</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Comparer" /> utilizando la clase <see cref="T:System.Globalization.CultureInfo" /> especificada.</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que debe usarse para el nuevo objeto <see cref="T:System.Collections.Comparer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>Realiza una comparación distinguiendo entre mayúsculas y minúsculas de dos objetos del mismo tipo y devuelve un valor que indica si uno es menor, igual o mayor que el otro.</summary>
      <param name="a">Primer objeto que se va a comparar.</param>
      <param name="b">Segundo objeto que se va a comparar.</param>
      <returns>Entero con signo que indica los valores relativos de <paramref name="a" /> y <paramref name="b" />, como se muestra en la tabla siguiente.  
  Valor 
  Significado 
  Menor que cero 
 <paramref name="a" /> es menor que <paramref name="b" />.  

  Cero 
 <paramref name="a" /> es igual que <paramref name="b" />.  

  Mayor que cero 
 <paramref name="a" /> es mayor que <paramref name="b" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="a" /> ni <paramref name="b" /> implementan la interfaz <see cref="T:System.IComparable" />.  
O bien 
 <paramref name="a" /> y <paramref name="b" /> son de tipos diferentes y ninguno puede controlar comparaciones con el otro.</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>Representa una instancia de <see cref="T:System.Collections.Comparer" /> que está asociada a la propiedad <see cref="P:System.Threading.Thread.CurrentCulture" /> del subproceso actual. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>Representa una instancia de <see cref="T:System.Collections.Comparer" /> que está asociada a la propiedad <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para la serialización.</summary>
      <param name="info">Objeto que se va a rellenar con datos.</param>
      <param name="context">Información de contexto acerca del origen o el destino de la serialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>Representa una colección de pares de clave y valor que se organizan por código hash de la clave.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial, el factor de carga, el proveedor de código hash y el comparador predeterminados.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en el nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, y utiliza el factor de carga, el proveedor de código hash y comparador predeterminados.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en un nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, y utiliza el factor de carga predeterminado y el objeto <see cref="T:System.Collections.IEqualityComparer" /> especificado.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="equalityComparer">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que define el proveedor de código hash y el comparador que se van a usar con <see cref="T:System.Collections.Hashtable" />.  
O bien 
 <see langword="null" /> para utilizar el proveedor de código hash y el comparador predeterminados. El proveedor de código hash predeterminado es la implementación del <see cref="M:System.Object.GetHashCode" /> de cada clave y el comparador predeterminado es la implementación del <see cref="M:System.Object.Equals(System.Object)" /> de cada clave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en el nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, utiliza el factor de carga predeterminado, y el proveedor de código hash y comparador especificados. Esta API está obsoleta. Para una alternativa, vea <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="hcp">Objeto <see cref="T:System.Collections.IHashCodeProvider" /> que suministra los códigos hash de todas las claves de <see cref="T:System.Collections.Hashtable" />.  
o bien 
 <see langword="null" /> para utilizar el proveedor predeterminado de código hash, que es la implementación de <see cref="M:System.Object.GetHashCode" /> de cada clave.</param>
      <param name="comparer">Objeto <see cref="T:System.Collections.IComparer" /> que se va a utilizar para determinar si dos claves son iguales.  
o bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de cada clave de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en el nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, utiliza el factor de carga especificado, y el proveedor de código hash y comparador predeterminados.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> es menor que 0,1.  
o bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en el nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, y utiliza el factor de carga y el objeto <see cref="T:System.Collections.IEqualityComparer" /> especificados.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <param name="equalityComparer">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que define el proveedor de código hash y el comparador que se van a usar con <see cref="T:System.Collections.Hashtable" />.  
o bien 
 <see langword="null" /> para utilizar el proveedor de código hash y el comparador predeterminados. El proveedor de código hash predeterminado es la implementación del <see cref="M:System.Object.GetHashCode" /> de cada clave y el comparador predeterminado es la implementación del <see cref="M:System.Object.Equals(System.Object)" /> de cada clave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> es menor que 0,1.  
O bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Hashtable" /> copiando los elementos del diccionario especificado en el nuevo objeto <see cref="T:System.Collections.Hashtable" />. El nuevo objeto <see cref="T:System.Collections.Hashtable" /> tiene una capacidad inicial igual al número de elementos copiados, y utiliza el factor de carga, el proveedor de código hash y el comparador especificados.</summary>
      <param name="d">Objeto <see cref="T:System.Collections.IDictionary" /> que debe copiarse a un nuevo objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <param name="hcp">Objeto <see cref="T:System.Collections.IHashCodeProvider" /> que suministra los códigos hash de todas las claves de <see cref="T:System.Collections.Hashtable" />.  
O bien 
 <see langword="null" /> para utilizar el proveedor predeterminado de código hash, que es la implementación de <see cref="M:System.Object.GetHashCode" /> de cada clave.</param>
      <param name="comparer">Objeto <see cref="T:System.Collections.IComparer" /> que se va a utilizar para determinar si dos claves son iguales.  
o bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de cada clave de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" /> es menor que 0,1.  
O bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial y el factor de carga predeterminados, y el objeto <see cref="T:System.Collections.IEqualityComparer" /> especificado.</summary>
      <param name="equalityComparer">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que define el proveedor de código hash y el comparador que se van a utilizar con el objeto <see cref="T:System.Collections.Hashtable" />.  
o bien 
 <see langword="null" /> para utilizar el proveedor de código hash y el comparador predeterminados. El proveedor de código hash predeterminado es la implementación del <see cref="M:System.Object.GetHashCode" /> de cada clave y el comparador predeterminado es la implementación del <see cref="M:System.Object.Equals(System.Object)" /> de cada clave.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial y el factor de carga predeterminados, y el proveedor de código hash y el comparador especificados.</summary>
      <param name="hcp">Objeto <see cref="T:System.Collections.IHashCodeProvider" /> que suministra los códigos hash de todas las claves del objeto <see cref="T:System.Collections.Hashtable" />.  
O bien 
 <see langword="null" /> para utilizar el proveedor predeterminado de código hash, que es la implementación de <see cref="M:System.Object.GetHashCode" /> de cada clave.</param>
      <param name="comparer">Objeto <see cref="T:System.Collections.IComparer" /> que se va a utilizar para determinar si dos claves son iguales.  
O bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de cada clave de <see cref="M:System.Object.Equals(System.Object)" />.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial especificada, y el factor de carga, el proveedor de código hash y el comparador predeterminados.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial y el objeto <see cref="T:System.Collections.IEqualityComparer" /> especificados, y el factor de carga predeterminado.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <param name="equalityComparer">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que define el proveedor de código hash y el comparador que se van a usar con <see cref="T:System.Collections.Hashtable" />.  
O bien 
 <see langword="null" /> para utilizar el proveedor de código hash y el comparador predeterminados. El proveedor de código hash predeterminado es la implementación del <see cref="M:System.Object.GetHashCode" /> de cada clave y el comparador predeterminado es la implementación del <see cref="M:System.Object.Equals(System.Object)" /> de cada clave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial, el proveedor de código hash y el comparador especificados, y el factor de carga predeterminado.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <param name="hcp">Objeto <see cref="T:System.Collections.IHashCodeProvider" /> que suministra los códigos hash de todas las claves de <see cref="T:System.Collections.Hashtable" />.  
O bien 
 <see langword="null" /> para utilizar el proveedor predeterminado de código hash, que es la implementación de <see cref="M:System.Object.GetHashCode" /> de cada clave.</param>
      <param name="comparer">Objeto <see cref="T:System.Collections.IComparer" /> que se va a utilizar para determinar si dos claves son iguales.  
O bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de cada clave de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial y el factor de carga especificados, y el proveedor de código hash y el comparador predeterminados.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.  
o bien 
 <paramref name="loadFactor" /> es menor que 0,1.  
o bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> está produciendo un desbordamiento.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial, el factor de carga y el objeto <see cref="T:System.Collections.IEqualityComparer" /> especificados.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <param name="equalityComparer">Objeto <see cref="T:System.Collections.IEqualityComparer" /> que define el proveedor de código hash y el comparador que se van a usar con <see cref="T:System.Collections.Hashtable" />.  
o bien 
 <see langword="null" /> para utilizar el proveedor de código hash y el comparador predeterminados. El proveedor de código hash predeterminado es la implementación del <see cref="M:System.Object.GetHashCode" /> de cada clave y el comparador predeterminado es la implementación del <see cref="M:System.Object.Equals(System.Object)" /> de cada clave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.  
O bien 
 <paramref name="loadFactor" /> es menor que 0,1.  
o bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> utilizando la capacidad inicial, el factor de carga, el proveedor de código hash y el comparador especificados.</summary>
      <param name="capacity">Número aproximado de elementos que el objeto <see cref="T:System.Collections.Hashtable" /> puede contener inicialmente.</param>
      <param name="loadFactor">Número incluido en el intervalo de 0,1 a 1,0 que se multiplica por el valor predeterminado que proporciona el mejor rendimiento. El resultado es la relación máxima de elementos por sectores de almacenamiento.</param>
      <param name="hcp">Objeto <see cref="T:System.Collections.IHashCodeProvider" /> que suministra los códigos hash de todas las claves de <see cref="T:System.Collections.Hashtable" />.  
o bien 
 <see langword="null" /> para utilizar el proveedor predeterminado de código hash, que es la implementación de <see cref="M:System.Object.GetHashCode" /> de cada clave.</param>
      <param name="comparer">Objeto <see cref="T:System.Collections.IComparer" /> que se va a utilizar para determinar si dos claves son iguales.  
O bien 
 <see langword="null" /> para utilizar el comparador predeterminado, que es la implementación de cada clave de <see cref="M:System.Object.Equals(System.Object)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.  
O bien 
 <paramref name="loadFactor" /> es menor que 0,1.  
O bien 
 <paramref name="loadFactor" /> es mayor que 1,0.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.Hashtable" /> que es serializable, utilizando los objetos <see cref="T:System.Runtime.Serialization.SerializationInfo" /> y <see cref="T:System.Runtime.Serialization.StreamingContext" /> especificados.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información que se requiere para serializar el objeto <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada al <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor especificados a <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar. El valor puede ser <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Hashtable" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.Hashtable" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Hashtable" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>Crea una copia superficial de la colección <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Copia superficial de la colección <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>Obtiene o establece el <see cref="T:System.Collections.IComparer" /> que se utilizará para <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> que se va a utilizar para <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentException">La propiedad está establecida en un valor, pero la tabla hash se creó utilizando una interfaz <see cref="T:System.Collections.IEqualityComparer" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>Determina si <see cref="T:System.Collections.Hashtable" /> contiene una clave específica.</summary>
      <param name="key">Clave que se buscará en <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <see langword="true" /> si la colección <see cref="T:System.Collections.Hashtable" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>Determina si <see cref="T:System.Collections.Hashtable" /> contiene una clave específica.</summary>
      <param name="key">Clave que se buscará en <see cref="T:System.Collections.Hashtable" />.</param>
      <returns>
        <see langword="true" /> si la colección <see cref="T:System.Collections.Hashtable" /> contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>Determina si <see cref="T:System.Collections.Hashtable" /> contiene un valor específico.</summary>
      <param name="value">Valor que se va a buscar en la colección <see cref="T:System.Collections.Hashtable" />. El valor puede ser <see langword="null" />.</param>
      <returns>Es <see langword="true" /> si <see cref="T:System.Collections.Hashtable" /> contiene un elemento con <paramref name="value" /> especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.Hashtable" /> a una instancia unidimensional de <see cref="T:System.Array" /> en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los objetos <see cref="T:System.Collections.DictionaryEntry" /> copiados de <see cref="T:System.Collections.Hashtable" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
O bien 
El número de elementos de la <see cref="T:System.Collections.Hashtable" /> de origen es mayor que el espacio disponible desde <paramref name="arrayIndex" /> hasta el final de la <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException">El tipo de la <see cref="T:System.Collections.Hashtable" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>Obtiene el número de pares clave-valor incluidos en <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Número de pares clave-valor incluidos en <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>Obtiene el <see cref="T:System.Collections.IEqualityComparer" /> que se va a utilizar para <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" /> que se va a utilizar para <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentException">La propiedad está establecida en un valor, pero la tabla hash se creó utilizando un <see cref="T:System.Collections.IHashCodeProvider" /> y un <see cref="T:System.Collections.IComparer" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> que itera a través del objeto <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.IDictionaryEnumerator" /> para la colección <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>Devuelve el código hash de la clave especificada.</summary>
      <param name="key">
        <see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
      <returns>Código hash de <paramref name="key" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa la interfaz de <see cref="T:System.Runtime.Serialization.ISerializable" /> y devuelve los datos necesarios para serializar <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene la información que se requiere para serializar <see cref="T:System.Collections.Hashtable" />.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene el origen y el destino de la secuencia serializada asociada al <see cref="T:System.Collections.Hashtable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Se modificó la colección.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>Obtiene o establece el objeto que puede dispensar códigos hash.</summary>
      <returns>Objeto que puede dispensar códigos hash.</returns>
      <exception cref="T:System.ArgumentException">La propiedad está establecida en un valor, pero la tabla hash se creó utilizando una interfaz <see cref="T:System.Collections.IEqualityComparer" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.Hashtable" /> tiene un tamaño fijo.</summary>
      <returns>Es<see langword="true" /> si la interfaz <see cref="T:System.Collections.Hashtable" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Hashtable" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Hashtable" /> es de solo lectura; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.Hashtable" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es<see langword="true" /> si el acceso a <see cref="T:System.Collections.Hashtable" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>Obtiene o establece el valor asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a obtener o a establecer.</param>
      <returns>Valor asociado a la clave especificada. Si no se encuentra la clave especificada, al intentar obtenerla se devuelve <see langword="null" /> y al intentar establecerla se crea una nueva entrada con la clave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad está establecida y <see cref="T:System.Collections.Hashtable" /> es de solo lectura.  
O bien 
La propiedad está establecida, <paramref name="key" /> no existe en la colección y <see cref="T:System.Collections.Hashtable" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>Compara un <see cref="T:System.Object" /> específico con una clave concreta en <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="item">
        <see cref="T:System.Object" /> que se va a comparar con <paramref name="key" />.</param>
      <param name="key">Clave de <see cref="T:System.Collections.Hashtable" /> que se va a comparar con <paramref name="item" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> y <paramref name="key" /> son iguales; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> es <see langword="null" />.  
o bien 
 <paramref name="key" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> que contiene las claves de <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>Implementa la interfaz <see cref="T:System.Runtime.Serialization.ISerializable" /> y genera el evento de deserialización cuando esta ha finalizado.</summary>
      <param name="sender">Origen del evento de deserialización.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">El objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> asociado a la <see cref="T:System.Collections.Hashtable" /> actual no es válido.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada de <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" /> es de solo lectura.  
O bien 
<see cref="T:System.Collections.Hashtable" /> tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>Devuelve un contenedor sincronizado (seguro para subprocesos) para el objeto <see cref="T:System.Collections.Hashtable" />.</summary>
      <param name="table">
        <see cref="T:System.Collections.Hashtable" /> que se va a sincronizar.</param>
      <returns>Contenedor sincronizado (seguro para subprocesos) para el objeto <see cref="T:System.Collections.Hashtable" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Hashtable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.Hashtable" />.</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>Proporciona un código hash para un objeto mediante una función hash personalizada.</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>Devuelve un código hash para el objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> para el que se va a devolver un código hash.</param>
      <returns>Código hash para el objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException">El tipo de <paramref name="obj" /> es un tipo de referencia y <paramref name="obj" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>Define la clase base de todas las clases enlazadas a un contexto.</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>Crea una instancia de una instancia de la clase <see cref="T:System.ContextBoundObject" />.</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>Excepción que se genera cuando se produce un error al intentar serializar un objeto en un límite del contexto.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ContextMarshalException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ContextMarshalException" /> con datos serializados.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ContextMarshalException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ContextMarshalException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="inner">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="inner" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>Indica que el valor de un campo estático es único para un determinado contexto.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ContextStaticAttribute" />.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>Convierte un tipo de datos base en otro tipo de datos base.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>Devuelve un objeto del tipo especificado y cuyo valor es equivalente al objeto especificado.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="conversionType">Tipo de objeto que se va a devolver.</param>
      <returns>Objeto cuyo tipo es <paramref name="conversionType" /> y cuyo valor es equivalente a <paramref name="value" />.  
o bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> no es un tipo de valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.  
O bien 
 <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> es un tipo de valor.  
o bien 
 <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" /> .</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato reconocido por <paramref name="conversionType" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número que está fuera del intervalo de <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado. Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="conversionType">Tipo de objeto que se va a devolver.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Objeto cuyo tipo es <paramref name="conversionType" /> y cuyo valor es equivalente a <paramref name="value" />.  
O bien 
 <paramref name="value" /> si el tipo <see cref="T:System.Type" /> de <paramref name="value" /> y <paramref name="conversionType" /> son iguales.  
o bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> no es un tipo de valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.  
O bien 
 <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> es un tipo de valor.  
o bien 
 <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato para <paramref name="conversionType" /> reconocido por <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número que está fuera del intervalo de <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="typeCode">Tipo de objeto que se va a devolver.</param>
      <returns>Objeto cuyo tipo subyacente es <paramref name="typeCode" /> y cuyo valor es equivalente a <paramref name="value" />.  
o bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic) si <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> es <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" /> u <see cref="F:System.TypeCode.Object" />.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.  
O bien 
 <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> especifica un tipo de valor.  
O bien 
 <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato reconocido por el tipo <paramref name="typeCode" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número que está fuera del intervalo del tipo <paramref name="typeCode" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> no es válido.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado. Un parámetro proporciona información de formato específica de la referencia cultural.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="typeCode">Tipo de objeto que se va a devolver.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Objeto cuyo tipo subyacente es <paramref name="typeCode" /> y cuyo valor es equivalente a <paramref name="value" />.  
O bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic) si <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> es <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" /> u <see cref="F:System.TypeCode.Object" />.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.  
o bien 
 <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> especifica un tipo de valor.  
O bien 
 <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato para el tipo <paramref name="typeCode" /> reconocido por <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número que está fuera del intervalo del tipo <paramref name="typeCode" /> .</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> no es válido.</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>Una constante que representa una columna de base de datos sin datos; es decir, el valor Null de las bases de datos.</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Convierte un subconjunto de una matriz de caracteres Unicode, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo. Los parámetros especifican el subconjunto de la matriz de entrada y el número de elementos que se convierten.</summary>
      <param name="inArray">Matriz de caracteres Unicode.</param>
      <param name="offset">Posición en <paramref name="inArray" />.</param>
      <param name="length">Número de elementos de <paramref name="inArray" /> que se van a convertir.</param>
      <returns>Matriz de enteros de 8 bits sin signo que equivale a un número <paramref name="length" /> de elementos en la posición <paramref name="offset" /> de <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="length" /> es menor que 0.  
o bien 
 <paramref name="offset" /> más <paramref name="length" /> indica una posición que no se encuentra dentro de <paramref name="inArray" />.</exception>
      <exception cref="T:System.FormatException">La longitud de <paramref name="inArray" />, pasando por alto los espacios en blanco, no es cero ni un múltiplo de 4.  
o bien 
El formato de <paramref name="inArray" /> no es válido. <paramref name="inArray" /> contiene un carácter de base 64, más de dos caracteres de relleno o un carácter que no sea un espacio en blanco entre los caracteres de relleno.</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>Convierte la cadena especificada, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo.</summary>
      <param name="s">Cadena que se va a convertir.</param>
      <returns>Una matriz de enteros de 8 bits sin signo equivalente a <paramref name="s" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longitud de <paramref name="s" />, pasando por alto los espacios en blanco, no es cero ni un múltiplo de 4.  
O bien 
El formato de <paramref name="s" /> no es válido. <paramref name="s" /> contiene un carácter que no es de base 64, más de dos caracteres de relleno o un carácter que no es un espacio en blanco entre los caracteres de relleno.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>Devuelve el <see cref="T:System.TypeCode" /> del objeto especificado.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <returns>
        <see cref="T:System.TypeCode" /> para <paramref name="value" /> o <see cref="F:System.TypeCode.Empty" /> si <paramref name="value" /> es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>Devuelve una indicación en la que se precisa si el objeto especificado es de tipo <see cref="T:System.DBNull" />.</summary>
      <param name="value">Objeto.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> es de tipo <see cref="T:System.DBNull" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64. Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, así como el número de elementos de la matriz de entrada que se van a convertir.</summary>
      <param name="inArray">Matriz de entrada de enteros de 8 bits sin signo.</param>
      <param name="offsetIn">Posición en <paramref name="inArray" />.</param>
      <param name="length">Número de elementos de <paramref name="inArray" /> que se van a convertir.</param>
      <param name="outArray">Matriz de salida de caracteres Unicode.</param>
      <param name="offsetOut">Posición en <paramref name="outArray" />.</param>
      <returns>Entero de 32 bits con signo que contiene el número de bytes de <paramref name="outArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> o <paramref name="outArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> o <paramref name="length" /> es negativo.  
O bien 
 <paramref name="offsetIn" /> más <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.  
O bien 
 <paramref name="offsetOut" /> más el número de elementos a devolver es mayor que la longitud de <paramref name="outArray" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64. Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, el número de elementos de la matriz de entrada que se convierten y si se insertan saltos de línea en la matriz de salida.</summary>
      <param name="inArray">Matriz de entrada de enteros de 8 bits sin signo.</param>
      <param name="offsetIn">Posición en <paramref name="inArray" />.</param>
      <param name="length">Número de elementos de <paramref name="inArray" /> que se van a convertir.</param>
      <param name="outArray">Matriz de salida de caracteres Unicode.</param>
      <param name="offsetOut">Posición en <paramref name="outArray" />.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</param>
      <returns>Entero de 32 bits con signo que contiene el número de bytes de <paramref name="outArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> o <paramref name="outArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> o <paramref name="length" /> es negativo.  
O bien 
 <paramref name="offsetIn" /> más <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.  
o bien 
 <paramref name="offsetOut" /> más el número de elementos a devolver es mayor que la longitud de <paramref name="outArray" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</summary>
      <param name="inArray">Matriz de enteros de 8 bits sin signo.</param>
      <returns>Representación de cadena, en base 64, del contenido de <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64. Un parámetro especifica si se insertan saltos de línea en el valor devuelto.</summary>
      <param name="inArray">Matriz de enteros de 8 bits sin signo.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</param>
      <returns>Representación de cadena en base 64 de los elementos de <paramref name="inArray" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64. Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada y el número de elementos de la matriz que se van a convertir.</summary>
      <param name="inArray">Matriz de enteros de 8 bits sin signo.</param>
      <param name="offset">Posición de desplazamiento en <paramref name="inArray" />.</param>
      <param name="length">Número de elementos de <paramref name="inArray" /> que se van a convertir.</param>
      <returns>Representación de cadena en base 64 de los elementos <paramref name="length" /> de <paramref name="inArray" />, empezando en la posición <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="length" /> es negativo.  
O bien 
 <paramref name="offset" /> más <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64. Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada, el número de elementos en la matriz que se convierten y si se insertan saltos de línea en el valor devuelto.</summary>
      <param name="inArray">Matriz de enteros de 8 bits sin signo.</param>
      <param name="offset">Posición de desplazamiento en <paramref name="inArray" />.</param>
      <param name="length">Número de elementos de <paramref name="inArray" /> que se van a convertir.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</param>
      <returns>Representación de cadena en base 64 de los elementos <paramref name="length" /> de <paramref name="inArray" />, empezando en la posición <paramref name="offset" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="length" /> es negativo.  
O bien 
 <paramref name="offset" /> más <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <param name="bytes" />
      <param name="options" />
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>Devuelve el valor booleano especificado; no se efectúa una conversión real.</summary>
      <param name="value">Valor booleano que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un valor booleano equivalente.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un valor booleano equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>Convierte el valor de un objeto especificado en un valor booleano equivalente.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Valor <see langword="true" /> o <see langword="false" />, que refleja el valor devuelto al invocar el método <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> para el tipo subyacente de <paramref name="value" />. Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> es una cadena que no es igual a <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión de <paramref name="value" /> a un <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Valor <see langword="true" /> o <see langword="false" />, que refleja el valor devuelto al invocar el método <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> para el tipo subyacente de <paramref name="value" />. Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> es una cadena que no es igual a <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión de <paramref name="value" /> a un <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un valor booleano equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente.</summary>
      <param name="value">Cadena que contiene el valor de <see cref="F:System.Boolean.TrueString" /> o de <see cref="F:System.Boolean.FalseString" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.TrueString" />, o <see langword="false" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.FalseString" /> o <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es igual que <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el valor de <see cref="F:System.Boolean.TrueString" /> o de <see cref="F:System.Boolean.FalseString" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. Este parámetro se ignora.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.TrueString" />, o <see langword="false" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.FalseString" /> o <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es igual que <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un valor booleano equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>Devuelve el entero de 8 bits sin signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 8 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 8 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 8 bits sin signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en el formato de la propiedad de un valor <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión de <paramref name="value" /> al tipo <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 8 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en el formato de la propiedad de un valor <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión de <paramref name="value" /> al tipo <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">El entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 8 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 8 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
O bien 
 <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número sin signo en base 10, con un signo negativo como prefijo.  
o bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en el carácter Unicode equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>Devuelve el valor del carácter Unicode especificado; no se efectúa una conversión real.</summary>
      <param name="value">Carácter Unicode que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un carácter Unicode equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un carácter Unicode equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un carácter Unicode equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>Convierte el valor del objeto especificado en un carácter Unicode.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <returns>Un carácter Unicode que es equivalente a value o <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es una cadena nula.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión de <paramref name="value" /> a un <see cref="T:System.Char" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en su carácter Unicode equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un carácter Unicode que es equivalente a <paramref name="value" /> o <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es una cadena nula.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión de <paramref name="value" /> a un <see cref="T:System.Char" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un carácter Unicode equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>Convierte el primer carácter de una cadena especificada en un carácter Unicode.</summary>
      <param name="value">Una cadena de longitud 1.</param>
      <returns>Un carácter Unicode equivalente al primer y único carácter de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longitud de <paramref name="value" /> no es 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>Convierte el primer carácter de una cadena especificada en un carácter Unicode, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Una cadena de longitud 1 o <see langword="null" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. Este parámetro se ignora.</param>
      <returns>Un carácter Unicode equivalente al primer y único carácter de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">La longitud de <paramref name="value" /> no es 1.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en el carácter Unicode equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en el carácter Unicode equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en el carácter Unicode equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un carácter Unicode equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Char.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>Devuelve el objeto <see cref="T:System.DateTime" /> especificado; no se efectúa una conversión real.</summary>
      <param name="value">Valor de fecha y hora.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Número que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de punto flotante de precisión doble que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>Convierte el valor del objeto especificado en un objeto <see cref="T:System.DateTime" />.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Fecha y hora equivalente del valor de <paramref name="value" />, o fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor de hora y fecha válida.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un objeto <see cref="T:System.DateTime" />, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un valor de hora y fecha válida.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>Convierte la representación de cadena especificada de una fecha y hora en un valor de fecha y hora equivalente.</summary>
      <param name="value">Representación en forma de cadena de una fecha y hora.</param>
      <returns>Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es una cadena de hora y fecha de formato correcto.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en una fecha y hora equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene una fecha y hora que se van a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es una cadena de hora y fecha de formato correcto.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un número decimal equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en el número decimal equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>Devuelve el número decimal especificado; no se efectúa una conversión real.</summary>
      <param name="value">Número decimal.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un número decimal equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Decimal.MaxValue" /> o menor que <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>Convierte el valor del objeto especificado en un número decimal equivalente.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en el número decimal equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en el número decimal equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Decimal.MaxValue" /> o menor que <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un número decimal equivalente.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <returns>Un número decimal equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número decimal equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un número decimal equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un número decimal equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>Devuelve el número de punto flotante de precisión doble especificado; no se efectúa una conversión real.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>Convierte el valor del objeto especificado en un número de punto flotante de precisión doble.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un número de punto flotante de precisión doble, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número de punto flotante de precisión doble equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 16 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 16 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>Devuelve el entero de 16 bits con signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 16 bits con signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Entero de 16 bits con signo que equivale a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 16 bits con signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 16 bits con signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está en un formato adecuado para un tipo de <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, se redondea al entero de 16 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
o bien 
 <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.  
o bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>Devuelve el entero de 32 bits con signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 32 bits con signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 32 bits con signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 32 bits con signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
O bien 
 <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.  
o bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>Devuelve el entero de 64 bits con signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 64 bits con signo.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 64 bits con signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 64 bits con signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
O bien 
 <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.  
o bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 64 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 8 bits con signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 8 bits con signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>Devuelve el entero de 8 bits con signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 8 bits con signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Entero de 8 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si value es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Entero de 8 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
O bien 
 <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número con signo que no sea de base 10, tiene un signo negativo como prefijo.  
O bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits con signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.  
 <paramref name="value" /> se redondea usando el sistema de redondeo al valor más próximo. Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.  
 <paramref name="value" /> se redondea usando el sistema de redondeo al valor más próximo. Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 8 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>Devuelve el número de punto flotante de precisión sencilla especificado; no se efectúa una conversión real.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no es un número con un formato válido.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>Convierte el valor booleano especificado en su representación de cadena equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>Convierte el valor booleano especificado en su representación de cadena equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <param name="provider">Una instancia de un objeto. Este parámetro se ignora.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>Convierte el valor de un entero de 8 bits sin signo en su representación de cadena equivalente en una base especificada.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <param name="toBase">Base del valor devuelto, que debe ser 2, 8, 10 ó 16.</param>
      <returns>Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> no es 2, 8, 10 o 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en la representación de cadena equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>Convierte el valor del carácter Unicode especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. Este parámetro se ignora.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>Convierte el valor de la estructura <see cref="T:System.DateTime" /> especificada en su representación de cadena equivalente.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>Convierte el valor de la estructura <see cref="T:System.DateTime" /> especificada en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>Convierte el valor de un número decimal especificado en su representación de cadena equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>Convierte el valor del número decimal especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>Convierte el valor de un entero de 16 bits con signo en su representación de cadena equivalente en una base especificada.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <param name="toBase">Base del valor devuelto, que debe ser 2, 8, 10 ó 16.</param>
      <returns>Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> no es 2, 8, 10 o 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>Convierte el valor de un entero de 32 bits con signo en su representación de cadena equivalente en una base especificada.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <param name="toBase">Base del valor devuelto, que debe ser 2, 8, 10 ó 16.</param>
      <returns>Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> no es 2, 8, 10 o 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>Convierte el valor de un entero de 64 bits con signo en su representación de cadena equivalente en una base especificada.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <param name="toBase">Base del valor devuelto, que debe ser 2, 8, 10 ó 16.</param>
      <returns>Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> no es 2, 8, 10 o 16.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>Convierte el valor del objeto especificado en su representación de cadena equivalente.</summary>
      <param name="value">Objeto que proporciona el valor que se va a convertir, o <see langword="null" />.</param>
      <returns>Representación de cadena de <paramref name="value" /> o <see cref="F:System.String.Empty" /> si <paramref name="value" /> es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que proporciona el valor que se va a convertir, o <see langword="null" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>La representación de cadena de <paramref name="value" />, o <see cref="F:System.String.Empty" /> si <paramref name="value" /> es un objeto cuyo valor es <see langword="null" />. Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en la representación de cadena equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</summary>
      <param name="value">Cadena que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</summary>
      <param name="value">Cadena que se va a devolver.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural. Este parámetro se ignora.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en la representación de cadena equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Entero de 16 bits sin signo que equivale a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 16 bits sin signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 16 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
o bien 
 <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.  
o bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>Devuelve el entero de 16 bits sin signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 32 bits sin signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 32 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
o bien 
 <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.  
O bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>Devuelve el entero de 32 bits sin signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>Convierte el valor booleano especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Valor booleano que se va a convertir.</param>
      <returns>Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>Convierte el valor del carácter Unicode especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Carácter Unicode que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</summary>
      <param name="value">Valor de fecha y hora que se va a convertir.</param>
      <returns>No se admite esta conversión. No se devuelve ningún valor.</returns>
      <exception cref="T:System.InvalidCastException">No se admite esta conversión.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>Convierte el valor del número decimal especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Número decimal que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>Convierte el valor del entero de 64 bits con signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 64 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>Convierte el valor del objeto especificado en un entero de 64 bits sin signo.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
O bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>Convierte el valor del objeto especificado en un entero de 64 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene un formato adecuado.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.  
o bien 
No se admite la conversión.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 8 bits con signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que se va a convertir.</param>
      <returns>
        <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo. Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <returns>Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Un entero de 64 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no está formado por un signo opcional seguido de una secuencia de dígitos (de 0 a 9).</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <param name="fromBase">Base del número de <paramref name="value" />, que debe ser 2, 8, 10 o 16.</param>
      <returns>Un entero de 64 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> no es 2, 8, 10 o 16.  
O bien 
 <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />. El mensaje de excepción indica que no hay dígitos para convertir si el primer carácter de <paramref name="value" /> no es válido; en caso contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, que representa un número sin signo que no sea de base 10, tiene un signo negativo como prefijo.  
O bien 
 <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 16 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</summary>
      <param name="value">Entero de 32 bits sin signo que se va a convertir.</param>
      <returns>Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>Devuelve el entero de 64 bits sin signo especificado; no se efectúa una conversión real.</summary>
      <param name="value">Entero de 64 bits sin signo que se va a devolver.</param>
      <returns>
        <paramref name="value" /> se devuelve sin cambios.</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <param name="chars" />
      <param name="bytes" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <param name="s" />
      <param name="bytes" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <param name="bytes" />
      <param name="chars" />
      <param name="charsWritten" />
      <param name="options" />
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Proporciona un conjunto de métodos y propiedades que puede usar para medir el tiempo transcurrido con precisión.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> de sólo lectura que representa el tiempo transcurrido total medido por la instancia actual.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en milisegundos.</summary>
      <returns>Entero largo de solo lectura que representa el número total de milisegundos medido por la instancia actual.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en tics de temporizador.</summary>
      <returns>Un entero largo de solo lectura que representa el número total de tics de temporizador medido por la instancia actual.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Obtiene la frecuencia del temporizador en forma de número de tics por segundo. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Obtiene el número actual de tics del mecanismo de temporización.</summary>
      <returns>Entero largo que representa el valor del contador de tics del mecanismo de temporización subyacente.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indica si el temporizador se basa en un contador de rendimiento de alta resolución. Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Obtiene un valor que indica si el temporizador <see cref="T:System.Diagnostics.Stopwatch" /> está en funcionamiento.</summary>
      <returns>
        <see langword="true" />, si la instancia de <see cref="T:System.Diagnostics.Stopwatch" /> se está ejecutando actualmente y está midiendo el tiempo transcurrido para un intervalo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Detiene la medición del intervalo de tiempo y restablece el tiempo transcurrido en cero.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Detiene la medición del intervalo de tiempo, restablece el tiempo transcurrido para llegar a cero y comienza a medir el tiempo transcurrido.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Inicia o reanuda la medición del tiempo transcurrido para un intervalo.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Diagnostics.Stopwatch" />, establece la propiedad de tiempo transcurrido en cero e inicia la medición de tiempo transcurrido.</summary>
      <returns>Un <see cref="T:System.Diagnostics.Stopwatch" /> que acaba de iniciar la medida de tiempo transcurrido.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Detiene la medición del tiempo transcurrido para un intervalo.</summary>
    </member>
    <member name="T:System.Environment">
      <summary>Proporciona información acerca del entorno y la plataforma actuales, y la forma de manipularlos. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>Obtiene la línea de comandos para este proceso.</summary>
      <returns>Una cadena que contiene argumentos de la línea de comandos.</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>Obtiene o establece la ruta de acceso completa del directorio de trabajo actual.</summary>
      <returns>Una cadena que contiene la ruta de acceso de un directorio.</returns>
      <exception cref="T:System.ArgumentException">Intentó establecerse en una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">Se intentó establecer <see langword="null." />.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Se intentó establecer una ruta de acceso local que no se encuentra.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no dispone del permiso adecuado.</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>Obtiene un identificador único para el actual subproceso administrado.</summary>
      <returns>Entero que representa un identificador único para este subproceso administrado.</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>Termina este proceso y devuelve un código de salida al sistema operativo.</summary>
      <param name="exitCode">Código de salida para volver al sistema operativo. Use 0 (cero) para indicar que el proceso se completó correctamente.</param>
      <exception cref="T:System.Security.SecurityException">El autor de llamada no tiene permisos de seguridad suficientes para realizar esta función.</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>Obtiene o establece el código de salida del proceso.</summary>
      <returns>Un entero de 32 bits con signo que contiene el código de salida. El valor predeterminado es 0 (cero), lo que indica que el proceso se completó correctamente.</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>Reemplaza el nombre de cada variable de entorno incluida en la cadena especificada por la cadena equivalente del valor de la variable y devuelve la cadena resultante.</summary>
      <param name="name">Cadena que contiene los nombres de cero o más variables de entorno. Todas las variables de entorno se definen con el carácter de signo de porcentaje (%).</param>
      <returns>Una cadena con todas las variables de entorno reemplazadas por su valor.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>Finaliza inmediatamente un proceso después de escribir un mensaje en el registro de eventos de la aplicación Windows y, después, incluye el mensaje en el informe de errores que se envía a Microsoft.</summary>
      <param name="message">Mensaje que explica por qué finalizó el proceso o <see langword="null" /> si no se proporciona ninguna explicación.</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>Finaliza inmediatamente un proceso después de escribir un mensaje en el registro de eventos de la aplicación Windows y, luego, incluye el mensaje y la información de excepción en el informe de errores que se envía a Microsoft.</summary>
      <param name="message">Mensaje que explica por qué finalizó el proceso o <see langword="null" /> si no se proporciona ninguna explicación.</param>
      <param name="exception">Una excepción que representa el error que causó la finalización. Esta es normalmente la excepción en un bloque <see langword="catch" />.</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>Devuelve una matriz de cadena que contiene los argumentos de la línea de comandos del proceso actual.</summary>
      <returns>Una matriz de cadenas en la que cada elemento contiene un argumento de la línea de comandos. El primer elemento es el nombre del archivo ejecutable y los demás cero o más elementos contienen los argumentos de la línea de comandos restantes.</returns>
      <exception cref="T:System.NotSupportedException">El sistema no admite argumentos de línea de comandos.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>Recupera el valor de una variable de entorno del proceso actual.</summary>
      <param name="variable">Nombre de la variable de entorno.</param>
      <returns>El valor de la variable de entorno especificada por <paramref name="variable" /> o <see langword="null" /> si no se encuentra la variable de entorno.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso requerido para llevar a cabo esta operación.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>Recupera el valor de una variable de entorno del proceso actual o de la clave del Registro del sistema operativo Windows para la máquina local o el usuario actual.</summary>
      <param name="variable">Nombre de una variable de entorno.</param>
      <param name="target">Uno de los valores de <see cref="T:System.EnvironmentVariableTarget" />. Solo se admite <see cref="F:System.EnvironmentVariableTarget.Process" /> en .NET Core que se ejecute en sistemas basados en Unix.</param>
      <returns>El valor de la variable de entorno especificada por los parámetros <paramref name="variable" /> y <paramref name="target" />, o <see langword="null" /> si no se encuentra la variable de entorno.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> no es un valor <see cref="T:System.EnvironmentVariableTarget" /> válido.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso requerido para llevar a cabo esta operación.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>Recupera todos los nombres de las variables de entorno y sus valores del proceso actual.</summary>
      <returns>Un diccionario que contiene todos los nombres de las variables de entorno y sus valores; de lo contrario, un diccionario vacío si no se encuentra ninguna variable de entorno.</returns>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso requerido para llevar a cabo esta operación.</exception>
      <exception cref="T:System.OutOfMemoryException">El búfer no tiene memoria.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>Recupera todos los nombres de las variables de entorno y sus valores del proceso actual o de la clave del Registro del sistema operativo Windows para la máquina local o el usuario actual.</summary>
      <param name="target">Uno de los valores de <see cref="T:System.EnvironmentVariableTarget" />. Solo se admite  en .NET Core que se ejecute en sistemas basados en Unix.</param>
      <returns>Un diccionario que contiene todos los nombres de las variables de entorno y sus valores del origen especificado por el parámetro <paramref name="target" />; de lo contrario, un diccionario vacío si no se encuentra ninguna variable de entorno.</returns>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido para llevar a cabo esta operación para el valor especificado de <paramref name="target" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> contiene un valor no válido.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>Obtiene la ruta de acceso a la carpeta especial del sistema identificada por la enumeración especificada.</summary>
      <param name="folder">Uno de los valores de enumeración que identifica una carpeta especial del sistema.</param>
      <returns>Ruta de acceso a la carpeta especial del sistema especificada, si dicha carpeta existe físicamente en el equipo; de lo contrario, una cadena vacía ("").  
 Una carpeta no existe físicamente si el sistema operativo no la creó, la carpeta existente se eliminó o la carpeta es un directorio virtual, como Mi PC, que no se corresponde con una ruta de acceso física.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> no es un miembro de <see cref="T:System.Environment.SpecialFolder" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">No se admite la plataforma actual.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>Obtiene la ruta de acceso a la carpeta especial del sistema identificada por la enumeración especificada y usa una opción especificada para tener acceso a carpetas especiales.</summary>
      <param name="folder">Uno de los valores de enumeración que identifica una carpeta especial del sistema.</param>
      <param name="option">Uno de los valores de enumeración que especifica opciones que se van a usar para tener acceso a una carpeta especial.</param>
      <returns>Ruta de acceso a la carpeta especial del sistema especificada, si dicha carpeta existe físicamente en el equipo; de lo contrario, una cadena vacía ("").  
 Una carpeta no existe físicamente si el sistema operativo no la creó, la carpeta existente se eliminó o la carpeta es un directorio virtual, como Mi PC, que no se corresponde con una ruta de acceso física.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> no es un miembro de <see cref="T:System.Environment.SpecialFolder" />.
o bien
<paramref name="options" /> no es un miembro de <see cref="T:System.Environment.SpecialFolderOption" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">No se admite la plataforma actual.</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>Devuelve una matriz de cadena que contiene los nombres de las unidades lógicas del equipo actual.</summary>
      <returns>Matriz de cadenas en la que cada elemento contiene el nombre de una unidad lógica. Por ejemplo, si la unidad de disco duro del equipo es la primera unidad lógica, el primer elemento devuelto es "C:\".</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>Obtiene un valor que indica si el dominio de aplicación actual se está descargando o si Common Language Runtime (CLR) se está cerrando.</summary>
      <returns>
        <see langword="true" />Si el dominio de aplicación actual se está descargando o el CLR se está cerrando; en caso <see langword="false" />contrario,.</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>Determina si el sistema operativo actual es un sistema operativo de 64 bits.</summary>
      <returns>Es <see langword="true" /> si el sistema operativo es de 64 bits; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>Determina si el proceso actual es un proceso de 64 bits.</summary>
      <returns>Es <see langword="true" /> si el proceso es de 64 bits; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>Obtiene el nombre NetBIOS del equipo local.</summary>
      <returns>Una cadena que contiene el nombre del equipo.</returns>
      <exception cref="T:System.InvalidOperationException">No se puede obtener el nombre de este equipo.</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>Obtiene la cadena de nueva línea definida para este entorno.</summary>
      <returns>Una cadena que contiene "\r\n" para las plataformas que no son Unix o una cadena que contiene "\n" para las plataformas Unix.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>Obtiene un objeto <see cref="T:System.OperatingSystem" /> que contiene el identificador de la plataforma actual y el número de versión.</summary>
      <returns>Un objeto que contiene el identificador de la plataforma y el número de versión.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad no pudo obtener la versión del sistema.  
o bien 
El identificador de plataforma obtenido no es un miembro de <see cref="T:System.PlatformID" /></exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>Obtiene el número de procesadores de la máquina actual.</summary>
      <returns>Un entero con signo de 32 bits que especifica el número de procesadores de la máquina actual. No existe ningún valor predeterminado. Si la máquina actual contiene varios grupos de procesador, esta propiedad devuelve el número de procesadores lógicos disponibles para el uso por parte de Common Language Runtime (CLR).</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>Crea, modifica o elimina una variable de entorno almacenada en el proceso actual.</summary>
      <param name="variable">Nombre de una variable de entorno.</param>
      <param name="value">Valor que se va asignar a <paramref name="variable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> contiene una cadena de longitud cero, un carácter  de cero hexadecimal (0x00) o un signo de igual ("=").  
o bien 
La longitud de <paramref name="variable" /> o <paramref name="value" /> es mayor o igual que 32.767 caracteres.  
O bien 
Error durante la ejecución de esta operación.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso requerido para llevar a cabo esta operación.</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>Crea, modifica o elimina una variable de entorno almacenada en el proceso actual o en la clave del Registro del sistema operativo Windows reservada para la máquina local o el usuario actual.</summary>
      <param name="variable">Nombre de una variable de entorno.</param>
      <param name="value">Valor que se va asignar a <paramref name="variable" />.</param>
      <param name="target">Uno de los valores de enumeración que especifica la ubicación de la variable de entorno.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> contiene una cadena de longitud cero, un carácter  de cero hexadecimal (0x00) o un signo de igual ("=").  
o bien 
La longitud de <paramref name="variable" /> es mayor o igual que 32.767 caracteres.  
O bien 
 <paramref name="target" /> no es un miembro de la enumeración <see cref="T:System.EnvironmentVariableTarget" /> .  
o bien 
 <paramref name="target" /> es <see cref="F:System.EnvironmentVariableTarget.Machine" /> o <see cref="F:System.EnvironmentVariableTarget.User" />y la longitud de <paramref name="variable" /> es igual o mayor que 255.  
O bien 
 <paramref name="target" /> es <see cref="F:System.EnvironmentVariableTarget.Process" /> y la longitud de <paramref name="value" /> es igual o mayor que 32.767 caracteres.  
o bien 
Error durante la ejecución de esta operación.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso requerido para llevar a cabo esta operación.</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>Especifica las constantes enumeradas que se utilizan para recuperar rutas de acceso a directorios en carpetas especiales del sistema.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>Directorio del sistema de archivos que se usa para almacenar herramientas administrativas para un usuario individual. Microsoft Management Console (MMC) guardará las consolas personalizadas en este directorio y se moverá con el usuario. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>Directorio que sirve de repositorio común de datos específicos de la aplicación para el usuario móvil actual. Un usuario móvil funciona en varios equipos de una red. El perfil de un usuario móvil se mantiene en un servidor de la red y se carga en un sistema cuando el usuario inicia sesión.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>Directorio del sistema de archivos que actúa como área de almacenamiento para los archivos en espera para grabarse en un CD. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>Directorio del sistema de archivos que contiene herramientas administrativas para todos los usuarios del equipo. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>Directorio que sirve de repositorio común de datos específicos de la aplicación que todos los usuarios utilizan.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>Directorio del sistema de archivos que contiene los archivos y carpetas que aparecen en el escritorio para todos los usuarios. Esta carpeta especial es válida únicamente para los sistemas Windows NT. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>Directorio del sistema de archivos que contiene documentos que son comunes a todos los usuarios. Esta carpeta especial es válida para los sistemas Windows NT, y para los sistemas Windows 95 y Windows 98 con Shfolder.dll instalado. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>Directorio del sistema de archivos que actúa como repositorio para los archivos de música comunes a todos los usuarios. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>Este valor se reconoce en Windows Vista por compatibilidad con versiones anteriores, pero ya no se usa la carpeta especial propiamente dicha. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>Directorio del sistema de archivos que actúa como repositorio para los archivos de imágenes comunes a todos los usuarios. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>Directorio de componentes que se comparten entre distintas aplicaciones.  
Para obtener el directorio de archivos de programa común x86 en un sistema que no es x86, utilice el miembro <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>Carpeta Archivos de programa. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>Una carpeta para los componentes que las aplicaciones comparten. Esta carpeta especial solo es válida para los sistemas Windows NT, Windows 2000 y Windows XP. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>Directorio del sistema de archivos que contiene los programas y las carpetas que aparecen en el menú Inicio para todos los usuarios. Esta carpeta especial es válida únicamente para los sistemas Windows NT. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>Directorio del sistema de archivos que contiene los programas que aparecen en la carpeta Inicio para todos los usuarios. Esta carpeta especial es válida únicamente para los sistemas Windows NT. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>Directorio del sistema de archivos que contiene las plantillas que están disponibles para todos los usuarios. Esta carpeta especial es válida únicamente para los sistemas Windows NT.  Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>Directorio del sistema de archivos que actúa como repositorio para los archivos de vídeo comunes a todos los usuarios. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>Directorio que sirve de repositorio común para las cookies de Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>El escritorio lógico en vez de la ubicación física del sistema de archivos.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>Directorio que se utiliza para almacenar objetos de archivo físicamente en el escritorio. No confunda este directorio con la propia carpeta del escritorio, que es una carpeta virtual.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>Directorio que sirve de repositorio común para los elementos favoritos del usuario.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>Carpeta virtual que contiene fuentes. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>Directorio que sirve de repositorio común para los elementos del historial de Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>Directorio que sirve de repositorio común para los archivos temporales de Internet.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>Directorio que sirve de repositorio común para datos específicos de la aplicación que el usuario no móvil actual utiliza.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>Directorio del sistema de archivos que contiene datos de recursos localizados. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>Carpeta Mi PC. Cuando se pasa al método <see langword="Environment.GetFolderPath" />, el miembro de enumeración <see langword="MyComputer" /> siempre produce una cadena vacía ("") porque no hay ninguna ruta definida para la carpeta Mi PC.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>Carpeta Mis documentos. Este miembro es equivalente a <see cref="F:System.Environment.SpecialFolder.Personal" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>Carpeta Mi música.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>Carpeta Mis imágenes.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>Directorio del sistema de archivos que actúa como repositorio para los vídeos pertenecientes a un usuario.  Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>Directorio del sistema de archivos que contiene los objetos de vínculo que pueden existir en la carpeta virtual Mis sitios de red. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>Directorio que sirve de repositorio común para documentos.  Este miembro es equivalente a <see cref="F:System.Environment.SpecialFolder.MyDocuments" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>Directorio del sistema de archivos que contiene los objetos de vínculo que pueden existir en la carpeta virtual Impresoras. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>Directorio de archivos de programa.  
En un sistema que no es x86, al pasar <see cref="F:System.Environment.SpecialFolder.ProgramFiles" /> al método <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> devuelve la ruta de acceso para los programas que no son x86. Para obtener el directorio de archivos de programa x86 en un sistema que no es x86, utilice el miembro <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" />.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>Carpeta Archivos de programa x86. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>Directorio que contiene los grupos de programas del usuario.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>Directorio que contiene los documentos utilizados más recientemente por el usuario.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>Directorio del sistema de archivos que contiene datos de recursos. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>Directorio que contiene los elementos de menú Enviar a.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>Directorio que contiene los elementos de menú Inicio.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>Directorio que se corresponde con el grupo de programas Inicio del usuario. El sistema inicia estos programas siempre que un usuario inicia sesión o inicia Windows.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>Directorio del sistema.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Carpeta Sistema de Windows. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>Directorio que sirve de repositorio común para plantillas de documentos.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>Carpeta de perfil del usuario. Las aplicaciones no deben crear archivos ni carpetas en este nivel; deben poner sus datos bajo las ubicaciones a las que hace referencia <see cref="F:System.Environment.SpecialFolder.ApplicationData" />. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Directorio de Windows o SYSROOT. Corresponde a las variables de entorno %windir% o %SYSTEMROOT%. Agregado en .NET Framework 4.</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>Especifica las opciones que se pueden usar para obtener la ruta de acceso a una carpeta especial.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>La ruta de acceso a la carpeta se crea si no existe aún.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>La ruta de acceso a la carpeta se devuelve sin comprobar si la ruta de acceso existe. Si la carpeta se encuentra en una red, la especificación de esta opción puede reducir el tiempo de retardo.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>Se comprueba la ruta de acceso a la carpeta. Si la carpeta existe, se devuelve la ruta de acceso. Si la carpeta no existe, se devuelve una cadena vacía. Éste es el comportamiento predeterminado.</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>Obtiene información de seguimiento de la pila actual.</summary>
      <returns>Cadena que contiene información acerca del seguimiento de la pila. Este valor puede ser <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>Obtiene la ruta de acceso completa del directorio del sistema.</summary>
      <returns>Una cadena que contiene la ruta de acceso de un directorio.</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>Obtiene el número de bytes de la página de memoria del sistema operativo.</summary>
      <returns>Número de bytes en una página de memoria del sistema.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>Obtiene el número de milisegundos transcurridos desde que se inició el sistema.</summary>
      <returns>Un entero de 32 bits que contiene el tiempo en milisegundos que transcurrió desde la última vez que se inició el equipo.</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>Obtiene el número de milisegundos transcurridos desde que se inició el sistema.</summary>
      <returns>Los milisegundos transcurridos desde que se inició el sistema.</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>Obtiene el nombre de dominio de red asociado al usuario actual.</summary>
      <returns>El nombre de dominio de red asociado al usuario actual.</returns>
      <exception cref="T:System.PlatformNotSupportedException">El sistema operativo no admite la recuperación del nombre de dominio de red.</exception>
      <exception cref="T:System.InvalidOperationException">No se puede recuperar el nombre de dominio de red.</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>Obtiene un valor que indica si el proceso actual se ejecuta en modo de interacción con el usuario.</summary>
      <returns>Es <see langword="true" /> si el proceso actual se ejecuta en modo de interacción con el usuario; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>Obtiene el nombre de usuario de la persona que inició sesión en el sistema operativo.</summary>
      <returns>El nombre de usuario de la persona que ha iniciado sesión en el sistema operativo.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>Obtiene un objeto <see cref="T:System.Version" /> que describe los números principal, secundario, de compilación y de revisión de Common Language Runtime.</summary>
      <returns>Un objeto que muestra la versión de Common Language Runtime.</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>Obtiene la cantidad de memoria física asignada al contexto del proceso.</summary>
      <returns>Un entero de 64 bits con signo que contiene el número de bytes de memoria física asignada al contexto del proceso.</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>Especifica la ubicación donde se almacena una variable de entorno o de donde se recupera en una operación Set o Get.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>La variable de entorno se almacena o recupera de la clave <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> del Registro del sistema operativo Windows. Este valor debe usarse en implementaciones de .NET que se ejecuten exclusivamente en sistemas Windows.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>La variable de entorno se almacena o recupera del bloque de entorno asociado al proceso actual.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>La variable de entorno se almacena o recupera de la clave <see langword="HKEY_CURRENT_USER\Environment" /> del Registro del sistema operativo Windows. Este valor debe usarse en implementaciones de .NET que se ejecuten exclusivamente en sistemas Windows.</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>Proporciona métodos de extensión relacionados con la globalización.</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>Devuelve un objeto <see cref="T:System.StringComparer" /> según las reglas de comparación de cadenas dependientes de la referencia cultural de un objeto <see cref="T:System.Globalization.CompareInfo" /> especificado.</summary>
      <param name="compareInfo">Objeto que admite la comparación de cadenas dependientes de la referencia cultural.</param>
      <param name="options">Valor que define cómo deben compararse las cadenas. <paramref name="options" /> es el valor de enumeración <see cref="F:System.Globalization.CompareOptions.Ordinal" />, el valor de enumeración <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> o una combinación bit a bit de uno o varios de los siguientes valores: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> y <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
      <returns>Objeto que puede usarse para realizar comparaciones de cadenas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> no es válido.</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>Lee tipos de datos primitivos como valores binarios en una codificación específica.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryReader" /> basada en la secuencia especificada y usando codificación UTF-8.</summary>
      <param name="input">La secuencia de entrada.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite lectura es <see langword="null" /> o ya está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryReader" /> basada en la secuencia y codificación de caracteres especificadas.</summary>
      <param name="input">La secuencia de entrada.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite lectura es <see langword="null" /> o ya está cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryReader" /> basada en la secuencia y la codificación de caracteres especificadas y, opcionalmente, deja la secuencia abierta.</summary>
      <param name="input">La secuencia de entrada.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="leaveOpen">
        <see langword="true" /> para dejar el flujo abierto después de desechar el objeto <see cref="T:System.IO.BinaryReader" />; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite lectura es <see langword="null" /> o ya está cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> o <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>Expone el acceso a la secuencia subyacente de <see cref="T:System.IO.BinaryReader" />.</summary>
      <returns>Secuencia subyacente asociada a <see langword="BinaryReader" />.</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>Cierra el lector actual y la secuencia subyacente.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.IO.BinaryReader" />.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por la clase <see cref="T:System.IO.BinaryReader" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>Rellena el búfer interno con el número especificado de bytes leídos de la secuencia.</summary>
      <param name="numBytes">Número de bytes que se va a leer.</param>
      <exception cref="T:System.IO.EndOfStreamException">El final de la secuencia se alcanza antes de que pueda leerse <paramref name="numBytes" />.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="numBytes" /> solicitado es mayor que el tamaño de búfer interno.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>Devuelve el siguiente carácter disponible y no hace avanzar la posición de bytes o caracteres.</summary>
      <returns>Siguiente carácter que se va a leer, o -1 si no hay más caracteres disponibles o si la secuencia no admite la operación de búsqueda.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentException">El carácter actual no se puede descodificar en el búfer de caracteres interno utilizando <see cref="T:System.Text.Encoding" /> seleccionado para la secuencia.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>Lee los caracteres de la secuencia subyacente y hace avanzar la posición actual de la secuencia de acuerdo con la <see langword="Encoding" /> usada y el carácter concreto que se lea de la secuencia.</summary>
      <returns>Siguiente carácter de la secuencia de entrada o -1 si no hay más caracteres disponibles en este momento.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lee el número especificado de bytes de la secuencia, a partir del punto especificado en la matriz de bytes.</summary>
      <param name="buffer">Búfer en el que se leen los datos.</param>
      <param name="index">Punto inicial del búfer en el que comienza la lectura.</param>
      <param name="count">Número de bytes que se va a leer.</param>
      <returns>Número de bytes leídos en <paramref name="buffer" />. Podría ser inferior al número de bytes solicitado si ese número de bytes no está disponible, o podría ser cero si se alcanza el final de la secuencia.</returns>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.  
o bien 
El número de caracteres descodificados para leer es mayor que <paramref name="count" />. Esto puede pasar si un descodificador de Unicode devuelve caracteres de reserva o un par suplente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lee el número especificado de caracteres de la secuencia, a partir del punto especificado en la matriz de caracteres.</summary>
      <param name="buffer">Búfer en el que se leen los datos.</param>
      <param name="index">Punto inicial del búfer en el que comienza la lectura.</param>
      <param name="count">Número de caracteres que se va a leer.</param>
      <returns>Número total de caracteres leídos en el búfer. Este podría ser inferior al número de caracteres solicitado si dicho número de caracteres no se encuentra disponible o podría ser cero si se alcanza el final de la secuencia.</returns>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.  
O bien 
El número de caracteres descodificados para leer es mayor que <paramref name="count" />. Esto puede pasar si un descodificador de Unicode devuelve caracteres de reserva o un par suplente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>Lee un entero de 32 bits en formato comprimido.</summary>
      <returns>Entero de 32 bits en formato comprimido.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">La secuencia está dañada.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>Lee un valor <see langword="Boolean" /> de la secuencia actual y hace avanzar un byte la posición actual de la secuencia.</summary>
      <returns>Es <see langword="true" /> si el byte es distinto de cero; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>Lee el siguiente byte de la secuencia actual y hace avanzar un byte la posición actual de la secuencia.</summary>
      <returns>Siguiente byte que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>Lee el número especificado de bytes de la secuencia actual en una matriz de bytes y hace avanzar la posición actual en función del número de bytes leídos.</summary>
      <param name="count">Número de bytes que se va a leer. Este valor debe ser 0 o un número no negativo o se producirá una excepción.</param>
      <returns>Matriz de bytes que contiene los datos leídos de la secuencia subyacente. Este podría ser inferior al número de bytes solicitado si se alcanza el final de la secuencia.</returns>
      <exception cref="T:System.ArgumentException">El número de caracteres descodificados para leer es mayor que <paramref name="count" />. Esto puede pasar si un descodificador de Unicode devuelve caracteres de reserva o un par suplente.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> es negativo.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>Lee el siguiente carácter de la secuencia actual y hace avanzar la posición actual de la secuencia de acuerdo con la <see langword="Encoding" /> usada y el carácter concreto que se lee de la secuencia.</summary>
      <returns>Carácter que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentException">Se ha leído un carácter suplente.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>Lee el número especificado de caracteres de la secuencia actual, devuelve los datos en una matriz de caracteres y hace avanzar la posición actual de acuerdo con la <see langword="Encoding" /> usada y el carácter concreto que se lee en la secuencia.</summary>
      <param name="count">Número de caracteres que se va a leer.</param>
      <returns>Matriz de caracteres que contiene los datos leídos de la secuencia subyacente. Podría ser inferior al número de caracteres solicitados si se alcanza el final de la secuencia.</returns>
      <exception cref="T:System.ArgumentException">El número de caracteres descodificados para leer es mayor que <paramref name="count" />. Esto puede pasar si un descodificador de Unicode devuelve caracteres de reserva o un par suplente.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> es negativo.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>Lee un valor decimal de la secuencia actual y hace avanzar la posición actual de la secuencia dieciséis bytes.</summary>
      <returns>Valor decimal que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>Lee un valor de punto flotante de 8 bytes de la secuencia actual y hace avanzar la posición actual de la secuencia en ocho bytes.</summary>
      <returns>Valor de punto flotante de 8 bytes que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>Lee un entero con signo de 2 bytes en la secuencia actual y hace avanzar la posición actual de la secuencia en dos bytes.</summary>
      <returns>Entero con signo de 2 bytes que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>Lee un entero con signo de 4 bytes en la secuencia actual y hace avanzar la posición actual de la secuencia en cuatro bytes.</summary>
      <returns>Entero con signo de 4 bytes que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>Lee un entero con signo de 8 bytes de la secuencia actual y avanza la posición actual de la secuencia en ocho bytes.</summary>
      <returns>Entero con signo de 8 bytes que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>Lee un byte con signo de esta secuencia y hace avanzar la posición actual de la secuencia en un byte.</summary>
      <returns>Byte con signo que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>Lee un valor de punto flotante de 4 bytes en la secuencia actual y hace avanzar la posición actual de la secuencia en cuatro bytes.</summary>
      <returns>Valor de punto flotante de 4 bytes que se lee en la secuencia actual.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>Lee una cadena de la secuencia actual. La cadena tiene como prefijo la longitud, codificada como un entero de siete bits cada vez.</summary>
      <returns>Cadena que se lee.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>Lee un entero sin signo de 2 bytes de la secuencia actual con la codificación "little-endian" y hace avanzar la posición de la secuencia en dos bytes.</summary>
      <returns>Entero sin signo de 2 bytes que se lee en esta secuencia.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>Lee un entero sin signo de 4 bytes de la secuencia actual y hace avanzar la posición de la secuencia en cuatro bytes.</summary>
      <returns>Entero sin signo de 4 bytes que se lee en esta secuencia.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>Lee un entero sin signo de 8 bytes de la secuencia actual y hace avanzar la posición de la secuencia en ocho bytes.</summary>
      <returns>Entero sin signo de 8 bytes que se lee en esta secuencia.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>Escribe tipos primitivos en formato binario en una secuencia y admite la escritura de cadenas en una codificación específica.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryWriter" /> que escribe en una secuencia.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryWriter" /> basada en la secuencia especificada y usando codificación UTF-8.</summary>
      <param name="output">Secuencia de salida.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite escritura o ya se encuentra cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryWriter" /> basada en la secuencia y codificación de caracteres especificadas.</summary>
      <param name="output">Secuencia de salida.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite escritura o ya se encuentra cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BinaryWriter" /> basada en la secuencia y la codificación de caracteres especificadas y, opcionalmente, deja la secuencia abierta.</summary>
      <param name="output">Secuencia de salida.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="leaveOpen">
        <see langword="true" /> para dejar el flujo abierto después de desechar el objeto <see cref="T:System.IO.BinaryWriter" />; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite escritura o ya se encuentra cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>Obtiene la secuencia subyacente del objeto <see cref="T:System.IO.BinaryWriter" />.</summary>
      <returns>Secuencia subyacente asociada a <see langword="BinaryWriter" />.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>Cierra el <see cref="T:System.IO.BinaryWriter" /> actual y la secuencia subyacente.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.IO.BinaryWriter" />.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.BinaryWriter" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>Libera de forma asincrónica todos los recursos que usa la instancia actual de la clase <see cref="T:System.IO.BinaryWriter" />.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>Borra todos los búferes del sistema de escritura actual y hace que todos los datos almacenados en el búfer se escriban en el dispositivo subyacente.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>Especifica un objeto <see cref="T:System.IO.BinaryWriter" /> sin memoria auxiliar.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>Contiene la secuencia subyacente.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>Establece la posición en la secuencia actual.</summary>
      <param name="offset">Desplazamiento de bytes relacionado con <paramref name="origin" />.</param>
      <param name="origin">Un campo de <see cref="T:System.IO.SeekOrigin" /> que indica el punto de referencia del que se obtiene la nueva posición.</param>
      <returns>Posición con la secuencia actual.</returns>
      <exception cref="T:System.IO.IOException">El puntero de archivo se ha movido a una posición no válida.</exception>
      <exception cref="T:System.ArgumentException">El valor de <see cref="T:System.IO.SeekOrigin" /> no es válido.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>Escribe un valor <see langword="Boolean" /> de un byte en la secuencia actual, que es 0 si es <see langword="false" /> y 1 si es <see langword="true" />.</summary>
      <param name="value">Valor <see langword="Boolean" /> que se va a escribir (0 ó 1).</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>Escribe un byte sin signo en la secuencia actual y avanza la posición de la secuencia en un byte.</summary>
      <param name="value">Byte sin signo que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>Escribe una matriz de bytes en la secuencia subyacente.</summary>
      <param name="buffer">Matriz de bytes que contiene los datos que se van a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Escribe una región de una matriz de bytes en la secuencia actual.</summary>
      <param name="buffer">Matriz de bytes que contiene los datos que se van a escribir.</param>
      <param name="index">Índice del primer byte que se lee de <paramref name="buffer" /> y se escribe en la secuencia.</param>
      <param name="count">Número de bytes que se leen de <paramref name="buffer" /> y se escriben en la secuencia.</param>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>Escribe un carácter Unicode en la secuencia actual y avanza la posición actual de la secuencia de acuerdo con el <see langword="Encoding" /> utilizado y los caracteres específicos escritos en la secuencia.</summary>
      <param name="ch">El carácter Unicode no suplente que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> es un carácter suplente único.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia actual y avanza la posición actual de la secuencia de acuerdo con el <see langword="Encoding" /> utilizado y los caracteres específicos escritos en esa secuencia.</summary>
      <param name="chars">Matriz de caracteres que contiene los datos que se van a escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una sección de una matriz de caracteres en la secuencia actual y avanza la posición actual de la secuencia de acuerdo con el <see langword="Encoding" /> utilizado y quizás los caracteres específicos que se escriben en la secuencia.</summary>
      <param name="chars">Matriz de caracteres que contiene los datos que se van a escribir.</param>
      <param name="index">Índice del primer carácter que se lee de <paramref name="chars" /> y se escribe en la secuencia.</param>
      <param name="count">Número de caracteres que se leen de <paramref name="chars" /> y se escriben en la secuencia.</param>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>Escribe un valor decimal en la secuencia actual y avanza la posición de la secuencia en dieciséis bytes.</summary>
      <param name="value">Valor decimal que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>Escribe un valor de punto flotante de ocho bytes en la secuencia actual y avanza la posición de la secuencia en ocho bytes.</summary>
      <param name="value">Valor de punto flotante de ocho bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>Escribe un entero con signo de dos bytes en la secuencia actual y avanza la posición de la secuencia en dos bytes.</summary>
      <param name="value">Entero con signo de dos bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>Escribe un entero con signo de cuatro bytes en la secuencia actual y avanza la posición de la secuencia en cuatro bytes.</summary>
      <param name="value">Entero con signo de cuatro bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>Escribe un entero con signo de ocho bytes en la secuencia actual y avanza la posición de la secuencia en ocho bytes.</summary>
      <param name="value">Entero con signo de ocho bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Escribe un intervalo de bytes en la secuencia actual.</summary>
      <param name="buffer">Intervalo de bytes que se va a escribir.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Escribe un intervalo de caracteres en la secuencia actual y avanza la posición actual de la secuencia de acuerdo con el elemento <see langword="Encoding" /> utilizado y quizás los caracteres específicos que se escriben en la secuencia.</summary>
      <param name="chars">Intervalo de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>Escribe un byte con signo en la secuencia actual y avanza la posición de la secuencia en un byte.</summary>
      <param name="value">Byte con signo que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>Escribe un valor de punto flotante de cuatro bytes en la secuencia actual y avanza la posición de la secuencia en cuatro bytes.</summary>
      <param name="value">Valor de punto flotante de cuatro bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>Escribe una cadena de longitud prefijada en esta secuencia en la codificación actual de <see cref="T:System.IO.BinaryWriter" /> y hace avanzar la posición actual de la secuencia de acuerdo con la codificación utilizada y los caracteres específicos escritos en dicha secuencia.</summary>
      <param name="value">Valor que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>Escribe un entero sin signo de dos bytes en la secuencia actual y avanza la posición de la secuencia en dos bytes.</summary>
      <param name="value">Entero sin signo de dos bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>Escribe un entero sin signo de cuatro bytes en la secuencia actual y avanza la posición de la secuencia en cuatro bytes.</summary>
      <param name="value">Entero sin signo de cuatro bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>Escribe un entero sin signo de ocho bytes en la secuencia actual y avanza la posición de la secuencia en ocho bytes.</summary>
      <param name="value">Entero sin signo de ocho bytes que se va a escribir.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>Escribe un entero de 32 bits en formato comprimido.</summary>
      <param name="value">Entero de 32 bits que se va a escribir.</param>
      <exception cref="T:System.IO.EndOfStreamException">Se llega al final de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
      <exception cref="T:System.IO.IOException">La secuencia está cerrada.</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>Agrega una capa de almacenamiento en búfer para las operaciones de lectura y escritura en otra secuencia. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BufferedStream" /> con un tamaño de búfer predeterminado de 4096 bytes.</summary>
      <param name="stream">Secuencia actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.BufferedStream" /> con el tamaño de búfer especificado.</summary>
      <param name="stream">Secuencia actual.</param>
      <param name="bufferSize">El tamaño del búfer en bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es negativo.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Comienza una operación de lectura asincrónica. (Considere usar <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> en su lugar).</summary>
      <param name="buffer">El búfer en el que se leen los datos.</param>
      <param name="offset">Posición de desplazamiento en bytes de <paramref name="buffer" /> donde se comienza a escribir los datos leídos de la secuencia.</param>
      <param name="count">Número máximo de bytes que se pueden leer.</param>
      <param name="callback">Devolución de llamada asincrónica opcional, a la que se llamará cuando haya finalizado la lectura.</param>
      <param name="state">Objeto proporcionado por el usuario que distingue esta solicitud de lectura asincrónica de otras.</param>
      <returns>Un objeto que representa la lectura asincrónica, que puede hallarse aún pendiente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Se intentó realizar una lectura asincrónica después del final del flujo.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="offset" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia actual no admite la operación de escritura.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Comienza una operación de escritura asincrónica. (Considere usar <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> en su lugar).</summary>
      <param name="buffer">Búfer que contiene los datos que se van a escribir en la secuencia actual.</param>
      <param name="offset">Desplazamiento en bytes de base cero en la <paramref name="buffer" /> en la que se comienzan a copiar los bytes en la secuencia actual.</param>
      <param name="count">Número máximo de bytes que se pueden escribir.</param>
      <param name="callback">Método al que se va a llamar cuando se complete la operación de escritura asincrónica.</param>
      <param name="state">Objeto proporcionado por el usuario que distingue esta solicitud de escritura asincrónica de otras.</param>
      <returns>Objeto que hace referencia a la escritura asincrónica, que puede estar aún pendiente.</returns>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="buffer" /> menos <paramref name="offset" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>Obtiene el tamaño de búfer en bytes de esta secuencia almacenada en búfer.</summary>
      <returns>Entero que representa el tamaño del búfer en bytes.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>Obtiene un valor que indica si la secuencia actual admite lectura.</summary>
      <returns>Es <see langword="true" /> si la secuencia admite lectura; es <see langword="false" /> si la secuencia está cerrada o se abrió con acceso de solo escritura.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>Obtiene un valor que indica si la secuencia actual admite búsquedas.</summary>
      <returns>Es <see langword="true" /> si la secuencia admite operaciones de búsqueda; es <see langword="false" /> si la secuencia está cerrada o si se construyó a partir de un identificador del sistema operativo como una canalización o una salida a la consola.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>Obtiene un valor que indica si la secuencia actual admite escritura.</summary>
      <returns>Es <see langword="true" /> si la secuencia admite escritura; es <see langword="false" /> si la secuencia está cerrada o se abrió con acceso de solo lectura.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>Lee los bytes de la secuencia almacenada en búfer actual y los escribe en otra secuencia.</summary>
      <param name="destination">Secuencia en la que se copiará el contenido de la secuencia almacenada en búfer actual.</param>
      <param name="bufferSize">Tamaño del búfer. Este valor debe ser mayor que cero. El tamaño predeterminado es 81920.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es un valor negativo o es cero.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia actual no admite lectura.
O bien
<paramref name="destination" /> no admite la escritura.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia actual o <paramref name="destination" /> se cerraron antes de llamar al método <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" />.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Lee asincrónicamente los bytes de la secuencia almacenada en búfer actual y los escribe en otra secuencia, utilizando el tamaño de búfer y el token de cancelación especificados.</summary>
      <param name="destination">Secuencia en la que se copiará el contenido de la secuencia almacenada en búfer actual.</param>
      <param name="bufferSize">Tamaño del búfer en bytes. Este valor debe ser mayor que cero. El tamaño predeterminado es 81 920.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de copia asincrónica.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>Libera de forma asincrónica los recursos no administrados usados por la secuencia almacenada en búfer.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>Espera a que se complete la operación asincrónica de lectura que se encuentra pendiente. (Considere usar <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> en su lugar).</summary>
      <param name="asyncResult">Referencia a la solicitud asincrónica pendiente a la que se debe esperar.</param>
      <returns>El número de bytes leídos de la secuencia, que se encuentra entre cero (0) y el número de bytes solicitado. Las secuencias solo devuelven 0 al final de la secuencia; de lo contrario, se deben bloquear hasta que haya al menos 1 byte disponible.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Este objeto <see cref="T:System.IAsyncResult" /> no se creó mediante una llamada a <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> en esta clase.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>Termina una operación de escritura asincrónica y se bloquea hasta que se completa la operación de E/S. (Considere usar <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> en su lugar).</summary>
      <param name="asyncResult">Solicitud asincrónica pendiente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Este objeto <see cref="T:System.IAsyncResult" /> no se creó mediante una llamada a <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> en esta clase.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>Borra todos los búferes para esta secuencia y hace que los datos almacenados en búfer se escriban en el dispositivo subyacente.</summary>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.IO.IOException">No está abierto ni el repositorio ni el origen de datos.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Borra asincrónicamente todos los búferes de esta secuencia, y hace que todos los datos almacenados en búfer se escriban en el dispositivo subyacente y supervisa las solicitudes de cancelación.</summary>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación.</param>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>Obtiene la longitud de la secuencia en bytes.</summary>
      <returns>Longitud de la secuencia en bytes.</returns>
      <exception cref="T:System.IO.IOException">La secuencia subyacente es <see langword="null" /> o está cerrada.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite búsqueda.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>Obtiene la posición dentro de la secuencia actual.</summary>
      <returns>Posición dentro de la secuencia actual.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor pasado a <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Se produce un error de E/S, como el cierre de la secuencia.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite búsqueda.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Copia bytes, procedentes de la secuencia actual almacenada en el búfer, en una matriz.</summary>
      <param name="array">Búfer en el que se van a copiar los bytes.</param>
      <param name="offset">Desplazamiento de bytes en el búfer donde va a comenzar la lectura de bytes.</param>
      <param name="count">Número de bytes que se va a leer.</param>
      <returns>Número total de bytes leídos en <paramref name="array" />. Éste puede ser menor que el número de bytes solicitados si ese número de bytes no se encuentra disponible, o bien puede ser 0 si se alcanza el final de la secuencia antes de que puedan leerse datos.</returns>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="array" /> menos <paramref name="offset" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">La secuencia no está abierta o es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite lectura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>Copia los bytes de la secuencia almacenada en búfer actual en un intervalo de bytes y avanza la posición dentro de la secuencia almacenada en búfer el número de bytes leídos.</summary>
      <param name="destination">Región de memoria. Cuando este método finaliza, el contenido de esta región se reemplaza por los bytes leídos del origen actual.</param>
      <returns>Número total de bytes leídos en el búfer. Puede ser menor que el número de bytes asignado en el búfer si esos bytes no están disponibles en ese momento o cero (0) si se ha alcanzado el final de la secuencia.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición dentro de la secuencia el número de bytes leídos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">El búfer en el que se escriben los datos.</param>
      <param name="offset">Posición de desplazamiento en bytes de <paramref name="buffer" /> donde se comienza a escribir los datos del flujo.</param>
      <param name="count">Número máximo de bytes que se pueden leer.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="offset" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite lectura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica una secuencia de bytes de la secuencia almacenada en búfer actual y avanza la posición en esta secuencia almacenada en búfer según el número de bytes leídos.</summary>
      <param name="buffer">Región de memoria en la que se van a escribir los datos.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor de su propiedad <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> contiene el número total de bytes leídos en el búfer. El valor de resultado puede ser menor que el número de bytes asignado en el búfer si esos bytes no están disponibles en ese momento o 0 (cero) si se ha alcanzado el final de la secuencia.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>Lee un byte de la secuencia subyacente y devuelve el byte convertido en un <see langword="int" />, o devuelve -1 si se lee desde el final de la secuencia.</summary>
      <returns>El byte convertido en un <see langword="int" /> o -1 si se lee desde el final de la secuencia.</returns>
      <exception cref="T:System.IO.IOException">Se produce un error de E/S, como el cierre de la secuencia.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite lectura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Establece la posición dentro de la secuencia almacenada en búfer actualmente.</summary>
      <param name="offset">Desplazamiento de bytes relacionado con <paramref name="origin" />.</param>
      <param name="origin">Valor de tipo <see cref="T:System.IO.SeekOrigin" /> que indica el punto de referencia del que obtener la nueva posición.</param>
      <returns>Nueva posición dentro de la secuencia almacenada en el búfer actual.</returns>
      <exception cref="T:System.IO.IOException">La secuencia no está abierta o es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite búsqueda.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>Establece la longitud de la secuencia almacenada en el búfer.</summary>
      <param name="value">Entero que indica la longitud deseada de la secuencia almacenada en el búfer actual en bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">La secuencia no está abierta o es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite operaciones de escritura ni de búsqueda.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>Obtiene la instancia de <see cref="T:System.IO.Stream" /> subyacente de esta secuencia almacenada en búfer.</summary>
      <returns>Instancia de la secuencia subyacente.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Copia bytes en la secuencia almacenada en el búfer y avanza la posición actual dentro de la secuencia almacenada en el búfer según el número de bytes escritos.</summary>
      <param name="array">Matriz de bytes de la que copiar bytes <paramref name="count" /> en la secuencia almacenada en el búfer actual.</param>
      <param name="offset">Desplazamiento en el búfer donde se comienzan a copiar bytes en la secuencia almacenada en el búfer actual.</param>
      <param name="count">Número de bytes que se deben escribir en la secuencia almacenada en el búfer actual.</param>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="array" /> menos <paramref name="offset" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">La secuencia está cerrada o es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Escribe una secuencia de bytes en la secuencia almacenada en búfer actual y avanza la posición actual dentro de esta secuencia almacenada en búfer el número de bytes escritos.</summary>
      <param name="buffer">Región de memoria. Este método copia el contenido de esta región en la secuencia almacenada en búfer actual.</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición actual dentro de la secuencia el número de bytes escritos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">Búfer del que se van a escribir datos.</param>
      <param name="offset">Desplazamiento en bytes de base cero de <paramref name="buffer" /> desde donde se comienzan a copiar los bytes en la secuencia.</param>
      <param name="count">Número máximo de bytes que se pueden escribir.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="offset" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una secuencia de bytes en la secuencia almacenada en búfer actual, avanza la posición actual dentro de la secuencia almacenada en búfer el número de bytes escritos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">Región de memoria desde la que se van a escribir los datos.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>Escribe un byte en la posición actual de la secuencia almacenada en el búfer.</summary>
      <param name="value">Un byte que se va a escribir en la secuencia.</param>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Se efectuó una llamada a los métodos después de cerrar la secuencia.</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>Excepción que se produce cuando se intenta realizar una operación de lectura más allá del final de una secuencia.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.EndOfStreamException" /> con la cadena de mensaje establecida en un mensaje proporcionado por el sistema y HRESULT establecido en COR_E_ENDOFSTREAM.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.EndOfStreamException" /> con la serialización y la información de contexto especificadas.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.EndOfStreamException" /> con la cadena de mensaje establecida en <paramref name="message" /> y HRESULT en COR_E_ENDOFSTREAM.</summary>
      <param name="message">Cadena que describe el error. Se pretende que el contenido de <paramref name="message" /> sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.EndOfStreamException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Cadena que describe el error. Se pretende que el contenido de <paramref name="message" /> sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>Excepción que se inicia cuando el formato de un flujo de datos no es válido.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.InvalidDataException" />.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.InvalidDataException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.InvalidDataException" /> con una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>Crea una secuencia cuya memoria auxiliar es la memoria.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.MemoryStream" /> con una capacidad expansible inicializada con un valor cero.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>Inicializa una nueva instancia invariable de la clase <see cref="T:System.IO.MemoryStream" /> de acuerdo con la matriz de bytes especificada.</summary>
      <param name="buffer">Matriz de bytes sin signo a partir de la cual se crea la secuencia actual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>Inicializa una nueva instancia invariable de la clase <see cref="T:System.IO.MemoryStream" /> según la matriz de bytes especificada con la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" /> establecida como se ha indicado.</summary>
      <param name="buffer">Matriz de bytes sin signo a partir de la cual se crea esta secuencia.</param>
      <param name="writable">Establecimiento de la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" />, que determina si la secuencia admite escritura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia invariable de la clase <see cref="T:System.IO.MemoryStream" /> según la región especificada (índice) de una matriz de bytes.</summary>
      <param name="buffer">Matriz de bytes sin signo a partir de la cual se crea esta secuencia.</param>
      <param name="index">Índice en <paramref name="buffer" /> en el que empieza la secuencia.</param>
      <param name="count">Longitud de la secuencia en bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia invariable de la clase <see cref="T:System.IO.MemoryStream" /> según la región especificada de una matriz de bytes, con la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" /> establecida como se ha indicado.</summary>
      <param name="buffer">Matriz de bytes sin signo a partir de la cual se crea esta secuencia.</param>
      <param name="index">Índice en <paramref name="buffer" /> en el que empieza la secuencia.</param>
      <param name="count">Longitud de la secuencia en bytes.</param>
      <param name="writable">Establecimiento de la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" />, que determina si la secuencia admite escritura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.MemoryStream" /> según la región especificada de una matriz de bytes, con la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" /> establecida como se ha indicado y la posibilidad de llamar a <see cref="M:System.IO.MemoryStream.GetBuffer" /> establecida según lo especificado.</summary>
      <param name="buffer">Matriz de bytes sin signo a partir de la cual se crea esta secuencia.</param>
      <param name="index">Índice en <paramref name="buffer" /> en el que empieza la secuencia.</param>
      <param name="count">Longitud de la secuencia en bytes.</param>
      <param name="writable">Establecimiento de la propiedad <see cref="P:System.IO.MemoryStream.CanWrite" />, que determina si la secuencia admite escritura.</param>
      <param name="publiclyVisible">Es <see langword="true" /> para habilitar <see cref="M:System.IO.MemoryStream.GetBuffer" />, que devuelve la matriz de bytes sin signo desde la cual se creó la secuencia; de lo contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.MemoryStream" /> con una capacidad expansible inicializada según lo especificado.</summary>
      <param name="capacity">Tamaño inicial de la matriz interna en bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es negativo.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <param name="callback" />
      <param name="state" />
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <param name="buffer" />
      <param name="offset" />
      <param name="count" />
      <param name="callback" />
      <param name="state" />
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>Obtiene un valor que indica si la secuencia actual admite lectura.</summary>
      <returns>
        <see langword="true" /> si el flujo está abierto.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>Obtiene un valor que indica si la secuencia actual admite búsquedas.</summary>
      <returns>
        <see langword="true" /> si el flujo está abierto.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>Obtiene un valor que indica si la secuencia actual admite escritura.</summary>
      <returns>
        <see langword="true" /> si el flujo admite escritura; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>Obtiene o establece el número de bytes asignados a esta secuencia.</summary>
      <returns>Longitud de la parte utilizable del búfer para la secuencia.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Se establece una capacidad de modo que sea negativa o menor que la longitud actual de la secuencia.</exception>
      <exception cref="T:System.ObjectDisposedException">Se cierra la secuencia actual.</exception>
      <exception cref="T:System.NotSupportedException">Se invoca <see langword="set" /> en una secuencia cuya capacidad no se puede modificar.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <param name="destination" />
      <param name="bufferSize" />
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>Lee asincrónicamente todos los bytes de la secuencia actual y los escribe en otro flujo, utilizando el tamaño de búfer especificado y el token de cancelación.</summary>
      <param name="destination">Secuencia en la que se copiará el contenido de la secuencia actual.</param>
      <param name="bufferSize">Tamaño del búfer en bytes. Este valor debe ser mayor que cero.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación.</param>
      <returns>Tarea que representa la operación de copia asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> es un valor negativo o es cero.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha la secuencia actual o la secuencia de destino.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia actual no admite lectura o la secuencia de destino no admite escritura.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por la clase <see cref="T:System.IO.MemoryStream" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <param name="asyncResult" />
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <param name="asyncResult" />
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>Reemplaza el método <see cref="M:System.IO.Stream.Flush" /> de modo que no se realice ninguna acción.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>De forma asincrónica borra todos los búferes de este flujo y supervisa las solicitudes de cancelación.</summary>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación.</param>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>Devuelve la matriz de bytes sin signo a partir de la cual se creó esta secuencia.</summary>
      <returns>Matriz de bytes desde la que se creó la secuencia o la matriz subyacente si la matriz de bytes no se proporcionó al constructor <see cref="T:System.IO.MemoryStream" /> durante la construcción de la instancia actual.</returns>
      <exception cref="T:System.UnauthorizedAccessException">La instancia de <see langword="MemoryStream" /> no se ha creado con un búfer públicamente visible.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>Obtiene la longitud de la secuencia en bytes.</summary>
      <returns>Longitud de la secuencia en bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>Obtiene o establece la posición actual dentro de la secuencia.</summary>
      <returns>Posición actual dentro de la secuencia.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La posición está establecida en un valor negativo o un valor mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia está cerrada.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lee un bloque de bytes del flujo actual y escribe los datos en un búfer.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de bytes especificada con valores entre <paramref name="offset" /> y (<paramref name="offset" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos de la secuencia actual.</param>
      <param name="offset">Posición de desplazamiento en bytes de base cero de <paramref name="buffer" /> en el que se comienza a almacenar los datos del flujo actual.</param>
      <param name="count">Número máximo de bytes que se pueden leer.</param>
      <returns>Número total de bytes escritos en el búfer. Puede ser menor que el número de bytes solicitado si ese número de bytes no está disponible, o bien puede ser cero si se alcanza el final de la secuencia antes de que se lea algún byte.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />, restado de la longitud de búfer, es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia de la secuencia actual está cerrada.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <param name="destination" />
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición dentro de la secuencia el número de bytes leídos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">El búfer en el que se escriben los datos.</param>
      <param name="offset">Posición de desplazamiento en bytes de <paramref name="buffer" /> donde se comienza a escribir los datos del flujo.</param>
      <param name="count">Número máximo de bytes que se pueden leer.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="offset" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite lectura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente la secuencia.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <param name="destination" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>Lee un byte de la secuencia actual.</summary>
      <returns>El byte convertido en un <see cref="T:System.Int32" /> o -1 si se llega al final de la secuencia.</returns>
      <exception cref="T:System.ObjectDisposedException">La instancia de la secuencia actual está cerrada.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Establece la posición dentro de la secuencia actual en el valor especificado.</summary>
      <param name="offset">Nueva posición dentro de la secuencia. Esta está relacionada con el parámetro <paramref name="loc" /> y puede ser positiva o negativa.</param>
      <param name="loc">Valor de tipo <see cref="T:System.IO.SeekOrigin" />, que actúa como el punto de referencia de las operaciones de búsqueda.</param>
      <returns>Nueva posición dentro de la secuencia, calculada mediante la combinación del punto de referencia inicial y del desplazamiento.</returns>
      <exception cref="T:System.IO.IOException">La búsqueda se intenta antes del comienzo de la secuencia.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentException">Hay un <see cref="T:System.IO.SeekOrigin" /> no válido.  
o bien 
 <paramref name="offset" /> produjo un desbordamiento aritmético.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia de la secuencia actual está cerrada.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>Establece la longitud de la secuencia actual en el valor especificado.</summary>
      <param name="value">Valor en el que establecer la longitud.</param>
      <exception cref="T:System.NotSupportedException">La secuencia actual no es de tamaño variable y <paramref name="value" /> es mayor que la capacidad actual.  
o bien 
La secuencia actual no admite escritura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> es negativo o mayor que la longitud máxima de <see cref="T:System.IO.MemoryStream" />, donde la longitud máxima es (<see cref="F:System.Int32.MaxValue" />-origen) y el origen es el índice del búfer subyacente donde comienza la secuencia.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>Escribe el contenido de la secuencia en una matriz de bytes, independientemente de la propiedad <see cref="P:System.IO.MemoryStream.Position" />.</summary>
      <returns>Nueva matriz de bytes.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>Devuelve la matriz de bytes sin signo a partir de la cual se creó esta secuencia. El valor devuelto indica si la conversión se realizó correctamente.</summary>
      <param name="buffer">Segmento de la matriz de bytes a partir de la cual se creó este flujo.</param>
      <returns>
        <see langword="true" /> si la conversión ha sido correcta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Escribe un bloque de bytes en el flujo actual mediante el uso de datos leídos de un búfer.</summary>
      <param name="buffer">Búfer del que se van a escribir datos.</param>
      <param name="offset">Desplazamiento en bytes de base cero en la <paramref name="buffer" /> en la que se comienzan a copiar los bytes en la secuencia actual.</param>
      <param name="count">Número máximo de bytes que se pueden escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura. Para obtener más información, vea <see cref="P:System.IO.Stream.CanWrite" />.  
O bien 
La posición actual se encuentra más cerca que <paramref name="count" /> bytes al final de la secuencia, y la capacidad no puede modificar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />, restado de la longitud de búfer, es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia de la secuencia actual está cerrada.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición actual dentro de la secuencia el número de bytes escritos y controla las solicitudes de cancelación.</summary>
      <param name="buffer">Búfer del que se van a escribir datos.</param>
      <param name="offset">Desplazamiento en bytes de base cero de <paramref name="buffer" /> desde donde se comienzan a copiar los bytes en la secuencia.</param>
      <param name="count">Número máximo de bytes que se pueden escribir.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="offset" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <param name="source" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>Escribe un byte en la posición actual de la secuencia actual.</summary>
      <param name="value">Byte que se va a escribir.</param>
      <exception cref="T:System.NotSupportedException">La secuencia no admite escritura. Para obtener más información, vea <see cref="P:System.IO.Stream.CanWrite" />.  
O bien 
La posición actual se encuentra al final de la secuencia y la capacidad no se puede modificar.</exception>
      <exception cref="T:System.ObjectDisposedException">Se cierra la secuencia actual.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>Escribe el contenido completo de esta secuencia de memoria en otra secuencia.</summary>
      <param name="stream">Secuencia en la que se va a escribir esta secuencia de memoria.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La secuencia actual o de destino está cerrada.</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>Ejecuta operaciones en instancias de <see cref="T:System.String" /> que contienen información de rutas de acceso de archivos o directorios. Estas operaciones se ejecutan de forma adecuada para múltiples plataformas.</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>Proporciona un carácter alternativo específico de la plataforma, que se utiliza para separar niveles de directorios en una cadena de ruta de acceso que refleja una organización jerárquica del sistema de archivos.</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>Cambia la extensión de una cadena de ruta de acceso.</summary>
      <param name="path">La información de ruta de acceso que se va a modificar. La ruta de acceso no puede contener ninguno de los caracteres definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</param>
      <param name="extension">Nueva extensión (con o sin un punto inicial). Especifique <see langword="null" /> para quitar una extensión existente de <paramref name="path" />.</param>
      <returns>Información de la ruta de acceso modificada.  
En plataformas de escritorio basadas en Windows, si <paramref name="path" /> es <see langword="null" /> o una cadena vacía (""), la información de ruta de acceso se devuelve sin modificar. Si <paramref name="extension" /> es <see langword="null" />, la cadena devuelta contiene la ruta de acceso especificada, de la que se elimina la extensión. Si <paramref name="path" /> no tiene extensión y <paramref name="extension" /> no es <see langword="null" />, la cadena de ruta de acceso devuelta contiene <paramref name="extension" /> anexado al final de <paramref name="path" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>Combina dos cadenas en una ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <returns>Rutas de acceso combinadas. Si una de las rutas de acceso especificadas es una cadena de longitud cero, este método devuelve la otra ruta de acceso. Si <paramref name="path2" /> contiene una ruta de acceso absoluta, este método devuelve <paramref name="path2" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> o <paramref name="path2" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> o <paramref name="path2" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>Combina tres cadenas en una ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <param name="path3">Tercera ruta de acceso que se va a combinar.</param>
      <returns>Rutas de acceso combinadas.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" /> o <paramref name="path3" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" /> o <paramref name="path3" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>Combina cuatro cadenas en una ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <param name="path3">Tercera ruta de acceso que se va a combinar.</param>
      <param name="path4">Cuarta ruta de acceso que se va a combinar.</param>
      <returns>Rutas de acceso combinadas.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> o <paramref name="path4" /> contiene uno o varios de los caracteres no válidos que se definen en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> o <paramref name="path4" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>Combina una matriz de cadenas en una ruta de acceso.</summary>
      <param name="paths">Matriz de elementos de la ruta de acceso.</param>
      <returns>Rutas de acceso combinadas.</returns>
      <exception cref="T:System.ArgumentException">Una de las cadenas de la matriz contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
      <exception cref="T:System.ArgumentNullException">Una de las cadenas de la matriz es <see langword="null" />.</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>Proporciona un carácter específico de la plataforma, que se utiliza para separar niveles de directorios en una cadena de ruta de acceso que refleja una organización jerárquica del sistema de archivos.</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve un valor que indica si la ruta de acceso, especificada como un intervalo de solo lectura, termina en un separador de directorios.</summary>
      <param name="path">Ruta de acceso que se analizará.</param>
      <returns>
        <see langword="true" /> si la ruta de acceso termina en un separador de directorios; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>Devuelve un valor que indica si la ruta de acceso especificada termina en un separador de directorios.</summary>
      <param name="path">Ruta de acceso que se analizará.</param>
      <returns>
        <see langword="true" /> si la ruta de acceso termina en un separador de directorios; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve la información de directorio para la ruta de acceso especificada representada por un intervalo de caracteres.</summary>
      <param name="path">Ruta de acceso de la que se recuperará la información de directorio.</param>
      <returns>La información de directorio para <paramref name="path" />, o un intervalo vacío si <paramref name="path" /> es <see langword="null" />, un intervalo vacío o una raíz (como , C:, o \servidor\recurso compartido).</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>Devuelve la información de directorio para la cadena de ruta de acceso especificada.</summary>
      <param name="path">Ruta de acceso de un archivo o directorio.</param>
      <returns>Información de directorio para <paramref name="path" />, o <see langword="null" /> si <paramref name="path" /> denota un directorio raíz o es null. Devuelve <see cref="F:System.String.Empty" /> si <paramref name="path" /> no contiene información sobre directorios.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="path" /> contiene caracteres no válidos, está vacío o solo contiene espacios en blanco.</exception>
      <exception cref="T:System.IO.PathTooLongException">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture en su lugar la excepción de clase base, <see cref="T:System.IO.IOException" />.  


            

 El parámetro <paramref name="path" /> es superior a la longitud máxima definida por el sistema.</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve la extensión de una ruta de acceso de archivo que se representa mediante un intervalo de caracteres de solo lectura.</summary>
      <param name="path">La ruta de acceso del archivo de la cual se obtiene la extensión.</param>
      <returns>La extensión de la ruta de acceso especificada (incluido el punto "."), o <see cref="P:System.ReadOnlySpan`1.Empty" /> si <paramref name="path" /> no tiene información de la extensión.</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>Devuelve la extensión (incluido el punto ".") de la cadena de ruta de acceso especificada.</summary>
      <param name="path">Cadena de ruta de acceso de la cual se obtiene la extensión.</param>
      <returns>Extensión de la ruta de acceso especificada (incluido el punto "."), <see langword="null" /> o <see cref="F:System.String.Empty" />. Si <paramref name="path" /> es <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> devuelve <see langword="null" />. Si <paramref name="path" /> no tiene información de extensión, <see cref="M:System.IO.Path.GetExtension(System.String)" /> devuelve <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve el nombre de archivo y la extensión de una ruta de acceso de archivo que se representa mediante un intervalo de caracteres de solo lectura.</summary>
      <param name="path">Un intervalo de solo lectura que contiene la ruta de acceso de la cual se obtiene el nombre de archivo y la extensión.</param>
      <returns>Caracteres que siguen al último carácter separador de directorio en <paramref name="path" />.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>Devuelve el nombre de archivo y la extensión de la cadena de ruta de acceso especificada.</summary>
      <param name="path">Cadena de ruta de acceso de la cual se obtiene el nombre de archivo y la extensión.</param>
      <returns>Caracteres que siguen al último carácter separador de directorio en <paramref name="path" />. Si el último carácter de <paramref name="path" /> es un carácter separador de directorios o volúmenes, este método devuelve <see cref="F:System.String.Empty" />. Si <paramref name="path" /> es <see langword="null" /> este método devuelve <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve el nombre de archivo sin la extensión de una ruta de acceso de archivo que se representa mediante un intervalo de caracteres de solo lectura.</summary>
      <param name="path">Un intervalo de solo lectura que contiene la ruta de acceso de la cual se obtiene el nombre de archivo sin la extensión.</param>
      <returns>Los caracteres del intervalo de solo lectura devueltos por <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, menos el último punto (.) y todos los caracteres siguientes.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>Devuelve el nombre de archivo y la cadena de ruta de acceso especificada sin la extensión.</summary>
      <param name="path">Ruta de acceso del archivo.</param>
      <returns>La cadena devuelta por <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, menos el último punto (.) y todos los caracteres siguientes.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>Devuelve la ruta de acceso absoluta para la cadena de ruta de acceso especificada.</summary>
      <param name="path">El archivo o directorio para el que se va a obtener información de la ruta de acceso absoluta.</param>
      <returns>Ubicación completa de <paramref name="path" />, como "C:\MyFile.txt".</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena de longitud cero, contiene solo espacios en blanco o contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
o bien 
El sistema no pudo recuperar la ruta de acceso absoluta.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> contiene un carácter de dos puntos (":") que no forma parte de un identificador de volumen (por ejemplo, "c:\").</exception>
      <exception cref="T:System.IO.PathTooLongException">La ruta de acceso especificada, el nombre de archivo o ambos superan la longitud máxima definida por el sistema.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>Devuelve una ruta de acceso absoluta a partir de una ruta de acceso base completa y una ruta de acceso relativa.</summary>
      <param name="path">Una ruta de acceso relativa para concatenar en <paramref name="basePath" />.</param>
      <param name="basePath">El principio de una ruta de acceso completa.</param>
      <returns>La ruta de acceso absoluta.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> o <paramref name="basePath" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" /> no es una ruta de acceso completa.
O bien
<paramref name="path" /> o <paramref name="basePath" /> contiene caracteres de ruta no válidos, como U+0000.</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>Obtiene una matriz que contiene los caracteres no permitidos en los nombres de archivo.</summary>
      <returns>Matriz que contiene los caracteres no permitidos en los nombres de archivo.</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>Obtiene una matriz que contiene los caracteres no permitidos en los nombres de ruta de acceso.</summary>
      <returns>Matriz que contiene los caracteres no permitidos en los nombres de ruta de acceso.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>Obtiene la información del directorio raíz de la ruta de acceso contenida en el intervalo de caracteres especificado.</summary>
      <param name="path">Ruta de acceso de la que se obtiene información de directorio raíz.</param>
      <returns>Un intervalo de caracteres que contiene el directorio raíz de path.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>Obtiene información del directorio raíz de la ruta de acceso especificada.</summary>
      <param name="path">Ruta de acceso de la que se obtiene información de directorio raíz.</param>
      <returns>El directorio raíz de <paramref name="path" />, o <see langword="null" /> si <paramref name="path" /> es <see langword="null" />, o una cadena vacía si <paramref name="path" /> no contiene información del directorio raíz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
O bien 
 se pasó <see cref="F:System.String.Empty" /> a <paramref name="path" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>Devuelve un nombre de carpeta o de archivo aleatorio.</summary>
      <returns>Nombre de carpeta o de archivo aleatorio.</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>Devuelve una ruta de acceso relativa a partir de una ruta de acceso a otra.</summary>
      <param name="relativeTo">La ruta de acceso de origen a la que el resultado debe ser relativo. Esta ruta de acceso siempre se considera un directorio.</param>
      <param name="path">La ruta de acceso de destino.</param>
      <returns>La ruta de acceso relativa, o <paramref name="path" /> si las rutas de acceso no comparten la misma raíz.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> o <paramref name="path" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>Crea un archivo temporal de cero bytes y nombre único en el disco y devuelve la ruta de acceso completa a ese archivo.</summary>
      <returns>Ruta de acceso completa del archivo temporal.</returns>
      <exception cref="T:System.IO.IOException">Se produce un error de E/S, por ejemplo, no está disponible ningún nombre de archivo temporal único.  
O bien
 Este método no ha podido crear un archivo temporal.</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>Devuelve la ruta de acceso de la carpeta temporal del usuario actual.</summary>
      <returns>Ruta de acceso a la carpeta temporal, que termina con una barra diagonal inversa.</returns>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>Determina si la ruta de acceso representada por el intervalo de caracteres especificado incluye una extensión de nombre de archivo.</summary>
      <param name="path">Ruta de acceso donde se busca una extensión.</param>
      <returns>
        <see langword="true" /> si los caracteres que siguen al último carácter separador de directorio o separador de volumen en la ruta de acceso incluyen un punto (".") seguido de uno o más caracteres; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>Determina si una ruta de acceso incluye una extensión de nombre de archivo.</summary>
      <param name="path">Ruta de acceso donde se busca una extensión.</param>
      <returns>Es <see langword="true" /> si los caracteres que siguen al último separador de directorio (\\ o /) o separador de volumen (:) en la ruta de acceso incluyen un punto (.) seguido de uno o más caracteres; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>Proporciona una matriz de caracteres, específica de la plataforma, que no pueden especificarse en argumentos de cadena de ruta de acceso que se pasen a miembros de la clase <see cref="T:System.IO.Path" />.</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve un valor que indica si la ruta de acceso de archivo representada por el intervalo de caracteres especificado está fija en una unidad específica o una ruta de acceso UNC.</summary>
      <param name="path">Una ruta de acceso de archivo.</param>
      <returns>
        <see langword="true" /> si la ruta de acceso se ha fijado a una unidad específica o ruta de acceso UNC; <see langword="false" /> si la ruta de acceso es relativa a la unidad actual o el directorio de trabajo.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>Devuelve un valor que indica si la ruta de acceso de archivo especificada está fija en una unidad específica o una ruta de acceso UNC.</summary>
      <param name="path">Una ruta de acceso de archivo.</param>
      <returns>
        <see langword="true" /> si la ruta de acceso se ha fijado a una unidad específica o ruta de acceso UNC; <see langword="false" /> si la ruta de acceso es relativa a la unidad actual o el directorio de trabajo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>Devuelve un valor que indica si el intervalo de caracteres especificado que representa una ruta de acceso de archivo contiene una raíz.</summary>
      <param name="path">Ruta de acceso que se va a probar.</param>
      <returns>
        <see langword="true" /> si <paramref name="path" /> contiene una raíz; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>Devuelve un valor que indica si la cadena de ruta de acceso especificada contiene una raíz.</summary>
      <param name="path">Ruta de acceso que se va a probar.</param>
      <returns>
        <see langword="true" /> si <paramref name="path" /> contiene una raíz; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> contiene uno o varios de los caracteres no válidos definidos en <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatena dos componentes de ruta de acceso en una única ruta de acceso.</summary>
      <param name="path1">Intervalo de caracteres que contiene la primera ruta de acceso para combinar.</param>
      <param name="path2">Intervalo de caracteres que contiene la segunda ruta de acceso para combinar.</param>
      <returns>Rutas de acceso combinadas.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatena tres componentes de ruta de acceso en una única ruta de acceso.</summary>
      <param name="path1">Intervalo de caracteres que contiene la primera ruta de acceso para combinar.</param>
      <param name="path2">Intervalo de caracteres que contiene la segunda ruta de acceso para combinar.</param>
      <param name="path3">Intervalo de caracteres que contiene la tercera ruta de acceso para combinar.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Concatena cuatro rutas de acceso en una única ruta de acceso.</summary>
      <param name="path1">Intervalo de caracteres que contiene la primera ruta de acceso para combinar.</param>
      <param name="path2">Intervalo de caracteres que contiene la segunda ruta de acceso para combinar.</param>
      <param name="path3">Intervalo de caracteres que contiene la tercera ruta de acceso para combinar.</param>
      <param name="path4">Intervalo de caracteres que contiene la cuarta ruta de acceso que combinar.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>Concatena dos rutas de acceso en una única ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>Concatena tres rutas de acceso en una única ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <param name="path3">Tercera ruta de acceso que se va a combinar.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>Concatena cuatro rutas de acceso en una única ruta de acceso.</summary>
      <param name="path1">Primera ruta de acceso que se va a combinar.</param>
      <param name="path2">Segunda ruta de acceso que se va a combinar.</param>
      <param name="path3">Tercera ruta de acceso que se va a combinar.</param>
      <param name="path4">Cuarta ruta de acceso que se va a combinar.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>Concatena una matriz de rutas de acceso en una única ruta de acceso.</summary>
      <param name="paths">Matriz de rutas de acceso.</param>
      <returns>Ruta de acceso concatenada.</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>Carácter separador específico de la plataforma que se utiliza para separar cadenas de ruta de acceso en variables de entorno.</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>Recorta un separador de directorios final más allá de la raíz de la ruta de acceso especificada.</summary>
      <param name="path">Ruta de acceso que se recortará.</param>
      <returns>
        <paramref name="path" /> sin separadores de directorios finales.</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>Recorta un separador de directorios final más allá de la raíz de la ruta de acceso especificada.</summary>
      <param name="path">Ruta de acceso que se recortará.</param>
      <returns>
        <paramref name="path" /> sin separadores de directorios finales.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>Intenta concatenar dos componentes de la ruta de acceso a un único intervalo de caracteres asignados previamente, y devuelve un valor que indica si la operación se realizó correctamente.</summary>
      <param name="path1">Intervalo de caracteres que contiene la primera ruta de acceso para combinar.</param>
      <param name="path2">Intervalo de caracteres que contiene la segunda ruta de acceso para combinar.</param>
      <param name="path3">Intervalo de caracteres que contiene la tercera ruta de acceso para combinar.</param>
      <param name="destination">Intervalo de caracteres para contener la ruta de acceso concatenada.</param>
      <param name="charsWritten">Cuando el método finaliza, un valor que indica el número de caracteres escritos en <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> si la operación de concatenación es correcta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>Intenta concatenar dos componentes de la ruta de acceso a un único intervalo de caracteres asignados previamente, y devuelve un valor que indica si la operación se realizó correctamente.</summary>
      <param name="path1">Intervalo de caracteres que contiene la primera ruta de acceso para combinar.</param>
      <param name="path2">Intervalo de caracteres que contiene la segunda ruta de acceso para combinar.</param>
      <param name="destination">Intervalo de caracteres para contener la ruta de acceso concatenada.</param>
      <param name="charsWritten">Cuando el método finaliza, un valor que indica el número de caracteres escritos en <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> si la operación de concatenación es correcta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>Proporciona un carácter separador de volúmenes específico de la plataforma.</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>Implementa un <see cref="T:System.IO.TextReader" /> que lee los caracteres de una secuencia de bytes en una codificación determinada.</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para la secuencia especificada.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> no admite lectura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para la secuencia especificada, con la opción especificada de detección de marcas de orden de bytes.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> no admite lectura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para la secuencia especificada y con la codificación de caracteres indicada.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> no admite lectura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> de la secuencia especificada, con la codificación de caracteres especificada y la opción especificada de detección de marcas de orden de bytes.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> no admite lectura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> de la secuencia especificada, con la codificación de caracteres especificada, la opción especificada de detección de marcas de orden de bytes y el tamaño del búfer.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <param name="bufferSize">Tamaño mínimo de búfer.</param>
      <exception cref="T:System.ArgumentException">La secuencia no admite lectura.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es menor o igual que cero.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> de la secuencia especificada basada en la codificación de caracteres especificada, la opción especificada de detección de marcas de orden de bytes y el tamaño del búfer y, opcionalmente, deja abierta la secuencia.</summary>
      <param name="stream">Secuencia que se va a leer.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="detectEncodingFromByteOrderMarks">
        <see langword="true" /> para buscar marcas de orden de byte al comienzo del archivo; en caso contrario, <see langword="false" />.</param>
      <param name="bufferSize">Tamaño mínimo de búfer.</param>
      <param name="leaveOpen">
        <see langword="true" /> para dejar el flujo abierto después de desechar el objeto <see cref="T:System.IO.StreamReader" />; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para el archivo especificado.</summary>
      <param name="path">Debe leerse toda la ruta de acceso del archivo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el archivo.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida, por ejemplo, está en una unidad no asignada.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para el nombre de archivo especificado, con la opción especificada de detección de marcas de orden de bytes.</summary>
      <param name="path">Debe leerse toda la ruta de acceso del archivo.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el archivo.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida, por ejemplo, está en una unidad no asignada.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> para el nombre de archivo especificado y con la codificación de caracteres indicada.</summary>
      <param name="path">Debe leerse toda la ruta de acceso del archivo.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el archivo.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida, por ejemplo, está en una unidad no asignada.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> del nombre de archivo especificado, con la codificación de caracteres especificada y la opción especificada de detección de marcas de orden de bytes.</summary>
      <param name="path">Debe leerse toda la ruta de acceso del archivo.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el archivo.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida, por ejemplo, está en una unidad no asignada.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamReader" /> del nombre de archivo especificado, con la codificación de caracteres especificada, la opción especificada de detección de marcas de orden de bytes y el tamaño del búfer.</summary>
      <param name="path">Debe leerse toda la ruta de acceso del archivo.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="detectEncodingFromByteOrderMarks">Indica si se deben buscar marcas de orden de byte al comienzo del archivo.</param>
      <param name="bufferSize">Tamaño mínimo del búfer expresado en número de caracteres de 16 bits.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se puede encontrar el archivo.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida, por ejemplo, está en una unidad no asignada.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> es menor o igual que cero.</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>Devuelve la secuencia subyacente.</summary>
      <returns>Secuencia subyacente.</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>Cierra el objeto <see cref="T:System.IO.StreamReader" /> y la secuencia subyacente, además de liberar todos los recursos del sistema asociados al lector.</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>Obtiene la codificación de caracteres que actualmente utiliza este objeto <see cref="T:System.IO.StreamReader" />.</summary>
      <returns>Codificación de caracteres que utiliza actualmente este lector. El valor puede ser diferente después de la primera llamada a cualquier método <see cref="Overload:System.IO.StreamReader.Read" /> de <see cref="T:System.IO.StreamReader" />, ya que la detección automática de la codificación no se realiza hasta la primera llamada a un método <see cref="Overload:System.IO.StreamReader.Read" />.</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>Borra el búfer interno.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>Cierra la secuencia subyacente, libera los recursos no administrados que utiliza <see cref="T:System.IO.StreamReader" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>Obtiene un valor que indica si la actual posición está al final de la secuencia.</summary>
      <returns>Es <see langword="true" /> si la actual posición está al final del flujo; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia subyacente.</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>Un objeto <see cref="T:System.IO.StreamReader" /> en torno a una secuencia vacía.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>Devuelve el siguiente carácter disponible pero no lo consume.</summary>
      <returns>Entero que representa el siguiente carácter que se va a leer, o -1 si no hay caracteres que leer o si la secuencia no admite la operación de búsqueda.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>Lee el siguiente carácter del flujo de entrada y hace avanzar la posición de los caracteres en un carácter.</summary>
      <returns>El siguiente carácter del flujo de entrada que se representa como <see cref="T:System.Int32" /> ó -1 si no hay más caracteres disponibles.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un máximo especificado de caracteres de la secuencia actual en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con los valores comprendidos entre <paramref name="index" /> y (<c>índice + recuento - 1</c>) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Índice de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer.</param>
      <returns>Número de caracteres leídos. Si se llega al final de la secuencia y no se leyó ningún dato es 0. El número será menor o igual que el parámetro <paramref name="count" />, dependiendo de si los datos están disponibles dentro de la secuencia.</returns>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Se produce un error de E/S, como el cierre de la secuencia.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee de forma asincrónica un número máximo de caracteres especificado en la secuencia actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final de la secuencia se alcanza antes de escribir el número de caracteres especificado en el búfer, el método actual vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de caracteres solicitados si el número de caracteres disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo de caracteres especificado en la secuencia actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con los valores comprendidos entre <paramref name="index" /> y (<c>índice + recuento - 1</c>) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer.</param>
      <returns>Número de caracteres que se han leído. Este número será menor o igual que <paramref name="count" />, dependiendo de si se han leído todos los caracteres de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">El elemento <see cref="T:System.IO.StreamReader" /> está cerrado.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee de forma asincrónica un número máximo de caracteres especificado en la secuencia actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final de la secuencia se alcanza antes de escribir el número de caracteres especificado en el búfer, el método vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de caracteres solicitados si el número de caracteres disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>Lee una línea de caracteres de la secuencia actual y devuelve los datos como una cadena.</summary>
      <returns>Línea siguiente del flujo de entrada, o <see langword="null" /> si se alcanza el final del flujo de entrada.</returns>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>Lee de forma asincrónica una línea de caracteres de la secuencia actual y devuelve los datos como una cadena.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene la línea siguiente de la secuencia, o es <see langword="null" /> si se han leído todos los caracteres.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres de la siguiente línea es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>Lee todos los caracteres desde la posición actual hasta el final de la secuencia.</summary>
      <returns>Resto de la secuencia, como una cadena, desde la posición actual hasta el final. Si la posición actual se encuentra al final de la secuencia, devuelve una cadena vacía ("").</returns>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>Lee de forma asincrónica todos los caracteres desde la posición actual hasta el final de la secuencia y los devuelve como una cadena.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene una cadena con los caracteres desde la posición actual hasta el final de la secuencia.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>Implementa <see cref="T:System.IO.TextWriter" /> para escribir los caracteres de una secuencia en una codificación determinada.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para la secuencia especificada usando la codificación UTF-8 y el tamaño de búfer predeterminado.</summary>
      <param name="stream">Secuencia en la que se va a escribir.</param>
      <exception cref="T:System.ArgumentException">No se puede escribir en <paramref name="stream" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para la secuencia especificada usando la codificación especificada y el tamaño de búfer predeterminado.</summary>
      <param name="stream">Secuencia en la que se va a escribir.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">No se puede escribir en <paramref name="stream" />.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para la secuencia especificada usando la codificación y el tamaño de búfer especificados.</summary>
      <param name="stream">Secuencia en la que se va a escribir.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="bufferSize">Tamaño del búfer en bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">No se puede escribir en <paramref name="stream" />.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para la secuencia especificada usando la codificación y tamaño de búfer especificados y, opcionalmente deja abierta la secuencia.</summary>
      <param name="stream">Secuencia en la que se va a escribir.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="bufferSize">Tamaño del búfer en bytes.</param>
      <param name="leaveOpen">
        <see langword="true" /> para dejar el flujo abierto después de desechar el objeto <see cref="T:System.IO.StreamWriter" />; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">No se puede escribir en <paramref name="stream" />.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para el archivo especificado usando la codificación y tamaño de búfer especificados.</summary>
      <param name="path">Ruta de acceso al archivo donde se puede escribir. <paramref name="path" /> puede ser un nombre de archivo.</param>
      <exception cref="T:System.UnauthorizedAccessException">Se denegó el acceso.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").  
o bien 
 <paramref name="path" /> contiene el nombre de un dispositivo del sistema (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida (por ejemplo, está en una unidad no asignada).</exception>
      <exception cref="T:System.IO.PathTooLongException">La ruta de acceso especificada, el nombre de archivo o ambos superan la longitud máxima definida por el sistema.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para el archivo especificado usando la codificación y tamaño de búfer especificados. Si el archivo ya existe, es posible sobrescribir o anexar datos al mismo. Si el archivo no existe, este constructor crea uno nuevo.</summary>
      <param name="path">Ruta de acceso al archivo donde se puede escribir.</param>
      <param name="append">
        <see langword="true" /> para anexar datos al archivo; <see langword="false" /> para sobrescribir el archivo. Si el archivo especificado no existe, este parámetro no tiene ningún efecto y el constructor crea un nuevo archivo.</param>
      <exception cref="T:System.UnauthorizedAccessException">Se denegó el acceso.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> está vacía.  
o bien 
 <paramref name="path" /> contiene el nombre de un dispositivo del sistema (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida (por ejemplo, está en una unidad no asignada).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
      <exception cref="T:System.IO.PathTooLongException">La ruta de acceso especificada, el nombre de archivo o ambos superan la longitud máxima definida por el sistema.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para el archivo especificado usando la codificación especificada y tamaño de búfer predeterminado. Si el archivo ya existe, es posible sobrescribir o anexar datos al mismo. Si el archivo no existe, este constructor crea uno nuevo.</summary>
      <param name="path">Ruta de acceso al archivo donde se puede escribir.</param>
      <param name="append">
        <see langword="true" /> para anexar datos al archivo; <see langword="false" /> para sobrescribir el archivo. Si el archivo especificado no existe, este parámetro no tiene ningún efecto y el constructor crea un nuevo archivo.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <exception cref="T:System.UnauthorizedAccessException">Se denegó el acceso.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> está vacía.  
o bien 
 <paramref name="path" /> contiene el nombre de un dispositivo del sistema (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida (por ejemplo, está en una unidad no asignada).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
      <exception cref="T:System.IO.PathTooLongException">La ruta de acceso especificada, el nombre de archivo o ambos superan la longitud máxima definida por el sistema.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StreamWriter" /> para el archivo especificado en la ruta de acceso especificada, con la codificación y el tamaño de búfer especificados. Si el archivo ya existe, es posible sobrescribir o anexar datos al mismo. Si el archivo no existe, este constructor crea uno nuevo.</summary>
      <param name="path">Ruta de acceso al archivo donde se puede escribir.</param>
      <param name="append">
        <see langword="true" /> para anexar datos al archivo; <see langword="false" /> para sobrescribir el archivo. Si el archivo especificado no existe, este parámetro no tiene ningún efecto y el constructor crea un nuevo archivo.</param>
      <param name="encoding">Codificación de caracteres que se utilizará.</param>
      <param name="bufferSize">Tamaño del búfer en bytes.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> es una cadena vacía ("").  
o bien 
 <paramref name="path" /> contiene el nombre de un dispositivo del sistema (com1, com2, etc.).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> o <paramref name="encoding" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> incluye una sintaxis no correcta o no válida para el nombre de archivo, el nombre de directorio o la etiqueta de volumen.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Se denegó el acceso.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">La ruta de acceso especificada no es válida (por ejemplo, está en una unidad no asignada).</exception>
      <exception cref="T:System.IO.PathTooLongException">La ruta de acceso especificada, el nombre de archivo o ambos superan la longitud máxima definida por el sistema.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>Obtiene o establece un valor que indica si <see cref="T:System.IO.StreamWriter" /> vaciará su búfer en la secuencia subyacente después de cada llamada a <see cref="M:System.IO.StreamWriter.Write(System.Char)" />.</summary>
      <returns>Es <see langword="true" /> para que <see cref="T:System.IO.StreamWriter" /> vacíe su búfer; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>Obtiene la secuencia subyacente que interactúa con una memoria auxiliar.</summary>
      <returns>Secuencia en la que escribe este <see langword="StreamWriter" />.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>Cierra el actual objeto <see langword="StreamWriter" /> y la secuencia subyacente.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">La codificación actual no admite que se muestre la mitad de un par suplente Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>Hace que los datos en búfer se escriban en la secuencia subyacente, libera los recursos no administrados que usa <see cref="T:System.IO.StreamWriter" /> y, de forma opcional, los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
      <exception cref="T:System.Text.EncoderFallbackException">La codificación actual no admite que se muestre la mitad de un par suplente Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>Escribe asincrónicamente cualquier dato almacenado en búfer en la secuencia subyacente y libera los recursos no administrados que usa <see cref="T:System.IO.StreamWriter" />.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>Obtiene el <see cref="T:System.Text.Encoding" /> donde se escribe el resultado.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> especificado en el constructor para la instancia actual o <see cref="T:System.Text.UTF8Encoding" /> si no se ha especificado una codificación.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>Borra todos los búferes del sistema de escritura actual y hace que todos los datos almacenados en el búfer se escriban en la secuencia subyacente.</summary>
      <exception cref="T:System.ObjectDisposedException">El sistema de escritura actual está cerrado.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">La codificación actual no admite que se muestre la mitad de un par suplente Unicode.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>Borra todos los búferes para este flujo de forma asincrónica y hace que los datos almacenados en búfer se escriban en el dispositivo subyacente.</summary>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado la secuencia.</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>Proporciona un <see langword="StreamWriter" /> sin memoria auxiliar, en el que se puede escribir pero no se puede leer.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>Escribe un carácter en la secuencia.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el sistema de escritura actual está cerrado.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el contenido del búfer no puede escribirse en la secuencia de tamaño fijo subyacente porque <see cref="T:System.IO.StreamWriter" /> se encuentra al final de la secuencia.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia.</summary>
      <param name="buffer">Matriz de caracteres que contiene los datos que se van a escribir. Si <paramref name="buffer" /> es <see langword="null" />, no se escribe nada.</param>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el sistema de escritura actual está cerrado.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el contenido del búfer no puede escribirse en la secuencia de tamaño fijo subyacente porque <see cref="T:System.IO.StreamWriter" /> se encuentra al final de la secuencia.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la secuencia.</summary>
      <param name="buffer">Matriz de caracteres que contiene los datos que se van a escribir.</param>
      <param name="index">Posición del carácter en el búfer donde comenzar la lectura de datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el sistema de escritura actual está cerrado.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el contenido del búfer no puede escribirse en la secuencia de tamaño fijo subyacente porque <see cref="T:System.IO.StreamWriter" /> se encuentra al final de la secuencia.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Escribe un intervalo de caracteres en la secuencia.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>Escribe una cadena en la secuencia.</summary>
      <param name="value">Cadena que se debe escribir en la secuencia. Si <paramref name="value" /> es null, no se escribe nada.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el sistema de escritura actual está cerrado.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> es true o el búfer <see cref="T:System.IO.StreamWriter" /> está lleno, y el contenido del búfer no puede escribirse en la secuencia de tamaño fijo subyacente porque <see cref="T:System.IO.StreamWriter" /> se encuentra al final de la secuencia.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">El objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <param name="arg2">Tercer objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>Escribe una cadena con formato en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>Escribe de forma asincrónica un carácter en la secuencia.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe de forma asincrónica una submatriz de caracteres en la secuencia.</summary>
      <param name="buffer">Matriz de caracteres que contiene los datos que se van a escribir.</param>
      <param name="index">Posición del carácter en el búfer donde comienza la lectura de datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una región de memoria de caracteres en la secuencia.</summary>
      <param name="buffer">Región de memoria de caracteres que se va a escribir en la secuencia.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>Escribe de forma asincrónica una cadena en la secuencia.</summary>
      <param name="value">Cadena que se debe escribir en la secuencia. Si <paramref name="value" /> es <see langword="null" />, no se escribe nada.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Escribe la representación en forma de texto de un intervalo de caracteres en la secuencia, seguida de un terminador de línea.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir en la secuencia.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>Escribe una cadena en la secuencia, seguida de un terminador de línea.</summary>
      <param name="value">Cadena que se va a escribir. Si <paramref name="value" /> es <see langword="null" />, sólo se escribe el terminador de línea.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">El objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia, con la misma semántica que el método de <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia, con la misma semántica que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <param name="arg2">Tercer objeto al que se va a dar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia, con la misma semántica que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato y escribir.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>Escribe de forma asincrónica un terminador de línea en la secuencia.</summary>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>Escribe de forma asincrónica un carácter en la secuencia, seguido de un terminador de línea.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe de forma asincrónica una submatriz de caracteres en la secuencia, seguida de un terminador de línea.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Posición del carácter en el búfer donde comenzar la lectura de datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica la representación en forma de texto de una región de memoria de caracteres en la secuencia, seguida de un terminador de línea.</summary>
      <param name="buffer">Región de memoria de caracteres que se va a escribir en la secuencia.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>Escribe de forma asincrónica una cadena en la secuencia, seguida de un terminador de línea.</summary>
      <param name="value">Cadena que se va a escribir. Si el valor es <see langword="null" />, solo se escribe el terminador de línea.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de secuencias.</exception>
      <exception cref="T:System.InvalidOperationException">El escritor de secuencias está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>Implementa <see cref="T:System.IO.TextReader" /> que lee en una cadena.</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StringReader" /> que lee en la cadena especificada.</summary>
      <param name="s">Cadena en la que <see cref="T:System.IO.StringReader" /> debe inicializarse.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="s" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>Cierra el objeto <see cref="T:System.IO.StringReader" />.</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.StringReader" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>Devuelve el siguiente carácter disponible pero no lo consume.</summary>
      <returns>Un entero que representa el siguiente carácter que se va a leer, o -1 si no hay más caracteres disponibles o si la secuencia no admite la operación de búsqueda.</returns>
      <exception cref="T:System.ObjectDisposedException">El sistema de lectura actual está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>Lee el siguiente carácter de la cadena de entrada y hace avanzar la posición de los caracteres en un carácter.</summary>
      <returns>Siguiente carácter de la cadena subyacente, o -1 si no hay más caracteres disponibles.</returns>
      <exception cref="T:System.ObjectDisposedException">El sistema de lectura actual está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un bloque de caracteres de la cadena de entrada y hace avanzar la posición de los caracteres en <paramref name="count" />.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Índice inicial del búfer.</param>
      <param name="count">Número de caracteres que se va a leer.</param>
      <returns>Número total de caracteres leídos en el búfer. Puede ser menor que el número de caracteres solicitado si dicho número de caracteres no está disponible, o puede ser cero si se alcanza el final de la cadena subyacente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">El sistema de lectura actual está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee de forma asincrónica un número máximo de caracteres especificado en la cadena actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final de la cadena se alcanza antes de escribir el número de caracteres especificado en el búfer, el método vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la cadena.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">El lector de cadenas se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee de forma asincrónica un número máximo de caracteres especificado en la cadena actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final de la cadena se alcanza antes de escribir el número de caracteres especificado en el búfer, el método vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la cadena.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">El lector de cadenas se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>Lee una línea de caracteres de la cadena actual y devuelve los datos como una cadena.</summary>
      <returns>Línea siguiente de la cadena actual, o <see langword="null" /> si se alcanza el final de la cadena.</returns>
      <exception cref="T:System.ObjectDisposedException">El sistema de lectura actual está cerrado.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>Lee de forma asincrónica una línea de caracteres de la cadena actual y devuelve los datos como una cadena.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene la línea siguiente del lector de cadenas, o es <see langword="null" /> si se han leído todos los caracteres.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres de la siguiente línea es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">El lector de cadenas se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>Lee todos los caracteres desde la posición actual hasta el final de la cadena y los devuelve como una cadena única.</summary>
      <returns>Contenido desde la posición actual hasta el final de la cadena subyacente.</returns>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
      <exception cref="T:System.ObjectDisposedException">El sistema de lectura actual está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>Lee de forma asincrónica todos los caracteres desde la posición actual hasta el final de la cadena y los devuelve como una cadena única.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene una cadena con los caracteres desde la posición actual hasta el final de la cadena.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">El lector de cadenas se ha desechado.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>Implementa <see cref="T:System.IO.TextWriter" /> para escribir información en una cadena. La información se almacena en el <see cref="T:System.Text.StringBuilder" /> subyacente.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StringWriter" />.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StringWriter" /> con el control de formato especificado.</summary>
      <param name="formatProvider">Objeto <see cref="T:System.IFormatProvider" /> que controla las operaciones de formato.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StringWriter" /> que escribe en el <see cref="T:System.Text.StringBuilder" /> especificado.</summary>
      <param name="sb">Objeto <see cref="T:System.Text.StringBuilder" /> en el que se va a escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.StringWriter" /> que escribe en el <see cref="T:System.Text.StringBuilder" /> especificado y tiene el control de formato especificado.</summary>
      <param name="sb">Objeto <see cref="T:System.Text.StringBuilder" /> en el que se va a escribir.</param>
      <param name="formatProvider">Objeto <see cref="T:System.IFormatProvider" /> que controla las operaciones de formato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>Cierra el <see cref="T:System.IO.StringWriter" /> actual y la secuencia subyacente.</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.StringWriter" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>Obtiene el <see cref="T:System.Text.Encoding" /> donde se escribe el resultado.</summary>
      <returns>
        <see langword="Encoding" /> donde se escribe el resultado.</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>Borra asincrónicamente todos los búferes del sistema de escritura actual y hace que todos los datos almacenados en el búfer se escriban en el dispositivo subyacente.</summary>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>Devuelve el <see cref="T:System.Text.StringBuilder" /> subyacente.</summary>
      <returns>Objeto <see langword="StringBuilder" /> subyacente.</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>Devuelve una cadena que contiene los caracteres escritos hasta el momento en el <see langword="StringWriter" /> actual.</summary>
      <returns>Cadena que contiene los caracteres escritos en el <see langword="StringWriter" /> actual.</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>Escribe un carácter en la cadena.</summary>
      <param name="value">Carácter que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">El sistema de escritura está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la cadena.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">La posición en el búfer en el que se va a empezar a leer datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />.</exception>
      <exception cref="T:System.ObjectDisposedException">El sistema de escritura está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Escribe la representación en forma de cadena de un intervalo de caracteres en la cadena actual.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir en la cadena.</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>Escribe una cadena en la cadena actual.</summary>
      <param name="value">Cadena que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">El sistema de escritura está cerrado.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>Escribe la representación en forma de cadena de un generador de cadena en la cadena actual.</summary>
      <param name="value">El generador de cadena que se va a escribir en la cadena.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>Escribe un carácter en la cadena de forma asincrónica.</summary>
      <param name="value">Carácter que se va a escribir en la cadena.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la cadena de forma asincrónica.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">La posición en el búfer en el que se va a empezar a leer datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica una región de memoria de caracteres en la cadena.</summary>
      <param name="buffer">Región de memoria de caracteres que se va a escribir en la cadena.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>Escribe una cadena en la cadena actual de forma asincrónica.</summary>
      <param name="value">Cadena que se va a escribir. Si <paramref name="value" /> es <see langword="null" />, no se escribirá nada en la secuencia de texto.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica la representación en forma de texto de un generador de cadena en la cadena.</summary>
      <param name="value">El generador de cadena que se va a escribir en la cadena.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Escribe la representación en forma de texto de un intervalo de caracteres en la cadena, seguida de un terminador de línea.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir en la cadena.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>Escribe la representación en forma de texto de un generador de cadena en la cadena, seguida de un terminador de línea.</summary>
      <param name="value">Cadena, como generador de cadena, que se va a escribir en la cadena.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>Escribe de forma asincrónica un carácter en la cadena, seguido de un terminador de línea.</summary>
      <param name="value">Carácter que se va a escribir en la cadena.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe de forma asincrónica una submatriz de caracteres en la cadena, seguida de un terminador de línea.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">La posición en el búfer en el que se va a empezar a leer datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica la representación en forma de cadena de la región de memoria de caracteres en la cadena actual, seguida de un terminador de línea.</summary>
      <param name="buffer">Región de memoria de caracteres que se va a escribir en la cadena.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>Escribe de forma asincrónica una cadena en la cadena actual, seguida de un terminador de línea.</summary>
      <param name="value">Cadena que se va a escribir. Si el valor es <see langword="null" />, solo se escribe el terminador de línea.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de cadenas.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de cadenas está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Escribe de forma asincrónica la representación en forma de cadena del generador de cadena en la cadena actual, seguida de un terminador de línea.</summary>
      <param name="value">El generador de cadena que se va a escribir en la cadena.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>Representa un lector que puede leer una serie secuencial de caracteres.</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>Cierra el <see cref="T:System.IO.TextReader" /> y libera todos los recursos del sistema asociados a <see langword="TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>Libera todos los recursos utilizados por el objeto <see cref="T:System.IO.TextReader" />.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.TextReader" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>Proporciona un <see langword="TextReader" /> sin datos del que leer.</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>Lee el siguiente carácter sin modificar el estado del sistema de lectura o el origen del carácter. Devuelve el siguiente carácter disponible sin leerlo realmente del lector.</summary>
      <returns>Un entero que representa el siguiente carácter que se va a leer, o -1 si no hay más caracteres disponibles o si el lector no admite la operación de búsqueda.</returns>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>Lee el siguiente carácter en el lector de texto y hace avanzar la posición de los caracteres en un carácter.</summary>
      <returns>Carácter siguiente del lector de texto o -1 si no hay más caracteres disponibles. La implementación predeterminada devuelve -1.</returns>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo de caracteres especificado en el lector actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final del lector se alcanza antes de escribir el número de caracteres especificado en el búfer, el método vuelve.</param>
      <returns>Número de caracteres que se han leído. Este número será menor o igual que <paramref name="count" />, dependiendo de si los datos están disponibles dentro del lector. Este método devuelve 0 (cero) si se llama cuando no quedan más caracteres para leer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo de caracteres especificado en el lector de texto actual de forma asincrónica y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final del texto se alcanza antes de leer el número de caracteres especificado en el búfer, el método actual vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final del texto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el lector de texto.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo de caracteres especificado en el lector de texto actual y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, este parámetro contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> -1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer.</param>
      <returns>Número de caracteres que se han leído. Este número será menor o igual que <paramref name="count" />, dependiendo de si se han leído todos los caracteres de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <param name="buffer" />
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Lee un número máximo de caracteres especificado en el lector de texto actual de forma asincrónica y escribe los datos en un búfer, comenzando en el índice especificado.</summary>
      <param name="buffer">Cuando este método devuelve un valor, contiene la matriz de caracteres especificada con valores entre <paramref name="index" /> y (<paramref name="index" /> + <paramref name="count" /> - 1) reemplazada por los caracteres leídos del origen actual.</param>
      <param name="index">Lugar de <paramref name="buffer" /> en el que comenzará la escritura.</param>
      <param name="count">Número máximo de caracteres que se van a leer. Si el final del texto se alcanza antes de leer el número de caracteres especificado en el búfer, el método actual vuelve.</param>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene el número total de bytes leídos en el búfer. El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final del texto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ArgumentException">La suma de <paramref name="index" /> y <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el lector de texto.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <param name="buffer" />
      <param name="cancellationToken" />
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>Lee una línea de caracteres del lector de texto y devuelve los datos como una cadena.</summary>
      <returns>Línea siguiente del lector o <see langword="null" /> si se han leído todos los caracteres.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres de la siguiente línea es mayor que <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>Lee de forma asincrónica una línea de caracteres y devuelve los datos como una cadena.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene la línea siguiente del lector de texto, o es <see langword="null" /> si se han leído todos los caracteres.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres de la siguiente línea es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el lector de texto.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>Lee todos los caracteres desde la posición actual hasta el final del lector de texto y los devuelve como una cadena.</summary>
      <returns>Cadena que contiene todos los caracteres desde la posición actual hasta el final del lector.</returns>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextReader" /> está cerrada.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para asignar un búfer para la cadena devuelta.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres de la siguiente línea es mayor que <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>Lee de forma asincrónica todos los caracteres desde la posición actual hasta el final del lector de texto y los devuelve como una cadena.</summary>
      <returns>Tarea que representa la operación de lectura asincrónica. El valor del parámetro <paramref name="TResult" /> contiene una cadena con los caracteres desde la posición actual hasta el final del lector de texto.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de caracteres es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el lector de texto.</exception>
      <exception cref="T:System.InvalidOperationException">Una operación de lectura anterior está usando actualmente el lector.</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>Crea un contenedor seguro para subprocesos en torno al <see langword="TextReader" /> especificado.</summary>
      <param name="reader">
        <see langword="TextReader" /> que se va a sincronizar.</param>
      <returns>
        <see cref="T:System.IO.TextReader" /> seguro para subprocesos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>Representa un sistema de escritura que puede escribir una serie secuencial de caracteres. Esta clase es abstracta.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.TextWriter" /> con el control de formato especificado.</summary>
      <param name="formatProvider">Objeto <see cref="T:System.IFormatProvider" /> que controla las operaciones de formato.</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>Cierra el sistema de escritura actual y libera todos los recursos del sistema asociados al sistema de escritura.</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>Almacena los caracteres de nueva línea usados para el <see langword="TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>Libera todos los recursos utilizados por el objeto <see cref="T:System.IO.TextWriter" />.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.TextWriter" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>Libera de forma asincrónica todos los recursos que usa el objeto <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>Cuando se reemplaza en una clase derivada, devuelve la codificación de caracteres en que se escribe el resultado.</summary>
      <returns>Codificación de caracteres donde se escriben los resultados.</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>Borra todos los búferes del sistema de escritura actual y hace que todos los datos almacenados en el búfer se escriban en el dispositivo subyacente.</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>Borra asincrónicamente todos los búferes del sistema de escritura actual y hace que todos los datos almacenados en el búfer se escriban en el dispositivo subyacente.</summary>
      <returns>Tarea que representa la operación de vaciado asincrónico.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>Obtiene un objeto que controla las operaciones de formato.</summary>
      <returns>Objeto <see cref="T:System.IFormatProvider" /> para una referencia cultural específica o para las operaciones de formato de la referencia cultural actual si no se especificó otra referencia cultural.</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>Obtiene o establece la cadena de terminador de línea usada por el <see langword="TextWriter" /> actual.</summary>
      <returns>Cadena de terminador de línea para el <see langword="TextWriter" /> actual.</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>Proporciona un <see langword="TextWriter" /> sin memoria auxiliar, en el que se puede escribir pero no se puede leer.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>Crea un contenedor seguro para subprocesos en torno al <see langword="TextWriter" /> especificado.</summary>
      <param name="writer">
        <see langword="TextWriter" /> que se va a sincronizar.</param>
      <returns>Contenedor seguro para subprocesos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>Escribe la representación de texto de un valor <see langword="Boolean" /> en la secuencia de texto.</summary>
      <param name="value">Valor <see langword="Boolean" /> que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>Escribe un carácter en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia de texto.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir en la secuencia de texto.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Posición del carácter en el búfer donde comenzar la recuperación de datos.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>Escribe la representación de texto de un valor decimal en la secuencia de texto.</summary>
      <param name="value">Valor decimal que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>Escribe la representación de texto de un punto flotante de 8 bytes en la secuencia de texto.</summary>
      <param name="value">Valor de punto flotante de 8 bytes que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>Escribe la representación de texto de un entero con signo de 4 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 4 bytes con signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>Escribe la representación de texto de un entero con signo de 8 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes con signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>Escribe la representación de texto de un objeto en la secuencia de texto mediante una llamada al método <see langword="ToString" /> en ese objeto.</summary>
      <param name="value">Objeto que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>Escribe un intervalo de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>Escribe la representación de texto de un valor de punto flotante de 4 bytes en la secuencia de texto.</summary>
      <param name="value">Valor de punto flotante de 4 bytes que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>Escribe una cadena en la secuencia de texto.</summary>
      <param name="value">Cadena que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">El objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
o bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es uno).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
O bien 
El índice de un elemento de formato es menor que 0 (cero) o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es dos).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Escribe una cadena con formato en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <param name="arg2">Tercer objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
O bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es tres).</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>Escribe una cadena con formato en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> o <paramref name="arg" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
O bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que la longitud de la matriz <paramref name="arg" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>Escribe un generador de cadenas en la secuencia de texto.</summary>
      <param name="value">Cadena, como generador de cadenas, que se va a escribir en la secuencia de texto.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>Escribe la representación de texto de un entero sin signo de 4 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 4 bytes sin signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>Escribe la representación de texto de un entero sin signo de 8 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes sin signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>Escribe un carácter en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia de texto.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir en la secuencia de texto. Si <paramref name="buffer" /> es <see langword="null" />, no se escribe nada.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Posición del carácter en el búfer donde comenzar la recuperación de datos.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe una región de la memoria de caracteres en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Región de la memoria de caracteres que se va a escribir en la secuencia de texto.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>Escribe una cadena en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Cadena que se va a escribir. Si <paramref name="value" /> es <see langword="null" />, no se escribirá nada en la secuencia de texto.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Escribe un generador de cadenas en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Cadena, como generador de cadenas, que se va a escribir en la secuencia de texto.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>Escribe un terminador de línea en la secuencia de texto.</summary>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>Escribe la representación de texto de un valor <see langword="Boolean" /> seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Valor <see langword="Boolean" /> que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>Escribe un carácter seguido de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia de texto.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>Escribe una matriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se leen los datos.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se leen los datos.</param>
      <param name="index">Posición del carácter en <paramref name="buffer" /> donde comenzar a leer datos.</param>
      <param name="count">Número máximo de caracteres que se van a escribir.</param>
      <exception cref="T:System.ArgumentException">La longitud del búfer menos <paramref name="index" /> es menor que <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>Escribe la representación de texto de un valor decimal seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Valor decimal que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>Escribe la representación de texto de un valor de punto flotante de 8 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Valor de punto flotante de 8 bytes que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>Escribe la representación de texto de un entero con signo de 4 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 4 bytes con signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>Escribe la representación de texto de un entero con signo de 8 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes con signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>Escribe la representación de texto de un objeto mediante una llamada al método <see langword="ToString" /> en ese objeto, seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Objeto que se va a escribir. Si <paramref name="value" /> es <see langword="null" />, sólo se escribe el terminador de línea.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>Escribe la representación de texto de un intervalo de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Intervalo de caracteres que se va a escribir en la secuencia de texto.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>Escribe la representación de texto de un valor de punto flotante de 4 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Valor de punto flotante de 4 bytes que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>Escribe una cadena seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Cadena que se va a escribir. Si <paramref name="value" /> es <see langword="null" />, sólo se escribe el terminador de línea.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>Escribe una cadena con formato y una nueva línea en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">El objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
o bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es uno).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato y una nueva línea en la secuencia de texto con la misma semántica que el método <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
o bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es dos).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia de texto con la misma semántica que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg0">Primer objeto al que se va a dar formato y escribir.</param>
      <param name="arg1">Segundo objeto al que se va a dar formato y escribir.</param>
      <param name="arg2">Tercer objeto al que se va a dar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
O bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que el número de objetos a los que se va a dar formato (que, para esta sobrecarga del método, es tres).</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>Escribe una cadena con formato y una línea nueva en la secuencia de texto con la misma semántica que <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
      <param name="format">Cadena de formato compuesto.</param>
      <param name="arg">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato y escribir.</param>
      <exception cref="T:System.ArgumentNullException">Una cadena o un objeto se han pasado como <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato compuesta.  
o bien 
El índice de un elemento de formato es menor que 0 (cero), o mayor o igual que la longitud de la matriz <paramref name="arg" />.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>Escribe la representación de texto de un generador de cadenas seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Cadena, como generador de cadenas, que se va a escribir en la secuencia de texto.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>Escribe la representación de texto de un entero sin signo de 4 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 4 bytes sin signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>Escribe la representación de texto de un entero sin signo de 8 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes sin signo que se va a escribir.</param>
      <exception cref="T:System.ObjectDisposedException">La clase <see cref="T:System.IO.TextWriter" /> está cerrada.</exception>
      <exception cref="T:System.IO.IOException">Error de E/S.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>Escribe un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>Escribe un carácter seguido de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Carácter que se va a escribir en la secuencia de texto.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>Escribe una matriz de caracteres seguida de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir en la secuencia de texto. Si la matriz de caracteres es <see langword="null" />, sólo se escribe el terminador de línea.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres seguida de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Posición del carácter en el búfer donde comenzar la recuperación de datos.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> más <paramref name="count" /> es mayor que la longitud del búfer.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> o <paramref name="count" /> es negativo.</exception>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>Escribe la representación de texto de una región de memoria de caracteres seguida de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="buffer">Región de la memoria de caracteres que se va a escribir en la secuencia de texto.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>Escribe una cadena seguida de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Cadena que se va a escribir. Si el valor es <see langword="null" />, solo se escribe el terminador de línea.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
      <exception cref="T:System.ObjectDisposedException">Se desecha el sistema de escritura de texto.</exception>
      <exception cref="T:System.InvalidOperationException">El sistema de escritura de texto está actualmente en uso por una operación de escritura anterior.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>Escribe la representación de texto de un generador de cadenas seguida de un terminador de línea en la secuencia de texto de forma asincrónica.</summary>
      <param name="value">Cadena, como generador de cadenas, que se va a escribir en la secuencia de texto.</param>
      <param name="cancellationToken">Token para supervisar solicitudes de cancelación. El valor predeterminado es <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tarea que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>Enumeración utilizada con la clase <see cref="T:System.LoaderOptimizationAttribute" /> para especificar las optimizaciones del cargador de un ejecutable.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>Common Language Runtime omite este miembro.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>No utilizar. Esta máscara selecciona los valores relacionados con el dominio, eliminando el marcador <see cref="F:System.LoaderOptimization.DisallowBindings" /> no utilizado.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>Indica que la aplicación tendrá probablemente muchos dominios que utilicen el mismo código y que el cargador debe compartir los máximos recursos internos de los dominios de las aplicaciones.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>Indica que la aplicación probablemente hospedará un código único en varios dominios y que el cargador debe compartir recursos por los dominios de las aplicaciones sólo para los ensamblados disponibles globalmente (con nombre seguro) que se hayan agregado a la caché global de ensamblados.</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>Indica que no se han especificado optimizaciones para compartir recursos internos. Si el dominio predeterminado o interfaz del host especificó una optimización, el cargador utiliza esa optimización; en caso contrario, utiliza <see cref="F:System.LoaderOptimization.SingleDomain" />.</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>Indica que la aplicación probablemente tendrá un solo dominio y que el cargador no debe compartir recursos internos en los dominios de las aplicaciones.</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>Utilizado con el fin de establecer la directiva de optimización predeterminada del cargador para el método principal de una aplicación ejecutable.</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.LoaderOptimizationAttribute" /> en el valor especificado.</summary>
      <param name="value">Valor equivalente a una constante <see cref="T:System.LoaderOptimization" />.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.LoaderOptimizationAttribute" /> en el valor especificado.</summary>
      <param name="value">Constante <see cref="T:System.LoaderOptimization" />.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>Obtiene el valor <see cref="T:System.LoaderOptimization" /> actual de esta instancia.</summary>
      <returns>Constante <see cref="T:System.LoaderOptimization" />.</returns>
    </member>
    <member name="T:System.Math">
      <summary>Proporciona constantes y métodos estáticos para operaciones trigonométricas, logarítmicas y otras funciones matemáticas comunes.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>Devuelve el valor absoluto de un número <see cref="T:System.Decimal" />.</summary>
      <param name="value">Número mayor o igual que <see cref="F:System.Decimal.MinValue" />, pero menor o igual que <see cref="F:System.Decimal.MaxValue" />.</param>
      <returns>Número decimal, x, tal que 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>Devuelve el valor absoluto de un número de punto flotante de precisión doble.</summary>
      <param name="value">Número mayor o igual que <see cref="F:System.Double.MinValue" />, pero menor o igual que <see cref="F:System.Double.MaxValue" />.</param>
      <returns>Número de punto flotante de precisión doble, x, tal que 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>Devuelve el valor absoluto de un entero de 16 bits con signo.</summary>
      <param name="value">Número mayor que <see cref="F:System.Int16.MinValue" />, pero menor o igual que <see cref="F:System.Int16.MaxValue" />.</param>
      <returns>Número entero de 16 bits con signo, x, tal que 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es igual que <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>Devuelve el valor absoluto de un entero de 32 bits con signo.</summary>
      <param name="value">Número mayor que <see cref="F:System.Int32.MinValue" />, pero menor o igual que <see cref="F:System.Int32.MaxValue" />.</param>
      <returns>Número entero de 32 bits con signo, x, tal que 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es igual que <see cref="F:System.Int32.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>Devuelve el valor absoluto de un entero de 64 bits con signo.</summary>
      <param name="value">Número mayor que <see cref="F:System.Int64.MinValue" />, pero menor o igual que <see cref="F:System.Int64.MaxValue" />.</param>
      <returns>Número entero de 64 bits con signo, x, tal que 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es igual que <see cref="F:System.Int64.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>Devuelve el valor absoluto de un entero de 8 bits con signo.</summary>
      <param name="value">Número mayor que <see cref="F:System.SByte.MinValue" />, pero menor o igual que <see cref="F:System.SByte.MaxValue" />.</param>
      <returns>Número entero de 8 bits con signo, x, tal que 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es igual que <see cref="F:System.SByte.MinValue" />.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>Devuelve el valor absoluto de un número de punto flotante de precisión sencilla.</summary>
      <param name="value">Número mayor o igual que <see cref="F:System.Single.MinValue" />, pero menor o igual que <see cref="F:System.Single.MaxValue" />.</param>
      <returns>Número de punto flotante de precisión sencilla, x, tal que 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>Devuelve el ángulo cuyo coseno es el número especificado.</summary>
      <param name="d">Número que representa un coseno, donde <paramref name="d" /> debe ser mayor o igual que -1 y menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, como 0 ≤θ≤π. 
o bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 o <paramref name="d" /> &gt; 1 o <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>Devuelve el ángulo cuyo coseno hiperbólico es el número especificado.</summary>
      <param name="d">Número que representa un coseno hiperbólico, donde <paramref name="d" /> debe ser mayor o igual que 1 pero menor o igual que <see cref="F:System.Double.PositiveInfinity" />.</param>
      <returns>Ángulo, θ, medido en radianes, como 0 ≤ θ ≤ ∞.  
o bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; 1 o <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>Devuelve el ángulo cuyo seno es el número especificado.</summary>
      <param name="d">Número que representa un seno, donde <paramref name="d" /> debe ser mayor o igual que -1 y menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, como -π/2 ≤θ≤π/2. 
o bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 o <paramref name="d" /> &gt; 1 o <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>Devuelve el ángulo cuyo seno hiperbólico es el número especificado.</summary>
      <param name="d">Número que representa un seno hiperbólico, donde <paramref name="d" /> debe ser mayor o igual que <see cref="F:System.Double.NegativeInfinity" /> pero menor o igual que <see cref="F:System.Double.PositiveInfinity" />.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ ≤-1 o 1 ≤ θ &lt; ∞. 
O bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>Devuelve el ángulo cuya tangente corresponde al número especificado.</summary>
      <param name="d">Número que representa una tangente.</param>
      <returns>Ángulo, θ, medido en radianes, como -π/2 ≤θ≤π/2.  
O bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> es igual a <see cref="F:System.Double.NaN" />, -π/2 redondeado a precisión doble (-1,5707963267949) si <paramref name="d" /> es igual a <see cref="F:System.Double.NegativeInfinity" />, o π/2 redondeado a precisión doble (1,5707963267949) si <paramref name="d" /> es igual a <see cref="F:System.Double.PositiveInfinity" />.</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>Devuelve el ángulo cuya tangente es el cociente de dos números especificados.</summary>
      <param name="y">Coordenada Y de un punto.</param>
      <param name="x">Coordenada X de un punto.</param>
      <returns>Ángulo, θ, medido en radianes, como -π≤θ≤π, y tan(θ) = <paramref name="y" /> / <paramref name="x" />, donde (<paramref name="x" />, <paramref name="y" />) es un punto en el plano cartesiano. Observe lo siguiente: 

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 1, 0 &lt; θ &lt; π/2.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 2, π/2 &lt; θ≤π.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 3, -π &lt; θ &lt; -π/2.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 4, -π/2 &lt; θ &lt; 0.  


Para los puntos en los límites de los cuadrantes, el valor devuelto es el siguiente: 

Si y es 0 y x no es negativo, θ = 0.  

Si y es 0 y x es negativo, θ = π.  

Si y es positivo y x es 0, θ = π/2.  

Si y es negativo y el valor de x es 0, θ = -π/2.  

Si y es 0 y x es 0, θ = 0.  


Si <paramref name="x" /> o <paramref name="y" /> es <see cref="F:System.Double.NaN" /> o si <paramref name="x" /> y <paramref name="y" /> son <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />, el método devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>Devuelve el ángulo cuya tangente hiperbólica es el número especificado.</summary>
      <param name="d">Número que representa una tangente hiperbólica, donde <paramref name="d" /> debe ser mayor o igual que -1 pero menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ &lt; -1 o 1 &lt; θ &lt; ∞. 
o bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="d" /> &lt; -1 o <paramref name="d" /> &gt; 1 o <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>Calcula el producto completo de dos números de 32 bits.</summary>
      <param name="a">El primer número que se va a multiplicar.</param>
      <param name="b">El segundo número que se va a multiplicar.</param>
      <returns>Número que contiene el producto de los números especificados.</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>Devuelve el siguiente valor más pequeño menor que <paramref name="x" />.</summary>
      <param name="x">Valor que se va a disminuir.</param>
      <returns>Siguiente valor más pequeño menor que <paramref name="x" />.  
O bien 
 <see cref="F:System.Double.NegativeInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Double.NegativeInfinity" />.
o bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>Devuelve el siguiente valor más grande mayor que <paramref name="x" />.</summary>
      <param name="x">Valor que se va a aumentar.</param>
      <returns>Siguiente valor más grande mayor que <paramref name="x" />.  
O bien 
 <see cref="F:System.Double.PositiveInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Double.PositiveInfinity" />.
O bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>Devuelve la raíz cúbica de un número especificado.</summary>
      <param name="d">Número cuya raíz cúbica se va a calcular.</param>
      <returns>Raíz cúbica de <paramref name="d" />.  
O bien 
 <see cref="F:System.Double.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>Devuelve el valor integral más pequeño que es mayor o igual que el número decimal especificado.</summary>
      <param name="d">Número decimal.</param>
      <returns>Valor entero más pequeño que es mayor o igual que <paramref name="d" />. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Decimal" /> en lugar de un tipo entero.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>Devuelve el valor integral más pequeño que es mayor o igual que el número de punto flotante de precisión doble especificado.</summary>
      <param name="a">Número de punto flotante de precisión doble.</param>
      <returns>Valor entero más pequeño que es mayor o igual que <paramref name="a" />. Si <paramref name="a" /> es igual que <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, se devuelve ese valor. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Double" /> en lugar de un tipo entero.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
O bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt;<paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.`` 
O bien 
  <see cref="F:System.Double.NaN" /> si <paramref name="value" /> es igual que <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
O bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
O bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
O bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
O bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.
o bien 
  <see cref="F:System.Single.NaN" /> si <paramref name="value" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.  
o bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>Devuelve un elemento <paramref name="value" /> fijado al rango inclusivo de <paramref name="min" /> y <paramref name="max" />.</summary>
      <param name="value">Valor que se va a fijar.</param>
      <param name="min">Límite inferior del resultado.</param>
      <param name="max">Límite superior del resultado.</param>
      <returns>
        <paramref name="value" /> si <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />.
O bien 
 <paramref name="min" /> si <paramref name="value" /> &lt; <paramref name="min" />.
o bien 
 <paramref name="max" /> si <paramref name="max" /> &lt; <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>Devuelve un valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</summary>
      <param name="x">Número cuya magnitud se usa en el resultado.</param>
      <param name="y">Número cuyo signo se usa en el resultado.</param>
      <returns>Valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>Devuelve el coseno del ángulo especificado.</summary>
      <param name="d">Ángulo, medido en radianes.</param>
      <returns>Coseno de <paramref name="d" />. Si <paramref name="d" /> es igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, este método devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>Devuelve el coseno hiperbólico del ángulo especificado.</summary>
      <param name="value">Ángulo, medido en radianes.</param>
      <returns>Coseno hiperbólico de <paramref name="value" />. Si <paramref name="value" /> es igual que <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, se devuelve <see cref="F:System.Double.PositiveInfinity" />. Si <paramref name="value" /> es igual que <see cref="F:System.Double.NaN" />, se devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>Calcula el cociente de dos números enteros de 32 bits con signo y devuelve también el resto de la división como parámetro de salida.</summary>
      <param name="a">Dividendo.</param>
      <param name="b">Divisor.</param>
      <param name="result">Resto.</param>
      <returns>Cociente de los números especificados.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> es cero.</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>Calcula el cociente de dos números enteros de 64 bits con signo y devuelve también el resto de la división como parámetro de salida.</summary>
      <param name="a">Dividendo.</param>
      <param name="b">Divisor.</param>
      <param name="result">Resto.</param>
      <returns>Cociente de los números especificados.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" /> es cero.</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>Representa la base logarítmica natural, especificada por la constante, <see langword="e" />.</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>Devuelve <see langword="e" /> elevado a la potencia especificada.</summary>
      <param name="d">Número que especifica una potencia.</param>
      <returns>Número <see langword="e" /> elevado a la potencia <paramref name="d" />. Si <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" /> o <see cref="F:System.Double.PositiveInfinity" />, se devuelve ese valor. Si <paramref name="d" /> es igual que <see cref="F:System.Double.NegativeInfinity" />, se devuelve 0.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>Devuelve el mayor valor integral menor o igual que el número decimal especificado.</summary>
      <param name="d">Número decimal.</param>
      <returns>El mayor valor integral que es menor o igual que <paramref name="d" />.  Tenga en cuenta que el método devuelve un valor entero de tipo <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>Devuelve el mayor valor integral menor o igual que el número de punto flotante de precisión doble especificado.</summary>
      <param name="d">Número de punto flotante de precisión doble.</param>
      <returns>El mayor valor integral que es menor o igual que <paramref name="d" />. Si <paramref name="d" /> es igual que <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, se devuelve ese valor.</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>Devuelve (x * y) + z, redondeado como una operación ternaria.</summary>
      <param name="x">Número que se va a multiplicar con <paramref name="y" />.</param>
      <param name="y">Número que se va a multiplicar con <paramref name="x" />.</param>
      <param name="z">Número que se va a agregar al resultado de <paramref name="x" /> multiplicado por <paramref name="y" />.</param>
      <returns>(x * y) + z, redondeado como una operación ternaria.</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>Devuelve el resto de la división de dos números especificados.</summary>
      <param name="x">Dividendo.</param>
      <param name="y">Divisor.</param>
      <returns>Número igual a <paramref name="x" /> - (<paramref name="y" /> Q), donde Q es el cociente de <paramref name="x" /> / <paramref name="y" /> redondeado a su entero más próximo (si <paramref name="x" /> / <paramref name="y" /> se encuentra entre dos enteros, se devuelve el entero par).  
Si <paramref name="x" /> - (<paramref name="y" /> Q) es cero, se devuelve el valor +0 si <paramref name="x" /> es positivo o -0 si <paramref name="x" /> es negativo.  
Si <paramref name="y" /> = 0, se devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>Devuelve el logaritmo de entero en base 2 de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Default 
  Logaritmo de entero en base 2 de <paramref name="x" />; es decir, (int)log2(<paramref name="x" />).  

  Cero 
 <see cref="F:System.Int32.MinValue" /> Igual que <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>Devuelve el logaritmo natural (en base <see langword="e" />) de un número especificado.</summary>
      <param name="d">Número cuyo logaritmo se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="d" /> 
  Valor devuelto 
  Positivo 
  El algoritmo natural de <paramref name="d" />; es decir, ln <paramref name="d" /> o log e <paramref name="d" /> Cero 
 <see cref="F:System.Double.NegativeInfinity" /> Negativo 
 <see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>Devuelve el logaritmo de un número especificado en una base determinada.</summary>
      <param name="a">Número cuyo logaritmo se va a calcular.</param>
      <param name="newBase">Base del logaritmo.</param>
      <returns>Uno de los valores de la tabla siguiente. (+Infinito denota <see cref="F:System.Double.PositiveInfinity" />, -Infinito denota <see cref="F:System.Double.NegativeInfinity" /> y NaN denota <see cref="F:System.Double.NaN" />) 
 <paramref name="a" /><paramref name="newBase" /> Valor devuelto 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) o (<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  (cualquier valor) 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinito 
  NaN 
 <paramref name="a" /> = NaN 
  (cualquier valor) 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinito 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="a" /> =  +infinito 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="a" /> =  +infinito 
 <paramref name="newBase" />&gt; 1 
  +Infinito 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinito 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>Devuelve el logaritmo en base 10 de un número especificado.</summary>
      <param name="d">Número cuyo logaritmo hay que calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="d" /> 
  Valor devuelto 
  Positivo 
  Logaritmo en base 10 de <paramref name="d" />; es decir, log 10<paramref name="d" />.  

  Cero 
 <see cref="F:System.Double.NegativeInfinity" /> Negativo 
 <see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>Devuelve el logaritmo en base 2 de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo hay que calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Positivo 
  Logaritmo en base 2 de <paramref name="x" />; es decir, log 2<paramref name="x" />.  

  Cero 
 <see cref="F:System.Double.NegativeInfinity" /> Negativo 
 <see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /> Igual a <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>Devuelve el mayor de dos enteros de 8 bits sin signo.</summary>
      <param name="val1">Primer entero de 8 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 8 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>Devuelve el mayor de dos números decimales.</summary>
      <param name="val1">Primer número de dos números decimales que se van a comparar.</param>
      <param name="val2">Segundo número de dos decimales que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>Devuelve el mayor de dos números de punto flotante de precisión doble.</summary>
      <param name="val1">Primer número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <param name="val2">Segundo número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor. Si <paramref name="val1" />, <paramref name="val2" /> o ambos ( <paramref name="val1" /> y <paramref name="val2" />) son iguales que <see cref="F:System.Double.NaN" />, se devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>Devuelve el mayor de dos enteros de 16 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 16 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 16 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>Devuelve el mayor de dos enteros de 32 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 32 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 32 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>Devuelve el mayor de dos enteros de 64 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 64 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 64 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>Devuelve el mayor de dos enteros de 8 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 8 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 8 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>Devuelve el mayor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="val1">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="val2">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor. Si <paramref name="val1" /> o <paramref name="val2" />, o ambos (<paramref name="val1" /> y <paramref name="val2" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>Devuelve el mayor de dos enteros de 16 bits sin signo.</summary>
      <param name="val1">Primer entero de 16 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 16 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>Devuelve el mayor de dos enteros de 32 bits sin signo.</summary>
      <param name="val1">Primer entero de 32 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 32 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>Devuelve el mayor de dos enteros de 64 bits sin signo.</summary>
      <param name="val1">Primer entero de 64 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 64 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>Devuelve la magnitud mayor de dos números de punto flotante de precisión doble.</summary>
      <param name="x">Primer número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud mayor. Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> se devuelve.</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>Devuelve el menor de dos enteros de 8 bits sin signo.</summary>
      <param name="val1">Primer entero de 8 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 8 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>Devuelve el menor de dos números decimales.</summary>
      <param name="val1">Primer número de dos números decimales que se van a comparar.</param>
      <param name="val2">Segundo número de dos decimales que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>Devuelve el menor de dos números de punto flotante de precisión doble.</summary>
      <param name="val1">Primer número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <param name="val2">Segundo número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor. Si <paramref name="val1" />, <paramref name="val2" /> o ambos ( <paramref name="val1" /> y <paramref name="val2" />) son iguales que <see cref="F:System.Double.NaN" />, se devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>Devuelve el menor de dos enteros de 16 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 16 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 16 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>Devuelve el menor de dos enteros de 32 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 32 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 32 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>Devuelve el menor de dos enteros de 64 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 64 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 64 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>Devuelve el menor de dos enteros de 8 bits con signo.</summary>
      <param name="val1">Primero de los dos enteros de 8 bits con signo que se van a comparar.</param>
      <param name="val2">Segundo de los dos enteros de 8 bits con signo que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>Devuelve el menor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="val1">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="val2">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor. Si <paramref name="val1" />, <paramref name="val2" /> o ambos ( <paramref name="val1" /> y <paramref name="val2" />) son iguales que <see cref="F:System.Single.NaN" />, se devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>Devuelve el menor de dos enteros de 16 bits sin signo.</summary>
      <param name="val1">Primer entero de 16 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 16 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>Devuelve el menor de dos enteros de 32 bits sin signo.</summary>
      <param name="val1">Primer entero de 32 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 32 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>Devuelve el menor de dos enteros de 64 bits sin signo.</summary>
      <param name="val1">Primer entero de 64 bits sin signo de los dos que se van a comparar.</param>
      <param name="val2">Segundo entero de 64 bits sin signo de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="val1" /> o <paramref name="val2" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>Devuelve la magnitud menor de dos números de punto flotante de precisión doble.</summary>
      <param name="x">Primer número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión doble de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud menor. Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> se devuelve.</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>Representa la proporción de la circunferencia de un círculo en relación con su diámetro, especificado por la constante π.</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>Devuelve un número especificado elevado a la potencia especificada.</summary>
      <param name="x">Número de punto flotante de precisión doble que se desea elevar a una potencia.</param>
      <param name="y">Número de punto flotante de precisión doble que especifica una potencia.</param>
      <returns>Número <paramref name="x" /> elevado a la potencia <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>Redondea un valor decimal al valor entero más cercano y los valores de punto medio al número par más cercano.</summary>
      <param name="d">Número decimal que se va a redondear.</param>
      <returns>El entero más cercano al parámetro <paramref name="d" />. Si el componente fraccionario de <paramref name="d" /> se encuentra en medio del intervalo entre dos números, uno par y el otro impar, se devuelve el número impar. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Decimal" /> en lugar de un tipo entero.</returns>
      <exception cref="T:System.OverflowException">El resultado está fuera del intervalo de <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>Redondea un valor decimal a un número especificado de dígitos fraccionarios y los valores de punto medio al número par más cercano.</summary>
      <param name="d">Número decimal que se va a redondear.</param>
      <param name="decimals">Número de posiciones decimales del valor devuelto.</param>
      <returns>Número más cercano a <paramref name="d" /> que contiene varios dígitos fraccionarios iguales a <paramref name="decimals" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> es menor que 0 o mayor que 28.</exception>
      <exception cref="T:System.OverflowException">El resultado está fuera del intervalo de <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>Redondea un valor decimal a un número especificado de dígitos fraccionarios y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="d">Número decimal que se va a redondear.</param>
      <param name="decimals">Número de posiciones decimales del valor devuelto.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="d" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>Número más cercano a <paramref name="d" /> que contiene varios dígitos fraccionarios iguales a <paramref name="decimals" />. Si <paramref name="d" /> tiene menos dígitos fraccionarios que <paramref name="decimals" />, <paramref name="d" /> se devuelve sin modificar.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> es menor que 0 o mayor que 28.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
      <exception cref="T:System.OverflowException">El resultado está fuera del intervalo de <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>Redondea un valor decimal al entero más cercano y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="d">Número decimal que se va a redondear.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="d" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>
        <paramref name="d" /> entero más cercano. Si <paramref name="d" /> se encuentra a la mitad del intervalo entre dos números, uno par y el otro impar, <paramref name="mode" /> determina los dos números que se devuelven. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Decimal" /> en lugar de un tipo entero.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
      <exception cref="T:System.OverflowException">El resultado está fuera del intervalo de <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>Redondea un valor de punto flotante de precisión doble al valor entero más cercano y los valores de punto medio al número par más cercano.</summary>
      <param name="a">Número de punto flotante de precisión doble que se va a redondear.</param>
      <returns>
        <paramref name="a" /> entero más cercano. Si el componente fraccionario de <paramref name="a" /> se encuentra en medio del intervalo entre dos números, uno par y el otro impar, se devuelve el número impar. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Double" /> en lugar de un tipo entero.</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>Redondea un valor de punto flotante de precisión doble a un número especificado de dígitos fraccionarios y los valores de punto medio al número par más cercano.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a redondear.</param>
      <param name="digits">Número de dígitos fraccionarios del valor devuelto.</param>
      <returns>Número más cercano a <paramref name="value" /> que contiene varios dígitos fraccionarios iguales a <paramref name="digits" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> es menor que 0 o mayor que 15.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>Redondea un valor de punto flotante de precisión doble a un número especificado de dígitos fraccionarios y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a redondear.</param>
      <param name="digits">Número de dígitos fraccionarios del valor devuelto.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="value" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>Número más cercano a <paramref name="value" /> que tiene varios dígitos fraccionarios iguales a <paramref name="digits" />. Si <paramref name="value" /> tiene menos dígitos fraccionarios que <paramref name="digits" />, <paramref name="value" /> se devuelve sin modificar.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> es menor que 0 o mayor que 15.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>Redondea un valor de punto flotante de precisión doble al entero más cercano y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="value">Número de punto flotante de precisión doble que se va a redondear.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="value" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>
        <paramref name="value" /> entero más cercano. Si <paramref name="value" /> se encuentra a la mitad del intervalo entre dos enteros, uno par y el otro impar, <paramref name="mode" /> determina los dos números que se devuelven. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Double" /> en lugar de un tipo entero.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>Devuelve x * 2^n calculado de forma eficaz.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que especifica el valor base.</param>
      <param name="n">Número de punto flotante de precisión sencilla que especifica la potencia.</param>
      <returns>x * 2^n calculado de forma eficaz.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>Devuelve un entero que indica el signo de un número decimal.</summary>
      <param name="value">Número decimal con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>Devuelve un entero que indica el signo de un número de punto flotante de doble precisión.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> es igual a <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>Devuelve un entero que indica el signo de un entero de 16 bits con signo.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>Devuelve un entero que indica el signo de un entero de 32 bits con signo.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>Devuelve un entero que indica el signo de un entero de 64 bits con signo.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>Devuelve un entero que indica el signo de un entero de 8 bits con signo.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>Devuelve un entero que indica el signo de un número de punto flotante de precisión sencilla.</summary>
      <param name="value">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="value" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="value" /> es menor que cero.  

  0 
 <paramref name="value" /> es igual a cero.  

  1 
 <paramref name="value" /> es mayor que cero.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> es igual a <see cref="F:System.Single.NaN" />.</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>Devuelve el seno del ángulo especificado.</summary>
      <param name="a">Ángulo, medido en radianes.</param>
      <returns>Seno de <paramref name="a" />. Si <paramref name="a" /> es igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, este método devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>Devuelve el seno hiperbólico del ángulo especificado.</summary>
      <param name="value">Ángulo, medido en radianes.</param>
      <returns>Seno hiperbólico de <paramref name="value" />. Si <paramref name="value" /> es igual a <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NaN" />, este método devuelve <see cref="T:System.Double" /> igual a <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>Devuelve la raíz cuadrada de un número especificado.</summary>
      <param name="d">Número cuya raíz cuadrada se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="d" /> 
  Valor devuelto 
  Cero o positivo 
  Raíz cuadrada positiva de <paramref name="d" />.  

  Negativo 
 <see cref="F:System.Double.NaN" /> Es igual a <see cref="F:System.Double.NaN" />.<see cref="F:System.Double.NaN" /> Es igual a <see cref="F:System.Double.PositiveInfinity" />.<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>Devuelve la tangente del ángulo especificado.</summary>
      <param name="a">Ángulo, medido en radianes.</param>
      <returns>Tangente de <paramref name="a" />. Si <paramref name="a" /> es igual a <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />, este método devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>Devuelve la tangente hiperbólica del ángulo especificado.</summary>
      <param name="value">Ángulo, medido en radianes.</param>
      <returns>Tangente hiperbólica de <paramref name="value" />. Si <paramref name="value" /> es igual a <see cref="F:System.Double.NegativeInfinity" />, este método devuelve -1. Si el valor es igual a <see cref="F:System.Double.PositiveInfinity" />, este método devuelve 1. Si <paramref name="value" /> es igual a <see cref="F:System.Double.NaN" />, este método devuelve <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>Calcula la parte entera de un número decimal especificado.</summary>
      <param name="d">Número que se va a truncar.</param>
      <returns>Parte entera de <paramref name="d" />, es decir, el número que queda después de descartar los dígitos fraccionarios.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>Calcula la parte entera de un número de punto flotante de precisión doble especificado.</summary>
      <param name="d">Número que se va a truncar.</param>
      <returns>La parte entera de <paramref name="d" />, es decir, el número que permanece una vez descartado cualquier dígito fraccionario o uno de los valores enumerados en la siguiente tabla.  
 <paramref name="d" /> Valor devuelto 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>Proporciona constantes y métodos estáticos para operaciones trigonométricas, logarítmicas y otras funciones matemáticas comunes.</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>Devuelve el valor absoluto de un número de punto flotante de precisión sencilla.</summary>
      <param name="x">Número mayor o igual que <see cref="F:System.Single.MinValue" />, pero menor o igual que <see cref="F:System.Single.MaxValue" />.</param>
      <returns>Número de punto flotante de precisión sencilla, x, de modo que 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>Devuelve el ángulo cuyo coseno es el número especificado.</summary>
      <param name="x">Número que representa un coseno, donde <paramref name="x" /> debe ser mayor o igual que -1 y menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que 0 ≤ θ ≤ π.
o bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>Devuelve el ángulo cuyo coseno hiperbólico es el número especificado.</summary>
      <param name="x">Número que representa un coseno hiperbólico, donde <paramref name="x" /> debe ser mayor o igual que 1 pero menor o igual que <see cref="F:System.Single.PositiveInfinity" />.</param>
      <returns>Ángulo, θ, medido en radianes, como 0 ≤ θ ≤ ∞.
O bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>Devuelve el ángulo cuyo seno es el número especificado.</summary>
      <param name="x">Número que representa un seno, donde <paramref name="x" /> debe ser mayor o igual que -1 y menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -π/2 ≤ θ ≤ π/2.
O bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>Devuelve el ángulo cuyo seno hiperbólico es el número especificado.</summary>
      <param name="x">Número que representa un seno hiperbólico, donde <paramref name="x" /> debe ser mayor o igual que <see cref="F:System.Single.NegativeInfinity" /> pero menor o igual que <see cref="F:System.Single.PositiveInfinity" />.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ ≤ -1 o 1 ≤ θ &lt; ∞. 
o bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>Devuelve el ángulo cuya tangente corresponde al número especificado.</summary>
      <param name="x">Número que representa una tangente.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -π/2 ≤ θ ≤ π/2.  
o bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, -π/2 redondeado a precisión doble (-1,5707963267949) si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, o π/2 redondeado a precisión doble (1,5707963267949) si <paramref name="x" /> es igual a <see cref="F:System.Single.PositiveInfinity" />.</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>Devuelve el ángulo cuya tangente es el cociente de dos números especificados.</summary>
      <param name="y">Coordenada Y de un punto.</param>
      <param name="x">Coordenada X de un punto.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -π ≤ θ ≤ π y tan(θ) = <paramref name="y" /> / <paramref name="x" />, donde (<paramref name="x" />, <paramref name="y" />) es un punto en el plano cartesiano. Observe lo siguiente: 

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 1, 0 &lt; θ &lt; π/2.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 2, π/2 &lt; θ ≤ π.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 3, -π &lt; θ &lt; -π/2.  

Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 4, -π/2 &lt; θ &lt; 0.  


Para los puntos en los límites de los cuadrantes, el valor devuelto es el siguiente: 

Si y es 0 y x no es negativo, θ = 0.  

Si y es 0 y x es negativo, θ = π.  

Si y es positivo y x es 0, θ = π/2.  

Si y es negativo y el valor de x es 0, θ = -π/2.  

Si y es 0 y x es 0, θ = 0.  


Si <paramref name="x" /> o <paramref name="y" /> es <see cref="F:System.Single.NaN" /> o si <paramref name="x" /> y <paramref name="y" /> son <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />, el método devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>Devuelve el ángulo cuya tangente hiperbólica es el número especificado.</summary>
      <param name="x">Número que representa una tangente hiperbólica, donde <paramref name="x" /> debe ser mayor o igual que -1 pero menor o igual que 1.</param>
      <returns>Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ &lt;-1 o 1 &lt; θ &lt; ∞.  
O bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>Devuelve el siguiente valor más pequeño menor que <paramref name="x" />.</summary>
      <param name="x">Valor que se va a disminuir.</param>
      <returns>Siguiente valor más pequeño menor que <paramref name="x" />.
o bien 
 <see cref="F:System.Single.NegativeInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" />.
o bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>Devuelve el siguiente valor más grande mayor que <paramref name="x" />.</summary>
      <param name="x">Valor que se va a aumentar.</param>
      <returns>Siguiente valor más grande mayor que <paramref name="x" />.
o bien 
 <see cref="F:System.Single.PositiveInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.PositiveInfinity" />.
O bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>Devuelve la raíz cúbica de un número especificado.</summary>
      <param name="x">Número cuya raíz cúbica se va a calcular.</param>
      <returns>Raíz cúbica de <paramref name="x" />.
o bien 
 <see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>Devuelve el valor integral más pequeño que es mayor o igual que el número de punto flotante de precisión sencilla especificado.</summary>
      <param name="x">Número de punto flotante de precisión sencilla.</param>
      <returns>Valor entero más pequeño que es mayor o igual que <paramref name="x" />. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>Devuelve un valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</summary>
      <param name="x">Número cuya magnitud se usa en el resultado.</param>
      <param name="y">Número cuyo signo se usa en el resultado.</param>
      <returns>Valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>Devuelve el coseno del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Coseno de <paramref name="x" />. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>Devuelve el coseno hiperbólico del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Coseno hiperbólico de <paramref name="x" />. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve <see cref="F:System.Single.PositiveInfinity" />. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, se devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>Representa la base logarítmica natural, especificada por la constante, <see langword="e" />.</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>Devuelve <see langword="e" /> elevado a la potencia especificada.</summary>
      <param name="x">Número que especifica una potencia.</param>
      <returns>Número <see langword="e" /> elevado a la potencia <paramref name="x" />. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" />, se devuelve 0.</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>Devuelve el valor integral más grande menor o igual que el número de punto flotante de precisión sencilla especificado.</summary>
      <param name="x">Número de punto flotante de precisión sencilla.</param>
      <returns>El mayor valor integral que es menor o igual que <paramref name="x" />. Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor.</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>Devuelve (x * y) + z, redondeado como una operación ternaria.</summary>
      <param name="x">Número que se va a multiplicar con <paramref name="y" />.</param>
      <param name="y">Número que se va a multiplicar con <paramref name="x" />.</param>
      <param name="z">Número que se va a agregar al resultado de <paramref name="x" /> multiplicado por <paramref name="y" />.</param>
      <returns>(x * y) + z, redondeado como una operación ternaria.</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>Devuelve el resto de la división de dos números especificados.</summary>
      <param name="x">Dividendo.</param>
      <param name="y">Divisor.</param>
      <returns>Número igual a <paramref name="x" /> - (<paramref name="y" /> Q), donde Q es el cociente de <paramref name="x" /> / <paramref name="y" /> redondeado a su entero más próximo (si <paramref name="x" /> / <paramref name="y" /> se encuentra entre dos enteros, se devuelve el entero par).  
Si <paramref name="x" /> - (<paramref name="y" /> Q) es cero, se devuelve el valor +0 si <paramref name="x" /> es positivo o -0 si <paramref name="x" /> es negativo.  
Si <paramref name="y" /> = 0, se devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>Devuelve el logaritmo de entero en base 2 de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Default 
  Logaritmo de entero en base 2 de <paramref name="x" />; es decir, (int)log2(<paramref name="x" />).  

  Cero 
 <see cref="F:System.Int32.MinValue" /> Igual que <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>Devuelve el logaritmo natural (en base <see langword="e" />) de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Positivo 
  El algoritmo natural de <paramref name="x" />; es decir, ln <paramref name="x" /> o log e <paramref name="x" /> Cero 
 <see cref="F:System.Single.NegativeInfinity" /> Negativo 
 <see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>Devuelve el logaritmo de un número especificado en una base determinada.</summary>
      <param name="x">Número cuyo logaritmo se va a calcular.</param>
      <param name="y">La base.</param>
      <returns>Uno de los valores de la tabla siguiente. (+Infinito denota <see cref="F:System.Single.PositiveInfinity" />, -Infinito denota <see cref="F:System.Single.NegativeInfinity" /> y NaN denota <see cref="F:System.Single.NaN" />) 
 <paramref name="x" /><paramref name="newBase" /> Valor devuelto 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) o (<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  (cualquier valor) 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinito 
  NaN 
 <paramref name="x" /> = NaN 
  (cualquier valor) 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (cualquier valor) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinito 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="x" /> =  +infinito 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="x" /> =  +infinito 
 <paramref name="newBase" />&gt; 1 
  +Infinito 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinito 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>Devuelve el logaritmo en base 10 de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo hay que calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Positivo 
  Logaritmo en base 10 de <paramref name="x" />; es decir, log 10<paramref name="x" />.  

  Cero 
 <see cref="F:System.Single.NegativeInfinity" /> Negativo 
 <see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>Devuelve el logaritmo en base 2 de un número especificado.</summary>
      <param name="x">Número cuyo logaritmo hay que calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Positivo 
  Logaritmo en base 2 de <paramref name="x" />; es decir, log 2<paramref name="x" />.  

  Cero 
 <see cref="F:System.Single.NegativeInfinity" /> Negativo 
 <see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /> Igual a <see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>Devuelve el mayor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="x">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que sea mayor. Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>Devuelve la magnitud mayor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="x">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud mayor. Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>Devuelve el menor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="x">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que sea menor. Si <paramref name="x" />, <paramref name="y" /> o ambos ( <paramref name="x" /> y <paramref name="y" />) son iguales que <see cref="F:System.Single.NaN" />, se devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>Devuelve la magnitud menor de dos números de punto flotante de precisión sencilla.</summary>
      <param name="x">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <param name="y">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</param>
      <returns>Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud menor. Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>Representa la proporción de la circunferencia de un círculo en relación con su diámetro, especificado por la constante π.</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>Devuelve un número especificado elevado a la potencia especificada.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que se va a elevar a una potencia.</param>
      <param name="y">Número de punto flotante de precisión sencilla que especifica una potencia.</param>
      <returns>Número <paramref name="x" /> elevado a la potencia <paramref name="y" />.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>Redondea un valor de punto flotante de precisión sencilla al valor integral más cercano y los valores de punto medio al número par más cercano.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que se va a redondear.</param>
      <returns>
        <paramref name="x" /> entero más cercano. Si el componente fraccionario de <paramref name="x" /> se encuentra en medio del intervalo entre dos números, uno par y el otro impar, se devuelve el número impar. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>Redondea un valor de punto flotante de precisión sencilla a un número especificado de dígitos fraccionarios y los valores de punto medio al número par más cercano.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que se va a redondear.</param>
      <param name="digits">Número de dígitos fraccionarios del valor devuelto.</param>
      <returns>Número más cercano a <paramref name="x" /> que contiene varios dígitos fraccionarios iguales a <paramref name="digits" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> es menor que 0 o mayor que 6.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>Redondea un valor de punto flotante de precisión sencilla a un número especificado de dígitos fraccionarios y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que se va a redondear.</param>
      <param name="digits">Número de dígitos fraccionarios del valor devuelto.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="x" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>Número más cercano a <paramref name="x" /> que tiene varios dígitos fraccionarios iguales a <paramref name="digits" />. Si <paramref name="x" /> tiene menos dígitos fraccionarios que <paramref name="digits" />, <paramref name="x" /> se devuelve sin modificar.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> es menor que 0 o mayor que 6.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>Redondea un valor de punto flotante de precisión sencilla al entero más cercano y usa la convención de redondeo especificada para los valores de punto medio.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que se va a redondear.</param>
      <param name="mode">Especificación sobre el redondeo de <paramref name="x" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</param>
      <returns>
        <paramref name="x" /> entero más cercano. Si <paramref name="x" /> se encuentra a la mitad del intervalo entre dos enteros, uno par y el otro impar, <paramref name="mode" /> determina los dos números que se devuelven. Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>Devuelve x * 2^n calculado de forma eficaz.</summary>
      <param name="x">Número de punto flotante de precisión sencilla que especifica el valor base.</param>
      <param name="n">Número de punto flotante de precisión sencilla que especifica la potencia.</param>
      <returns>x * 2^n calculado de forma eficaz.</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>Devuelve un entero que indica el signo de un número de punto flotante de precisión sencilla.</summary>
      <param name="x">Número con signo.</param>
      <returns>Número que indica el signo de <paramref name="x" />, como puede verse en la tabla siguiente.  
  Valor devuelto 
  Significado 
  -1 
 <paramref name="x" /> es menor que cero.  

  0 
 <paramref name="x" /> es igual a cero.  

  1 
 <paramref name="x" /> es mayor que cero.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />.</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>Devuelve el seno del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Seno de <paramref name="x" />. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>Devuelve el seno hiperbólico del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Seno hiperbólico de <paramref name="x" />. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NaN" />, este método devuelve <see cref="T:System.Single" /> igual a <paramref name="x" />.</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>Devuelve la raíz cuadrada de un número especificado.</summary>
      <param name="x">Número cuya raíz cuadrada se va a calcular.</param>
      <returns>Uno de los valores de la tabla siguiente.  
 Parámetro <paramref name="x" /> 
  Valor devuelto 
  Cero o positivo 
  Raíz cuadrada positiva de <paramref name="x" />.  

  Negativo 
 <see cref="F:System.Single.NaN" /> Es igual a <see cref="F:System.Single.NaN" />.<see cref="F:System.Single.NaN" /> Es igual a <see cref="F:System.Single.PositiveInfinity" />.<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>Devuelve la tangente del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Tangente de <paramref name="x" />. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>Devuelve la tangente hiperbólica del ángulo especificado.</summary>
      <param name="x">Ángulo, medido en radianes.</param>
      <returns>Tangente hiperbólica de <paramref name="x" />. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, este método devuelve -1. Si el valor es igual a <see cref="F:System.Single.PositiveInfinity" />, este método devuelve 1. Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, este método devuelve <see cref="F:System.Single.NaN" />.</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>Calcula la parte entera de un número de punto flotante de precisión sencilla especificado.</summary>
      <param name="x">Número que se va a truncar.</param>
      <returns>La parte entera de <paramref name="x" />, es decir, el número que permanece una vez descartado cualquier dígito fraccionario o uno de los valores enumerados en la siguiente tabla.  
 <paramref name="x" /> Valor devuelto 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Proporciona métodos para codificar y descodificar direcciones URL cuando se procesan solicitudes Web.</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Convierte una cadena que se ha codificado en HTML para su transmisión HTTP en una cadena descodificada.</summary>
      <param name="value">Cadena que se va a descodificar.</param>
      <returns>Cadena descodificada.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Convierte una cadena que se ha codificado en HTML en una cadena descodificada y envía la cadena descodificada a una secuencia de salida de <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="value">Cadena que se va a descodificar.</param>
      <param name="output">Secuencia de salida de <see cref="T:System.IO.TextWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="output" /> no puede ser <see langword="null" /> si el parámetro <paramref name="value" /> no es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Convierte una cadena en una cadena codificada en HTML.</summary>
      <param name="value">Cadena que se va a codificar.</param>
      <returns>Cadena codificada.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>Convierte una cadena en una cadena con codificación HTML y devuelve el resultado como una secuencia <see cref="T:System.IO.TextWriter" /> de salida.</summary>
      <param name="value">Cadena que se va a codificar.</param>
      <param name="output">Secuencia de salida <see cref="T:System.IO.TextWriter" /></param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="output" /> no puede ser <see langword="null" /> si el parámetro <paramref name="value" /> no es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Convierte en cadena descodificada una cadena que se ha codificado para su transmisión en una dirección URL.</summary>
      <param name="encodedValue">Cadena codificada como dirección URL que se va a descodificar.</param>
      <returns>Cadena descodificada.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte una matriz de bytes codificada que se ha codificado para la transmisión en una dirección URL en una matriz de bytes descodificada.</summary>
      <param name="encodedValue">Matriz <see cref="T:System.Byte" /> codificada como dirección URL que se va a descodificar.</param>
      <param name="offset">El desplazamiento, en bytes, desde el principio de la matriz <see cref="T:System.Byte" /> para descodificar.</param>
      <param name="count">El recuento, en bytes, para descodificar de la matriz <see cref="T:System.Byte" />.</param>
      <returns>Una matriz <see cref="T:System.Byte" /> descodificada.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Convierte una cadena de texto en una cadena codificada como una dirección URL.</summary>
      <param name="value">Texto que se va a codificar con una dirección URL.</param>
      <returns>Cadena codificada como una dirección URL.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte una matriz de bytes en una matriz de bytes con código URL.</summary>
      <param name="value">Matriz <see cref="T:System.Byte" /> que se va a codificar con una dirección URL.</param>
      <param name="offset">El desplazamiento, en bytes, desde el principio de la matriz <see cref="T:System.Byte" /> para codificar.</param>
      <param name="count">El recuento, en bytes, para codificar de la matriz <see cref="T:System.Byte" />.</param>
      <returns>Una matriz de <see cref="T:System.Byte" /> codificada.</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>Proporciona métodos de utilidad para las operaciones de manipulación de bits intrínsecos. Los métodos usan intrínsecos de hardware si hay disponibles en la plataforma subyacente; de lo contrario, usan reservas de software optimizadas.</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>Cuenta el número de bits cero iniciales en una máscara de entero de 32 bits sin signo.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero iniciales de una máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>Cuenta el número de bits cero iniciales en una máscara de entero de 64 bits sin signo.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero iniciales de una máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>Devuelve el logaritmo de entero (múltiplo inferior) del valor especificado, base 2.</summary>
      <param name="value">Número del que se va a obtener el logaritmo.</param>
      <returns>Logaritmo del valor especificado, base 2.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>Devuelve el logaritmo de entero (múltiplo inferior) del valor especificado, base 2.</summary>
      <param name="value">Número del que se va a obtener el logaritmo.</param>
      <returns>Logaritmo del valor especificado, base 2.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>Devuelve el recuento de rellenado (número de bits establecidos) de una máscara.</summary>
      <param name="value">La máscara.</param>
      <returns>Recuento de rellenado de una máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>Devuelve el recuento de rellenado (número de bits establecidos) de una máscara de enteros de 64 bits sin signo.</summary>
      <param name="value">La máscara.</param>
      <returns>Recuento de rellenado de una máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>Gira el valor especificado a la izquierda el número de bits especificado.</summary>
      <param name="value">Valor que se va a girar.</param>
      <param name="offset">Número de bits por el que se va a girar. Cualquier valor fuera del intervalo [0-31] se trata como un módulo de congruencia 32.</param>
      <returns>El valor girado.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>Gira el valor especificado a la izquierda el número de bits especificado.</summary>
      <param name="value">Valor que se va a girar.</param>
      <param name="offset">Número de bits por el que se va a girar. Cualquier valor fuera del intervalo [0-63] se trata como un módulo de congruencia 64.</param>
      <returns>El valor girado.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>Gira el valor especificado a la derecha el número de bits especificado.</summary>
      <param name="value">Valor que se va a girar.</param>
      <param name="offset">Número de bits por el que se va a girar. Cualquier valor fuera del intervalo [0-31] se trata como un módulo de congruencia 32.</param>
      <returns>El valor girado.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>Gira el valor especificado a la derecha el número de bits especificado.</summary>
      <param name="value">Valor que se va a girar.</param>
      <param name="offset">Número de bits por el que se va a girar. Cualquier valor fuera del intervalo [0-63] se trata como un módulo de congruencia 64.</param>
      <returns>El valor girado.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>Cuenta el número de bits cero finales en una máscara de valor entero de 32 bits.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero finales en el valor entero.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>Cuenta el número de bits cero finales en una máscara de valor entero de 64 bits.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero finales en la máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>Cuenta el número de bits cero finales en una máscara de valor entero de 32 bits.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero finales en la máscara.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>Cuenta el número de bits cero finales en una máscara de valor entero de 64 bits.</summary>
      <param name="value">La máscara.</param>
      <returns>Número de bits cero finales en la máscara.</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>Representa información acerca de un sistema operativo, como el número de la versión y el identificador de plataforma. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperatingSystem" /> con el valor del identificador de plataforma y el objeto de versión especificados.</summary>
      <param name="platform">Uno de los valores de <see cref="T:System.PlatformID" /> que indica la plataforma del sistema operativo.</param>
      <param name="version">Objeto <see cref="T:System.Version" /> que indica la versión del sistema operativo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> no es un valor de enumeración de <see cref="T:System.PlatformID" />.</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>Crea un objeto <see cref="T:System.OperatingSystem" /> idéntico a esta instancia.</summary>
      <returns>Objeto <see cref="T:System.OperatingSystem" /> que es una copia de esta instancia.</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con todos los datos necesarios para deserializar esta instancia.</summary>
      <param name="info">Objeto que se va a rellenar con información de serialización.</param>
      <param name="context">Sitio para almacenar y recuperar los datos serializados. Reservado para un uso futuro.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>Obtiene un valor de la enumeración <see cref="T:System.PlatformID" /> que identifica la plataforma del sistema operativo.</summary>
      <returns>Uno de los valores de <see cref="T:System.PlatformID" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>Obtiene la versión del Service Pack representada por este objeto <see cref="T:System.OperatingSystem" />.</summary>
      <returns>Versión del Service Pack, si el sistema operativo admite Service Packs y, al menos, está instalado uno; de lo contrario, una cadena vacía ("").</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>Convierte el valor de este objeto <see cref="T:System.OperatingSystem" /> en su representación de cadena equivalente.</summary>
      <returns>Representación de cadena de los valores devueltos por las propiedades <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> y <see cref="P:System.OperatingSystem.ServicePack" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>Obtiene un objeto <see cref="T:System.Version" /> que identifica el sistema operativo.</summary>
      <returns>Objeto <see cref="T:System.Version" /> que describe los números de versión principal, versión secundaria, compilación y revisión del sistema operativo.</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>Obtiene la representación de cadena concatenada del identificador de la plataforma, versión y Service Pack instalados actualmente en el sistema operativo.</summary>
      <returns>Representación de cadena de los valores devueltos por las propiedades <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> y <see cref="P:System.OperatingSystem.ServicePack" />.</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>Identifica el sistema operativo o la plataforma que admite un ensamblado.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>El sistema operativo es Macintosh. Este valor se devolvió por Silverlight. En .NET Core, su reemplazo es Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>El sistema operativo es Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>El sistema operativo es Windows NT o una versión posterior.</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>El sistema operativo es Win32s. Este valor ya no está en uso.</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>El sistema operativo es Windows 95 o Windows 98. Este valor ya no está en uso.</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>El sistema operativo es Windows CE. Este valor ya no está en uso.</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>La plataforma de desarrollo es Xbox 360. Este valor ya no está en uso.</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>Proporciona un objeto <see cref="T:System.IProgress`1" /> que invoca las devoluciones de llamada para cada valor de progreso notificado.</summary>
      <typeparam name="T">Especifica el tipo de valor del informe de progreso.</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>Inicializa el objeto <see cref="T:System.Progress`1" />.</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>Inicializa el objeto <see cref="T:System.Progress`1" /> con la devolución de llamada especificada.</summary>
      <param name="handler">Un controlador para invocar a cada valor de progreso indicado. Se invocará este controlador además de cualquier delegado registrado con el evento <see cref="E:System.Progress`1.ProgressChanged" />. Dependiendo de la instancia de <see cref="T:System.Threading.SynchronizationContext" /> capturada por <see cref="T:System.Progress`1" /> en la construcción, es posible que esta instancia de controlador se pueda invocar simultáneamente a sí misma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>Notifica un cambio de progreso.</summary>
      <param name="value">Valor del progreso actualizado.</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>Se genera para cada valor de progreso indicado.</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>Notifica un cambio de progreso.</summary>
      <param name="value">Valor del progreso actualizado.</param>
    </member>
    <member name="T:System.Random">
      <summary>Representa un generador de números pseudoaleatorios, que es un dispositivo que produce una secuencia de números que cumplen determinados requisitos estadísticos de aleatoriedad.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Random" /> mediante un valor de inicialización predeterminado que depende del tiempo.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Random" /> utilizando el valor de inicialización especificado.</summary>
      <param name="Seed">Número que se utiliza para calcular el valor inicial de la secuencia de números seudoaleatorios. Si se especifica un número negativo, se utiliza el valor absoluto del número.</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>Devuelve un entero aleatorio no negativo.</summary>
      <returns>Número entero de 32 bits con signo mayor o igual que 0 y menor que <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>Devuelve un entero aleatorio no negativo que es inferior al máximo especificado.</summary>
      <param name="maxValue">Límite superior exclusivo del número aleatorio que se va a generar. <paramref name="maxValue" /> debe ser mayor o igual que 0.</param>
      <returns>Número entero de 32 bits con signo mayor o igual que 0 y menor que <paramref name="maxValue" />; es decir, dentro del intervalo de valores devueltos se incluye 0, pero no <paramref name="maxValue" />. Pero si <paramref name="maxValue" /> es igual a 0, se devuelve <paramref name="maxValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>Devuelve un entero aleatorio que está dentro de un intervalo especificado.</summary>
      <param name="minValue">Límite inferior inclusivo del número aleatorio devuelto.</param>
      <param name="maxValue">Límite superior exclusivo del número aleatorio devuelto. <paramref name="maxValue" /> debe ser mayor o igual que <paramref name="minValue" />.</param>
      <returns>Número entero de 32 bits con signo mayor o igual que <paramref name="minValue" /> y menor que <paramref name="maxValue" />; es decir, dentro del intervalo de valores devueltos se incluye <paramref name="minValue" /> pero no <paramref name="maxValue" />. Si <paramref name="minValue" /> es igual que <paramref name="maxValue" />, se devuelve <paramref name="minValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> es mayor que <paramref name="maxValue" />.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>Rellena con números aleatorios los elementos de una matriz de bytes especificada.</summary>
      <param name="buffer">Matriz de bytes que contiene números aleatorios.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>Devuelve un número de punto flotante aleatorio que es mayor o igual que 0,0 y menor que 1,0.</summary>
      <returns>Número de punto flotante de doble precisión que es mayor o igual que 0,0 y menor que 1,0.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>Devuelve un número de punto flotante aleatorio entre 0,0 y 1,0.</summary>
      <returns>Número de punto flotante de doble precisión que es mayor o igual que 0,0 y menor que 1,0.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>Proporciona una versión utilizable en modo remoto del nombre de ensamblado (<see langword="AssemblyName" />).</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.AssemblyNameProxy" />.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>Obtiene el nombre de ensamblado (<see langword="AssemblyName" />) de un archivo dado.</summary>
      <param name="assemblyFile">Archivo de ensamblado para el cual se obtendrá el nombre de ensamblado (<see langword="AssemblyName" />).</param>
      <returns>Objeto <see langword="AssemblyName" /> que representa al archivo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> está vacía.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se ha encontrado <paramref name="assemblyFile" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> no es un ensamblado válido.</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>Representa un método que controla el evento <see cref="E:System.AppDomain.TypeResolve" />, <see cref="E:System.AppDomain.ResourceResolve" /> o <see cref="E:System.AppDomain.AssemblyResolve" /> de un <see cref="T:System.AppDomain" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="args">Datos del evento.</param>
      <returns>Ensamblado que resuelve el tipo, ensamblado o recurso; o <see langword="null" /> si no puede resolverse el ensamblado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>Indica que una expresión switch no exhaustiva no pudo comparar su entrada en el tiempo de ejecución. La excepción contiene opcionalmente un objeto que representa el valor no comparado.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> con un valor de modificador no coincidente.</summary>
      <param name="unmatchedValue">Valor de modificador que no coincide con ningún caso de modificador.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> con el mensaje especificado.</summary>
      <param name="message">Mensaje que se debe mostrar al usuario final.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> con la descripción detallada especificada y la excepción especificada.</summary>
      <param name="message">Mensaje que se debe mostrar al usuario final.</param>
      <param name="innerException">Referencia a la excepción interna que es la causa de esta excepción.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con el nombre del parámetro y la información adicional de excepción.</summary>
      <param name="info">Almacena los datos que se estaban utilizado para serializar o deserializar el objeto que el serializador <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> se encontraba serializando o deserializando.</param>
      <param name="context">Describe el origen y el destino de la cadena que generó la excepción, así como un modo de serialización para retener dicho contexto y un contexto adicional definido por el llamador.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>Obtiene el mensaje de la excepción.</summary>
      <returns>La cadena de mensaje completa.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>Obtiene el valor no coincidente asociado a la excepción.</summary>
      <returns>Valor no coincidente que produce la excepción.</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>Mejora el rendimiento de inicio de los dominios de aplicación en aplicaciones que requieren el compilador JIT (just-in-time) y realiza la compilación en segundo plano de los métodos que probablemente se ejecutarán, en función de los perfiles creados durante las compilaciones anteriores.</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>Habilita la generación de perfiles de optimización para el dominio de aplicación actual, y establece la carpeta donde se almacenan los archivos de perfil de optimización. En un equipo de un núcleo, se omite el método.</summary>
      <param name="directoryPath">Ruta de acceso completa a la carpeta donde se almacenan los archivos de perfil para el dominio de aplicación actual.</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>Inicia la compilación Just-In-Time (JIT) de los métodos registrados previamente en el archivo de perfil especificado, en un subproceso de fondo. Inicia el proceso de registro de uso del método actual, que posteriormente sobrescribe el archivo de perfil especificado.</summary>
      <param name="profile">Nombre del archivo del perfil que se va a usar.</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>Define la garantía de la compatibilidad de un componente, tipo o miembro de tipo que puede abarcar varias versiones.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> con un valor que indica el nivel garantizado de compatibilidad entre varias versiones de una biblioteca, un tipo o un miembro.</summary>
      <param name="guarantees">Uno de los valores de enumeración que especifica el nivel de compatibilidad garantizado entre varias versiones.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>Obtiene un valor que indica el nivel de compatibilidad garantizado de una biblioteca, tipo o miembro de tipo que abarca varias versiones.</summary>
      <returns>Uno de los valores de enumeración que especifica el nivel de compatibilidad garantizado entre varias versiones.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>Describe la garantía de compatibilidad de un componente, tipo o miembro de tipo que puede abarcar varias versiones.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>El desarrollador promete compatibilidad de intercambio multi-versión para el tipo. Los consumidores del tipo pueden esperar la compatibilidad en versiones futuras y utilizar el tipo en todas sus interfaces. La ejecución en paralelo no puede corregir los problemas de control de versiones.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>El desarrollador no garantiza la compatibilidad entre versiones. Los consumidores del componente, el tipo o el miembro pueden esperar que versiones futuras interrumpan el cliente existente.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>El componente se ha probado para funcionar cuando se cargue más de una versión del ensamblado en el mismo dominio de aplicación. Las versiones futuras pueden interrumpir la compatibilidad. Sin embargo, cuando se realizan tales cambios, la versión anterior no se modifica, sino que continúa coexistiendo con la nueva versión.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>El desarrollador promete la compatibilidad estable entre versiones. Los consumidores del tipo pueden esperar que las versiones futuras no interrumpan el cliente existente. Sin embargo, si lo hacen y el cliente no ha utilizado el tipo en sus interfaces, la ejecución en paralelo puede corregir el problema.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>Representa el nombre de una versión de .NET Framework.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.FrameworkName" /> a partir de una cadena que contiene información sobre una versión de .NET Framework.</summary>
      <param name="frameworkName">Cadena que contiene información de versión de .NET Framework.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> es <see cref="F:System.String.Empty" />.  
O bien 
 <paramref name="frameworkName" /> tiene menos de dos componentes o más de tres.  
o bien 
 <paramref name="frameworkName" /> no incluye un número de versión principal o secundaria.  
O bien 
 <paramref name="frameworkName" /> no incluye un número de versión válido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.FrameworkName" /> a partir de una cadena y un objeto <see cref="T:System.Version" /> que identifica una versión de .NET Framework.</summary>
      <param name="identifier">Cadena que identifica una versión de .NET Framework.</param>
      <param name="version">Objeto que contiene información de versión de .NET Framework.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> es <see langword="null" />.  
o bien 
 <paramref name="version" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.FrameworkName" /> a partir de una cadena, un objeto <see cref="T:System.Version" /> que identifica una versión de .NET Framework y un nombre de perfil.</summary>
      <param name="identifier">Cadena que identifica una versión de .NET Framework.</param>
      <param name="version">Objeto que contiene información de versión de .NET Framework.</param>
      <param name="profile">Nombre de perfil.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> es <see langword="null" />.  
o bien 
 <paramref name="version" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia de <see cref="T:System.Runtime.Versioning.FrameworkName" /> representa la misma versión de .NET Framework que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la actual instancia.</param>
      <returns>Es <see langword="true" /> si cada componente del objeto <see cref="T:System.Runtime.Versioning.FrameworkName" /> actual coincide con el componente correspondiente del parámetro <paramref name="obj" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>Devuelve un valor que indica si esta instancia de <see cref="T:System.Runtime.Versioning.FrameworkName" /> representa la misma versión de .NET Framework que una instancia de <see cref="T:System.Runtime.Versioning.FrameworkName" /> especificada.</summary>
      <param name="other">Objeto que se va a comparar con la actual instancia.</param>
      <returns>Es <see langword="true" /> si cada componente del objeto <see cref="T:System.Runtime.Versioning.FrameworkName" /> actual coincide con el componente correspondiente del parámetro <paramref name="other" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>Obtiene el nombre completo de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Nombre completo de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Entero de 32 bits con signo que representa el código hash de esta instancia.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>Obtiene el identificador de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Identificador de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Runtime.Versioning.FrameworkName" /> representan la misma versión de .NET Framework.</summary>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> representan la misma versión de .NET Framework; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Runtime.Versioning.FrameworkName" /> representan distintas versiones de .NET Framework.</summary>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> representan distintas versiones de .NET Framework; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>Obtiene el nombre de perfil de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Nombre de perfil de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>Devuelve la representación en forma de cadena de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Cadena que representa este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>Obtiene la versión de este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</summary>
      <returns>Objeto que contiene información de versión sobre este objeto <see cref="T:System.Runtime.Versioning.FrameworkName" />.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>Especifica el recurso utilizado por el miembro de una clase. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> que especifica el ámbito del recurso utilizado.</summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> para el recurso utilizado.</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> que especifica el ámbito del recurso utilizado y el ámbito del modo de utilización.</summary>
      <param name="resourceScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> para el recurso utilizado.</param>
      <param name="consumptionScope">
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> que utiliza este miembro.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>Obtiene el ámbito de utilización de este miembro.</summary>
      <returns>Objeto <see cref="T:System.Runtime.Versioning.ResourceScope" /> que especifica el ámbito de recurso utilizado por este miembro.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>Obtiene el ámbito de recurso para el recurso utilizado.</summary>
      <returns>Objeto <see cref="T:System.Runtime.Versioning.ResourceScope" /> que especifica el ámbito de recurso del miembro utilizado.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>Especifica la exposición de recursos para un miembro de una clase. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> con el nivel de exposición especificado.</summary>
      <param name="exposureLevel">Ámbito del recurso.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>Obtiene el ámbito de exposición de recursos.</summary>
      <returns>Objeto <see cref="T:System.Runtime.Versioning.ResourceScope" />.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>Identifica el ámbito de un recurso que se puede compartir.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>Los objetos comparten el estado dentro de <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>El recurso está visible en un ámbito de ensamblado.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>Los objetos comparten el estado dentro de una biblioteca.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>Los objetos comparten el estado dentro del equipo.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>No hay ningún estado compartido.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>El recurso es visible únicamente al tipo.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>El estado se comparte dentro de un proceso.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>Proporciona métodos para ayudar a los desarrolladores a escribir código seguro. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>Devuelve un nombre de versión segura basándose en el nombre del recurso especificado y el origen de consumo de recurso deseado.</summary>
      <param name="name">Nombre del recurso.</param>
      <param name="from">Ámbito del recurso.</param>
      <param name="to">Ámbito de consumo de recurso deseado.</param>
      <returns>Nombre de versión segura.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>Devuelve un nombre de versión segura basándose en el nombre de recurso especificado, el ámbito de consumo de recurso deseado y el tipo que utiliza el recurso.</summary>
      <param name="name">Nombre del recurso.</param>
      <param name="from">Principio del intervalo de ámbito.</param>
      <param name="to">Fin del intervalo de ámbito.</param>
      <param name="type">
        <see cref="T:System.Type" /> del recurso.</param>
      <returns>Nombre de versión segura.</returns>
      <exception cref="T:System.ArgumentException">Los valores de <paramref name="from" /> y <paramref name="to" /> no son válidos. El tipo de recurso de la enumeración <see cref="T:System.Runtime.Versioning.ResourceScope" /> va de un tipo de recurso más restrictivo a uno más general.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>Define métodos implementados por tipos de permiso.</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>Crea y devuelve una copia idéntica del permiso actual.</summary>
      <returns>Copia del permiso actual.</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>Produce una <see cref="T:System.Security.SecurityException" /> en tiempo de ejecución si no se cumple el requisito de seguridad.</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>Crea y devuelve un permiso que es la intersección del permiso actual y el permiso especificado.</summary>
      <param name="target">Permiso para formar intersección con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
      <returns>Nuevo permiso que representa la intersección del permiso actual y del permiso especificado. Este nuevo permiso es <see langword="null" /> si la intersección está vacía.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y tampoco es una instancia de la misma clase que el permiso actual.</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determina si el permiso actual es un subconjunto del permiso especificado.</summary>
      <param name="target">Permiso que se va a probar para la relación de subconjunto. Este permiso debe ser del mismo tipo que el permiso actual.</param>
      <returns>
        <see langword="true" /> si el permiso actual es un subconjunto del permiso especificado; si no, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y no es del mismo tipo que el permiso actual.</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>Crea un permiso que es la unión del permiso actual y el permiso especificado.</summary>
      <param name="target">Permiso para combinar con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
      <returns>Nuevo permiso que representa la unión del permiso actual y el permiso especificado.</returns>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y no es del mismo tipo que el permiso actual.</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>Define los métodos que convierten el estado del objeto de permiso en una representación de elemento XML y desde una representación de elemento XML.</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>Reconstruye un objeto de seguridad con un estado especificado a partir de codificación XML.</summary>
      <param name="e">Codificación XML que se usará para reconstruir el objeto de seguridad.</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>Crea una codificación XML del objeto de seguridad y su estado actual.</summary>
      <returns>Codificación XML del objeto de seguridad, incluida cualquier información de estado.</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>Administra el recorrido de pila que determina si todos los llamadores de la pila de llamadas disponen de los permisos necesarios para obtener acceso a un recurso protegido.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>Afirma que el código de llamada puede tener acceso al recurso identificado por el objeto de permiso actual, incluso si los autores de la llamada situados en una posición más alta de la pila no tienen permiso para tener acceso al recurso.</summary>
      <exception cref="T:System.Security.SecurityException">El código de llamada no tiene <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>Determina en tiempo de ejecución si todos los llamadores en la pila de llamadas disponen del permiso especificado por el objeto de permiso actual.</summary>
      <exception cref="T:System.Security.SecurityException">Un llamador que esté situado más arriba en la pila de llamadas no tiene el permiso especificado por el objeto de permiso actual.  
o bien 
Un llamador de la pila de llamadas ha llamado a <see cref="M:System.Security.IStackWalk.Deny" /> en el objeto de permiso actual.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>Hace que devuelva error cada método <see cref="M:System.Security.IStackWalk.Demand" /> del objeto actual que pase a través del código de llamada.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>Hace que devuelva error cada método <see cref="M:System.Security.IStackWalk.Demand" /> de todos los objetos excepto del objeto actual que pase a través del código de llamada, incluso si el código situado más arriba en la pila de llamadas dispone de permiso para obtener acceso a otros recursos.</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>Especifica la clase de atributos base para la seguridad de acceso del código.</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> con la interfaz <see cref="T:System.Security.Permissions.SecurityAction" /> especificada.</summary>
      <param name="action">Uno de los valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>Especifica si un permiso debe tener o no acceso completo a los recursos durante la creación.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>No hay acceso al recurso protegido por el permiso.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>Acceso completo al recurso protegido por el permiso.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>Especifica las acciones de seguridad que se pueden realizar mediante la seguridad declarativa.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>El código de llamada puede tener acceso al recurso identificado por el objeto de permiso actual, incluso si los autores de la llamada situados en una posición más alta de la pila no tienen permiso para tener acceso al recurso (vea Uso del método Assert).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>Todos los autores de llamada de la pila necesitan que se les conceda el permiso especificado por el objeto de permiso actual.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>La posibilidad de tener acceso al recurso especificado por el objeto de permiso actual se deniega a los llamadores, incluso si a estos se les ha concedido acceso al recurso (consulte Utilizar el método Deny).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>La clase derivada que hereda la clase o que reemplaza un método debe tener el permiso especificado.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>Es necesario que el llamador inmediato haya recibido el permiso especificado. No lo use en .NET Framework 4. Para la confianza completa, use <see cref="T:System.Security.SecurityCriticalAttribute" />; para la confianza parcial, use <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>Solo se puede acceder a los recursos especificados por este objeto de permiso, aunque al código se le haya concedido permiso de acceso a otros recursos.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>Solicitud de los permisos mínimos necesarios para que se ejecute el código. Esta acción solo se puede usar en el ámbito del ensamblado.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>Solicitud de permisos adicionales que son opcionales (no es necesaria la ejecución). Esta solicitud rechaza implícitamente todos los demás permisos no solicitados específicamente. Esta acción solo se puede usar en el ámbito del ensamblado.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>Solicitud de que al código de llamada no se le concedan permisos que se puedan usar indebidamente. Esta acción solo se puede usar en el ámbito del ensamblado.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>Especifica la clase de atributos base para la seguridad declarativa de la que se deriva <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" />.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Security.Permissions.SecurityAttribute" /> con la interfaz <see cref="T:System.Security.Permissions.SecurityAction" /> especificada.</summary>
      <param name="action">Uno de los valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>Obtiene o establece una acción de seguridad.</summary>
      <returns>Uno de los valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>Si se reemplaza en una clase derivada, crea un objeto de permiso que después puede serializarse de forma binaria y almacenarse de forma persistente junto con el objeto <see cref="T:System.Security.Permissions.SecurityAction" /> en los metadatos de un ensamblado.</summary>
      <returns>Objeto de permiso serializable.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>Obtiene o establece un valor que indica si se declara el permiso completo (sin restricciones) al recurso protegido por el atributo.</summary>
      <returns>Es <see langword="true" /> si se declaran permisos completos para el recurso protegido; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>Permite acciones de seguridad de <see cref="T:System.Security.Permissions.SecurityPermission" /> para que se apliquen al código mediante seguridad declarativa. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> con el objeto <see cref="T:System.Security.Permissions.SecurityAction" /> especificado.</summary>
      <param name="action">Uno de los valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para validar que todos los autores de llamada a este código tienen el permiso necesario para la operación.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para validar; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>Obtiene o establece un valor que indica si el código tiene permiso para realizar la redirección de enlaces del archivo de configuración de la aplicación.</summary>
      <returns>
        <see langword="true" /> si el código puede realizar la redirección de enlaces; de lo contrario es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para manipular <see cref="T:System.AppDomain" />.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para manipular <see cref="T:System.AppDomain" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para alterar o manipular directivas de seguridad de dominio.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para alterar o manipular las directivas de seguridad en un dominio de aplicación; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para alterar o manipular la evidencia.</summary>
      <returns>
        <see langword="true" /> si se declara la capacidad de alterar o manipular la evidencia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para ver y manipular directivas de seguridad.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para manipular la directiva de seguridad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para manipular la entidad de seguridad actual.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para manipular la entidad de seguridad actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para manipular subprocesos.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para manipular subprocesos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>Crea y devuelve un nuevo objeto <see cref="T:System.Security.Permissions.SecurityPermission" />.</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityPermission" /> que se corresponde con este atributo.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para ejecutar código.</summary>
      <returns>Es <see langword="true" /> si se declara el permiso para ejecutar código; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>Obtiene o establece todos los marcadores de permisos comprendidos en los permisos <see cref="T:System.Security.Permissions.SecurityPermission" />.</summary>
      <returns>Uno o varios de los valores <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> combinados mediante una operación OR bit a bit.</returns>
      <exception cref="T:System.ArgumentException">Se ha intentado establecer esta propiedad en un valor no válido. Vea <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> para obtener los valores válidos.</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>Obtiene o establece un valor que indica si el código puede conectar en la infraestructura Common Language Runtime, como agregar Receptores de contexto de comunicación remota, Receptores de envíos y Receptores dinámicos.</summary>
      <returns>
        <see langword="true" /> si el código se puede conectar a la infraestructura Common Language Runtime; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>Obtiene o establece un valor que indica si es posible que el código configure los tipos y canales de comunicación remota.</summary>
      <returns>
        <see langword="true" /> si el código puede configurar tipos y canales remotos, en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>Obtiene o establece un valor que indica si el código puede utilizar un formato de serialización para serializar o deserializar un objeto.</summary>
      <returns>
        <see langword="true" /> si el código puede utilizar un formato de serialización para serializar o deserializar un objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para omitir la comprobación del código.</summary>
      <returns>Es <see langword="true" /> si se declara el permiso para omitir la comprobación del código; en caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>Obtiene o establece un valor que indica si se declara el permiso para llamar a código no administrado.</summary>
      <returns>
        <see langword="true" /> si se declara el permiso para llamar a código no administrado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>Especifica marcas de acceso para el objeto de permiso de seguridad.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>Estado no restringido del permiso.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>Posibilidad de afirmar que todos los llamadores de este código tienen el permiso necesario para la operación.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>Permiso para realizar redirección de enlace explícita en el archivo de configuración de la aplicación. Esto incluye la redirección de los ensamblados de .NET Framework que han sido unificados además de otros ensamblados encontrados fuera de .NET Framework.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>Posibilidad de crear y manipular <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>Posibilidad de especificar una directiva de dominio.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>Posibilidad de proporcionar pruebas, que incluye la posibilidad de modificar las pruebas proporcionadas por Common Language Runtime.
Es un permiso eficaz que solo debe concederse al código de plena confianza.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>Posibilidad de ver y modificar la directiva.
Es un permiso eficaz que solo debe concederse al código de plena confianza.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>Posibilidad de manipular el objeto de entidad de seguridad.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>Posibilidad de utilizar determinadas operaciones avanzadas en subprocesos.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>Permiso para ejecutar el código. Sin este permiso el código administrado no se ejecutará.
Esta marca no tiene efecto cuando se usa dinámicamente con modificadores de pila como <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" /> y <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>Permiso para conectar código a la infraestructura de Common Language Runtime, como agregar receptores de contexto de comunicación remota, receptores de envío y receptores dinámicos.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>No hay acceso de seguridad.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>Permiso para configurar canales y tipo de comunicación remota.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>Posibilidad de proporcionar servicios de serialización. Utilizado por formateadores de serialización.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>Posibilidad de omitir la comprobación del código en este ensamblado. El código que no se puede comprobar se puede ejecutar si se concede este permiso.
Es un permiso eficaz que solo debe concederse al código de plena confianza.
Esta marca no tiene efecto cuando se usa dinámicamente con modificadores de pila como <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" /> y <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>Posibilidad de llamar a código no administrado.
 Dado que el código no administrado permite potencialmente que se omitan otros permisos, se trata de un permiso peligroso que solo debería concederse a un código de plena confianza. Se utiliza para aplicaciones tales como la llamada a código nativo mediante PInvoke o COM interop.</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>Representa una colección que puede contener muchos tipos diferentes de permisos.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.PermissionSet" /> con el objeto <see cref="T:System.Security.Permissions.PermissionState" /> especificado.</summary>
      <param name="state">Uno de los valores de la enumeración que especifica el tipo de acceso del conjunto de permisos a los recursos.</param>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="state" /> no es un valor <see cref="T:System.Security.Permissions.PermissionState" /> válido.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.PermissionSet" /> con valores iniciales tomados del parámetro <paramref name="permSet" />.</summary>
      <param name="permSet">El conjunto del que se obtiene el valor del nuevo <see cref="T:System.Security.PermissionSet" />, o <see langword="null" /> para crear un <see cref="T:System.Security.PermissionSet" /> vacío.</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>Agrega un permiso especificado a <see cref="T:System.Security.PermissionSet" />.</summary>
      <param name="perm">Permiso que se va a agregar.</param>
      <returns>Unión del permiso agregado y de cualquier permiso del mismo tipo que ya existe en <see cref="T:System.Security.PermissionSet" />.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>Agrega un permiso especificado a <see cref="T:System.Security.PermissionSet" />.</summary>
      <param name="perm">Permiso que se va a agregar.</param>
      <returns>Unión del permiso agregado y de cualquier permiso del mismo tipo que ya existe en <see cref="T:System.Security.PermissionSet" />, o <see langword="null" /> si <paramref name="perm" /> es <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>Declara que el código de llamada puede tener acceso al recurso protegido por una demanda de permiso a través del código que llama a este método, incluso si los autores de la llamada situados en una posición más alta de la pila no tienen permiso para tener acceso al recurso. Con <see cref="M:System.Security.PermissionSet.Assert" /> puede crear vulnerabilidades de seguridad.</summary>
      <exception cref="T:System.Security.SecurityException">La instancia <see cref="T:System.Security.PermissionSet" /> afirmada no se ha concedido para el código de aserción.  
o bien 
Ya hay una <see cref="M:System.Security.PermissionSet.Assert" /> activa para el marco actual.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>Obtiene un valor que indica si <see cref="T:System.Security.PermissionSet" /> contiene permisos que no se derivan de <see cref="T:System.Security.CodeAccessPermission" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Security.PermissionSet" /> contiene permisos que no se derivan de <see cref="T:System.Security.CodeAccessPermission" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>Convierte un <see cref="T:System.Security.PermissionSet" /> codificado de un formato de codificación XML a otro formato de codificación XML.</summary>
      <param name="inFormat">Cadena que representa uno de los formatos de codificación siguientes: ASCII, Unicode o Binary. Los valores posibles son: "XMLASCII" o "XML", "XMLUNICODE" y "BINARIO".</param>
      <param name="inData">Conjunto de permisos codificados en XML.</param>
      <param name="outFormat">Cadena que representa uno de los formatos de codificación siguientes: ASCII, Unicode o Binary. Los valores posibles son: "XMLASCII" o "XML", "XMLUNICODE" y "BINARIO".</param>
      <returns>Conjunto de permisos de cifrado establecido con el formato de salida especificado.</returns>
      <exception cref="T:System.NotImplementedException">En todos los casos.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>Crea una copia de la clase <see cref="T:System.Security.PermissionSet" />.</summary>
      <returns>Una copia de <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>Copia los objetos de permiso del conjunto en la ubicación indicada de un <see cref="T:System.Array" />.</summary>
      <param name="array">Matriz de destino en la que se va a copiar.</param>
      <param name="index">Posición inicial de la matriz donde comienza la copia (basada en cero).</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="array" /> tiene más de una dimensión.</exception>
      <exception cref="T:System.IndexOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo del parámetro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>Obtiene el número de objetos de permiso contenidos en el conjunto de permisos.</summary>
      <returns>Número de objetos de permiso incluidos en el <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>Fuerza una <see cref="T:System.Security.SecurityException" /> en tiempo de ejecución si a todos los llamadores situados más arriba en la pila de llamadas no se les han concedido los permisos especificados por la instancia actual.</summary>
      <exception cref="T:System.Security.SecurityException">Un llamador de la cadena de llamadas no tiene el permiso demandado.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>Hace que cualquier <see cref="M:System.Security.PermissionSet.Demand" /> que pase por el código de llamada para un permiso que tiene una intersección con un permiso de un tipo incluido en el <see cref="T:System.Security.PermissionSet" /> actual genere un error.</summary>
      <exception cref="T:System.Security.SecurityException">Una llamada anterior a <see cref="M:System.Security.PermissionSet.Deny" /> ya ha restringido los permisos para el marco de pila actual.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Security.PermissionSet" /> o <see cref="T:System.Security.NamedPermissionSet" /> especificado es igual al objeto <see cref="T:System.Security.PermissionSet" /> actual.</summary>
      <param name="o">Objeto que se va a comparar con el objeto <see cref="T:System.Security.PermissionSet" /> actual.</param>
      <returns>Es <see langword="true" /> si el objeto especificado es igual al objeto <see cref="T:System.Security.PermissionSet" /> actual; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>Reconstruye un objeto de seguridad con un estado especificado a partir de codificación XML.</summary>
      <param name="et">Codificación XML que se usará para reconstruir el objeto de seguridad.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="et" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="et" /> no es un elemento de permiso válido.  
O bien 
No se admite el número de la versión del parámetro <paramref name="et" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>Devuelve un enumerador para los permisos del conjunto.</summary>
      <returns>Objeto enumerador para los permisos del conjunto.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>Devuelve un enumerador para los permisos del conjunto.</summary>
      <returns>Objeto enumerador para los permisos del conjunto.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>Obtiene un código hash para el objeto <see cref="T:System.Security.PermissionSet" /> que es adecuado para su uso en algoritmos hash y estructuras de datos como una tabla hash.</summary>
      <returns>Código hash para el objeto <see cref="T:System.Security.PermissionSet" /> actual.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>Obtiene un objeto de permiso del tipo especificado, si existe en el conjunto.</summary>
      <param name="permClass">Tipo del objeto de permiso deseado.</param>
      <returns>Copia del objeto de permiso, del tipo especificado por el parámetro <paramref name="permClass" />, incluido en el <see cref="T:System.Security.PermissionSet" />, o <see langword="null" /> si no existe ninguno.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>Obtiene un objeto de permiso del tipo especificado, si existe en el conjunto.</summary>
      <param name="permClass">Tipo del objeto de permiso.</param>
      <returns>Copia del objeto de permiso, del tipo especificado por el parámetro <paramref name="permClass" />, incluido en el <see cref="T:System.Security.PermissionSet" />, o <see langword="null" /> si no existe ninguno.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>Crea y devuelve un conjunto de permisos que es la intersección del <see cref="T:System.Security.PermissionSet" /> actual y el <see cref="T:System.Security.PermissionSet" /> especificado.</summary>
      <param name="other">Conjunto de permisos para combinar con el <see cref="T:System.Security.PermissionSet" /> actual.</param>
      <returns>Nuevo conjunto de permisos que representa la intersección del <see cref="T:System.Security.PermissionSet" /> actual y el destino especificado. Este objeto es <see langword="null" /> si la intersección está vacía.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>Obtiene un valor que indica si el elemento <see cref="T:System.Security.PermissionSet" /> está activo.</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Security.PermissionSet" /> está vacío, en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>Determina si el <see cref="T:System.Security.PermissionSet" /> actual es un subconjunto del <see cref="T:System.Security.PermissionSet" /> especificado.</summary>
      <param name="target">Conjunto de permisos para probar la relación del subconjunto. Debe ser un <see cref="T:System.Security.PermissionSet" /> o <see cref="T:System.Security.NamedPermissionSet" />.</param>
      <returns>Es <see langword="true" /> si el <see cref="T:System.Security.PermissionSet" /> actual es un subconjunto del parámetro <paramref name="target" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>Obtiene un valor que indica si está garantizado que la colección es segura para la ejecución de subprocesos.</summary>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>Determina si el <see cref="T:System.Security.PermissionSet" /> es <see langword="Unrestricted" />.</summary>
      <returns>Es <see langword="true" /> si el <see cref="T:System.Security.PermissionSet" /> es <see langword="Unrestricted" />; si no, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>Hace que cualquier <see cref="M:System.Security.PermissionSet.Demand" /> que pase por el código de llamada para cualquier <see cref="T:System.Security.PermissionSet" /> que no sea un subconjunto del <see cref="T:System.Security.PermissionSet" /> actual genere un error.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>Quita un permiso de un tipo determinado del conjunto.</summary>
      <param name="permClass">Tipo del permiso que se va a eliminar.</param>
      <returns>Permiso que se quita del conjunto.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>Quita un permiso de un tipo determinado del conjunto.</summary>
      <param name="permClass">Tipo del permiso que se va a quitar.</param>
      <returns>Permiso que se quita del conjunto.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>Provoca que se elimine cualquier <see cref="M:System.Security.CodeAccessPermission.Assert" /> anterior para el marco actual y que ya no esté en vigor.</summary>
      <exception cref="T:System.InvalidOperationException">No hay ningún <see cref="M:System.Security.CodeAccessPermission.Assert" /> anterior para el marco actual.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>Establece un permiso en el <see cref="T:System.Security.PermissionSet" />, para lo que reemplaza cualquier permiso existente del mismo tipo.</summary>
      <param name="perm">Permiso que se va a establecer.</param>
      <returns>Permiso establecido.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>Establece un permiso en el <see cref="T:System.Security.PermissionSet" />, para lo que reemplaza cualquier permiso existente del mismo tipo.</summary>
      <param name="perm">Permiso que se va a establecer.</param>
      <returns>Permiso establecido.</returns>
      <exception cref="T:System.InvalidOperationException">Se llama al método desde un <see cref="T:System.Security.ReadOnlyPermissionSet" />.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>Obtiene el objeto raíz de la colección actual.</summary>
      <returns>Objeto raíz de la colección actual.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Se ejecuta cuando todo el gráfico de objetos ha sido deserializado.</summary>
      <param name="sender">Objeto que inició la devolución de llamada. La funcionalidad de este parámetro aún no está implementada.</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>Devuelve una representación de cadena de <see cref="T:System.Security.PermissionSet" />.</summary>
      <returns>Representación del objeto <see cref="T:System.Security.PermissionSet" />.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>Crea una codificación XML del objeto de seguridad y su estado actual.</summary>
      <returns>Codificación XML del objeto de seguridad, incluida cualquier información de estado.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>Crea un <see cref="T:System.Security.PermissionSet" /> que es la unión del actual <see cref="T:System.Security.PermissionSet" /> y el <see cref="T:System.Security.PermissionSet" /> especificado.</summary>
      <param name="other">Permiso establecido para formar la unión con el <see cref="T:System.Security.PermissionSet" /> actual.</param>
      <returns>Nuevo conjunto de permisos que representa la unión del <see cref="T:System.Security.PermissionSet" /> actual y el <see cref="T:System.Security.PermissionSet" /> especificado.</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>Representa el modelo de objetos XML para codificar objetos de seguridad. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityElement" /> con la etiqueta especificada.</summary>
      <param name="tag">Nombre de etiqueta de un elemento XML.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="tag" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="tag" /> no es válido en XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityElement" /> con la etiqueta y el texto especificados.</summary>
      <param name="tag">Nombre de etiqueta del elemento XML.</param>
      <param name="text">Contenido del texto en el elemento.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="tag" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Los parámetros <paramref name="tag" /> o <paramref name="text" /> no son válidos en XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>Agrega un atributo de nombre/valor a un elemento XML.</summary>
      <param name="name">El nombre del atributo.</param>
      <param name="value">El valor del atributo.</param>
      <exception cref="T:System.ArgumentNullException">Los parámetros <paramref name="name" /> o <paramref name="value" /> son <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Los parámetros <paramref name="name" /> o <paramref name="value" /> no son válidos en XML.  
o bien 
Ya existe un atributo con el nombre especificado por el parámetro <paramref name="name" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>Agrega un elemento secundario al elemento XML.</summary>
      <param name="child">Elemento secundario que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="child" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>Busca un atributo por su nombre en un elemento XML.</summary>
      <param name="name">Nombre del atributo que se va a buscar.</param>
      <returns>Valor asociado al atributo con nombre o <see langword="null" /> si no existe ningún atributo con el nombre <paramref name="name" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>Obtiene o establece los atributos de un elemento XML como pares nombre/valor.</summary>
      <returns>Objeto <see cref="T:System.Collections.Hashtable" /> de los valores de atributo del elemento XML.</returns>
      <exception cref="T:System.InvalidCastException">El nombre o valor del objeto <see cref="T:System.Collections.Hashtable" /> no es válido.</exception>
      <exception cref="T:System.ArgumentException">El nombre no es un nombre del atributo XML válido.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>Obtiene o establece la matriz de elementos secundarios del elemento XML.</summary>
      <returns>Elementos secundarios solicitados del elemento XML como elementos de seguridad.</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> es un elemento secundario del nodo XML principal.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>Crea y devuelve una copia idéntica del objeto <see cref="T:System.Security.SecurityElement" /> actual.</summary>
      <returns>Copia del objeto <see cref="T:System.Security.SecurityElement" /> actual.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>Compara dos objetos de elementos XML para determinar si son iguales.</summary>
      <param name="other">Objeto de elemento XML con el que se comparará el objeto de elemento XML actual.</param>
      <returns>El valor es <see langword="true" /> si la etiqueta, los nombres y valores de los atributos, elementos secundarios y campos de texto del elemento XML actual son idénticos a los correspondientes en el parámetro <paramref name="other" />; en caso contrario, el valor es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>Reemplaza caracteres XML no válidos en una cadena por sus equivalentes válidos.</summary>
      <param name="str">Cadena en la que se crean los caracteres de escape no válidos.</param>
      <returns>Cadena de entrada con los caracteres no válidos reemplazados.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>Crea un elemento de seguridad de una cadena codificada en XML.</summary>
      <param name="xml">Cadena codificada en XML desde la que se va a crear el elemento de seguridad.</param>
      <returns>Un <see cref="T:System.Security.SecurityElement" /> creado a partir de XML.</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" /> contiene uno o más caracteres de comillas simples.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>Determina si una cadena es un nombre de atributo válido.</summary>
      <param name="name">Nombre del atributo cuya validez se va a comprobar.</param>
      <returns>El valor es <see langword="true" /> si el parámetro <paramref name="name" /> es un nombre de atributo XML válido; en caso contrario, el valor es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>Determina si una cadena es un nombre de atributo válido.</summary>
      <param name="value">Valor del atributo cuya validez se va a comprobar.</param>
      <returns>El valor es <see langword="true" /> si el parámetro <paramref name="value" /> es un valor de atributo XML válido; en caso contrario, el valor es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>Determina si una cadena es una etiqueta válida.</summary>
      <param name="tag">Etiqueta cuya validez se va a comprobar.</param>
      <returns>El valor es <see langword="true" /> si el parámetro <paramref name="tag" /> es una etiqueta de atributo XML válida; en caso contrario, el valor es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>Determina si una cadena es válida como texto dentro de un elemento XML.</summary>
      <param name="text">Texto cuya validez se va a comprobar.</param>
      <returns>El valor es <see langword="true" /> si el parámetro <paramref name="text" /> es un elemento de texto XML válido; en caso contrario, el valor es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>Busca un elemento secundario por su nombre de etiqueta.</summary>
      <param name="tag">Etiqueta que se va a buscar en los elementos secundarios.</param>
      <returns>El primer elemento XML secundario con el valor de etiqueta especificado o <see langword="null" /> si no existe ningún elemento secundario con <paramref name="tag" />.</returns>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="tag" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>Busca un elemento secundario por su nombre de etiqueta y devuelve el texto que contiene.</summary>
      <param name="tag">Etiqueta que se va a buscar en los elementos secundarios.</param>
      <returns>Contenido del texto del primer elemento secundario con el valor de etiqueta especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>Obtiene o establece el nombre de etiqueta de un elemento XML.</summary>
      <returns>Nombre de etiqueta de un elemento XML.</returns>
      <exception cref="T:System.ArgumentNullException">La etiqueta es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La etiqueta no es válida en XML.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>Obtiene o establece el texto dentro de un elemento XML.</summary>
      <returns>Valor del texto dentro de un elemento XML.</returns>
      <exception cref="T:System.ArgumentException">El texto no es válido en XML.</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>Crea la representación de cadena de un elemento XML y los atributos, elementos secundarios y texto que lo constituyen.</summary>
      <returns>Elemento XML y su contenido.</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>Representa una operación de comparación de cadenas que utiliza reglas específicas basadas en la referencia cultural y el uso de mayúsculas y minúsculas o reglas específicas de comparación de ordinales.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.StringComparer" />.</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, compara dos objetos y devuelve una indicación de su criterio de ordenación relativo.</summary>
      <param name="x">Objeto que se va comparar con <paramref name="y" />.</param>
      <param name="y">Objeto que se va comparar con <paramref name="x" />.</param>
      <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  Valor 
  Significado 
  Menor que cero 
 <paramref name="x" /> precede a <paramref name="y" /> en el criterio de ordenación.  

o bien 
 <paramref name="x" /> es <see langword="null" /> y <paramref name="y" /> no es <see langword="null" />.  

  Cero 
 <paramref name="x" /> es igual a <paramref name="y" />.  

o bien 
 <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />.  

  Mayor que cero 
 <paramref name="x" /> sigue a <paramref name="y" /> en el criterio de ordenación.  

O bien 
 <paramref name="y" /> es <see langword="null" /> y <paramref name="x" /> no es <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">Ni <paramref name="x" /> ni <paramref name="y" /> son un objeto <see cref="T:System.String" />, y ni <paramref name="x" /> ni <paramref name="y" /> implementan la interfaz <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>Cuando se reemplaza en una clase derivada, compara dos cadenas y devuelve una indicación de su criterio de ordenación relativo.</summary>
      <param name="x">Cadena que se va a comparar con <paramref name="y" />.</param>
      <param name="y">Cadena que se va a comparar con <paramref name="x" />.</param>
      <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.  
  Valor 
  Significado 
  Menor que cero 
 <paramref name="x" /> precede a <paramref name="y" /> en el criterio de ordenación.  

o bien 
 <paramref name="x" /> es <see langword="null" /> y <paramref name="y" /> no es <see langword="null" />.  

  Cero 
 <paramref name="x" /> es igual a <paramref name="y" />.  

O bien 
 <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />.  

  Mayor que cero 
 <paramref name="x" /> sigue a <paramref name="y" /> en el criterio de ordenación.  

O bien 
 <paramref name="y" /> es <see langword="null" /> y <paramref name="x" /> no es <see langword="null" />.</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>Crea un objeto <see cref="T:System.StringComparer" /> que compara cadenas según las reglas de la referencia cultural especificada.</summary>
      <param name="culture">Referencia cultural cuyas reglas lingüísticas se utilizan para realizar una comparación de cadenas.</param>
      <param name="ignoreCase">
        <see langword="true" /> para especificar que las operaciones de comparación no distinguen entre mayúsculas y minúsculas; <see langword="false" /> para especificar que las operaciones de comparación distinguen entre mayúsculas y minúsculas.</param>
      <returns>Nuevo objeto <see cref="T:System.StringComparer" /> que realiza comparaciones de cadenas según las reglas de comparación utilizadas por el parámetro <paramref name="culture" /> y la regla de distinción o no entre mayúsculas y minúsculas especificada por el parámetro <paramref name="ignoreCase" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas con distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural actual.</summary>
      <returns>Un nuevo objeto <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza comparaciones de cadenas sin distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural actual.</summary>
      <returns>Nuevo objeto para la comparación de cadenas.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, indica si dos objetos son iguales.</summary>
      <param name="x">Objeto que se va comparar con <paramref name="y" />.</param>
      <param name="y">Objeto que se va comparar con <paramref name="x" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> hacen referencia al mismo objeto, si <paramref name="x" /> y <paramref name="y" /> tienen el mismo tipo de objeto y esos objetos son iguales, o si <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>Cuando se reemplaza en una clase derivada, indica si dos cadenas son iguales.</summary>
      <param name="x">Cadena que se va a comparar con <paramref name="y" />.</param>
      <param name="y">Cadena que se va a comparar con <paramref name="x" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> hacen referencia al mismo objeto, si <paramref name="x" /> y <paramref name="y" /> son iguales o si <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el código hash del objeto especificado.</summary>
      <param name="obj">Objeto.</param>
      <returns>Código hash de 32 bits con signo calculado a partir del valor del parámetro <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">Memoria insuficiente está disponible para asignar el búfer exigido para calcular el código hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el código hash de la cadena especificada.</summary>
      <param name="obj">Una cadena.</param>
      <returns>Código hash de 32 bits con signo calculado a partir del valor del parámetro <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentException">Memoria insuficiente está disponible para asignar el búfer exigido para calcular el código hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas con distinción entre mayúsculas y minúsculas utilizando las reglas de comparación de palabras de la referencia cultural de todos los idiomas.</summary>
      <returns>Un nuevo objeto <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas sin distinción entre mayúsculas y minúsculas utilizando las reglas de comparación de palabras de la referencia cultural de todos los idiomas.</summary>
      <returns>Un nuevo objeto <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas ordinales donde se hace distinción entre mayúsculas y minúsculas.</summary>
      <returns>Objeto <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas ordinales donde no se hace distinción entre mayúsculas y minúsculas.</summary>
      <returns>Objeto <see cref="T:System.StringComparer" />.</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>Proporciona métodos de extensión para trabajar con la normalización de cadenas.</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>Indica si la cadena especificada tiene la forma de normalización C de Unicode.</summary>
      <param name="value">Una cadena.</param>
      <returns>
        <see langword="true" /> si <see langword="false" /> tiene la forma de normalización C; en caso contrario, <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contiene caracteres Unicode no válidos.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>Indica si una cadena tiene la forma de normalización Unicode especificada o no.</summary>
      <param name="value">Una cadena.</param>
      <param name="normalizationForm">Forma de normalización Unicode.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> tiene la forma de normalización <paramref name="normalizationForm" />; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contiene caracteres Unicode no válidos.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>Normaliza una cadena a una forma de normalización C de Unicode.</summary>
      <param name="value">Cadena que se va a normalizar.</param>
      <returns>Nueva cadena cuyo valor textual es igual que el de <paramref name="value" />, pero cuya representación binaria tiene la forma de normalización C de Unicode.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contiene caracteres Unicode no válidos.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>Normaliza una cadena a la forma de normalización Unicode especificada.</summary>
      <param name="value">Cadena que se va a normalizar.</param>
      <param name="normalizationForm">Forma de normalización Unicode.</param>
      <returns>Nueva cadena cuyo valor textual es igual que el de <paramref name="value" />, pero cuya representación binaria tiene la forma de normalización <paramref name="normalizationForm" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contiene caracteres Unicode no válidos.</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Proporciona un constructor personalizado para los identificadores uniformes de recursos (URI) y modifica los URI para la clase <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el identificador URI especificado.</summary>
      <param name="uri">Una cadena URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> es <see langword="null" />.</exception>
      <exception cref="T:System.UriFormatException">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture en su lugar la excepción de clase base, <see cref="T:System.FormatException" />.  

          
          <paramref name="uri" /> es una cadena de longitud cero o contiene solo espacios.  
O bien 
La rutina de análisis detectó un esquema en un formato no válido.  
O bien 
El analizador detectó más de dos barras diagonales consecutivas en un URI que no utiliza el esquema de "archivo".  
o bien 
 <paramref name="uri" /> no es un URI válido.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio y host que se hayan especificado.</summary>
      <param name="schemeName">Protocolo de acceso a Internet.</param>
      <param name="hostName">Nombre de dominio de estilo DNS o dirección IP.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host y el puerto que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet.</param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP.</param>
      <param name="portNumber">Número de puerto IP para el servicio.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> es menor que -1 o mayor que 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host, el número de puerto y la ruta de acceso que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet.</param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP.</param>
      <param name="port">Número de puerto IP para el servicio.</param>
      <param name="pathValue">Ruta de acceso al recurso de Internet.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> es menor que -1 o mayor que 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host, el número de puerto, la ruta de acceso y la cadena de consulta o el identificador de campo que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet.</param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP.</param>
      <param name="port">Número de puerto IP para el servicio.</param>
      <param name="path">Ruta de acceso al recurso de Internet.</param>
      <param name="extraValue">Cadena de consulta o identificador de campo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> no es <see langword="null" /> ni <see cref="F:System.String.Empty" />, ni hay un identificador de fragmento válido que comience por un signo de número (#), ni hay ninguna cadena de consulta válida que comience por un signo de interrogación de cierre (?).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> es menor que -1 o mayor que 65 535.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con la instancia de <see cref="T:System.Uri" /> especificada.</summary>
      <param name="uri">Instancia de la clase <see cref="T:System.Uri" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compara una instancia existente de <see cref="T:System.Uri" /> con el contenido de <see cref="T:System.UriBuilder" /> para comprobar la igualdad.</summary>
      <param name="rparam">Objeto que se va a comparar con la instancia actual.</param>
      <returns>Es <see langword="true" /> si <paramref name="rparam" /> representa el mismo <see cref="T:System.Uri" /> que el <see cref="T:System.Uri" /> construido por esta instancia de <see cref="T:System.UriBuilder" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Obtiene o establece la parte correspondiente al campo de la dirección URI.</summary>
      <returns>Parte correspondiente al campo de la dirección URI. El identificador de campo ("#") se agrega al principio del campo.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Devuelve el código hash de la dirección URI.</summary>
      <returns>Código hash generado para la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Obtiene o establece el nombre de host DNS (Sistema de nombres de dominio) o la dirección IP de un servidor.</summary>
      <returns>Nombre de host DNS (Sistema de nombres de dominio) o dirección IP del servidor.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Obtiene o establece la contraseña asociada al usuario que obtiene acceso al identificador URI.</summary>
      <returns>Contraseña del usuario que obtiene acceso al identificador URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Obtiene o establece la ruta de acceso al recurso al que hace referencia la dirección URI.</summary>
      <returns>Ruta de acceso al recurso al que hace referencia la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Obtiene o establece el número de puerto de la dirección URI.</summary>
      <returns>Número de puerto de la dirección URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El puerto no puede establecerse en un valor menor que 1 o mayor que 65.535.</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Obtiene o establece la información de consulta incluida en la dirección URI.</summary>
      <returns>Información de consulta incluida en la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Obtiene o establece el nombre de servicio de la dirección URI.</summary>
      <returns>Servicio de la dirección URI.</returns>
      <exception cref="T:System.ArgumentException">El esquema no puede establecerse en un nombre de esquema no válido.</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Devuelve la cadena de presentación para la instancia de <see cref="T:System.UriBuilder" /> especificada.</summary>
      <returns>Cadena que contiene la cadena de presentación <see cref="T:System.UriBuilder" />, sin escape.</returns>
      <exception cref="T:System.UriFormatException">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture en su lugar la excepción de clase base, <see cref="T:System.FormatException" />.  


            

 La instancia de <see cref="T:System.UriBuilder" /> tiene una contraseña incorrecta.</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Obtiene la instancia de <see cref="T:System.Uri" /> creada por la instancia <see cref="T:System.UriBuilder" /> especificada.</summary>
      <returns>
        <see cref="T:System.Uri" /> que contiene la URI creada por el <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">En .NET para aplicaciones de la Tienda Windows o la Biblioteca de clases portable, capture en su lugar la excepción de clase base, <see cref="T:System.FormatException" />.  


            

 El URI creado por las propiedades <see cref="T:System.UriBuilder" /> no es válido.</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>Nombre de usuario asociado al usuario que obtiene acceso al identificador URI.</summary>
      <returns>Nombre de usuario del usuario que obtiene acceso al identificador URI.</returns>
    </member>
  </members>
</doc>
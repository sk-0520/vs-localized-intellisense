<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>스레드에서 실행 중인 작업을 취소할 때 해당 스레드에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>시스템 제공 오류 메시지를 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>지정된 오류 메시지, 해당 예외의 원인인 내부 예외에 대한 참조 및 취소 토큰을 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
      <param name="token">취소한 작업과 연결된 취소 토큰입니다.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>지정된 오류 메시지 및 취소 토큰을 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="token">취소한 작업과 연결된 취소 토큰입니다.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>취소 토큰을 사용하여 <see cref="T:System.OperationCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="token">취소한 작업과 연결된 취소 토큰입니다.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>취소한 작업과 연결된 취소 토큰을 가져옵니다.</summary>
      <returns>취소한 작업과 연결된 토큰 또는 기본 토큰입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>비동기 반복기에 대한 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>성공 여부와 상관없이 반복을 완료한 것으로 표시합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" /> 구조체의 인스턴스를 만듭니다.</summary>
      <returns>초기화된 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>
        <see cref="T:System.Threading.ExecutionContext" />를 보호하는 동안 상태 시스템에서 <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" />를 호출합니다.</summary>
      <param name="stateMachine">참조로 전달된 상태 시스템 인스턴스입니다.</param>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>작업을 반환하는 비동기 메서드의 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다. 부분적으로 신뢰할 수 있는 코드에서 이 메서드를 호출할 수 있습니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> 클래스의 인스턴스를 만듭니다.</summary>
      <returns>작성기의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>작업이 실패한 것으로 표시하고 지정된 예외를 작업에 바인딩합니다.</summary>
      <param name="exception">작업에 바인딩할 예외입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">작업이 이미 완료된 경우  
 또는  
 빌더가 초기화되지 않은 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>작업이 성공적으로 완료된 것으로 표시합니다.</summary>
      <exception cref="T:System.InvalidOperationException">작업이 이미 완료된 경우  
 또는  
 빌더가 초기화되지 않은 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>지정된 상태 컴퓨터와 작성기를 연결합니다.</summary>
      <param name="stateMachine">작성기와 연결할 상태 시스템 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">상태 시스템이 이전에 설정된 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>연결된 상태 컴퓨터를 사용하여 작성기 실행을 시작합니다.</summary>
      <param name="stateMachine">참조로 전달된 상태 시스템 인스턴스입니다.</param>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>이 작성기에 대한 작업을 가져옵니다.</summary>
      <returns>이 작성기에 대한 작업입니다.</returns>
      <exception cref="T:System.InvalidOperationException">빌더가 초기화되지 않은 경우</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>작업을 반환하고 결과에 대한 매개 변수를 제공하는 비동기 메서드에 대한 작성기를 나타냅니다.</summary>
      <typeparam name="TResult">작업을 완료하는 데 사용할 결과입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다. 부분적으로 신뢰할 수 있는 코드에서 이 메서드를 호출할 수 있습니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> 클래스의 인스턴스를 만듭니다.</summary>
      <returns>작성기의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>작업이 실패한 것으로 표시하고 지정된 예외를 작업에 바인딩합니다.</summary>
      <param name="exception">작업에 바인딩할 예외입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">작업이 이미 완료된 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>작업이 성공적으로 완료된 것으로 표시합니다.</summary>
      <param name="result">작업을 완료하는 데 사용할 결과입니다.</param>
      <exception cref="T:System.InvalidOperationException">작업이 이미 완료된 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>지정된 상태 컴퓨터와 작성기를 연결합니다.</summary>
      <param name="stateMachine">작성기와 연결할 상태 시스템 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">상태 시스템이 이전에 설정된 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>연결된 상태 컴퓨터를 사용하여 작성기 실행을 시작합니다.</summary>
      <param name="stateMachine">참조로 전달된 상태 시스템 인스턴스입니다.</param>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>이 작성기에 대한 작업을 가져옵니다.</summary>
      <returns>이 작성기에 대한 작업입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>값을 반환하지 않는 비동기 메서드의 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>지정된 awaiter가 완료되면 다음 작업을 계속하도록 상태 시스템을 예약합니다. 부분적으로 신뢰할 수 있는 코드에서 이 메서드를 호출할 수 있습니다.</summary>
      <param name="awaiter">Awaiter입니다.</param>
      <param name="stateMachine">상태 시스템입니다.</param>
      <typeparam name="TAwaiter">awaiter의 형식입니다.</typeparam>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> 클래스의 인스턴스를 만듭니다.</summary>
      <returns>작성기의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>예외를 메서드 작성기에 바인딩합니다.</summary>
      <param name="exception">바인딩할 예외입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">빌더가 초기화되지 않은 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>메서드 빌더가 성공적으로 완료된 것으로 표시합니다.</summary>
      <exception cref="T:System.InvalidOperationException">빌더가 초기화되지 않은 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>지정된 상태 컴퓨터와 작성기를 연결합니다.</summary>
      <param name="stateMachine">작성기와 연결할 상태 시스템 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">상태 시스템이 이전에 설정된 경우</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>연결된 상태 컴퓨터를 사용하여 작성기 실행을 시작합니다.</summary>
      <param name="stateMachine">참조로 전달된 상태 시스템 인스턴스입니다.</param>
      <typeparam name="TStateMachine">상태 컴퓨터의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>
        <see cref="T:System.IAsyncDisposable" />에서 대기 상태를 수행하는 방법을 구성하는 데 사용할 수 있는 유형을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" />에서 사용하는 관리되지 않는 리소스를 비동기적으로 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>취소 가능한 반복을 활성화하고 구성된 대기 상태인 대기 가능한 비동기 열거형을 제공합니다.</summary>
      <typeparam name="T">열거할 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>비동기 반복에서 반환되는 작업을 대기하는 방법을 구성합니다.</summary>
      <param name="continueOnCapturedContext">현재 컨텍스트로 캡처하고 마샬링하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>구성된 열거형입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>취소 가능한 반복을 활성화하고 구성된 대기 상태인 대기 가능한 비동기 열거자를 제공합니다.</summary>
      <typeparam name="T">열거할 값의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>비동기적으로 관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>열거자를 컬렉션의 다음 요소로 비동기적으로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 성공적으로 이동한 경우 <see langword="true" />의 결과로 완료되는 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />이거나 열거자가 컬렉션의 끝을 지난 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>취소 가능한 반복 및 구성된 대기를 사용할 수 있는 컬렉션을 통해 비동기식으로 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" /> 클래스의 열거자입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>반복할 때 <see cref="T:System.Threading.CancellationToken" />이 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />에 전달되도록 설정합니다.</summary>
      <param name="cancellationToken">사용할 취소 토큰입니다.</param>
      <returns>구성된 열거형입니다.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>취소되도록 <see cref="T:System.Threading.CancellationToken" />에 신호를 보냅니다.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>지정된 지연(밀리초) 후에 취소될 <see cref="T:System.Threading.CancellationTokenSource" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="millisecondsDelay">이 <see cref="T:System.Threading.CancellationTokenSource" />가 취소될 때까지 대기하는 시간 간격(밀리초)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" />이 -1보다 작습니다.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>지정된 시간 범위 후에 취소될 <see cref="T:System.Threading.CancellationTokenSource" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="delay">이 <see cref="T:System.Threading.CancellationTokenSource" />가 취소될 때까지 대기하는 시간 간격입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> -1보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>취소 요청을 전달합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">이 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</exception>
      <exception cref="T:System.AggregateException">연결된 <see cref="T:System.Threading.CancellationToken" />에 등록된 콜백에 의해 throw되는 모든 예외를 포함하는 집계 예외.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>예외가 발생한 경우 취소 요청을 전달하고 나머지 콜백과 취소 가능한 작업을 처리해야 하는지를 지정합니다.</summary>
      <param name="throwOnFirstException">예외를 즉시 전파해야 하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</exception>
      <exception cref="T:System.AggregateException">연결된 <see cref="T:System.Threading.CancellationToken" />에 등록된 콜백에 의해 throw되는 모든 예외를 포함하는 집계 예외.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>지정된 수(밀리초) 후에 이 <see cref="T:System.Threading.CancellationTokenSource" />에 취소 작업을 예약합니다.</summary>
      <param name="millisecondsDelay">이 <see cref="T:System.Threading.CancellationTokenSource" />를 취소하기 전에 대기할 시간 범위입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제된 경우 throw되는 예외입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" />가 -1보다 작은 경우 throw되는 예외입니다.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>지정된 시간 범위 후에 이 <see cref="T:System.Threading.CancellationTokenSource" />에 취소 작업을 예약합니다.</summary>
      <param name="delay">이 <see cref="T:System.Threading.CancellationTokenSource" />를 취소하기 전에 대기할 시간 범위입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제된 경우 throw되는 예외입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />가 -1보다 작거나 Int32.MaxValue보다 큰 경우 throw되는 예외입니다.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>취소된 상태인 원본 토큰이 있는 경우 취소된 상태가 되는 <see cref="T:System.Threading.CancellationTokenSource" />를 만듭니다.</summary>
      <param name="token1">관찰할 첫 번째 취소 토큰입니다.</param>
      <param name="token2">관찰할 두 번째 취소 토큰입니다.</param>
      <returns>소스 토큰에 연결된 <see cref="T:System.Threading.CancellationTokenSource" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">원본 토큰 중 하나로 연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>지정된 배열에 소스 토큰이 하나라도 취소된 상태가 되는 경우 취소된 상태가 되는 <see cref="T:System.Threading.CancellationTokenSource" />를 만듭니다.</summary>
      <param name="tokens">관찰할 취소 토큰 인스턴스를 포함하는 배열입니다.</param>
      <returns>소스 토큰에 연결된 <see cref="T:System.Threading.CancellationTokenSource" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">원본 토큰 중 하나로 연결된 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Threading.CancellationTokenSource" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>이 <see cref="T:System.Threading.CancellationTokenSource" />의 취소가 요청되었는지 여부를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Threading.CancellationTokenSource" />의 취소가 요청되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>이 <see cref="T:System.Threading.CancellationToken" />와 연결된 <see cref="T:System.Threading.CancellationTokenSource" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Threading.CancellationToken" />와 연결된 <see cref="T:System.Threading.CancellationTokenSource" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">토큰 원본이 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>동시 작업을 동시에 실행하고 전용 작업은 실행하지 않으면서 작업을 실행하도록 조정하는 작업 스케줄러를 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>지정된 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="taskScheduler">이 쌍을 실행해야 하는 대상 스케줄러입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>최대 동시성 수준을 사용하여 지정된 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="taskScheduler">이 쌍을 실행해야 하는 대상 스케줄러입니다.</param>
      <param name="maxConcurrencyLevel">동시에 실행할 최대 작업 수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>최대 동시성 수준과 예약된 최대 작업 수(단위로 처리될 수도 있음)와 함께 지정한 스케줄러를 대상으로 하는 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 클래스의 새 인스턴스를 초기화하고 보호 수준에 서명합니다.</summary>
      <param name="taskScheduler">이 쌍을 실행해야 하는 대상 스케줄러입니다.</param>
      <param name="maxConcurrencyLevel">동시에 실행할 최대 작업 수입니다.</param>
      <param name="maxItemsPerTask">쌍으로 사용되는 예약된 각 내부 작업을 처리하는 최대 작업 수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>스케줄러 쌍에게 추가 작업을 수락할 수 없음을 알립니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>스케줄러가 처리를 완료하면 완료될 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>스케줄러 처리를 마칠 때 완료되는 비동기 작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>이 쌍에서 다른 작업과 동시에 실행될 수 있는 이 쌍에 대한 작업을 예약하는 데 사용할 수 있는 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 가져옵니다.</summary>
      <returns>동시에 작업을 예약하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>이 쌍에서 다른 작업과 관련하여 단독으로 실행되어야 하는 이 쌍에 대한 작업을 예약하는 데 사용할 수 있는 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 가져옵니다.</summary>
      <returns>다른 작업과 동시에 실행되지 않는 작업을 예약하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>비동기 열거형 및 일회용에 대한 작업 관련 동작을 구성하기 위한 정적 메서드 세트를 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>비동기 일회용에서 반환되는 작업을 대기하는 방법을 구성합니다.</summary>
      <param name="source">원본 비동기 일회용</param>
      <param name="continueOnCapturedContext">현재 컨텍스트로 캡처하고 마샬링하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>구성된 비동기 일회용</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>비동기 반복에서 반환된 작업을 대기하는 방법을 구성합니다.</summary>
      <param name="source">반복하는 열거형 원본입니다.</param>
      <param name="continueOnCapturedContext">현재 컨텍스트로 캡처하고 마샬링하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <typeparam name="T">반복할 개체의 형식입니다.</typeparam>
      <returns>구성된 열거형입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>반복할 때 <see cref="T:System.Threading.CancellationToken" />이 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />에 전달되도록 설정합니다.</summary>
      <param name="source">반복하는 열거형 원본입니다.</param>
      <param name="cancellationToken">사용할 취소 토큰입니다.</param>
      <typeparam name="T">반복할 개체의 형식입니다.</typeparam>
      <returns>구성된 열거형입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>작업 취소를 알리기 위해 사용되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 클래스의 새 인스턴스를 오류를 설명하는 시스템 제공 메시지로 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>지정된 오류 메시지, 이 예외의 원인인 내부 예외에 대한 참조 및 취소 토큰을 트리거한 <see cref="T:System.Threading.CancellationToken" />을 사용하여 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다.</param>
      <param name="token">취소를 트리거한 취소 토큰입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>취소된 <see cref="T:System.Threading.Tasks.TaskCanceledException" />에 대한 참조를 사용하여 <see cref="T:System.Threading.Tasks.Task" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="task">취소된 작업입니다.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>이 예외와 연결된 작업을 가져옵니다.</summary>
      <returns>이 예외와 연결된 <see cref="T:System.Threading.Tasks.Task" />에 대한 참조입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>대리자에 바인딩되지 않은 <see cref="T:System.Threading.Tasks.Task`1" />의 생산자 측면을 나타내고 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 속성을 통해 소비자 측면에 대한 액세스를 제공합니다.</summary>
      <typeparam name="TResult">이 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />와 연결 된 결과 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />을 만듭니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>지정된 상태를 사용하여 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />을 만듭니다.</summary>
      <param name="state">내부 <see cref="T:System.Threading.Tasks.Task`1" />의 AsyncState로 사용할 상태입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>지정된 상태 및 옵션을 사용하여 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />을 만듭니다.</summary>
      <param name="state">내부 <see cref="T:System.Threading.Tasks.Task`1" />의 AsyncState로 사용할 상태입니다.</param>
      <param name="creationOptions">내부 <see cref="T:System.Threading.Tasks.Task`1" />를 만들 때 사용할 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" />는 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />에 사용하기에 유효하지 않은 옵션을 나타냅니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>지정된 옵션을 사용하여 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />을 만듭니다.</summary>
      <param name="creationOptions">내부 <see cref="T:System.Threading.Tasks.Task`1" />를 만들 때 사용할 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" />는 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />에 사용하기에 유효하지 않은 옵션을 나타냅니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 상태로 전환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">기본 <see cref="T:System.Threading.Tasks.Task`1" />는 이미 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 또는 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 등 세 가지 최종 상태 중 하나에 있거나 기본 <see cref="T:System.Threading.Tasks.Task`1" />가 이미 삭제되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태로 전환하고 예외 개체 컬렉션을 바인딩합니다.</summary>
      <param name="exceptions">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 예외 컬렉션입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 인수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" />에 하나 이상의 null 요소가 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">기본 <see cref="T:System.Threading.Tasks.Task`1" />가 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 또는 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />의 세 가지 최종 상태 중 하나인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태로 전환하고 지정된 예외에 바인딩합니다.</summary>
      <param name="exception">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 예외입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 인수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">기본 <see cref="T:System.Threading.Tasks.Task`1" />가 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 또는 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />의 세 가지 최종 상태 중 하나인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 상태로 전환합니다.</summary>
      <param name="result">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 결과 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">기본 <see cref="T:System.Threading.Tasks.Task`1" />가 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 또는 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />의 세 가지 최종 상태 중 하나인 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>이 <see cref="T:System.Threading.Tasks.Task`1" />에서 만든 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Task`1" />에서 만든 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 상태로 전환하려고 시도합니다.</summary>
      <returns>작업이 수행되었으면 true이고, 작업에 실패했거나 개체가 이미 삭제되었으면 false입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 상태로 전환하려고 시도하고 취소 토큰을 취소된 작업에 저장할 수 있도록 합니다.</summary>
      <param name="cancellationToken">취소 토큰입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태로 전환하고 예외 개체 컬렉션을 바인딩하려고 합니다.</summary>
      <param name="exceptions">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 예외 컬렉션입니다.</param>
      <returns>작업이 성공했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 인수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" />에 하나 이상의 null 요소가 있는 경우  
또는 
<paramref name="exceptions" /> 컬렉션이 비어 있는 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태로 전환하고 지정된 예외에 바인딩하려고 합니다.</summary>
      <param name="exception">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 예외입니다.</param>
      <returns>작업이 성공했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 인수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>내부 <see cref="T:System.Threading.Tasks.Task`1" />를 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 상태로 전환하려고 시도합니다.</summary>
      <param name="result">이 <see cref="T:System.Threading.Tasks.Task`1" />에 바인딩할 결과 값입니다.</param>
      <returns>작업이 성공했으면 true이고, 그렇지 않으면 false입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />가 삭제된 경우</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>특정 유형의 <see cref="T:System.Threading.Tasks.Task" /> 인스턴스로 작업하기 위한 정적(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>
        <see cref="T:System.Threading.Tasks.Task" />의 비동기 작업을 나타내는 프록시 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />를 만듭니다.</summary>
      <param name="task">래핑을 해제할 <see langword="Task&lt;Task&gt;" />(C#) 또는 <see langword="Task (Of Task)" />(Visual Basic)입니다.</param>
      <returns>제공된 <see langword="System.Threading.Tasks.Task(Of Task)" />의 비동기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 인수가 null인 경우 throw되는 예외입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>
        <see langword="Task&lt;Task&lt;T&gt;&gt;" />(C#) 또는 <see langword="Task (Of Task(Of T))" />(Visual Basic)의 비동기 작업을 나타내는 프록시 <see cref="T:System.Threading.Tasks.Task" />를 만듭니다.</summary>
      <param name="task">래핑을 해제할 <see langword="Task&lt;Task&lt;T&gt;&gt;" />(C#) 또는 <see langword="Task (Of Task(Of T))" />(Visual Basic)입니다.</param>
      <typeparam name="TResult">작업 결과의 형식입니다.</typeparam>
      <returns>제공된 <see langword="Task&lt;Task&lt;T&gt;&gt;" />(C#) 또는 <see langword="Task (Of Task(Of T))" />(Visual Basic)의 비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 인수가 null인 경우 throw되는 예외입니다.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskScheduler" />에서 잘못된 작업을 알리기 위해 사용되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>기본 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerException">현재 예외의 원인인 예외입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">사용자 지정 특성을 지정할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">지정된 사용자 지정 특성의 생성자와 생성자에 대한 인수를 사용하여 <see langword="CustomAttributeBuilder" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">사용자 지정 특성의 생성자에 대한 인수입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" />이 static이거나 private인 경우  
또는 
제공된 인수의 개수가 생성자의 호출 규칙이 요구하는 생성자의 매개 변수 수가 일치하지 않는 경우  
또는 
제공된 인수의 형식이 생성자에 선언된 매개 변수의 형식과 일치하지 않는 경우  
또는 
제공된 인수가 <see cref="T:System.String" /> 또는 <see cref="T:System.Type" /> 이외의 참조 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="constructorArgs" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">사용자 지정 특성의 생성자, 이 생성자에 대한 인수 및 명명된 필드/값 쌍 집합이 제공되면 <see langword="CustomAttributeBuilder" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">사용자 지정 특성의 생성자에 대한 인수입니다.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">사용자 지정 특성의 명명된 필드입니다.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">사용자 지정 특성의 명명된 필드 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedFields" /> 및 <paramref name="fieldValues" /> 배열의 길이가 다른 경우  
또는 
 <paramref name="con" />이 static이거나 private인 경우  
또는 
제공된 인수의 개수가 생성자의 호출 규칙이 요구하는 생성자의 매개 변수 수가 일치하지 않는 경우  
또는 
제공된 인수의 형식이 생성자에 선언된 매개 변수의 형식과 일치하지 않는 경우  
또는 
필드 값 형식이 명명된 필드 형식과 일치하지 않는 경우  
또는 
필드가 생성자와 같은 클래스 또는 기본 클래스에 속하지 않는 경우  
또는 
제공된 인수 또는 명명된 필드가 <see cref="T:System.String" /> 또는 <see cref="T:System.Type" /> 이외의 참조 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">사용자 지정 특성의 생성자, 이 생성자에 대한 인수 및 명명된 속성 또는 값 쌍 집합이 제공되면 <see langword="CustomAttributeBuilder" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">사용자 지정 특성의 생성자에 대한 인수입니다.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">사용자 지정 특성의 명명된 속성입니다.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">사용자 지정 특성의 명명된 속성 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 및 <paramref name="propertyValues" /> 배열의 길이가 다른 경우  
또는 
 <paramref name="con" />이 static이거나 private인 경우  
또는 
제공된 인수의 개수가 생성자의 호출 규칙이 요구하는 생성자의 매개 변수 수가 일치하지 않는 경우  
또는 
제공된 인수의 형식이 생성자에 선언된 매개 변수의 형식과 일치하지 않는 경우  
또는 
속성 값 형식이 명명된 속성 형식과 일치하지 않는 경우  
또는 
속성에 setter 메서드가 없는 경우  
또는 
속성이 생성자와 같은 클래스 또는 기본 클래스에 속하지 않는 경우  
또는 
제공된 인수 또는 명명된 속성이 <see cref="T:System.String" /> 또는 <see cref="T:System.Type" /> 이외의 참조 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">사용자 지정 특성의 생성자, 이 생성자에 대한 인수, 명명된 속성/값 쌍 집합 또는 명명된 필드/값 쌍 집합이 제공되면 <see langword="CustomAttributeBuilder" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">사용자 지정 특성의 생성자에 대한 인수입니다.</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">사용자 지정 특성의 명명된 속성입니다.</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">사용자 지정 특성의 명명된 속성 값입니다.</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">사용자 지정 특성의 명명된 필드입니다.</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">사용자 지정 특성의 명명된 필드 값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 및 <paramref name="propertyValues" /> 배열의 길이가 다른 경우  
또는 
<paramref name="namedFields" /> 및 <paramref name="fieldValues" /> 배열의 길이가 다른 경우  
또는 
 <paramref name="con" />이 static이거나 private인 경우  
또는 
제공된 인수의 개수가 생성자의 호출 규칙이 요구하는 생성자의 매개 변수 수가 일치하지 않는 경우  
또는 
제공된 인수의 형식이 생성자에 선언된 매개 변수의 형식과 일치하지 않는 경우  
또는 
속성 값 형식이 명명된 속성 형식과 일치하지 않는 경우  
또는 
필드 값 형식이 해당 필드 형식의 형식과 일치하지 않는 경우  
또는 
속성에 setter가 없는 경우  
또는 
속성 또는 필드가 생성자와 같은 클래스 또는 기본 클래스에 속하지 않는 경우  
또는 
제공된 인수, 명명된 속성 또는 명명된 필드가 <see cref="T:System.String" /> 또는 <see cref="T:System.Type" /> 이외의 참조 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">MSIL(Microsoft Intermediate Language) 명령을 생성합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">catch 블록을 시작합니다.</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">예외를 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">catch 블록이 필터링된 예외 내에 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" />이 <see langword="null" />이고, 해당 catch 블록을 찾을 때까지 finally 블록을 실행해야 한다는 것을 나타내는 값을 예외 필터 블록에서 반환하지 않은 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">생성되는 MSIL(Microsoft Intermediate Language)이 현재 예외 블록에 들어 있지 않은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">필터링된 예외에 대한 예외 블록을 시작합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">생성되는 MSIL(Microsoft Intermediate Language)이 현재 예외 블록에 들어 있지 않은 경우  
또는 
이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 <see cref="T:System.Reflection.Emit.DynamicMethod" />에 속해 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">필터링되지 않은 예외에 대한 예외 블록을 시작합니다.</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">블록의 끝에 대한 레이블입니다. 사용자는 이 레이블을 통해 올바른 위치에서 finally 블록을 실행하거나 try를 종료할 수 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">MSIL(Microsoft Intermediate Language) 스트림의 예외 오류 블록을 시작합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">생성 중인 MSIL이 현재 예외 블록에 없는 경우  
또는 
이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 <see cref="T:System.Reflection.Emit.DynamicMethod" />에 속해 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">MSIL(Microsoft Intermediate Language) 명령 스트림의 finally 블록을 시작합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">생성 중인 MSIL이 현재 예외 블록에 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">어휘 범위를 시작합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 <see cref="T:System.Reflection.Emit.DynamicMethod" />에 속해 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">지정한 형식의 지역 변수를 선언합니다.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">지역 변수의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns vsli:raw="The declared local variable.">선언된 지역 변수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드에 의해 만들어진 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">지정한 형식의 지역 변수를 선언하고, 선택적으로 해당 변수가 참조하는 개체를 고정합니다.</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">지역 변수의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메모리에 개체를 고정하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">지역 변수를 나타내는 <see cref="T:System.Reflection.Emit.LocalBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드에 의해 만들어진 경우  
또는 
바깥쪽 메서드의 메서드 본문이 <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> 메서드에 의해 만들어진 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 연결되어 있는 메서드가 <see cref="T:System.Reflection.Emit.MethodBuilder" />에 표시되지 않을 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">새 레이블을 선언합니다.</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">분기에 대한 토큰으로 사용할 수 있는 새 레이블입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">명령 스트림에 지정된 명령을 배치합니다.</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">스트림에 배치될 MSIL(Microsoft Intermediate Language) 명령입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 문자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 문자 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 숫자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">스트림에 배치될 MSIL 명령입니다. <see langword="OpCodes" /> 열거형에 정의됩니다.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 숫자 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 숫자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 <see langword="Int" /> 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 숫자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 숫자 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 숫자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 숫자 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">MSIL(Microsoft Intermediate Language) 명령 스트림에 지정된 명령 및 지정된 생성자에 대한 메타데이터 토큰을 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">생성자를 나타내는 <see langword="ConstructorInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" />가 <see langword="null" />입니다. .NET Framework 4의 새 예외입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">지정된 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치하고 고정이 완료되면 레이블을 포함할 공간을 남겨 둡니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">이 위치에서 분기될 레이블입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">지정된 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치하고 고정이 완료되면 레이블을 포함할 공간을 남겨 둡니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">이 위치에서 분기될 레이블 개체 배열입니다. 모든 레이블을 사용합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" />가 <see langword="null" />인 경우 .NET Framework 4의 새 예외입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">MSIL(Microsoft Intermediate Language) 스트림에 지정된 명령을 배치합니다. 해당 스트림 다음에는 지정된 지역 변수에 대한 메타데이터 인덱스가 옵니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="local" vsli:raw="A local variable.">지역 변수입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <paramref name="local" /> 매개 변수의 부모 메서드가 해당 <see cref="T:System.Reflection.Emit.ILGenerator" />에 연결된 메서드와 일치하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" />가 싱글바이트 명령이며 <paramref name="local" />이 <see langword="Byte.MaxValue" />보다 큰 인덱스의 지역 변수를 나타내는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">MSIL(Microsoft Intermediate Language) 명령 스트림에 지정된 명령 및 시그니처 토큰을 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">시그니처 토큰을 생성하는 도우미입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">MSIL(Microsoft Intermediate Language) 명령 스트림에 지정된 명령 및 지정된 필드에 대한 메타데이터 토큰을 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">필드를 나타내는 <see langword="FieldInfo" />입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">지정된 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치합니다. 해당 스트림 다음에는 지정한 메서드에 대한 메타데이터 토큰이 옵니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">메서드를 나타내는 <see langword="MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" />가 <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 속성이 <see langword="false" />인 제네릭 메서드인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 문자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 문자 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">지정된 명령 및 숫자 인수를 MSIL(Microsoft Intermediate Language) 명령 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">명령 바로 다음에 스트림으로 푸시되는 <see langword="Single" /> 인수입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">지정된 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치합니다. 해당 스트림 다음에는 지정한 문자열에 대한 메타데이터 토큰이 옵니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">스트림에 내보낼 MSIL 명령입니다.</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">내보낼 <see langword="String" />입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">지정된 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치합니다. 해당 스트림 다음에는 지정한 형식에 대한 메타데이터 토큰이 옵니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">스트림에 배치될 MSIL 명령입니다.</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">
        <see langword="Type" />
      </param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">
        <see langword="call" /> 또는 <see langword="callvirt" /> 명령을 MSIL(Microsoft intermediate language) 스트림에 배치하여 <see langword="varargs" /> 메서드를 호출합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">스트림에 내보낼 MSIL 명령입니다. <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> 또는 <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />여야 합니다.</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">호출할 <see langword="varargs" /> 메서드입니다.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">메서드가 <see langword="varargs" /> 메서드이면 선택적 인수의 형식이고, 그렇지 않으면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" />에서 메서드 호출을 지정하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">메서드에 대한 호출 규칙이 <see langword="varargs" />가 아니고 선택적 매개 변수 형식이 제공됩니다. 이 예외는 .NET Framework 버전 1.0 및 1.1에서 throw됩니다. 후속 버전에서는 예외가 throw되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">간접 호출에 대해 관리되는 호출을 지정하여 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">스트림에 내보낼 MSIL 명령입니다. <see cref="F:System.Reflection.Emit.OpCodes.Calli" />여야 합니다.</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">사용될 관리되는 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">결과의 <see cref="T:System.Type" />입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">명령에 사용되는 필수 인수의 형식입니다.</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">
        <see langword="varargs" /> 호출에 사용되는 선택적 인수의 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" />가 <see langword="null" />이 아니지만 <paramref name="callingConvention" />에 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 플래그가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">간접 호출에 대해 관리되지 않는 호출을 지정하여 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 명령을 MSIL(Microsoft Intermediate Language) 스트림에 배치합니다.</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">스트림에 내보낼 MSIL 명령입니다. <see cref="F:System.Reflection.Emit.OpCodes.Calli" />여야 합니다.</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">사용될 관리되지 않는 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">결과의 <see cref="T:System.Type" />입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">명령에 사용되는 필수 인수의 형식입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">지정된 로컬 변수를 사용하여 <see cref="Overload:System.Console.WriteLine" />을 호출하는 데 필요한 MSIL(Microsoft 중간 언어)를 내보냅니다.</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">해당 값이 콘솔에 기록될 로컬 변수입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">
        <paramref name="localBuilder" /> 형식이 지원되지 않는 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 또는 <see cref="T:System.Reflection.Emit.EnumBuilder" />인 경우  
또는 
<paramref name="localBuilder" /> 형식을 수락하는 <see cref="Overload:System.Console.WriteLine" />의 오버로드가 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">지정한 필드로 <see cref="Overload:System.Console.WriteLine" />을 호출하는 데 필요한 MSIL(Microsoft Intermediate Language)을 내보냅니다.</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">해당 값을 콘솔에 기록할 필드입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">지정한 필드의 형식을 받아들이는 <see cref="Overload:System.Console.WriteLine" /> 메서드의 오버로드가 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">필드의 형식이 지원되지 않는 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 또는 <see cref="T:System.Reflection.Emit.EnumBuilder" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">문자열로 <see cref="Overload:System.Console.WriteLine" />을 호출하는 MSIL(Microsoft Intermediate Language)을 내보냅니다.</summary>
      <param name="value" vsli:raw="The string to be printed.">인쇄할 문자열입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">예외 블록을 끝냅니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">코드 스트림의 예기치 않은 위치에서 end 예외 블록이 발생하는 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">생성되는 MSIL(Microsoft Intermediate Language)이 현재 예외 블록에 들어 있지 않은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">어휘 범위를 종료합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 <see cref="T:System.Reflection.Emit.DynamicMethod" />에 속해 있는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.ILGenerator" />에서 내보내는 MSIL(Microsoft Intermediate Language) 스트림의 현재 오프셋을 바이트 단위로 가져옵니다.</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">MSIL 스트림에서 다음 명령을 내보낼 오프셋입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">지정된 레이블로 MSIL(Microsoft Intermediate Language) 스트림의 현재 위치를 표시합니다.</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">인덱스를 설정할 레이블입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" />가 레이블 배열의 잘못된 인덱스를 나타내는 경우  
또는 
<paramref name="loc" />에 대한 인덱스가 이미 정의되어 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">예외를 throw하는 명령을 내보냅니다.</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">throw할 예외 형식의 클래스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" />이 <see cref="T:System.Exception" /> 클래스가 아니거나 <see cref="T:System.Exception" />의 파생 클래스가 아닌 경우  
또는 
형식에 매개 변수가 없는 생성자가 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">지역 변수를 계산하는 데 사용되는 네임스페이스를 지정하고 현재 활성화된 어휘의 범위를 조사합니다.</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">지역 변수를 계산하는 데 사용되는 네임스페이스를 지정하고 현재 활성화된 어휘의 범위를 조사합니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">
        <paramref name="usingNamespace" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.ILGenerator" />가 <see cref="T:System.Reflection.Emit.DynamicMethod" />에 속해 있는 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">명령 스트림의 레이블을 나타냅니다. <see langword="Label" />은 <see cref="T:System.Reflection.Emit.ILGenerator" /> 클래스와 함께 사용됩니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">지정된 개체가 <see langword="Label" />의 인스턴스이며 해당 인스턴스와 같은지 검사합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">이 <see langword="Label" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see langword="true" />의 인스턴스이고 해당 개체와 같으면 <see langword="Label" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">현재 인스턴스와 지정된 <see cref="T:System.Reflection.Emit.Label" />이 같은지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">현재 인스턴스와 비교할 <see cref="T:System.Reflection.Emit.Label" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />의 값이 현재 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">이 인스턴스의 해시 코드를 생성합니다.</summary>
      <returns vsli:raw="A hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">두 개의 <see cref="T:System.Reflection.Emit.Label" /> 구조체가 같은지 여부를 나타냅니다.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.Label" />입니다.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.Label" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="a" />와 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">두 개의 <see cref="T:System.Reflection.Emit.Label" /> 구조체가 같지 않은지 여부를 나타냅니다.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.Label" />입니다.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.Label" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="a" />와 다르면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">메서드 또는 생성자 내의 지역 변수를 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">지역 변수에서 참조하는 개체가 메모리에 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지역 변수에서 참조하는 개체가 메모리에 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">메서드 본문 내에 있는 지역 변수의 인덱스(0부터 시작)를 가져옵니다.</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">메서드 본문 내에서 지역 변수의 선언 순서를 나타내는 정수 값입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">지역 변수의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">지역 변수의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">매개 변수 정보를 만들거나 연결합니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">이 매개 변수에 대한 특성을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">읽기 전용입니다. 이 매개 변수에 대한 특성을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">입력 매개 변수인지 여부를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">읽기 전용입니다. 입력 매개 변수인지 여부를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">이 매개 변수가 선택적인지의 여부를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">읽기 전용입니다. 이 매개 변수가 선택적인지의 여부를 지정합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">이 매개 변수가 출력 매개 변수인지 여부를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">읽기 전용입니다. 이 매개 변수가 출력 매개 변수인지 여부를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">이 매개 변수의 이름을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">읽기 전용입니다. 이 매개 변수의 이름을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">이 매개 변수에 대한 시그니처 위치를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">읽기 전용입니다. 이 매개 변수에 대한 시그니처 위치를 검색합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">해당 매개 변수의 기본값을 설정합니다.</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">이 매개 변수의 기본값입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">매개 변수가 지원되는 형식 중 하나가 아닌 경우  
또는 
<paramref name="defaultValue" />의 형식이 매개 변수의 형식과 일치하지 않는 경우  
또는 
매개 변수가 <see cref="T:System.Object" /> 형식 또는 다른 참조 형식이고, <paramref name="defaultValue" />가 <see langword="null" />이 아니고, 값을 참조 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">시그니처를 빌드하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">시그니처에 인수를 추가합니다.</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">인수 형식입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">시그니처가 이미 종료된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">인수가 고정되는지 여부를 지정하여 지정된 형식의 인수를 시그니처에 추가합니다.</summary>
      <param name="argument" vsli:raw="The argument type.">인수 형식입니다.</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인수가 고정되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">시그니처에 지정된 사용자 지정 한정자가 있는 인수를 추가합니다.</summary>
      <param name="argument" vsli:raw="The argument type.">인수 형식입니다.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 인수에 대한 필수적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 인수에 필수적 사용자 지정 한정자가 없는 경우 <see langword="null" />을 지정합니다.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 인수에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 인수에 선택적 사용자 지정 한정자가 없는 경우 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" />가 <see langword="null" />입니다.  
또는 
<paramref name="requiredCustomModifiers" /> 또는 <paramref name="optionalCustomModifiers" />의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">시그니처가 이미 종료된 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 배열 형식인 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 개방형 제네릭 형식인 경우. 즉, <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 사용자 지정 한정자에 대해 <see langword="true" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">시그니처에 지정된 사용자 지정 한정자가 있는 인수의 집합을 추가합니다.</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">추가할 인수의 형식입니다.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 해당 인수에 대한 필수적 사용자 지정 한정자를 나타냅니다. 특정 인수에 필수적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 모든 인수에 필수적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 해당 인수에 대한 선택적 사용자 지정 한정자를 나타냅니다. 특정 인수에 선택적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 모든 인수에 선택적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="arguments" />의 요소가 <see langword="null" />입니다.  
또는 
지정된 사용자 지정 한정자 중 하나가 <see langword="null" />인 경우. 그러나 인수의 사용자 지정 한정자 배열에 대해서는 <see langword="null" />을 지정할 수 있습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">시그니처가 이미 종료된 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 배열 형식인 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 개방형 제네릭 형식인 경우. 즉, <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 사용자 지정 한정자에 대해 <see langword="true" />인 경우  
또는 
<paramref name="requiredCustomModifiers" /> 또는 <paramref name="optionalCustomModifiers" />의 크기가 <paramref name="arguments" />의 크기와 같지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">vararg 고정 부분의 끝을 표시합니다. 이것은 호출자가 vararg 시그니처 호출 사이트를 만드는 경우에만 사용됩니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">이 인스턴스가 지정된 개체와 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">이 인스턴스와 비교되어야 하는 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 개체가 <see langword="true" />이고 같은 시그니처를 나타내면 <see langword="SignatureHelper" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">필드에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" />를 요청할 필드가 들어 있는 동적 모듈입니다.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">필드에 대한 <see langword="SignatureHelper" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">이 인스턴스의 해시 코드를 생성하고 반환합니다.</summary>
      <returns vsli:raw="The hash code based on the name.">이름에 기반한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">지역 변수에 대한 시그니처 도우미를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">지역 변수에 대한 <see cref="T:System.Reflection.Emit.SignatureHelper" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">지역 변수에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" />를 요청할 지역 변수가 들어 있는 동적 모듈입니다.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">지역 변수에 대한 <see langword="SignatureHelper" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">메서드의 호출 규칙 및 반환 형식을 매개 변수로 받아 메서드에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">메서드의 반환 형식이거나 void 반환 형식의 경우 <see langword="null" />입니다(Visual Basic의 <see langword="Sub" /> 프로시저).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">메서드에 대한 <see langword="SignatureHelper" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">지정된 메서드의 모듈, 호출 규칙 및 반환 형식에 따라 메서드의 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" />가 요청되는 메서드를 포함하는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">메서드의 반환 형식이거나 void 반환 형식의 경우 <see langword="null" />입니다(Visual Basic의 <see langword="Sub" /> 프로시저).</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">메서드에 대한 <see langword="SignatureHelper" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 가 <see cref="T:System.Reflection.Emit.ModuleBuilder" />가 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">메서드의 모듈, 반환 형식 및 인수 형식을 매개 변수로 받아 표준 호출 규칙으로 해당 메서드에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see langword="SignatureHelper" />가 요청되는 메서드를 포함하는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">메서드의 반환 형식이거나 void 반환 형식의 경우 <see langword="null" />입니다(Visual Basic의 <see langword="Sub" /> 프로시저).</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">메서드의 인수 형식이거나, 메서드에 인수가 없는 경우 <see langword="null" />입니다.</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">메서드에 대한 <see langword="SignatureHelper" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" />가 <see langword="null" />입니다.  
또는 
<paramref name="parameterTypes" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" />가 <see cref="T:System.Reflection.Emit.ModuleBuilder" />가 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">속성이 들어 있는 동적 모듈, 호출 규칙, 속성 형식, 속성 인수, 반환 형식 및 인수에 대한 사용자 지정 한정자를 매개 변수로 받아 속성에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />를 요청할 속성이 들어 있는 <see cref="T:System.Reflection.Emit.SignatureHelper" />입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">속성 접근자의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The property type.">속성 형식입니다.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 필수적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">속성의 인수 형식이거나, 속성에 인수가 없는 경우 <see langword="null" />입니다.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 해당 속성 인수에 대한 필수적 사용자 지정 한정자를 나타냅니다. 특정 인수에 필수적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 속성에 인수가 없거나 모든 인수에 필수적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 해당 속성 인수에 대한 선택적 사용자 지정 한정자를 나타냅니다. 특정 인수에 선택적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 속성에 인수가 없거나 모든 인수에 선택적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">속성에 대한 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" />가 <see langword="null" />입니다.  
또는 
<paramref name="parameterTypes" />의 요소가 <see langword="null" />입니다.  
또는 
지정된 사용자 지정 한정자 중 하나가 <see langword="null" />인 경우. 그러나 인수의 사용자 지정 한정자 배열에 대해서는 <see langword="null" />을 지정할 수 있습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">시그니처가 이미 종료된 경우  
또는 
 <paramref name="mod" />가 <see cref="T:System.Reflection.Emit.ModuleBuilder" />가 아닌 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 배열 형식인 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 개방형 제네릭 형식인 경우. 즉, <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 사용자 지정 한정자에 대해 <see langword="true" />인 경우  
또는 
<paramref name="requiredParameterTypeCustomModifiers" /> 또는 <paramref name="optionalParameterTypeCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">속성이 들어 있는 동적 모듈, 속성 형식 및 속성 인수를 매개 변수로 받아 속성에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />를 요청할 속성이 들어 있는 <see cref="T:System.Reflection.Emit.SignatureHelper" />입니다.</param>
      <param name="returnType" vsli:raw="The property type.">속성 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">인수 형식이거나, 속성에 인수가 없는 경우 <see langword="null" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">속성에 대한 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" />가 <see langword="null" />입니다.  
또는 
<paramref name="parameterTypes" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" />가 <see cref="T:System.Reflection.Emit.ModuleBuilder" />가 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">속성이 들어 있는 동적 모듈, 속성 형식, 속성 인수, 그리고 반환 형식 및 인수에 대한 사용자 지정 한정자를 매개 변수로 받아 속성에 대한 시그니처 도우미를 반환합니다.</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />를 요청할 속성이 들어 있는 <see cref="T:System.Reflection.Emit.SignatureHelper" />입니다.</param>
      <param name="returnType" vsli:raw="The property type.">속성 형식입니다.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 필수적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">속성의 인수 형식이거나, 속성에 인수가 없는 경우 <see langword="null" />입니다.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 해당 속성 인수에 대한 필수적 사용자 지정 한정자를 나타냅니다. 특정 인수에 필수적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 속성에 인수가 없거나 모든 인수에 필수적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 해당 속성 인수에 대한 선택적 사용자 지정 한정자를 나타냅니다. 특정 인수에 선택적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 속성에 인수가 없거나 모든 인수에 선택적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">속성에 대한 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameterTypes" />의 요소가 <see langword="null" />입니다.  
또는 
지정된 사용자 지정 한정자 중 하나가 <see langword="null" />인 경우. 그러나 인수의 사용자 지정 한정자 배열에 대해서는 <see langword="null" />을 지정할 수 있습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">시그니처가 이미 종료된 경우  
또는 
 <paramref name="mod" />가 <see cref="T:System.Reflection.Emit.ModuleBuilder" />가 아닌 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 배열 형식인 경우  
또는 
지정된 사용자 지정 한정자 중 하나가 개방형 제네릭 형식인 경우. 즉, <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 사용자 지정 한정자에 대해 <see langword="true" />인 경우  
또는 
<paramref name="requiredParameterTypeCustomModifiers" /> 또는 <paramref name="optionalParameterTypeCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">시그니처에 더 이상 토큰이 추가되지 않도록 시그니처에 종료 토큰을 추가하여 시그니처가 완료된 것으로 표시합니다.</summary>
      <returns vsli:raw="A byte array made up of the full signature.">전체 시그니처로 구성된 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">시그니처 인수를 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">이 시그니처의 인수를 나타내는 문자열입니다.</returns>
    </member>
  </members>
</doc>
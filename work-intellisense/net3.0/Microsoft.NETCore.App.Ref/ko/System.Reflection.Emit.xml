<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">동적 어셈블리를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">원래 지정된 것처럼(예: <see cref="T:System.Reflection.AssemblyName" /> 개체) 어셈블리의 위치를 가져옵니다.</summary>
      <returns vsli:raw="The location of the assembly, as specified originally.">원래 지정된 어셈블리 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">지정한 이름 및 액세스 권한을 사용하여 동적 어셈블리를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the assembly.">어셈블리의 이름입니다.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">어셈블리의 액세스 권한입니다.</param>
      <returns vsli:raw="An object that represents the new assembly.">새 어셈블리를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">지정한 이름, 액세스 권한 및 특성이 있는 새 어셈블리를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the assembly.">어셈블리의 이름입니다.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">어셈블리의 액세스 권한입니다.</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">어셈블리의 특성을 포함하는 컬렉션입니다.</param>
      <returns vsli:raw="An object that represents the new assembly.">새 어셈블리를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">해당 어셈블리에서 명명된 동적 모듈을 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">동적 모듈의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Emit.ModuleBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" />이 공백으로 시작되는 경우  
또는 
<paramref name="name" />의 길이가 0입니다.  
또는 
<paramref name="name" />의 길이가 시스템 정의 최대 길이보다 긴 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">기본 기호 작성기의 어셈블리를 로드할 수 없는 경우  
 또는  
 기본 기호 작성기 인터페이스를 구현하는 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">해당 어셈블리의 진입점을 반환합니다.</summary>
      <returns vsli:raw="The entry point of this assembly.">해당 어셈블리의 진입점입니다.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">이 인스턴스가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">현재 동적 어셈블리의 표시 이름을 가져옵니다.</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">동적 어셈블리의 표시 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">사용자 지정 특성이 들어 있는 배열입니다. 특성이 없으면 배열이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 적용되었으며 지정된 특성 형식에서 파생되는 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">특성이 파생되는 기본 형식입니다.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">임의 수준의 <paramref name="attributeType" />에서 파생된 사용자 지정 특성이 들어 있는 배열입니다. 해당 특성이 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성에 대한 정보가 들어 있는 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">현재 모듈에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">지정된 이름의 동적 모듈을 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">요청된 동적 모듈의 이름입니다.</param>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">요청된 동적 모듈을 나타내는 ModuleBuilder 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">이 어셈블리에 정의되어 있는 내보낸 형식을 가져옵니다.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">해당 어셈블리에 정의되어 있는 내보낸 형식이 들어 있는 <see cref="T:System.Type" /> 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">이 메서드가 구현되지 않은 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">이 어셈블리의 매니페스트 파일 테이블에서 지정된 파일에 대한 <see cref="T:System.IO.FileStream" />을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the specified file.">지정된 파일의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">지정된 파일에 대한 <see cref="T:System.IO.FileStream" />이며, 해당 파일이 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">리소스 모듈의 포함 여부를 지정하여 어셈블리 매니페스트의 파일 테이블에서 파일을 가져옵니다.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">
        <see cref="T:System.IO.FileStream" /> 개체의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">이 어셈블리의 일부인 로드된 모듈을 모두 반환하며 선택적으로 리소스 모듈을 포함합니다.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">이 어셈블리의 일부인 로드된 모듈입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">지정된 리소스가 지속되는 방법에 대한 정보를 반환합니다.</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">리소스의 이름입니다.</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">리소스의 토폴로지에 대한 정보로 채워진 <see cref="T:System.Reflection.ManifestResourceInfo" /> 또는 리소스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">모든 리소스의 이름을 포함하는 <see langword="String" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">이 메서드가 동적 어셈블리에서 지원되지 않는 경우. 매니페스트 리소스 이름을 가져오려면 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />를 사용하십시오.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">요청된 매니페스트 리소스의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">지정된 형식의 네임스페이스에 의해 범위가 지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">해당 네임스페이스가 매니페스트 리소스 이름의 범위를 지정하는 데 사용된 형식입니다.</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">요청된 매니페스트 리소스의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">이 매니페스트 리소스를 나타내는 <see cref="T:System.IO.Stream" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">이 어셈블리에 있는 지정된 모듈을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the requested module.">요청된 모듈의 이름입니다.</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">요청되는 모듈 또는 모듈이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">이 어셈블리의 일부인 모듈을 모두 가져오며 선택적으로 리소스 모듈을 포함합니다.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The modules that are part of this assembly.">이 어셈블리의 일부인 모듈입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">현재 동적 어셈블리를 만들 때 지정된 <see cref="T:System.Reflection.AssemblyName" />을 가져오고 코드베이스를 지정된 상태로 설정합니다.</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">코드베이스를 섀도 복사한 후 어셈블리 위치로 설정하려면 <see langword="true" />이고, 코드베이스를 원래 위치로 설정하려면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The name of the dynamic assembly.">동적 어셈블리의 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.AssemblyName" />가 참조하는 어셈블리에 대한 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체의 불완전 목록을 가져옵니다.</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">참조된 어셈블리의 어셈블리 이름 배열입니다. 이 배열은 전체 목록이 아닙니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">지정된 문화권에 대한 위성 어셈블리를 가져옵니다.</summary>
      <param name="culture" vsli:raw="The specified culture.">지정된 문화권입니다.</param>
      <returns vsli:raw="The specified satellite assembly.">지정된 위성 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">어셈블리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">파일 이름이 일치하는 위성 어셈블리가 있지만 <see langword="CultureInfo" />가 지정된 어셈블리와 일치하지 않습니다.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">위성 어셈블리가 유효한 어셈블리가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">지정된 문화권에 대한 지정된 버전의 위성 어셈블리를 가져옵니다.</summary>
      <param name="culture" vsli:raw="The specified culture.">지정된 문화권입니다.</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">위성 어셈블리의 버전입니다.</param>
      <returns vsli:raw="The specified satellite assembly.">지정된 위성 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">파일 이름이 일치하는 위성 어셈블리가 있지만 <see langword="CultureInfo" /> 또는 버전이 지정된 어셈블리와 일치하지 않습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">어셈블리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">위성 어셈블리가 유효한 어셈블리가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />에 정의하고 만든 형식에서 지정된 형식을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the type to search for.">검색할 형식의 이름입니다.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">검색 시 형식 이름의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">지정된 형식 또는 이 형식을 찾을 수 없거나 아직 형식을 만들지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>어셈블리가 전역 어셈블리 캐시에서 로드되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">동적 어셈블리를 만드는 중인 호스트 컨텍스트를 가져옵니다.</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">동적 어셈블리를 만드는 중인 호스트 컨텍스트를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>매니페스트가 들어 있는 파일에 저장될 공용 언어 런타임의 버전을 가져옵니다.</summary>
      <returns>공용 언어 런타임의 버전을 나타내는 문자열입니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">이 멤버에 지정된 특성 형식의 인스턴스가 하나 이상 적용되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">테스트할 특성의 형식입니다.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 동적 어셈블리에 <paramref name="attributeType" />의 인스턴스가 하나 이상 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">현재 어셈블리가 동적 어셈블리임을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">항상 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">매니페스트가 들어 있는 로드된 파일이 섀도 복사되지 않은 경우, 해당 파일의 위치를 코드베이스 형식으로 가져옵니다.</summary>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">매니페스트가 포함된 로드된 파일의 위치입니다. 로드된 파일이 섀도 복사된 경우 <see langword="Location" />은 섀도 복사되기 전 파일의 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">어셈블리 매니페스트가 들어 있는 현재 <see cref="T:System.Reflection.Emit.AssemblyBuilder" />의 모듈을 가져옵니다.</summary>
      <returns vsli:raw="The manifest module.">매니페스트 모듈입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">동적 어셈블리가 리플렉션 전용 컨텍스트에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">동적 어셈블리가 리플렉션 전용 컨텍스트에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">지정된 사용자 지정 특성 BLOB를 사용하여 해당 어셈블리에 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" />이 <see langword="RuntimeConstructorInfo" /> 개체가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 해당 어셈블리에 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">동적 어셈블리의 액세스 모드를 정의합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">동적 어셈블리를 실행할 수는 있지만 저장할 수는 없습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">동적 어셈블리가 자동으로 로드되고 더 이상 액세스할 수 없는 경우 해당 메모리가 회수됩니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">동적 클래스의 생성자를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">이 생성자에 대한 특성을 가져옵니다.</summary>
      <returns vsli:raw="The attributes for this constructor.">이 생성자에 대 한 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">선언 형식이 제네릭 형식인지 여부에 따라 달라지는 <see cref="T:System.Reflection.CallingConventions" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">선언 형식이 제네릭 형식이면 <see cref="F:System.Reflection.CallingConventions.HasThis" />이고, 그렇지 않으면 <see cref="F:System.Reflection.CallingConventions.Standard" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">이 멤버를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조를 가져옵니다.</summary>
      <returns vsli:raw="The type that declares this member.">이 멤버를 선언 하는 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">해당 생성자의 매개 변수를 정의합니다.</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">매개 변수 목록에서 매개 변수의 위치입니다. 매개 변수는 첫 번째 매개 변수가 숫자 1부터 시작하여 인덱싱됩니다.</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">매개 변수의 특성입니다.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">매개 변수의 이름입니다. 이름이 null 문자열일 수 있습니다.</param>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">이 생성자의 새 매개 변수를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" />가 0(영) 미만이거나 생성자의 매개 변수 수보다 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">해당 생성자에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">이 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스로 나타내는 생성자의 모든 사용자 지정 특성을 나타내는 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">사용자 지정 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">이 생성자의 특성을 나타내는 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">해당 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" />를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">이 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">생성자는 매개 변수가 없는 생성자입니다.  
또는 
메서드 본문이 없어야 함을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그가 생성자에 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">지정된 MSIL 스트림 크기를 사용하여 이 생성자의 메서드 본문을 만드는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.ILGenerator" /> 개체를 가져옵니다.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">MSIL 스트림의 크기(바이트)입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">이 생성자에 대한 <see cref="T:System.Reflection.Emit.ILGenerator" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">생성자는 매개 변수가 없는 생성자입니다.  
또는 
메서드 본문이 없어야 함을 나타내는 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그가 생성자에 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">해당 생성자에 대한 메서드 구현 플래그를 반환합니다.</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">해당 생성자에 대한 메서드 구현 플래그입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">해당 생성자의 매개 변수를 반환합니다.</summary>
      <returns vsli:raw="An array that represents the parameters of this constructor.">이 생성자의 매개 변수를 나타내는 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">.NET Framework versions 1.0 및 1.1에서 이 생성자의 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 호출되지 않은 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">.NET Framework 버전 2.0에서 이 생성자의 형식에 대해 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 호출되지 않은 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">해당 생성자에서 지역 변수가 0으로 초기화되어야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">읽기/쓰기입니다. 해당 생성자에서 지역 변수가 0으로 초기화되어야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">지정된 <see langword="Binder" />의 제약 조건 하에서 지정된 인수를 사용하여 이 인스턴스에 의해 리플렉션된 생성자를 동적으로 호출합니다.</summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">다시 초기화해야 하는 개체입니다.</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">원하는 바인딩 형식을 지정하는 <see langword="BindingFlags" /> 값 중 하나입니다.</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">속성 집합을 정의하고 바인딩, 인수 형식의 강제 변환, 리플렉션을 사용한 멤버 호출 등을 가능하게 하는 <see langword="Binder" />입니다. <paramref name="binder" />가 <see langword="null" />이면 Binder.DefaultBinding이 사용됩니다.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">인수 목록입니다. 이것은 호출되는 생성자의 매개 변수와 개수, 순서 및 형식이 같은 인수 배열입니다. 매개 변수가 없으면 이 목록이 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" /> 입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</param>
      <returns vsli:raw="An instance of the class associated with the constructor.">생성자와 연결된 클래스의 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">지정된 바인더의 제약 조건에 따라 지정한 매개 변수를 전달하여 지정된 개체에 있는 이 인스턴스로 나타나는 생성자를 동적으로 호출합니다.</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">이것은 InvokeMethod, NonPublic 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하세요.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">인수 목록입니다. 이것은 호출되는 생성자의 매개 변수와 개수, 순서 및 형식이 같은 인수 배열입니다. 매개 변수가 없는 경우 <see langword="null" />이 되어야 합니다.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다. 예를 들어 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 변환하기 위해 이 매개 변수가 필요합니다.</param>
      <returns vsli:raw="The value returned by the invoked constructor.">호출된 생성자에서 반환된 값입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">사용자 지정 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다. 이 매개 변수는 무시됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하면 생성자를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에 대해 <see cref="T:System.Reflection.ConstructorInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">메서드에 대한 내부 핸들을 가져옵니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</summary>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">메서드에 대한 내부 핸들입니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">해당 속성이 이 클래스에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">이 생성자가 정의된 동적 모듈을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">이 생성자가 정의된 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">해당 생성자의 이름을 검색합니다.</summary>
      <returns vsli:raw="The name of this constructor.">이 생성자의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">해당 개체를 얻어온 <see cref="T:System.Type" /> 개체에 대한 참조가 들어 있습니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">이 개체를 가져온 개체입니다.<see langword="Type" /></returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">해당 생성자에 대한 메서드 구현 플래그를 설정합니다.</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">메서드 구현 플래그입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">해당 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스를 <see cref="T:System.String" />으로 반환합니다.</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">이 생성자의 이름, 특성, 예외 뒤에 현재 MSIL(Microsoft Intermediate Language) 스트림이 포함된 문자열입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">열거형을 설명하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">해당 열거형 정의가 들어 있는 동적 어셈블리를 검색합니다.</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">읽기 전용입니다. 해당 열거형 정의가 들어 있는 동적 어셈블리입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로를 반환합니다.</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">읽기 전용입니다. 부모 어셈블리의 표시 이름으로 정규화된 이 열거형의 전체 경로입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">항상 <see cref="T:System.Type" /> 형식인 해당 형식의 부모 <see cref="T:System.Enum" />을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">읽기 전용입니다. 해당 형식의 부모 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">이 열거형을 나타내는 <see cref="T:System.Reflection.TypeInfo" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that represents this enumeration.">이 열거형을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 선언한 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">지정된 상수 값으로 열거형에서 명명된 정적 필드를 정의합니다.</summary>
      <param name="literalName" vsli:raw="The name of the static field.">정적 필드의 이름입니다.</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">리터럴의 상수 값입니다.</param>
      <returns vsli:raw="The defined field.">정의된 필드입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">해당 열거형의 전체 경로를 반환합니다.</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">읽기 전용입니다. 해당 열거형의 전체 경로입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">지정된 대로 이 클래스에 대해 정의된 public 또는 non-public 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">이 클래스에 대해 정의된 지정된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다. 생성자가 정의되지 않은 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">해당 생성자에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">이 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 인스턴스가 나타내는 생성자의 모든 사용자 지정 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">
        <see cref="T:System.Type" />
        <paramref name="attributeType" />인 해당 생성자의 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">이 메서드는 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">이 메서드는 현재 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">열거형 작성기가 정의될 때 설정된 현재 열거형의 내부 정수 형식을 반환합니다.</summary>
      <returns vsli:raw="The underlying type.">내부 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">지정된 이름의 이벤트를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the event to get.">가져올 이벤트의 이름입니다.</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">지정된 이름의 형식으로 선언되거나 상속된 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체를 반환합니다. 일치하는 항목이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">이 형식으로 선언되거나 상속된 공용 이벤트의 이벤트를 반환합니다.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">이 형식에 의해 선언되거나 상속되는 public 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. public 이벤트가 없는 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">이 형식으로 선언되는 public 이벤트 및 public이 아닌 이벤트를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">이 형식으로 선언되거나 상속된 공용 및 비공용 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. 지정된 것처럼, 이벤트가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">지정된 이름에 지정된 필드를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the field to get.">가져올 필드의 이름입니다.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">public 또는 non-public 한정자와 지정된 이름을 사용하여 이 형식에 의해 선언되거나 상속된 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체를 반환합니다. 일치하는 개체가 없으면 null이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">이 형식으로 선언되는 public 필드 및 public이 아닌 필드를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">이것은 InvokeMethod, NonPublic 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체 배열을 반환합니다. 필드가 없으면 지정된 대로 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">지정한 정규화된 이름과 함께 이 형식에 의해 직접 또는 간접으로 구현된 인터페이스를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the interface.">인터페이스의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다. 이름이 일치하는 인터페이스를 찾을 수 없으면 null을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">요청된 인터페이스에 대한 인터페이스 매핑을 반환합니다.</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">인터페이스 매핑을 검색할 인터페이스 형식입니다.</param>
      <returns vsli:raw="The requested interface mapping.">요청된 인터페이스 매핑입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">형식에서 인터페이스를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">이 클래스 및 이 클래스의 기본 클래스에서 구현된 모든 인터페이스의 배열을 반환합니다.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다. 정의된 것이 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">이 형식으로 선언되거나 상속되고, 지정된 이름, 형식 및 바인딩이 있는 모든 멤버를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the member.">멤버의 이름입니다.</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">반환될 멤버 형식입니다.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 멤버만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">이 형식으로 선언되거나 상속된 지정한 멤버를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">이 형식에 의해 선언되거나 상속되는 public 및 non-public 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체 배열을 반환합니다. 일치하는 멤버가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체의 배열을 반환하고, 그렇지 않은 경우 public 메서드만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">이 형식으로 선언되는 지정한 중첩 형식을 반환합니다.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">가져올 중첩 형식의 이름이 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.  
또는 
public 메서드에 대해 대소문자 구분 검색을 수행하는 경우 0입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">지정된 요구 사항과 일치하는 중첩 형식을 나타내는 <see cref="T:System.Type" /> 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 중첩된 형식을 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">지정된 바인딩 제약 조건과 일치하는 현재 <see cref="T:System.Type" /> 내에 중첩된 모든 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.  
현재 <see cref="T:System.Type" /> 내에 중첩된 형식이 없거나 중첩된 형식 중 해당 바인딩 제약 조건과 일치하는 형식이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 non-public 속성을 모두 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 non-public 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 속성만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">해당 열거형의 GUID를 반환합니다.</summary>
      <returns vsli:raw="Read-only. The GUID of this enum.">읽기 전용입니다. 해당 열거형의 GUID입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">지정된 멤버를 호출합니다. 호출해야 할 메서드에 액세스할 수 있어야 하며 이 메서드가 지정된 바인더 및 호출 특성의 제약 조건 하에서 지정된 인수 목록과 가장 구체적으로 일치하는 항목을 제공해야 합니다.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">호출할 멤버의 이름입니다. 이 항목은 생성자, 메서드, 속성 또는 필드일 수 있습니다. 적합한 호출 특성을 지정해야 합니다. 빈 문자열을 멤버의 이름으로 전달하여 클래스의 기본 멤버를 호출할 수 있습니다.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">호출 특성입니다. 이 항목은 <see langword="BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하세요.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">지정한 멤버를 호출할 개체입니다. 멤버가 정적이면 이 매개 변수가 무시됩니다.</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">인수 목록입니다. 이것은 호출되는 멤버의 매개 변수 개수, 순서 및 형식이 포함된 개체의 배열입니다. 매개 변수가 없으면 이 값이 null이어야 합니다.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">호출할 멤버의 인수와 연결된 특성을 나타내는 요소를 가진 <paramref name="args" />와 길이가 동일한 배열입니다. 메타데이터에 있는 매개 변수에 특성이 연결되어 있습니다. 이러한 항목은 다양한 상호 운용성 서비스에 사용됩니다. 이에 대한 자세한 내용은 메타데이터 사양을 참조하십시오.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">형식의 강제 변환을 제어하는 데 사용되는 <see langword="CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see langword="CultureInfo" />가 사용됩니다. 예를 들어, 각 문화권에서 숫자 1000은 다르게 표현되므로 숫자 1000을 나타내는 String을 Double 값으로 변환하는 데 해당 매개 변수가 필요합니다.</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 배열의 각 매개 변수는 <paramref name="args" /> 배열의 해당 요소에 있는 값을 가져옵니다. <paramref name="args" />의 길이가 <paramref name="namedParameters" />의 길이보다 크면 남은 인수 값이 순서대로 전달됩니다.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">호출된 멤버의 반환 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 생성된 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 멤버에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">현재 이 메서드가 완성되지 않은 형식에서 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">지정된 차수의 현재 형식 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">배열의 차수입니다. 이 수는 32보다 작거나 같아야 합니다.</param>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">지정된 차수의 현재 형식 배열을 나타내는 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" />가 1보다 작습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">ref 매개 변수(Visual Basic의 경우 ByRef 매개 변수)로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">ref 매개 변수(Visual Basic의 경우 ByRef 매개 변수)로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">이 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 정의가 들어 있는 동적 모듈을 검색합니다.</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 정의를 포함하는 동적 모듈입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">해당 열거형의 이름을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The name of this enum.">읽기 전용입니다. 해당 열거형의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">해당 열거형의 네임스페이스를 반환합니다.</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">읽기 전용입니다. 해당 열거형의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 얻는 데 사용된 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">읽기 전용입니다. 이 <see cref="T:System.Reflection.Emit.EnumBuilder" />를 얻는 데 사용된 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">해당 열거형에 대한 내부 핸들을 검색합니다.</summary>
      <returns vsli:raw="Read-only. The internal handle for this enum.">읽기 전용입니다. 해당 열거형에 대한 내부 핸들입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">현재 이 속성이 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">해당 열거형에 대한 내부 필드를 반환합니다.</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">읽기 전용입니다. 해당 열거형에 대한 내부 필드입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">해당 열거형에 대한 내부 시스템 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">읽기 전용입니다. 내부 시스템 형식을 반환합니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">클래스에 대한 이벤트를 정의합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">이 이벤트와 관련된 "다른" 메서드 중 하나를 추가합니다. "다른" 메서드는 이벤트와 관련된 "on" 및 "raise" 메서드 이외의 메서드입니다. 이 함수를 여러 번 호출하여 "다른" 메서드를 원하는 만큼 추가할 수 있습니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">다른 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">이 이벤트를 등록하는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">이 이벤트를 등록하는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">사용자 지정 특성을 설명하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">이 이벤트에 발생시키는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">이 이벤트를 발생시키는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">이 이벤트를 등록 취소하는 데 사용될 메서드를 설정합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">이 이벤트를 등록 취소하는 데 사용될 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">필드를 정의하고 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">해당 필드의 특성을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="The attributes of this field.">해당 필드의 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">해당 필드를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">해당 필드를 선언하는 형식의 <see cref="T:System.Type" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">해당 필드에 대한 내부 메타데이터 핸들을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="The internal metadata handle for this field.">해당 필드에 대한 내부 메타데이터 핸들입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">해당 필드의 형식을 나타내는 <see cref="T:System.Type" /> 개체를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">해당 필드의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">해당 필드에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">해당 <see cref="T:System.Object" /> 인스턴스가 나타내는 생성자의 사용자 지정 특성을 모두 나타내는 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 형식 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">지정된 형식으로 식별되는 해당 필드에 대해 정의된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">사용자 지정 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">해당 <see cref="T:System.Object" /> 인스턴스가 나타내는 생성자의 사용자 지정 특성을 모두 나타내는 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 형식 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">지정된 개체에서 지원하는 필드 값을 검색합니다.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">필드에 액세스할 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">해당 인스턴스에서 리플렉션된 필드 값이 들어 있는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">지정된 형식이 있는 특성이 필드에 정의되어 있는지 여부를 나타냅니다.</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">특성의 형식입니다.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">기본 클래스에서 사용자 지정 특성을 상속받는 것을 제어합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 필드에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />을 사용하면 필드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에서 <see cref="T:System.Reflection.FieldInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">이 필드를 포함하는 형식이 정의될 모듈을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">이 필드가 정의될 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">해당 필드의 이름을 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">해당 필드의 이름이 들어 있는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">해당 개체를 얻어온 <see cref="T:System.Type" /> 개체에 대한 참조를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">해당 인스턴스를 가져온 <see cref="T:System.Type" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">해당 필드의 기본값을 설정합니다.</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">해당 필드에 대한 기본값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">필드가 지원되는 형식 중 하나가 아닌 경우  
또는 
<paramref name="defaultValue" />의 형식이 필드의 형식과 일치하지 않는 경우  
또는 
필드가 <see cref="T:System.Object" /> 형식 또는 다른 참조 형식이고, <paramref name="defaultValue" />가 <see langword="null" />이 아니고, 값을 참조 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">해당 필드의 부모 형식이 완성된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">해당 필드의 부모 형식이 완성된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">필드 레이아웃을 지정합니다.</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">해당 필드가 들어 있는 형식 내의 필드 오프셋입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식을 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만들었습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">지정된 개체에서 지원하는 필드 값을 설정합니다.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">필드에 액세스할 개체입니다.</param>
      <param name="val" vsli:raw="The value to assign to the field.">필드에 할당할 값입니다.</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">원하는 바인딩 형식을 지정하는 IBinder.CreateInstance, IBinder.ExactBinding 같은 <see langword="IBinder" /> 멤버입니다.</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">리플렉션을 사용하여 바인딩, 인수 형식의 강제 변환, 그리고 멤버 호출을 가능하게 하는 속성 집합입니다. 바인더가 null인 경우 IBinder.DefaultBinding이 사용됩니다.</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">특정 문화권의 소프트웨어 기본 설정입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">동적으로 정의된 제네릭 형식 및 메서드에 대한 제네릭 형식 매개 변수를 정의하고 만듭니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">현재 형식 매개 변수가 속하는 제네릭 형식 정의가 포함된 동적 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">현재 형식 매개 변수가 속하는 제네릭 형식 정의가 포함된 동적 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">현재 제네릭 형식 매개 변수의 기본 형식 제약 조건을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">제네릭 형식 매개 변수의 기본 형식 제약 조건을 나타내는 <see cref="T:System.Type" /> 개체이거나, 형식 매개 변수에 기본 형식 제약 조건이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">현재 <see cref="T:System.Reflection.MethodInfo" />가 제네릭 메서드의 형식 매개 변수를 나타내는 경우 선언 메서드를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">현재 <see cref="T:System.Reflection.MethodInfo" />가 제네릭 메서드의 형식 매개 변수를 나타내는 경우 선언 메서드를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">제네릭 형식 매개 변수가 속하는 제네릭 형식 정의 또는 제네릭 메서드 정의를 가져옵니다.</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">형식 매개 변수가 제네릭 형식에 속하는 경우 해당 제네릭 형식을 나타내는 <see cref="T:System.Type" /> 개체이고, 형식 매개 변수가 제네릭 메서드에 속하는 경우 해당 제네릭 메서드가 선언된 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">지정된 개체가 <see langword="EventToken" />의 인스턴스이며 현재 인스턴스와 같은지 테스트합니다.</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">현재 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" />가 <see langword="true" />의 인스턴스이고 현재 인스턴스와 같으면 <see langword="EventToken" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">현재 제네릭 형식 매개 변수의 공 분산과 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 플래그의 조합을 가져옵니다.</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">현재 제네릭 형식 매개 변수의 공 분산 및 특수 제약 조건을 설명하는 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">형식 매개 변수가 선언된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치를 가져옵니다.</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">형식 매개 변수가 선언된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" /> 을(를) throw합니다.</summary>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">현재 배열 형식, 포인터 형식 또는 <see langword="ByRef" /> 형식에서 참조하는 형식이거나, 현재 형식이 배열 또는 포인터 형식이 아니며 참조로 전달되지 않는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">현재 인스턴스에 대한 32비트 정수 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit integer hash code.">32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="The name of the interface.">인터페이스의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">대/소문자를 구분하지 않고 검색하려면 <see langword="true" />이고, 대/소문자를 구분하여 검색하려면 <see langword="false" />입니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">매핑을 검색할 인터페이스 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="type" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="name" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="invokeAttr" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="binder" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="target" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="args" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="modifiers" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="culture" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="namedParameters" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" /> 예외를 throw합니다.</summary>
      <param name="c" vsli:raw="The object to test.">테스트할 개체입니다.</param>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" /> 예외를 throw합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 생성된 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="attributeType" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <param name="inherit" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">모든 경우에 <see langword="false" />를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">모든 경우에 <see langword="false" />을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <param name="c" vsli:raw="Not supported.">지원되지 않습니다.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">요소 형식이 제네릭 형식 매개 변수인 1차원 배열의 형식을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">요소 형식이 제네릭 형식 매개 변수인 1차원 배열의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">요소 형식이 제네릭 형식 매개 변수이고 지정된 차수를 갖는 배열의 형식을 반환합니다.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">배열의 차수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">요소 형식이 제네릭 형식 매개 변수이고 지정된 차수를 갖는 배열의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" />가 유효한 차수가 아닌 경우. 예를 들어, 값이 1보다 작은 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">참조 매개 변수로 전달될 때 현재 제네릭 형식 매개 변수를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">참조 매개 변수로 전달될 때 현재 제네릭 형식 매개 변수를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">완성되지 않은 제네릭 형식 매개 변수에는 유효하지 않습니다.</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">형식 인수의 배열입니다.</param>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">이 메서드는 완성되지 않은 제네릭 형식 매개 변수에는 유효하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">현재 제네릭 형식 매개 변수에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">현재 제네릭 형식 매개 변수에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">제네릭 형식 매개 변수가 들어 있는 동적 모듈을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">제네릭 형식 매개 변수가 들어 있는 동적 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">제네릭 형식 매개 변수의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the generic type parameter.">제네릭 형식 매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">모든 경우에 <see langword="null" />을 가져옵니다.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">모든 경우에 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">
        <see cref="T:System.Type" />를 얻는 데 사용된 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">
        <see cref="T:System.Type" />를 얻는 데 사용된 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">형식 매개 변수를 대체하기 위해 형식이 상속해야 하는 기본 형식을 설정합니다.</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">형식 매개 변수를 대체할 모든 형식이 상속해야 하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" />가 <see langword="null" />입니다.  
또는 
 <paramref name="binaryAttribute" />가 null 참조인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">매개 변수 없는 생성자 제약 조건과 같은 제네릭 매개 변수의 가변성 특성 및 특수 제약 조건을 설정합니다.</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">제네릭 형식 매개 변수의 가변성 특성 및 특수 제약 조건을 나타내는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 값의 비트 조합입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">형식 매개 변수를 대체하기 위해 형식이 구현해야 하는 인터페이스를 설정합니다.</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">형식 매개 변수를 대체하기 위해 형식이 구현해야 하는 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">현재 제네릭 형식 매개 변수의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">제네릭 형식 매개 변수의 이름이 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">완전하지 않은 제네릭 형식 매개 변수에는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">현재 제네릭 형식 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">현재 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">동적 클래스의 메서드(또는 생성자)를 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">이 메서드에 대한 특성을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">읽기 전용입니다. 이 메서드에 대한 <see langword="MethodAttributes" />를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">메서드 호출 규칙을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">읽기 전용입니다. 메서드의 호출 규칙입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">이 형식에는 지원되지 않습니다.</summary>
      <returns vsli:raw="Not supported.">지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">이 메서드를 선언한 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">읽기 전용입니다. 이 메서드를 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">현재 메서드의 제네릭 형식 매개 변수 개수와 매개 변수 이름을 설정하고, 매개 변수의 제약 조건을 정의하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">제네릭 형식 매개 변수의 이름을 나타내는 문자열의 배열입니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">제네릭 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">이 메서드에 대해 제네릭 형식 매개 변수가 이미 정의되어 있는 경우  
또는 
메서드가 이미 완료된 경우  
또는 
현재 메서드에 대해 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> 메서드가 호출된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" />가 <see langword="null" />입니다.  
또는 
<paramref name="names" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" />가 빈 배열인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">이 메서드의 매개 변수 특성 및 이름 또는 이 메서드의 반환 값 특성 및 이름을 설정합니다. 사용자 지정 특성을 적용하는 데 사용할 수 있는 ParameterBuilder를 반환합니다.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">매개 변수 목록에서 매개 변수의 위치입니다. 매개 변수 중 첫 번째 매개 변수의 경우 인덱스가 1부터 시작하며, 숫자 0은 메서드의 반환 값을 나타냅니다.</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">매개 변수의 매개 변수 특성입니다.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">매개 변수의 이름입니다. 이름이 null 문자열일 수 있습니다.</param>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">이 메서드의 매개 변수 또는 이 메서드의 반환 값을 나타내는 <see langword="ParameterBuilder" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">메서드에 매개 변수가 없습니다.  
또는 
 <paramref name="position" />가 0보다 작은 경우  
또는 
 <paramref name="position" />이 메서드의 매개 변수 수보다 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.  
또는 
현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">지정된 개체가 이 인스턴스와 같은지 여부를 결정합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">이 <see langword="MethodBuilder" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see langword="true" />의 인스턴스이고 해당 개체와 같으면 <see langword="MethodBuilder" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">메서드에 대한 기본 구현을 반환합니다.</summary>
      <returns vsli:raw="The base implementation of this method.">이 메서드의 기본 구현입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">이 메서드에 정의된 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">이 메서드의 사용자 지정 특성을 나타내는 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">지정된 형식으로 식별되는 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">사용자 지정 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">
        <paramref name="attributeType" /> 형식인 이 메서드의 특성을 나타내는 개체의 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">제네릭 메서드인 경우 메서드의 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열을 반환합니다.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">제네릭 메서드인 경우 형식 매개 변수를 나타내는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체의 배열이고, 제네릭 메서드가 아닌 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">이 메서드를 반환합니다.</summary>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" />의 현재 인스턴스입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드가 제네릭 메서드가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="false" />를 반환합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">이 메서드의 해시 코드를 가져옵니다.</summary>
      <returns vsli:raw="The hash code for this method.">이 메서드의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">기본 MSIL(Microsoft Intermediate Language) 스트림 크기인 64바이트로 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</summary>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">메서드의 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 메서드에 본문이 없어야 하는 경우(예: 메서드에 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그가 있는 경우)  
또는 
메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">지정된 MSIL(Microsoft Intermediate Language) 스트림 크기로 이 메서드에 대한 <see langword="ILGenerator" />를 반환합니다.</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">MSIL 스트림의 크기(바이트)입니다.</param>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">이 메서드에 대한 <see langword="ILGenerator" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">메서드의 <see cref="T:System.Reflection.MethodAttributes" /> 또는 <see cref="T:System.Reflection.MethodImplAttributes" /> 플래그 때문에 메서드에 본문이 없어야 하는 경우(예: 메서드에 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 플래그가 있는 경우)  
또는 
메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">메서드에 대한 구현 플래그를 반환합니다.</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">메서드에 대한 구현 플래그를 반환합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">이 메서드의 매개 변수를 반환합니다.</summary>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">메서드의 매개 변수를 나타내는 <see langword="ParameterInfo" /> 개체 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see langword="GetParameters" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">이 메서드의 지역 변수를 0으로 초기화하는지 여부를 지정하는 부울 값을 가져오거나 설정합니다. 이 속성의 기본값은 <see langword="true" />입니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">이 메서드의 지역 변수를 0으로 초기화하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다. 가져오기 또는 설정에 모두 해당합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">지정된 바인더의 제약 조건 하에서, 해당 개체의 인스턴스에 의해 리플렉션된 메서드를 동적으로 호출하여, 지정된 매개 변수를 전달해줍니다.</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">지정된 메서드를 호출할 개체입니다. 정적 메서드이면 매개 변수가 무시됩니다.</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">리플렉션을 통해 바인딩 인수 형식의 강제 변환, 멤버 호출 및 MemberInfo 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. 자세한 내용은 <see cref="T:System.Reflection.Binder" />을 참조하십시오.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">인수 목록입니다. 이것은 호출된 메서드의 매개 변수와 같은 개수, 순서 및 형식의 인수 배열입니다. 매개 변수가 없는 경우에는 <see langword="null" />이어야 합니다.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">형식의 강제 변환을 제어하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다. 예를 들면 1000은 각 문화권마다 다르게 표현되므로 1000을 나타내는 <see cref="T:System.String" />을 <see cref="T:System.Double" /> 값으로 변환하기 위해 필요합니다.</param>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">호출된 메서드의 반환 값을 포함하는 개체를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">지정된 사용자 지정 특성 형식이 정의되어 있는지 확인합니다.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">사용자 지정 특성 형식입니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">이 멤버의 상속 체인을 검색하여 속성을 찾을 것인지 여부를 지정합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 사용자 지정 특성 형식이 정의되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">메서드가 제네릭 메서드인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 제네릭이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드 정의를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체가 제네릭 메서드 정의를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">모든 경우에 <see cref="T:System.NotSupportedException" />을(를) throw합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">모든 경우 이 속성은 동적 어셈블리에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의로 생성된 제네릭 메서드를 반환합니다.</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">제네릭 메서드의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">지정된 제네릭 형식 인수를 사용하여 현재 제네릭 메서드 정의로 생성된 제네릭 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">메서드에 대한 내부 핸들을 검색합니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</summary>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">읽기 전용입니다. 메서드에 대한 내부 핸들입니다. 내부 메타데이터 핸들에 액세스하려면 이 핸들을 사용합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">이 메서드는 현재 지원되지 않습니다. <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />를 사용하여 메서드를 검색하고 반환된 <see cref="P:System.Reflection.MethodBase.MethodHandle" />에서 <see cref="T:System.Reflection.MethodInfo" />를 호출할 수 있습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">현재 메서드가 정의되는 모듈을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">현재 <see cref="T:System.Reflection.Module" />가 나타내는 멤버가 정의되는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">이 메서드의 이름을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">읽기 전용입니다. 해당 메서드의 단순한 이름이 포함된 문자열을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">이 개체를 얻은 리플렉션에서 사용된 클래스를 검색합니다.</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">읽기 전용입니다. 이 메서드를 얻는 데 사용된 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">메서드의 반환 형식에 대한 정보(예: 반환 형식에 사용자 지정 한정자가 포함되는지 여부)가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">반환 형식에 대한 정보가 포함된 <see cref="T:System.Reflection.ParameterInfo" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">선언하는 형식이 만들어지지 않은 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.MethodBuilder" />가 나타내는 메서드의 반환 형식을 가져옵니다.</summary>
      <returns vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">메서드 반환 형식의 사용자 지정 특성을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">읽기 전용입니다. 메서드 반환 형식의 사용자 지정 특성입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">사용자 지정 특성을 설명하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">이 메서드에 대한 구현 플래그를 설정합니다.</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">설정할 구현 플래그입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">포함하는 형식은 이전에 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 만든 것입니다.  
또는 
현재 메서드에 대해 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성은 <see langword="true" />이지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">메서드의 매개 변수 개수와 형식을 설정합니다.</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">매개 변수 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">메서드의 반환 형식을 설정합니다.</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">메서드의 반환 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">반환 형식, 매개 변수 형식, 반환 형식과 매개 변수 형식의 필수적 및 선택적 사용자 지정 한정자가 포함된 메서드 시그니처를 설정합니다.</summary>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">메서드의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 메서드가 제네릭 메서드이지만 제네릭 메서드 정의가 아닌 경우. 즉, <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 속성이 <see langword="true" />로 설정되어 있지만 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 속성은 <see langword="false" />로 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">이 <see langword="MethodBuilder" /> 인스턴스를 문자열로 반환합니다.</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">현재 MSIL(Microsoft intermediate language) 스트림이 다음에 오도록 이 메서드의 이름, 특성, 메서드 시그니처, 예외 및 지역 시그니처를 포함하는 문자열을 반환합니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">동적 어셈블리의 모듈을 정의하고 나타냅니다.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">이 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 인스턴스를 정의한 동적 어셈블리를 가져옵니다.</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">현재 동적 모듈을 정의한 동적 어셈블리입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">이 동적 모듈에 대한 전역 함수 정의 및 전역 데이터 정의를 완성합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">이 메서드가 이미 호출된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">지정된 형식의 단일 비정적 필드인 <paramref name="value__" />가 들어 있는 값 형식으로 열거형 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">열거형 형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">열거형에 대한 형식 특성이며 <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />에 의해 정의되는 비트는 모두 특성입니다.</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">열거형에 대한 내부 형식입니다. 기본 제공 정수 형식이어야 합니다.</param>
      <returns vsli:raw="The defined enumeration.">정의된 열거형입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">표시 여부 특성이 아닌 다른 특성이 제공된 경우  
또는 
이 모듈의 부모 어셈블리에 지정된 이름의 열거형이 이미 있는 경우  
또는 
표시 특성이 열거형의 범위와 일치하지 않는 경우. 예를 들어 <paramref name="visibility" />가 <see cref="F:System.Reflection.TypeAttributes.NestedPublic" />으로 지정되었지만 열거형이 중첩 형식이 아닌 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">이름, 특성, 호출 규칙, 반환 형식 및 매개 변수 형식을 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <returns vsli:raw="The defined global method.">정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우  
또는 
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">이름, 특성, 호출 규칙, 반환 형식, 반환 형식에 대한 사용자 지정 한정자, 매개 변수 형식 및 매개 변수 형식에 대한 사용자 지정 한정자를 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">메서드의 이름입니다. <paramref name="name" />은 null 문자를 포함할 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 필수적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> 또는 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />와 같이 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 전역 메서드의 해당 매개 변수에 대한 필수적 사용자 지정 한정자를 나타냅니다. 특정 인수에 필수적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 전역 메서드에 인수가 없거나 모든 인수에 필수적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식 배열은 해당 매개 변수에 대한 선택적 사용자 지정 한정자를 나타냅니다. 특정 인수에 선택적 사용자 지정 한정자가 없는 경우에는 형식 배열 대신 <see langword="null" />을 지정합니다. 전역 메서드에 인수가 없거나 모든 인수에 선택적 사용자 지정 한정자가 없는 경우에는 배열로 이루어진 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="The defined global method.">정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우  
또는 
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> 메서드가 이미 호출된 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">이름, 특성, 반환 형식 및 매개 변수 형식을 지정하여 전역 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">메서드의 특성입니다. <paramref name="attributes" />에는 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어야 합니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <returns vsli:raw="The defined global method.">정의된 전역 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">메서드가 정적이 아닙니다. 즉 <paramref name="attributes" />에 <see cref="F:System.Reflection.MethodAttributes.Static" />이 포함되어 있지 않은 경우  
또는 
<paramref name="name" />의 길이가 0인 경우 
또는 
<see cref="T:System.Type" /> 배열의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">PE 파일(이식 가능한 실행 파일)의 .sdata 섹션에서 초기화된 데이터 필드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">데이터의 BLOB(Binary Large Object)입니다.</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">필드에 대한 특성입니다. 기본값은 <see langword="Static" />입니다.</param>
      <returns vsli:raw="A field to reference the data.">데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">
        <paramref name="name" />의 길이가 0입니다.  
또는 
<paramref name="data" />의 크기가 0보다 작거나 같은 경우이거나, 0x3f0000보다 크거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">이름, 메서드가 정의되어 있는 DLL의 이름, 해당 메서드의 특성, 호출 규칙, 반환 형식, 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The method's return type.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">메서드의 네이티브 문자 집합입니다.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">메서드가 정적 메서드가 아니거나 포함하는 형식이 인터페이스인 경우  
 또는  
 abstract 메서드입니다.  
 또는  
 메서드가 이전에 정의되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이미 만들어져 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">이름, 메서드가 정의되어 있는 DLL의 이름, 해당 메서드의 특성, 호출 규칙, 반환 형식, 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL의 진입점 이름입니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The method's return type.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">메서드의 네이티브 문자 집합입니다.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">비정적 메서드이거나, 포함하는 형식이 인터페이스인 경우, 추상 메서드인 경우 또는 이미 정의되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">포함하는 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이미 만들어져 있는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">이 모듈에서 지정된 이름을 사용하는 프라이빗 형식에 대해 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">네임스페이스를 포함한 형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <returns vsli:raw="A private type with the specified name.">지정된 이름을 사용하는 프라이빗 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">지정된 형식 이름 및 형식 특성으로 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">정의된 형식의 특성입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">형식 이름, 형식 특성 및 정의된 형식이 확장하는 형식으로 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">해당 형식과 연결될 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">정의된 형식이 확장하는 형식입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">형식 이름, 특성, 정의된 형식이 확장하는 형식 및 해당 형식의 전체 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">정의된 형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">정의된 형식이 확장하는 형식입니다.</param>
      <param name="typesize" vsli:raw="The total size of the type.">형식의 총 크기입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">형식 이름, 특성, 정의된 형식이 확장하는 형식 및 해당 형식의 압축 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">정의된 형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">정의된 형식이 확장하는 형식입니다.</param>
      <param name="packsize" vsli:raw="The packing size of the type.">형식의 압축 크기입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">형식 이름, 특성, 정의된 형식이 확장하는 형식, 정의된 형식의 압축 크기 및 전체 크기를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">정의된 형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">정의된 형식이 확장하는 형식입니다.</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">형식의 압축 크기입니다.</param>
      <param name="typesize" vsli:raw="The total size of the type.">형식의 총 크기입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">형식 이름, 특성, 정의된 형식이 확장하는 형식 및 정의된 형식이 구현하는 인터페이스를 지정하여 <see langword="TypeBuilder" />를 생성합니다.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 전체 경로입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">해당 형식과 연결될 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">정의된 형식이 확장하는 형식입니다.</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">해당 형식이 구현하는 인터페이스의 목록입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">요청된 특성을 모두 사용하여 만든 <see langword="TypeBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">이 모듈의 부모 어셈블리에 지정된 이름의 형식이 이미 있는 경우  
 또는  
 중첩되지 않은 형식에 대해 중첩된 형식 특성이 설정된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">PE 파일(이식 가능한 실행 파일)의 .sdata 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="size" vsli:raw="The size of the data field.">데이터 필드의 크기입니다.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">필드에 대한 특성입니다.</param>
      <returns vsli:raw="A field to reference the data.">데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" />의 길이가 0입니다.  
또는 
 <paramref name="size" />가 0보다 작거나 같습니다. 또는 0x003f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">이 인스턴스가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">이 모듈의 정규화된 이름과 모듈의 경로를 나타내는 <see langword="String" />을 가져옵니다.</summary>
      <returns vsli:raw="The fully qualified module name.">정규화된 모듈 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">배열 클래스의 명명된 메서드를 반환합니다.</summary>
      <param name="arrayClass" vsli:raw="An array class.">배열 클래스입니다.</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">배열 클래스의 메서드 이름입니다.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <returns vsli:raw="The named method on an array class.">배열 클래스의 명명된 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" />가 배열이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 적용된 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">사용자 지정 특성이 들어 있는 배열입니다. 특성이 없으면 배열이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 적용되었으며 지정된 특성 형식에서 파생되는 사용자 지정 특성을 모두 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">특성이 파생되는 기본 형식입니다.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">임의 수준의 <paramref name="attributeType" />에서 파생된 사용자 지정 특성이 들어 있는 배열입니다. 해당 특성이 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 개체로 표현되는, 현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성 관련 정보를 반환합니다.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">현재 모듈에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">지정된 이름과 바인딩 특성을 가진 PE 파일(이식 가능한 실행 파일)의 .sdata 영역에 정의된 모듈 수준 필드를 반환합니다.</summary>
      <param name="name" vsli:raw="The field name.">필드 이름입니다.</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">지정된 이름과 바인딩 특성이 있는 필드 또는 해당 필드가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">지정된 바인딩 플래그와 일치하는 PE 파일(이식 가능한 실행 파일)의 .sdata 영역에 정의된 모든 필드를 반환합니다.</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">지정된 플래그와 일치하는 필드의 배열입니다. 해당 필드가 없으면 배열이 비어 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">모듈 수준에서 현재 <see cref="T:System.Reflection.Emit.ModuleBuilder" />에 대해 정의되었으며 지정된 바인딩 플래그와 일치하는 모든 메서드를 반환합니다.</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">검색을 제어하는 데 사용하는 <see langword="BindingFlags" /> 비트 플래그의 조합입니다.</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">
        <paramref name="bindingFlags" />와 일치하는 모듈 수준 메서드가 모두 포함된 배열입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">모듈의 코드 특성과 대상 플랫폼을 나타내는 값 쌍을 가져옵니다.</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">이 메서드가 반환될 때 모듈의 코드 특성을 나타내는 <see cref="T:System.Reflection.PortableExecutableKinds" /> 값의 조합입니다.</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">이 메서드가 반환될 때 모듈의 대상 플랫폼을 나타내는 <see cref="T:System.Reflection.ImageFileMachine" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">해당 모듈에 정의되어 있는 명명된 형식을 가져옵니다.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">요청된 형식이 이 모듈에 정의되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <see cref="T:System.Type" />을 로드하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">모듈에 정의되어 있는 명명된 형식을 가져옵니다. 필요에 따라 형식 이름의 대/소문자 구분을 무시할 수 있습니다.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">요청된 형식이 이 모듈에 정의되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">모듈에 정의되어 있는 명명된 형식을 가져옵니다. 필요에 따라 형식 이름의 대/소문자 구분을 무시할 수 있습니다. 해당 형식을 찾을 수 없는 경우 선택적으로 예외가 throw됩니다.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">가져올 <see cref="T:System.Type" />의 이름입니다.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">지정된 형식이 이 모듈에 선언되어 있으면 해당 형식이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" />의 길이가 0이거나 1023보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">요청된 <see cref="T:System.Type" />이 공용이 아니고 호출자가 현재 어셈블리 외부에서 공용이 아닌 개체를 리플렉션할 수 있는 <see cref="T:System.Security.Permissions.ReflectionPermission" />을 가지고 있지 않은 경우</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" />가 <see langword="true" />이고 지정된 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">이 모듈 내에 정의된 클래스를 모두 반환합니다.</summary>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">이 인스턴스가 리플렉션하는 모듈 내에 정의된 형식이 들어 있는 배열입니다.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">모듈에 있는 하나 이상의 클래스를 로드할 수 없는 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">이 모듈에 지정된 특성 형식이 적용되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">테스트할 사용자 지정 특성의 형식입니다.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">이 인수는 이 형식의 개체에 대해 무시됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 <paramref name="attributeType" /> 인스턴스가 이 모듈에 적용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />이 런타임에 제공되는 <see cref="T:System.Type" /> 개체가 아닌 경우. 예를 들어 <paramref name="attributeType" />이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체인 경우입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">이 개체가 리소스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 리소스이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">메타데이터 스트림 버전을 가져옵니다.</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">메타데이터 스트림 버전을 나타내는 32비트 정수입니다. 두 개의 상위 바이트는 주 버전 번호를 나타내고 두 개의 하위 바이트는 부 버전 번호를 나타냅니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">메타데이터에서 현재 동적 모듈을 식별하는 토큰을 가져옵니다.</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">메타데이터에서 현재 모듈을 식별하는 정수 토큰입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">모듈의 두 버전 간을 구분하는 데 사용할 수 있는 UUID(범용 고유 식별자)를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">모듈의 두 버전 간을 구분하는 데 사용할 수 있는 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">메모리 내 모듈임을 나타내는 문자열입니다.</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">메모리 내 모듈임을 나타내는 텍스트입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 필드를 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">모듈의 필드를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">지정된 메타데이터 토큰으로 식별되는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 필드의 토큰이 아닌 경우  
또는 
 <paramref name="metadataToken" />이 식별하는 필드의 부모 <see langword="TypeSpec" />이 <see langword="var" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="mvar" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 형식 또는 멤버를 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">모듈에 있는 형식이나 멤버를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">지정된 메타데이터 토큰으로 식별되는 형식이나 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 형식이나 멤버의 토큰이 아닌 경우  
또는 
 <paramref name="metadataToken" />이 <see langword="MethodSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="TypeSpec" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="var" /> 또는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우  
또는 
 <paramref name="metadataToken" />이 속성 또는 이벤트를 식별하는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 메서드 또는 생성자를 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">모듈의 메서드나 생성자를 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">지정된 메타데이터 토큰으로 식별되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodBase" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 메서드나 생성자의 토큰이 아닌 경우  
또는 
 <paramref name="metadataToken" />이 <see langword="MethodSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="var" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">메타데이터 토큰으로 식별되는 시그니처 blob을 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">모듈에 있는 시그니처를 식별하는 메타데이터 토큰입니다.</param>
      <returns vsli:raw="An array of bytes representing the signature blob.">시그니처 blob을 나타내는 바이트의 배열입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 유효한 <see langword="MemberRef" />, <see langword="MethodDef" />, <see langword="TypeSpec" />, 시그니처 또는 <see langword="FieldDef" /> 토큰이 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">지정된 메타데이터 토큰으로 식별되는 문자열을 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">모듈의 문자열 힙에 있는 문자열을 식별하는 메타데이터 토큰입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">메타데이터 문자열 힙의 문자열 값이 포함된 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 문자열의 토큰이 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">지정된 제네릭 형식 매개 변수로 정의되는 컨텍스트에서 지정된 메타데이터 토큰으로 식별되는 형식을 반환합니다.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">모듈의 형식을 식별하는 메타데이터 토큰입니다.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">해당 토큰이 범위 내에 있는 형식의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 형식이 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">해당 토큰이 범위 내에 있는 메서드의 제네릭 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나, 메서드가 제네릭이 아닌 경우에는 <see langword="null" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">지정된 메타데이터 토큰으로 식별되는 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 형식의 토큰이 아닌 경우  
또는 
 <paramref name="metadataToken" />이 <see langword="TypeSpec" />(제네릭 형식의 형식 매개 변수) 또는 <see langword="var" />(제네릭 메서드의 형식 매개 변수) 요소 형식이 포함된 시그니처를 사용하는 <see langword="mvar" />이고, <paramref name="genericTypeArguments" />와 <paramref name="genericMethodArguments" /> 중 하나 또는 둘 다에 대해 필요한 제네릭 형식 인수를 제공하지 않은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" />이 현재 모듈의 범위에 있는 유효한 토큰이 아닌 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">동적 모듈의 이름을 나타내는 문자열을 가져옵니다.</summary>
      <returns vsli:raw="The name of the dynamic module.">동적 모듈의 이름입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">특성을 나타내는 지정된 BLOB(Binary Large Object)를 사용하여 이 모듈에 사용자 지정 특성을 적용합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">특성을 나타내는 바이트 BLOB입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 이 모듈에 사용자 지정 특성을 적용합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">적용할 사용자 지정 특성을 지정하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">형식에 대한 속성을 정의합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">이 속성에 연결된 다른 메서드 중 하나를 추가합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">다른 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">이 속성의 특성을 가져옵니다.</summary>
      <returns vsli:raw="Attributes of this property.">이 속성의 특성입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">속성을 읽을 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 속성을 읽을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">속성에 쓸 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 속성에 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">이 멤버를 선언하는 클래스를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">이 멤버를 선언하는 클래스에 대한 <see langword="Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">이 속성에 대한 공용 및 비공용 <see langword="get" /> 및 <see langword="set" /> 접근자의 배열을 반환합니다.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 메서드를 <see langword="MethodInfo" /> 배열에 반환해야 하는지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">일치하는 public 및 public이 아닌 접근자를 포함하는 <see langword="MethodInfo" /> 형식의 배열을 반환하거나 이 속성에 일치하는 접근자가 없는 경우에는 빈 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">이 속성에 대한 사용자 지정 특성의 배열을 모두 반환합니다.</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">
        <see langword="true" />이면 이 속성의 상속 체인을 따라 사용자 지정 특성을 찾습니다</param>
      <returns vsli:raw="An array of all the custom attributes.">모든 사용자 지정 특성의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <see cref="T:System.Type" />으로 식별된 사용자 지정 특성의 배열을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">형식으로 식별된 사용자 지정 특성의 배열입니다.</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">
        <see langword="true" />이면 이 속성의 상속 체인을 따라 사용자 지정 특성을 찾습니다</param>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">이 리플렉션된 멤버에 정의된 사용자 지정 특성의 배열이거나 이 멤버에 정의된 특성이 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">이 속성에 대한 public 및 public이 아닌 get 접근자를 반환합니다.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 get 접근자를 반환해야 하는지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">
        <paramref name="nonPublic" />이 <see langword="MethodInfo" />인 경우 get 접근자를 나타내는 <see langword="true" /> 개체입니다. <paramref name="nonPublic" />이 <see langword="null" />이고 get 접근자가 public이 아닌 경우 또는 <paramref name="nonPublic" />이 <see langword="false" />이고 get 접근자가 없는 경우 <see langword="true" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">해당 속성에 대한 인덱스 매개 변수의 배열을 모두 반환합니다.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">인덱스에 대한 매개 변수가 들어 있는 <see langword="ParameterInfo" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">이 속성의 set 접근자를 반환합니다.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">public이 아닌 경우 접근자를 반환할지 여부를 나타냅니다. non-public 메서드를 포함해야 하는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">다음 표에 표시된 것처럼 이 속성의 <see langword="Set" /> 메서드 또는 <see langword="null" />입니다.  
  값 
  조건 
  이 속성에 대한 Set 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.  

  Set 접근자가 public인 경우  

 <paramref name="nonPublic" />이 true이고 public이 아닌 메서드가 반환될 수 있는 경우  

  null 
 <paramref name="nonPublic" />이 true이지만 속성이 읽기 전용인 경우  

 <paramref name="nonPublic" />이 false이고 set 접근자가 public이 아닌 경우</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">속성의 getter 메서드를 호출하여 인덱싱된 속성의 값을 가져옵니다.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">속성 값이 반환될 개체입니다.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <returns vsli:raw="The value of the specified indexed property.">지정된 인덱싱된 속성의 값입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">지정된 바인딩, 인덱스 및 <see langword="CultureInfo" />가 있는 속성의 값을 가져옵니다.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">속성 값이 반환될 개체입니다.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">호출 특성입니다. 이것은 <see langword="BindingFlags" />, <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" /> 또는 <see langword="GetProperty" /> 등과 같은 <see langword="SetProperty" />의 비트 플래그여야 합니다. 적합한 호출 특성을 지정해야 합니다. 정적 멤버를 호출하려는 경우 <see langword="Static" />의 <see langword="BindingFlags" /> 플래그를 설정해야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 <see langword="null" />이면 기본 바인더가 사용됩니다.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">리소스를 지역화할 문화권을 나타내는 <see langword="CultureInfo" /> 개체입니다. 리소스가 이 문화권에 대해 지역화되지 않으면 <see langword="CultureInfo.Parent" /> 메서드가 연속적으로 호출되어 일치하는 문화권 정보를 검색합니다. 이 값이 <see langword="null" />이면 <see langword="CultureInfo" /> 속성에서 <see langword="CultureInfo.CurrentUICulture" />를 가져옵니다.</param>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">
        <paramref name="obj" />의 속성 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">
        <paramref name="attributeType" />의 인스턴스가 이 속성에 하나 이상 정의되어 있는지 여부를 나타냅니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">사용자 지정 특성이 적용되는 <see langword="Type" /> 개체입니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">이 속성의 상속 체인을 따라 사용자 지정 특성을 찾을 것인지 여부를 지정합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">이 속성에 <paramref name="attributeType" /> 인스턴스가 하나 이상 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">현재 속성을 선언하는 형식이 정의될 모듈을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">현재 속성을 선언하는 형식이 정의된 <see cref="T:System.Reflection.Module" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">이 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">이 멤버의 이름이 포함된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">이 속성의 필드 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type of this property.">이 속성의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">
        <see langword="MemberInfo" />의 이 인스턴스를 가져오는 데 사용된 클래스 개체를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">이 <see langword="Type" /> 개체를 얻는 데 사용된 <see langword="MemberInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">이 속성의 기본값을 설정합니다.</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">이 속성의 기본값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">속성이 지원되는 형식 중 하나가 아닌 경우  
또는 
<paramref name="defaultValue" />의 형식이 속성의 형식과 일치하지 않는 경우  
또는 
속성이 <see cref="T:System.Object" /> 형식 또는 다른 참조 형식이고, <paramref name="defaultValue" />가 <see langword="null" />이 아니고, 값을 참조 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 BLOB를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">포함하는 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">속성 값을 가져오는 메서드를 설정합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">속성 값을 가져오는 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">속성 값을 설정하는 메서드를 설정합니다.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">속성 값을 설정하는 메서드를 나타내는 <see langword="MethodBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">바깥쪽 형식에서 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 호출한 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">인덱스 속성에 대한 선택적 인덱스 값을 사용하여 속성 값을 설정합니다.</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">속성 값이 설정될 개체입니다.</param>
      <param name="value" vsli:raw="The new value for this property.">이 속성의 새 값입니다.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">지정된 개체의 속성 값을 지정된 값으로 설정합니다.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">속성 값이 반환될 개체입니다.</param>
      <param name="value" vsli:raw="The new value for this property.">이 속성의 새 값입니다.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">호출 특성입니다. 이것은 <see langword="BindingFlags" />, <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" /> 또는 <see langword="GetProperty" /> 등과 같은 <see langword="SetProperty" />의 비트 플래그여야 합니다. 적합한 호출 특성을 지정해야 합니다. 정적 멤버를 호출하려는 경우 <see langword="Static" />의 <see langword="BindingFlags" /> 플래그를 설정해야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 <see langword="null" />이면 기본 바인더가 사용됩니다.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">인덱싱된 속성에 대한 선택적 인덱스 값입니다. 인덱싱되지 않은 속성에 대해서는 이 값이 <see langword="null" />이어야 합니다.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">리소스를 지역화할 문화권을 나타내는 <see langword="CultureInfo" /> 개체입니다. 리소스가 이 문화권에 대해 지역화되지 않으면 <see langword="CultureInfo.Parent" /> 메서드가 연속적으로 호출되어 일치하는 문화권 정보를 검색합니다. 이 값이 <see langword="null" />이면 <see langword="CultureInfo" /> 속성에서 <see langword="CultureInfo.CurrentUICulture" />를 가져옵니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">런타임 시 클래스의 새 인스턴스를 정의하고 만듭니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">이 형식이 구현하는 인터페이스를 추가합니다.</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">이 형식이 구현하는 인터페이스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> 가 <see langword="null" />일 수 있습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">이 형식 정의를 포함하는 동적 어셈블리를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">읽기 전용입니다. 이 형식 정의를 포함하는 동적 어셈블리를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">어셈블리의 표시 이름으로 정규화된 이 형식의 전체 이름을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">읽기 전용입니다. 어셈블리의 표시 이름으로 정규화된 이 형식의 전체 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">이 형식의 기본 형식을 가져옵니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">읽기 전용입니다. 이 형식의 기본 형식을 가져옵니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">해당 클래스에 대한 <see cref="T:System.Type" /> 개체를 만듭니다. 클래스의 필드 및 메서드를 정의한 후에 <see langword="CreateType" />을 호출하여 해당 클래스의 <see langword="Type" /> 개체를 로드합니다.</summary>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">이 클래스에 대한 새 <see cref="T:System.Type" /> 개체를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">바깥쪽 형식이 만들어지지 않았습니다.  
 또는  
 이 형식이 비추상 형식이고 추상 메서드가 포함된 경우  
 또는  
 이 형식이 추상 클래스 또는 인터페이스가 아니고 메서드 본문이 없는 메서드가 들어 있는 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">형식에 잘못된 MSIL(Microsoft Intermediate Language) 코드가 들어 있는 경우  
 또는  
 분기 대상을 1바이트 오프셋으로 지정했지만 분기 대상이 분기에서 128바이트 이상 떨어져 있는 경우</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">형식을 로드할 수 없는 경우. 예를 들어 호출 규칙 <see cref="F:System.Reflection.CallingConventions.HasThis" />가 있는 <see langword="static" /> 메서드가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">이 형식을 나타내는 <see cref="T:System.Reflection.TypeInfo" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that represents this type.">이 형식을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">현재 제네릭 형식 매개 변수를 선언하는 메서드를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">현재 형식이 제네릭 형식 매개 변수이면 현재 형식을 선언하는 메서드를 나타내는 <see cref="T:System.Reflection.MethodBase" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">해당 형식을 선언한 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">읽기 전용입니다. 해당 형식을 선언한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">지정된 특성 및 서명을 사용하여 새 생성자를 형식에 추가합니다.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">생성자의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">생성자의 호출 규칙입니다.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">생성자의 매개 변수 형식입니다.</param>
      <returns vsli:raw="The defined constructor.">정의된 생성자입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">지정된 특성, 서명 및 사용자 지정 수정자를 사용하여 새 생성자를 형식에 추가합니다.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">생성자의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">생성자의 호출 규칙입니다.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">생성자의 매개 변수 형식입니다.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="The defined constructor.">정의된 생성자입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="requiredCustomModifiers" /> 또는 <paramref name="optionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">매개 변수가 없는 생성자를 정의합니다. 여기에 정의된 생성자는 부모의 매개 변수가 없는 생성자를 호출하기만 하면 됩니다.</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">생성자에 적용될 특성을 나타내는 <see langword="MethodAttributes" /> 개체입니다.</param>
      <returns vsli:raw="Returns the constructor.">생성자를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">부모 형식(기본 형식)에 매개 변수가 없는 생성자가 없습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">지정된 이름, 특성 및 이벤트 형식을 사용하여 형식에 새 이벤트를 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">이벤트의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the event.">이벤트의 특성입니다.</param>
      <param name="eventtype" vsli:raw="The type of the event.">이벤트의 형식입니다.</param>
      <returns vsli:raw="The defined event.">정의된 이벤트입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.  
또는 
 <paramref name="eventtype" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">지정된 이름, 특성 및 필드 형식을 사용하여 형식에 새 필드를 추가합니다.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">필드의 이름입니다. <paramref name="fieldName" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="type" vsli:raw="The type of the field.">필드의 형식</param>
      <param name="attributes" vsli:raw="The attributes of the field.">필드의 특성입니다.</param>
      <returns vsli:raw="The defined field.">정의된 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" />의 길이가 0입니다.  
또는 
 <paramref name="type" />이 System.Void입니다.  
또는 
이 필드의 부모 클래스에 대한 전체 크기가 지정되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">지정된 이름, 특성, 필드 형식 및 사용자 지정 한정자를 사용하여 형식에 새 필드를 추가합니다.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">필드의 이름입니다. <paramref name="fieldName" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="type" vsli:raw="The type of the field.">필드의 형식</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> 같은 필드에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열입니다.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">
        <see cref="T:Microsoft.VisualC.IsConstModifier" />와 같은 필드에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열입니다.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">필드의 특성입니다.</param>
      <returns vsli:raw="The defined field.">정의된 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" />의 길이가 0입니다.  
또는 
 <paramref name="type" />이 System.Void입니다.  
또는 
이 필드의 부모 클래스에 대한 전체 크기가 지정되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">현재 형식에 대한 제네릭 형식 매개 변수를 정의하고 해당 번호 및 이름을 지정한 후, 해당 제약 조건을 설정하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체 배열을 반환합니다.</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">제네릭 형식 매개 변수의 이름 배열입니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">현재 형식에 대한 제네릭 형식 매개 변수 제약 조건을 정의하는 데 사용할 수 있는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 개체 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">이 형식에 대해 제네릭 형식 매개 변수가 이미 정의되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" />가 <see langword="null" />입니다.  
또는 
<paramref name="names" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" />가 빈 배열인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">PE(이식 가능) 파일의 .sdata 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="data" vsli:raw="The blob of data.">데이터의 BLOB입니다.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">필드에 대한 특성입니다.</param>
      <returns vsli:raw="A field to reference the data.">데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">
        <paramref name="name" />의 길이가 0입니다.  
또는 
데이터의 크기가 0보다 작거나 같습니다. 또는 0x3f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="data" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />이 이전에 호출되었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">지정된 이름 및 메서드 특성을 사용하여 새 메서드를 형식에 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" />의 길이가 0입니다.  
또는 
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">지정된 이름, 메서드 특성 및 호출 규칙을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">메서드의 호출 규칙입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" />의 길이가 0입니다.  
또는 
이 메서드의 부모 형식이 인터페이스이고 이 메서드가 가상(Visual Basic에서 <see langword="Overridable" />)이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 가 <see langword="null" />일 수 있습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">지정된 이름, 메서드 특성, 호출 규칙 및 메서드 서명을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">메서드의 매개 변수 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">새로 정의된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" />의 길이가 0입니다.  
또는 
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">지정된 이름, 메서드 특성, 호출 규칙, 메서드 서명 및 사용자 지정 한정자를 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">메서드의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">새로 추가된 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="name" />의 길이가 0입니다.  
또는 
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual Basic에서 <see langword="Overridable" />)이 아닙니다.  
또는 
<paramref name="parameterTypeRequiredCustomModifiers" /> 또는 <paramref name="parameterTypeOptionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">지정된 이름, 메서드 특성 및 메서드 서명을 사용하여 형식에 새 메서드를 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="returnType" vsli:raw="The return type of the method.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">메서드의 매개 변수 형식입니다.</param>
      <returns vsli:raw="The defined method.">정의된 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" />의 길이가 0입니다.  
또는 
이 메서드의 부모 형식은 인터페이스이고 이 메서드는 가상(Visual basic에서<see langword="Overridable" /> )이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">잠재적으로 다른 이름을 사용하여 지정된 메서드 선언을 구현하는 지정된 메서드 본문을 지정 합니다.</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">사용할 메서드의 본문입니다. 이는 <see langword="MethodBuilder" /> 개체여야 합니다.</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">선언이 사용될 메서드입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" />이(가) 이 클래스에 속하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> 또는 <paramref name="methodInfoDeclaration" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
<paramref name="methodInfoBody" />의 선언 형식이 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />가 나타내는 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">지정된 이름의 중첩 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">
        <paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">이름 및 특성이 지정된 경우 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">중첩된 특성이 지정되지 않았습니다.  
또는 
이 형식이 봉인되어 있습니다.  
또는 
이 형식은 배열입니다.  
또는 
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.  
또는 
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">해당 이름, 특성 및 확장되는 형식이 지정된 경우 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">중첩된 형식이 확장하는 형식입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">중첩된 특성이 지정되지 않았습니다.  
또는 
이 형식이 봉인되어 있습니다.  
또는 
이 형식은 배열입니다.  
또는 
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.  
또는 
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">해당 이름, 특성, 형식의 총 크기 및 해당 형식이 확장하는 형식을 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">형식의 총 크기입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">중첩된 특성이 지정되지 않았습니다.  
또는 
이 형식이 봉인되어 있습니다.  
또는 
이 형식은 배열입니다.  
또는 
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.  
또는 
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">해당 이름, 특성, 해당 형식이 확장하는 형식, 압축 크기를 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">형식의 압축 크기입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">중첩된 특성이 지정되지 않았습니다.  
또는 
이 형식이 봉인되어 있습니다.  
또는 
이 형식은 배열입니다.  
또는 
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.  
또는 
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">해당 이름, 특성, 크기 및 해당 형식이 확장하는 형식을 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">형식의 약식 이름입니다. <paramref name="name" />에는 포함된 null이 있을 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">형식의 압축 크기입니다.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">형식의 총 크기입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">해당 이름, 특성, 해당 형식이 확장하는 형식, 구현하는 인터페이스를 지정하여 중첩된 형식을 정의합니다.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">형식의 약식 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attr" vsli:raw="The attributes of the type.">형식의 특성입니다.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">중첩된 형식이 확장하는 형식입니다.</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">중첩된 형식이 구현하는 인터페이스입니다.</param>
      <returns vsli:raw="The defined nested type.">정의된 중첩 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">중첩된 특성이 지정되지 않았습니다.  
또는 
이 형식이 봉인되어 있습니다.  
또는 
이 형식은 배열입니다.  
또는 
이 형식은 인터페이스지만 중첩된 형식은 인터페이스가 아닙니다.  
또는 
<paramref name="name" />의 길이가 0이거나 1023보다 큽니다.  
또는 
이 작업을 수행하면 현재 어셈블리에 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" />이 중복된 형식이 만들어집니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우  
또는 
<paramref name="interfaces" /> 배열의 요소가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">해당 이름, 메서드가 정의된 DLL의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The method's return type.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">메서드의 네이티브 문자 집합입니다.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">메서드가 정적이 아닙니다.  
또는 
부모 형식이 인터페이스입니다.  
또는 
abstract 메서드입니다.  
또는 
메서드가 이전에 정의되었습니다.  
또는 
<paramref name="name" /> 또는 <paramref name="dllName" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="dllName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">해당 이름, 메서드가 정의된 DLL의 이름, 진입점의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식 및 <see langword="PInvoke" /> 플래그를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL의 진입점 이름입니다.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">메서드의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">메서드의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The method's return type.">메서드의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">메서드 매개 변수의 형식입니다.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">메서드의 네이티브 문자 집합입니다.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">정의된 <see langword="PInvoke" /> 메서드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">메서드가 정적이 아닙니다.  
또는 
부모 형식이 인터페이스입니다.  
또는 
abstract 메서드입니다.  
또는 
메서드가 이전에 정의되었습니다.  
또는 
<paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>해당 이름, 메서드가 정의된 DLL의 이름, 진입점의 이름, 메서드의 특성, 메서드의 호출 규칙, 메서드의 반환 형식, 메서드의 매개 변수 형식, <see langword="PInvoke" /> 플래그, 매개 변수/반환 형식에 대한 사용자 지정 한정자를 지정하여 <see langword="PInvoke" /> 메서드를 정의합니다.</summary>
      <param name="name">
        <see langword="PInvoke" /> 메서드의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="dllName">
        <see langword="PInvoke" /> 메서드가 정의된 DLL의 이름입니다.</param>
      <param name="parameterTypeOptionalCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="nativeCallConv">네이티브 호출 규칙입니다.</param>
      <param name="nativeCharSet">메서드의 네이티브 문자 집합입니다.</param>
      <param name="entryName">DLL의 진입점 이름입니다.</param>
      <param name="attributes">메서드의 특성입니다.</param>
      <param name="callingConvention">메서드의 호출 규칙입니다.</param>
      <param name="returnType">메서드의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers">메서드의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers">메서드의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes">메서드 매개 변수의 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns>정의된 <see langword="PInvoke" /> 메서드를 나타내는 <see cref="T:System.Reflection.Emit.MethodBuilder" />입니다.</returns>
      <exception cref="T:System.ArgumentException">메서드가 정적이 아닙니다.  
또는 
부모 형식이 인터페이스입니다.  
또는 
abstract 메서드입니다.  
또는 
메서드가 이전에 정의되었습니다.  
또는 
<paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />의 길이가 0입니다.  
또는 
<paramref name="parameterTypeRequiredCustomModifiers" /> 또는 <paramref name="parameterTypeOptionalCustomModifiers" />의 크기가 <paramref name="parameterTypes" />의 크기와 같지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> 또는 <paramref name="entryName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">지정된 이름, 특성, 호출 규칙 및 속성 서명을 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">속성의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">속성 접근자의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the property.">속성의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">속성의 매개 변수 형식입니다.</param>
      <returns vsli:raw="The defined property.">정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">지정된 이름, 호출 규칙, 속성 서명 및 사용자 지정 한정자를 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">속성의 특성입니다.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">속성 접근자의 호출 규칙입니다.</param>
      <param name="returnType" vsli:raw="The return type of the property.">속성의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">속성의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">속성의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">속성의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="The defined property.">정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">지정된 이름 및 속성 서명을 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">속성의 특성입니다.</param>
      <param name="returnType" vsli:raw="The return type of the property.">속성의 반환 형식입니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">속성의 매개 변수 형식입니다.</param>
      <returns vsli:raw="The defined property.">정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">지정된 이름, 속성 서명 및 사용자 지정 한정자를 사용하여 형식에 새 속성을 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">속성의 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">속성의 특성입니다.</param>
      <param name="returnType" vsli:raw="The return type of the property.">속성의 반환 형식입니다.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">속성의 반환 형식에 대한 필수 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 필수 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">속성의 반환 형식에 대한 선택적 사용자 지정 한정자를 나타내는 형식의 배열(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />)입니다. 반환 형식에 선택적 사용자 지정 한정자가 없으면 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">속성의 매개 변수 형식입니다.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수에 필요한 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 필수 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">형식 배열의 배열입니다. 각 형식의 배열은 해당 매개 변수의 선택적 사용자 지정 한정자를 나타냅니다(예: <see cref="T:System.Runtime.CompilerServices.IsConst" />). 특정 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다. 매개 변수에 선택적 사용자 지정 한정자가 없는 경우 형식 배열 대신 <see langword="null" />을 지정합니다.</param>
      <returns vsli:raw="The defined property.">정의된 속성입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" />의 길이가 0입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameterTypes" /> 배열의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">이 형식에 대한 이니셜라이저를 정의합니다.</summary>
      <returns vsli:raw="Returns a type initializer.">형식 이니셜라이저를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">포함하는 형식은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 만든 것입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">PE(이식 가능) 파일의 <see langword=".sdata" /> 섹션에서 초기화되지 않은 데이터 필드를 정의합니다.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">데이터를 참조하는 데 사용되는 이름입니다. <paramref name="name" />에는 내장된 null이 포함될 수 없습니다.</param>
      <param name="size" vsli:raw="The size of the data field.">데이터 필드의 크기입니다.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">필드에 대한 특성입니다.</param>
      <returns vsli:raw="A field to reference the data.">데이터를 참조할 필드입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" />의 길이가 0입니다.  
또는 
 <paramref name="size" />가 0보다 작거나 같습니다. 또는 0x003f0000보다 크거나 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">해당 형식의 전체 경로를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">읽기 전용입니다. 해당 형식의 전체 경로를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">현재 제네릭 형식 매개 변수의 공 분산과 특수 제약 조건을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">현재 제네릭 형식 매개 변수의 공 분산 및 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">매개 변수를 선언한 제네릭 형식의 형식 매개 변수 목록에서 형식 매개 변수의 위치를 가져옵니다.</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 매개 변수를 나타내는 경우, 매개 변수를 선언한 제네릭 형식의 형식 매개 변수 목록에서 형식 매개 변수의 위치이며, 나타내지 않는 경우에는 정의되어 있지 않습니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">제네릭 형식 정의의 지정된 생성자에 해당하는 생성된 특정 제네릭 형식의 생성자를 반환합니다.</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">해당 생성자가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">
        <paramref name="type" />의 제네릭 형식 정의에 있는 생성자로, 반환할 <paramref name="type" />의 생성자를 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />의 제네릭 형식 정의에 속하는 생성자를 지정하는 <paramref name="constructor" />에 해당하는 <paramref name="type" />의 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />이 제네릭 형식을 나타내지 않습니다.  
또는 
 <paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우  
또는 
<paramref name="constructor" />의 선언 형식이 제네릭 형식 정의가 아닙니다.  
또는 
<paramref name="constructor" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">지정된 대로 이 클래스에 대해 정의된 public 또는 non-public 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">이 클래스에 대해 정의된 지정된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체 배열을 반환합니다. 생성자가 정의되지 않은 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">이 형식에 대해 정의된 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">이 형식의 모든 사용자 지정 특성을 나타내는 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" />을 사용하여 형식을 검색하고 반환된 <see cref="T:System.Type" />에 대해 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />를 호출합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">지정된 형식에 할당할 수 있는 현재 형식의 모든 사용자 지정 특성을 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="An array of custom attributes defined on the current type.">현재 형식에 정의된 사용자 지정 특성의 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" /> 을 사용하여 형식을 검색하고 반환된 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 에 대해 <see cref="T:System.Type" />를 호출합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">형식은 기본 런타임 시스템에서 제공하는 형식이어야 합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">이 메서드를 호출하면 <see cref="T:System.NotSupportedException" />이 항상 throw됩니다.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">이 메서드는 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">지정된 이름의 이벤트를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the event to search for.">검색할 이벤트의 이름입니다.</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">검색을 제한하는 <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">지정한 이름을 가진 이 형식이 선언하거나 상속한 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체이거나, 일치 항목이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">이 형식에 의해 선언되거나 상속되는 public 이벤트를 반환합니다.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">이 형식에 의해 선언되거나 상속되는 public 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. public 이벤트가 없는 경우 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">이 형식으로 선언되는 public 이벤트 및 public이 아닌 이벤트를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">검색을 제한하는 <see cref="T:System.Reflection.BindingFlags" /> 값의 비트 조합입니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">이 형식에 의해 선언되거나 상속되는 이벤트 중 지정된 바인딩 플래그와 일치하는 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열을 반환합니다. 일치하는 이벤트가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">지정된 이름에 지정된 필드를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the field to get.">가져올 필드의 이름입니다.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">public 또는 non-public 한정자와 지정된 이름을 사용하여 이 형식에 의해 선언되거나 상속된 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체를 반환합니다. 일치하는 항목이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">제네릭 형식 정의의 지정된 필드에 해당하는 생성된 특정 제네릭 형식의 필드를 반환합니다.</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">해당 필드가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">
        <paramref name="type" /> 제네릭 형식 정의에 있는 필드로, 반환할 <paramref name="type" /> 필드를 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />의 제네릭 형식 정의에 속하는 필드를 지정하는 <paramref name="field" />에 해당하는 <paramref name="type" />의 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />이 제네릭 형식을 나타내지 않습니다.  
또는 
 <paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우  
또는 
<paramref name="field" />의 선언 형식이 제네릭 형식 정의가 아닙니다.  
또는 
<paramref name="field" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">이 형식으로 선언되는 public 필드 및 public이 아닌 필드를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" /> 개체 배열을 반환합니다. 필드가 없으면 지정된 대로 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">제네릭 형식 정의의 형식 매개 변수나 제네릭 형식의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">
        <see cref="T:System.Type" /> 개체의 배열입니다. 배열의 요소는 제네릭 형식의 형식 인수 또는 제네릭 형식 정의의 형식 매개 변수를 나타냅니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">현재 형식을 가져올 수 없는 제네릭 형식 정의를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">현재 형식을 가져올 수 있는 제네릭 형식 정의를 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">현재 형식은 제네릭이 아닙니다. 즉, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />이 <see langword="false" />를 반환합니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">지정된 인터페이스 이름과 일치하는 정규화된 이름을 사용하여 이 클래스에 의해 (직접 또는 간접적으로) 구현된 인터페이스를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the interface.">인터페이스의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />이면 검색은 대/소문자를 구분합니다. <see langword="false" />이면 검색은 대/소문자를 구분하지 않습니다.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다. 이름이 일치하는 인터페이스를 찾을 수 없으면 null을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">요청된 인터페이스에 대한 인터페이스 매핑을 반환합니다.</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">매핑을 검색해야 할 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="Returns the requested interface mapping.">요청된 인터페이스 매핑을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">이 형식과 기본 형식에 대해 구현된 모든 인터페이스의 배열을 반환합니다.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">구현된 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다. 정의된 것이 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the member.">멤버의 이름입니다.</param>
      <param name="type" vsli:raw="The type of the member to return.">반환할 멤버의 형식입니다.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 멤버만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 메서드의 멤버를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">이 형식에 의해 선언되거나 상속되는 public 및 non-public 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체 배열을 반환합니다. 일치하는 멤버가 없으면 빈 배열이 반환됩니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">제네릭 형식 정의의 지정된 메서드에 해당하는 생성된 특정 제네릭 형식의 메서드를 반환합니다.</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">해당 메서드가 반환되는 생성된 제네릭 형식입니다.</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">
        <paramref name="type" />의 제네릭 형식 정의에 있는 메서드로, 반환할 <paramref name="type" />의 메서드를 지정합니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />의 제네릭 형식 정의에 속하는 메서드를 지정하는 <paramref name="method" />에 해당하는 <paramref name="type" />의 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" />가 제네릭 메서드 정의가 아닌 제네릭 메서드입니다.  
또는 
 <paramref name="type" />이 제네릭 형식을 나타내지 않습니다.  
또는 
 <paramref name="type" /> 이 <see cref="T:System.Reflection.Emit.TypeBuilder" />형식이 아닌 경우  
또는 
<paramref name="method" />의 선언 형식이 제네릭 형식 정의가 아닙니다.  
또는 
<paramref name="method" />의 선언 형식이 <paramref name="type" />의 제네릭 형식 정의가 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 모든 메서드를 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 public이 아닌 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체의 배열을 반환하고, 그렇지 않은 경우 public 메서드만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">이 형식에 의해 선언되는 public 중첩 형식 및 public이 아닌 중첩 형식을 반환합니다.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">가져올 중첩 형식의 이름이 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.  
또는 
public 메서드에 대해 대소문자 구분 검색을 수행하는 경우 0입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">지정된 요구 사항과 일치하는 중첩 형식을 나타내는 <see cref="T:System.Type" /> 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">이 형식에 의해 선언되거나 상속되는 public 및 public이 아닌 중첩된 형식을 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이는 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등에서처럼 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">지정된 바인딩 제약 조건과 일치하는 현재 <see cref="T:System.Type" /> 내에 중첩된 모든 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.  
현재 <see cref="T:System.Type" /> 내에 중첩된 형식이 없거나 중첩된 형식 중 해당 바인딩 제약 조건과 일치하는 형식이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">지정된 대로 이 형식에 의해 선언되거나 상속되는 public 및 non-public 속성을 모두 반환합니다.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">이 호출의 특성입니다. 이것은 <see langword="InvokeMethod" />, <see langword="NonPublic" /> 등과 같은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그여야 합니다.</param>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">
        <paramref name="nonPublic" />이 사용될 경우 이 형식에 대해 정의된 public 및 non-public 속성을 나타내는 <see langword="PropertyInfo" /> 개체의 배열을 반환하고, 사용되지 않을 경우 public 속성만 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">이 메서드는 불완전한 형식에 대해 구현되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">이 형식의 GUID를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">읽기 전용입니다. 이 형식의 GUID를 검색합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">지정된 멤버를 호출합니다. 호출해야 할 메서드에 액세스할 수 있어야 하며 이 메서드가 지정된 바인더 및 호출 특성의 제약 조건 하에서 지정된 인수 목록과 가장 구체적으로 일치하는 항목을 제공해야 합니다.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">호출할 멤버의 이름입니다. 이 항목은 생성자, 메서드, 속성 또는 필드일 수 있습니다. 적합한 호출 특성을 지정해야 합니다. 빈 문자열을 멤버의 이름으로 전달하여 클래스의 기본 멤버를 호출할 수 있습니다.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">호출 특성입니다. 이 항목은 <see langword="BindingFlags" />의 비트 플래그여야 합니다.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. 바인더가 <see langword="null" />이면 기본 바인더가 사용됩니다. <see cref="T:System.Reflection.Binder" />을 참조하십시오.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">지정한 멤버를 호출할 개체입니다. 멤버가 정적이면 이 매개 변수가 무시됩니다.</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">인수 목록입니다. 이 항목은 호출해야 할 멤버의 매개 변수 개수, 순서 및 형식을 포함하는 개체 배열입니다. 매개 변수가 없으면 이 값이 null이어야 합니다.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">호출할 멤버의 인수와 연결된 특성을 나타내는 요소를 가진 <paramref name="args" />와 길이가 동일한 배열입니다. 메타데이터에 있는 매개 변수에 특성이 연결되어 있습니다. 이러한 항목은 다양한 상호 운용성 서비스에 사용됩니다. 자세한 내용은 메타데이터 사양을 참조하세요.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">형식의 강제 변환을 제어하는 데 사용되는 <see langword="CultureInfo" />의 인스턴스입니다. 이 매개 변수가 null이면 현재 스레드에 대한 <see langword="CultureInfo" />가 사용됩니다. 예를 들어 1,000은 각 문화권마다 다르게 표현되므로 1,000을 나타내는 문자열을 배정도 값으로 변환하려면 이 매개 변수가 필요합니다.</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 배열의 각 매개 변수는 <paramref name="args" /> 배열의 해당 요소에 있는 값을 가져옵니다. <paramref name="args" />의 길이가 <paramref name="namedParameters" />의 길이보다 크면 남은 인수 값이 순서대로 전달됩니다.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">호출된 멤버의 반환 값을 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">지정된 <see cref="T:System.Type" />을 이 개체에 할당할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="c" vsli:raw="The object to test.">테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> 매개 변수와 현재 형식이 동일한 형식을 나타내는 경우, 현재 형식이 <paramref name="c" />의 상속 계층 구조 안에 있는 경우, 또는 현재 형식이 <paramref name="c" />에서 지원하는 인터페이스인 경우 <see langword="true" />입니다. 이러한 조건 중 올바른 조건이 없거나 <paramref name="c" />가 <see langword="null" />이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 생성된 제네릭 형식을 나타내면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">현재 동적 형식이 만들어졌는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드가 호출되었으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">사용자 지정 특성이 현재 형식에 적용되는지 여부를 결정합니다.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">검색할 특성의 형식입니다. 이 형식에 할당할 수 있는 특성만 반환됩니다.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">이 멤버의 상속 체인을 검색하여 특성을 찾을지 여부를 지정합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="attributeType" />의 하나 이상의 인스턴스 또는 <paramref name="attributeType" />에서 파생된 특성이 이 형식에 정의되어 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">이 메서드는 현재 불완전한 형식에 대해 지원되지 않습니다. <see cref="M:System.Type.GetType" />을 사용하여 형식을 검색하고 반환된 <see cref="T:System.Type" />에 대해 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />를 호출합니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">
        <paramref name="attributeType" />이 정의되어 있지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">현재 형식이 제네릭 형식 매개 변수인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 매개 변수를 나타내면 <see langword="true" />이고, 나타내지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">현재 형식이 제네릭 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 나타내는 형식이 제네릭이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">현재 <see cref="T:System.Reflection.Emit.TypeBuilder" />가 다른 제네릭 형식을 생성하는 데 사용될 수 있는 제네릭 형식 정의를 나타내는지를 가리키는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.TypeBuilder" /> 개체가 제네릭 형식 정의를 나타내면 <see langword="true" />이고, 나타내지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">현재 형식이 보안에 중요한 형식이거나 보안 안전에 중요한 형식이어서 중요한 작업을 수행할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">현재 형식이 보안에 중요한 형식이거나 보안 안전에 중요한 형식인 경우 <see langword="true" />이고 투명 형식인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">현재 형식이 보안 안전에 중요한 형식인지 즉, 중요한 작업을 수행할 수 있고 투명 코드로 액세스할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">현재 형식이 보안 안전에 중요한 형식인 경우 <see langword="true" />이고 보안에 중요한 형식이거나 투명 형식인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">현재 형식이 투명하여 중요한 작업을 수행할 수 없는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 보안 투명인 경우 <see langword="true" />이고, 보안 투명이 아닌 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">현재 동적 형식이 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 메서드를 호출하여 생성되지 않았습니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">이 형식이 지정된 형식에서 파생되었는지 여부를 확인합니다.</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">확인할 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">읽기 전용입니다. 이 형식이 <paramref name="c" /> 형식과 동일하거나 <paramref name="c" /> 형식의 하위 형식이면 <see langword="true" />를 반환하고, 동일하지 않거나 하위 형식이 아니면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">해당 요소 형식이 하한이 0인 현재 형식인 1차원 배열 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">지정된 차수의 현재 형식 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">배열의 차수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" />가 유효한 배열 차원이 아닙니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">
        <see langword="ref" /> 매개 변수(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">
        <see langword="ref" /> 매개 변수(Visual Basic의 경우 <see langword="ByRef" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">형식 배열의 요소를 현재 제네릭 형식 정의의 형식 매개 변수로 대체하며 생성된 결과 형식을 반환합니다.</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">현재 제네릭 형식 정의의 형식 매개 변수로 대체할 형식 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">
        <see cref="T:System.Type" />의 요소를 현재 제네릭 형식의 형식 매개 변수로 대체하여 생성된 형식을 나타내는 <paramref name="typeArguments" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">현재 형식이 제네릭 형식의 정의를 나타내지 않습니다. 즉, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />이 <see langword="false" />를 반환합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" />가 <see langword="null" />인 경우  
또는 
<paramref name="typeArguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" />의 요소에 대한 <see cref="P:System.Type.Module" /> 속성이 <see langword="null" />입니다.  
또는 
<paramref name="typeArguments" />의 임의 요소 모듈의 <see cref="P:System.Reflection.Module.Assembly" /> 속성이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">현재 형식에 대한 관리되지 않는 포인터의 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">현재 형식에 대한 관리되지 않는 포인터의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">이 형식 정의를 포함하는 동적 모듈을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">읽기 전용입니다. 이 형식 정의를 포함하는 동적 모듈을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">이 형식의 이름을 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">읽기 전용입니다. 이 형식의 <see cref="T:System.String" /> 이름을 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">이 <see langword="TypeBuilder" />가 정의되어 있는 네임스페이스를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">읽기 전용입니다. 이 <see langword="TypeBuilder" /> 가 정의되어 있는 네임스페이스를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">이 형식의 압축 크기를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">읽기 전용입니다. 이 형식의 압축 크기를 검색합니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">이 형식은 획득하는 데 사용한 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">읽기 전용입니다. 이 형식은 획득하는 데 사용한 형식입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">지정된 사용자 지정 특성 blob을 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">사용자 지정 특성에 대한 생성자입니다.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">특성을 나타내는 바이트 blob입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 또는 <paramref name="binaryAttribute" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">사용자 지정 특성 작성기를 사용하여 사용자 지정 특성을 설정합니다.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">사용자 지정 특성을 정의하는 도우미 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">현재 생성 중인 형식의 기본 형식을 설정합니다.</summary>
      <param name="parent" vsli:raw="The new base type.">새 기본 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />을 사용하여 이전에 형식을 만들었습니다.  
또는 
 <paramref name="parent" /><see langword="null" />이고, 현재 인스턴스가 특성에 <see cref="F:System.Reflection.TypeAttributes.Abstract" />가 포함되지 않은 인터페이스를 나타냅니다.  
또는 
현재 동적 형식에 대해 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 속성은 <see langword="true" />지만 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 속성은 <see langword="false" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" />가 인터페이스입니다. 이 예외 상태는 .NET Framework 버전 2.0에 새로 추가되었습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">형식의 전체 크기를 검색합니다.</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">읽기 전용입니다. 이 형식의 전체 크기를 검색 합니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">네임스페이스를 제외한 형식의 이름을 반환합니다.</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">읽기 전용입니다. 네임스페이스를 제외한 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">동적 모듈에서 지원되지 않습니다.</summary>
      <returns vsli:raw="Read-only.">읽기 전용입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">동적 모듈에서 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">이 <see langword="TypeBuilder" />에 대한 내부 시스템 형식을 반환합니다.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">읽기 전용입니다. 내부 시스템 형식을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">이 형식은 열거형이지만 기본 시스템 형식이 없습니다.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">형식에 대한 총 크기가 지정되지 않았음을 나타냅니다.</summary>
    </member>
  </members>
</doc>
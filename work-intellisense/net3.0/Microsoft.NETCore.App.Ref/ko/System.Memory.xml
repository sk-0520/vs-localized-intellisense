<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary vsli:raw="Represents a heap-based, array-backed output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">다음에 해당하는 힙 기반, 배열 기반 출력 싱크를 나타냅니다. <typeparam name="T" /> 데이터를 쓸 수 있습니다.</summary>
      <typeparam name="T" vsli:raw="The type of the items in this &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; instance.">이 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 인스턴스에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with the default initial capacity.">기본 초기 용량을 사용하여 데이터를 쓸 수 있는 <see cref="T:System.Buffers.ArrayBufferWriter`1" />의 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with a specified initial capacity.">지정된 초기 용량을 사용하여 데이터를 쓸 수 있는 <see cref="T:System.Buffers.ArrayBufferWriter`1" />의 인스턴스를 만듭니다.</summary>
      <param name="initialCapacity" vsli:raw="The minimum capacity with which to initialize the underlying buffer.">기본 버퍼를 초기화하는 데 필요한 최소 용량입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;initialCapacity&quot; /&gt; is less than or equal to 0.">
        <paramref name="initialCapacity" />가 0보다 작거나 같은 경우</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt;/&lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <paramref name="count" /> 항목이 출력 <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />에 작성되었음을 <see cref="T:System.Buffers.IBufferWriter`1" />에 알립니다.</summary>
      <param name="count" vsli:raw="The number of items written.">기록된 항목의 개수입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative.">
        <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method call attempts to advance past the end of the underlying buffer.">메서드 호출은 기본 버퍼의 끝을 지나서 이동하려고 합니다.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary vsli:raw="Gets the total amount of space within the underlying buffer.">기본 버퍼 내의 총 공간 크기를 가져옵니다.</summary>
      <returns vsli:raw="The total capacity of the underlying buffer.">기본 버퍼의 총 용량입니다.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary vsli:raw="Clears the data written to the underlying buffer.">기본 버퍼에 기록된 데이터를 지웁니다.</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary vsli:raw="Gets the amount of available space that can be written to without forcing the underlying buffer to grow.">기본 버퍼를 강제로 늘리지 않고 쓸 수 있는 사용 가능한 공간의 크기를 가져옵니다.</summary>
      <returns vsli:raw="The space available for writing without forcing the underlying buffer to grow.">기본 버퍼를 강제로 증가 시 키 지 않고 쓸 수 있는 공간입니다.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the length specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;.">
        <paramref name="sizeHint" />에 의해 지정된 길이 이상에 작성할 <see cref="T:System.Memory`1" />를 반환합니다.</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" />의 최소 요청 길이입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; whose length is at least &lt;paramref name=&quot;sizeHint&quot; /&gt;.  If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">길이가 <paramref name="sizeHint" /> 이상인 <see cref="T:System.Memory`1" />입니다.  <paramref name="sizeHint" />가 제공되지 않거나 0과 같으면 비어 있지 않은 일부 버퍼가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least a specified length.">지정된 길이 이상에 작성할 <see cref="T:System.Span`1" />을 반환합니다.</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" />의 최소 요청 길이입니다.</param>
      <returns vsli:raw="A span of at least &lt;paramref name=&quot;sizeHint&quot; /&gt; in length. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">길이가 <paramref name="sizeHint" /> 이상의 범위입니다. <paramref name="sizeHint" />가 제공되지 않거나 0과 같으면 비어 있지 않은 일부 버퍼가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" />가 음수입니다.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary vsli:raw="Gets the amount of data written to the underlying buffer.">기본 버퍼에 기록된 데이터의 양을 가져옵니다.</summary>
      <returns vsli:raw="The amount of data written to the underlying buffer.">내부 버퍼에 기록 되는 데이터의 양입니다.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; that contains the data written to the underlying buffer so far.">지금까지 기본 버퍼에 기록된 데이터를 포함하는 <see cref="T:System.ReadOnlyMemory`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The data written to the underlying buffer.">내부 버퍼에 기록 되는 데이터입니다.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; that contains the data written to the underlying buffer so far.">지금까지 기본 버퍼에 기록된 데이터를 포함하는 <see cref="T:System.ReadOnlySpan`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The data written to the underlying buffer.">내부 버퍼에 기록 되는 데이터입니다.</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary vsli:raw="Reads bytes as primitives with specific endianness.">특정 endian을 사용하여 기본 형식으로 바이트를 읽습니다.</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span to read.">읽을 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The big endian value.">Big endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <returns vsli:raw="The little endian value.">Little endian 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Byte&quot; /&gt; value, which effectively does nothing for a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">지정된 <see cref="T:System.Byte" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다. 그러면 <see cref="T:System.Byte" />에 대해 아무 작업도 수행하지 않습니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The passed-in value, unmodified.">수정되지 않은 전달된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int16&quot; /&gt; value.">지정된 <see cref="T:System.Int16" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">지정된 <see cref="T:System.Int32" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">지정된 <see cref="T:System.Int64" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.SByte&quot; /&gt; value, which effectively does nothing for an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">지정된 <see cref="T:System.SByte" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다. 그러면 <see cref="T:System.SByte" />에 대해 아무 작업도 수행하지 않습니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The passed-in value, unmodified.">수정되지 않은 전달된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value.">지정된 <see cref="T:System.UInt16" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value.">지정된 <see cref="T:System.UInt32" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value.">지정된 <see cref="T:System.UInt64" /> 값의 endian 스왑을 수행하여 기본 값을 역순으로 바꿉니다.</summary>
      <param name="value" vsli:raw="The value to reverse.">역순으로 바꿀 값입니다.</param>
      <returns vsli:raw="The reversed value.">역순된 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int16" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int16" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int16" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int32" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int32" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int32" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int64" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.Int64" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int64" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt16" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt16" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt16" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt32" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt32" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt32" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 big endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt64" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">바이트의 읽기 전용 범위부터 시작하여 <see cref="T:System.UInt64" />을 little endian으로 읽습니다.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">읽을 바이트의 읽기 전용 범위입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">이 메서드가 반환할 때 바이트의 읽기 전용 범위에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt64" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int16" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int16" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int32" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int32" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int64" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.Int64" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt16" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt16" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt32" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt32" />을 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt64" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">범위가 <see cref="T:System.UInt64" />를 포함할 정도로 충분히 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.Int64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt16" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt16" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt16" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt32" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt32" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt32" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt64" />을 big endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">값을 Big endian으로 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt64" />.를 포함할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt64" />을 little endian으로 바이트 범위에 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">little endian으로 값을 쓸 바이트 범위입니다.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">바이트 범위에 쓸 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <see cref="T:System.UInt64" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary vsli:raw="Provides extension methods for &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />을 지정된 <see cref="T:System.Span`1" />에 복사합니다.</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">소스 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
      <param name="destination" vsli:raw="The destination &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">대상 <see cref="T:System.Span`1" />입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">에 있는 <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary vsli:raw="Returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 처음으로 나오는 <paramref name="item" />의 위치를 반환합니다.</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">소스 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
      <param name="value" vsli:raw="The item to find in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 찾을 항목입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">에 있는 <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
      <returns vsli:raw="An object whose &lt;see cref=&quot;M:System.SequencePosition.GetInteger&quot; /&gt; method returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt;, or an object whose &lt;see langword=&quot;Nullable&amp;lt;SequencePosition&amp;gt;.HasValue&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; .">
        <see cref="M:System.SequencePosition.GetInteger" /> 메서드가 처음으로 나오는 <paramref name="item" />의 위치를 반환하는 개체 또는 <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> 속성이 <see langword="false" />인 개체입니다.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to an array.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />을 배열로 변환합니다.</summary>
      <param name="sequence" vsli:raw="The read-only sequence to convert to an array.">배열로 변환할 읽기 전용 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">에 있는 <see cref="T:System.Buffers.ReadOnlySequence`1" />항목의 형식입니다.</typeparam>
      <returns vsli:raw="An array containing the data in the current read-only sequence.">현재 읽기 전용 시퀀스에서 데이터를 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Writes the contents of &lt;paramref name=&quot;value&quot; /&gt; to &lt;paramref name=&quot;writer&quot; /&gt;.">
        <paramref name="value" />라는 콘텐츠를 <paramref name="writer" />로 작성합니다.</summary>
      <param name="writer" vsli:raw="The buffer writer to which to write &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />를 작성할 버퍼 기록기입니다.</param>
      <param name="value" vsli:raw="The read-only span to be written to &lt;paramref name=&quot;writer&quot; /&gt;.">
        <paramref name="writer" />에 작성될 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">에 있는 <see cref="T:System.ReadOnlySpan`1" />항목의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is shorter than &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="writer" />이 <paramref name="value" />보다 짧습니다.</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary vsli:raw="Represents an output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">
        <typeparamref name="T" /> 데이터를 쓸 수 있는 출력 싱크를 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">에 있는 <see cref="T:System.Buffers.IBufferWriter`1" />항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; data items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <paramref name="count" /> 데이터 항목이 <see cref="T:System.Span`1" /> 또는 <see cref="T:System.Memory`1" /> 출력에 작성되었음을 <see cref="T:System.Buffers.IBufferWriter`1" />에 알립니다.</summary>
      <param name="count" vsli:raw="The number of data items written to the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> 또는 <see cref="T:System.Memory`1" />에 작성된 데이터 항목의 수입니다.</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">요청된 크기(<paramref name="sizeHint" />로 지정됨) 이상인 작성할 <see cref="T:System.Memory`1" />을 반환합니다.</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;. If 0, a non-empty buffer is returned.">반환되는 <see cref="T:System.Memory`1" />의 최소 길이입니다. 0인 경우 비어 있지 않은 버퍼가 반환됩니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">크기가 <paramref name="sizeHint" /> 이상인 <see cref="T:System.Memory`1" />입니다. <paramref name="sizeHint" />가 0인 경우 비어 있지 않은 버퍼를 반환합니다.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The requested buffer size is not available.">요청된 버퍼 크기를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">요청된 크기(<paramref name="sizeHint" />로 지정됨) 이상인 작성할 <see cref="T:System.Span`1" />을 반환합니다.</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Span`1&quot; /&gt;. If 0, a non-empty buffer is returned.">반환되는 <see cref="T:System.Span`1" />의 최소 길이입니다. 0인 경우 비어 있지 않은 버퍼가 반환됩니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">크기가 <paramref name="sizeHint" /> 이상인 <see cref="T:System.Span`1" />입니다. <paramref name="sizeHint" />가 0인 경우 비어 있지 않은 버퍼를 반환합니다.</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary vsli:raw="Represents a pool of memory blocks.">메모리 블록의 풀을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of the items in the memory pool.">메모리 풀에 있는 항목의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary vsli:raw="Constructs a new instance of a memory pool.">메모리 풀의 인스턴스를 새로 만듭니다.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary vsli:raw="Frees all resources used by the memory pool.">메모리 풀에서 사용된 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary vsli:raw="Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.">메모리 풀에서 사용된 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 로 설정합니다.</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary vsli:raw="Gets the maximum buffer size supported by this pool.">이 풀에서 지원되는 최대 버퍼 크기를 가져옵니다.</summary>
      <returns vsli:raw="The maximum buffer size supported by this pool.">이 풀에서 지 원하는 최대 버퍼 크기입니다.</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary vsli:raw="Returns a memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">최소한 T의 <paramref name="minBufferSize" /> 요소를 보유할 수 있는 메모리 블록을 반환합니다.</summary>
      <param name="minBufferSize" vsli:raw="The minimum number of elements of &lt;typeparamref name=&quot;T&quot; /&gt; that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.">메모리 풀에서 보유할 수 있는 <typeparamref name="T" /> 요소의 최소 수입니다. -1 값은 풀의 기본 크기로 설정된 메모리 풀을 반환합니다.</param>
      <returns vsli:raw="A memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">최소한 T의 <paramref name="minBufferSize" /> 요소를 보유할 수 있는 메모리 블록입니다.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary vsli:raw="Gets a singleton instance of a memory pool based on arrays.">배열을 기반으로 하는 메모리 풀의 싱글톤 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="A singleton instance of a memory pool.">메모리 풀의 singleton 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>인접하지 않은 여러 버퍼에 포함된 입력을 처리하도록 지원하는 범위 기반 작업에서 반환될 수 있는 값을 정의합니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>입력은 최대한 대상 버퍼에 맞게 부분적으로 처리됩니다. 호출자는 대상 버퍼를 확대하고, 버퍼를 적절하게 분할하고, 다시 시도할 수 있습니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>전체 입력 버퍼가 처리되면 작업이 완료됩니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>처리할 수 없는 잘못된 바이트가 포함된 입력입니다. 입력이 부분적으로 처리되는 경우 대상에는 일부 결과가 포함됩니다. 이렇게 하면 입력에 추가된 추가 데이터로 인해 잘못된 시퀀스가 유효해질 수 없게 됩니다.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>입력은 소비될 수 있는 입력의 유효한 최신 청크까지 부분적으로 처리됩니다. 호출자는 더 많은 데이터를 사용하여 처리되지 않은 나머지 입력을 연결하고, 버퍼를 적절하게 분할하고, 다시 시도할 수 있습니다.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary vsli:raw="Represents a sequence that can read a sequential series of &lt;typeparamref name=&quot;T&quot; /&gt;.">여러 개의 <typeparamref name="T" />를 순차적으로 읽을 수 있는 시퀀스를 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from the &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="array" vsli:raw="The array from which to create a read-only sequence.">읽기 전용 시퀀스를 만들 원본 배열입니다.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a section of an array.">배열 섹션에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="array" vsli:raw="The array from which to create the read-only sequence.">읽기 전용 시퀀스를 만들 원본 배열입니다.</param>
      <param name="start" vsli:raw="The zero-based index of the first element in the array to include in the read-only sequence.">읽기 전용 시퀀스에 포함할 배열 중 첫 번째 요소의 인덱스(0부터 시작)입니다.</param>
      <param name="length" vsli:raw="The number of elements to include in the read-only sequence.">읽기 전용 시퀀스에 포함할 요소 수입니다.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a linked memory list represented by start and end segments and the corresponding indexes in them.">시작과 끝 세그먼트 및 해당하는 인덱스에 의해 표시된 연결 메모리 목록에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="startSegment" vsli:raw="The initial node of the linked memory list." />
      <param name="startIndex" vsli:raw="The position to the start of the sequence inside &lt;paramref name=&quot;startSegment&quot; /&gt;." />
      <param name="endSegment" vsli:raw="The final node of the linked memory list." />
      <param name="endIndex" vsli:raw="The position to the end of the sequence inside &lt;paramref name=&quot;endSegment&quot; /&gt;." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" />에서 <see cref="T:System.Buffers.ReadOnlySequence`1" />의 인스턴스를 만듭니다.</summary>
      <param name="memory" vsli:raw="A read-only block of memory of elements of type &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">빈 <see cref="T:System.Buffers.ReadOnlySequence`1" />을 반환합니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary vsli:raw="Gets the position at the end of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 끝에 배치합니다.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary vsli:raw="Represents an enumerator over a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary vsli:raw="Initializes the enumerator.">열거자를 초기화합니다.</summary>
      <param name="sequence" vsli:raw="The &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to enumerate.">열거할 <see cref="T:System.Buffers.ReadOnlySequence`1" />입니다.</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">현재 <see cref="T:System.ReadOnlyMemory`1" />를 가져옵니다.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">현재 <see cref="T:System.ReadOnlyMemory`1" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary vsli:raw="Moves to the next &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 다음 <see cref="T:System.ReadOnlyMemory`1" />로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the sequence has been reached.">열거자가 다음 항목으로 성공적으로 이동한 경우 <see langword="true" />이며, 시퀀스의 끝에 도달한 경우에는 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; from the first segment.">첫 번째 세그먼트에서 <see cref="T:System.ReadOnlyMemory`1" />을 가져옵니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; from the first segment.">첫 번째 세그먼트에서 <see cref="T:System.ReadOnlySpan`1" />을 가져옵니다.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 반환합니다.</summary>
      <returns vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대한 열거자를 반환합니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at an &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">시퀀스의 시작에서 <paramref name="offset" />의 <see cref="T:System.SequencePosition" />을 새로 반환합니다.</summary>
      <param name="offset" vsli:raw="The offset from the start of the sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; starting at the specified offset from the &lt;paramref name=&quot;origin&quot; /&gt; position.">
        <paramref name="origin" />에서 <see cref="T:System.SequencePosition" />의 <paramref name="offset" />을 새로 반환합니다.</summary>
      <param name="offset" vsli:raw="The offset from the specified &lt;paramref name=&quot;origin&quot; /&gt; sequence position." />
      <param name="origin" vsli:raw="A sequence position representing the point from which to initiate the offset." />
      <returns vsli:raw="An object representing the sequence position that starts at the &lt;paramref name=&quot;offset&quot; /&gt; position of the specified &lt;paramref name=&quot;origin&quot; /&gt; position object.">원래 개체의 <paramref name="offset" /> 위치에서 시작하는 새 개체입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; is empty.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; contains a single &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; segment.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />에 <see cref="T:System.ReadOnlyMemory`1" /> 단일 세그먼트가 포함되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />읽기 전용 시퀀스가 비어 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary vsli:raw="Gets the length of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 길이를 가져옵니다.</summary>
      <returns vsli:raw="The length of the read-only sequence.">읽기 전용 시퀀스의 길이입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The length of the slice.">조각의 길이입니다.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">
        <paramref name="start" /> 인덱스에서 시작하는 현재 범위에서 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="end" vsli:raw="The end (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">조각의 끝(제외) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">현재 읽기 전용 시퀀스에서 <paramref name="end" /> 시퀀스 위치를 포함하지 않고 <paramref name="start" /> 인덱스의 항목으로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified index and continuing to the end of the read-only sequence.">지정된 인덱스에서 시작하여 읽기 전용 시퀀스의 끝까지 이어지도록 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The start index at which to begin this slice.">이 조각을 시작할 시작 인덱스입니다.</param>
      <returns vsli:raw="A slice starting at index &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">인덱스 <paramref name="start" />에서 시작하여 현재 읽기 전용 시퀀스의 끝까지 계속되는 슬라이스입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary vsli:raw="Forms a slice out of the given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하도록 지정된 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The length of the slice.">조각의 길이입니다.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">
        <paramref name="start" /> 인덱스에서 시작하는 현재 범위에서 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="end" vsli:raw="The end (exclusive) of the slice.">조각의 끝(제외)입니다.</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">현재 읽기 전용 시퀀스에서 <paramref name="end" /> 시퀀스 위치를 포함하지 않고 <paramref name="start" /> 인덱스의 항목으로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified sequence position and continuing to the end of the read-only sequence.">지정된 시퀀스 위치에서 시작하여 읽기 전용 시퀀스의 끝까지 이어지도록 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns vsli:raw="A slice starting at sequence position &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">시퀀스 위치 <paramref name="start" />에서 시작하여 현재 읽기 전용 시퀀스의 끝까지 계속되는 슬라이스입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="length" vsli:raw="The length of the slice.">조각의 길이입니다.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">시퀀스 위치<paramref name="start" />에서 시작하는 현재 인스턴스의 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="length" /> 항목을 사용하여 <paramref name="start" />에서 시작하는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="length" vsli:raw="The length of the slice.">조각의 길이입니다.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">시퀀스 위치<paramref name="start" />에서 시작하는 현재 인스턴스의 <paramref name="length" /> 요소로 이루어진 조각입니다.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">
        <paramref name="start" />에서 시작하여 <paramref name="end" />(제외)로 끝나는 현재 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 조각을 만듭니다.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">이 조각을 시작할 시작(포괄) <see cref="T:System.SequencePosition" />입니다.</param>
      <param name="end" vsli:raw="The ending (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">조각의 끝(제외) <see cref="T:System.SequencePosition" />입니다.</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; sequence position to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">현재 읽기 전용 시퀀스에서 <paramref name="start" /> 시퀀스 위치부터 <paramref name="end" /> 시퀀스 위치의 항목으로 구성되지만 포함하지 않는 조각입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary vsli:raw="Gets the position to the start of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />의 시작에 배치합니다.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString" />
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary vsli:raw="Tries to retrieve the next segment after &lt;paramref name=&quot;position&quot; /&gt; and returns a value that indicates whether the operation succeeded.">
        <paramref name="position" /> 뒤에서 다음 세그먼트를 검색하고, 작업이 성공했는지를 나타내는 값을 반환합니다.</summary>
      <param name="position" vsli:raw="The current sequence position.">현재 시퀀스 위치입니다.</param>
      <param name="memory" vsli:raw="A read-only memory span that contains the next segment after &lt;paramref name=&quot;position&quot; /&gt;.">
        <paramref name="position" /> 뒤에서 다음 세그먼트를 포함하는 읽기 전용 메모리 범위입니다.</param>
      <param name="advance" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;position&quot; /&gt; should to the beginning of next segment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="position" />이 다음 세그먼트의 시작이어야 하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if the method returned the next segment, or &lt;see langword=&quot;false&quot; /&gt; if the end of the read-only sequence was reached.">메서드가 다음 세그먼트를 반환한 경우 <see langword="true" />를 반환하고, 읽기 전용 시퀀스의 끝에 도달한 경우 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary vsli:raw="Represents a linked list of &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; nodes.">
        <see cref="T:System.ReadOnlyMemory`1" /> 노드의 연결된 목록을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence segment." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor" />
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">현재 노드에서 <see cref="T:System.ReadOnlyMemory`1" /> 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">현재 <see cref="T:System.ReadOnlyMemory`1" /> 노드의 값입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary vsli:raw="Gets or sets the next node.">다음 노드를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The next node.">다음 노드입니다.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary vsli:raw="Gets or sets the sum of node lengths before the current node.">현재 노드 앞에 있는 노드 길이의 합을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The sum of node lengths before the current node.">현재 노드 앞에 있는 노드 길이의 합계입니다.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary vsli:raw="Provides methods for reading binary and text data out of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; with a focus on performance and minimal or zero heap allocations.">성능과 최소 또는 0 힙 할당에 중점을 두어 <see cref="T:System.Buffers.ReadOnlySequence`1" />에서 이진 및 텍스트 데이터를 읽는 메서드를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">읽기 전용 시퀀스의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; over a given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">지정된 <see cref="T:System.Buffers.ReadOnlySequence`1" />에 대해 <see cref="T:System.Buffers.SequenceReader`1" />을 만듭니다.</summary>
      <param name="sequence" vsli:raw="The read-only sequence over which to create the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt;.">
        <see cref="T:System.Buffers.SequenceReader`1" />을 만들 수 있는 읽기 전용 시퀀스입니다.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary vsli:raw="Moves the reader ahead a specified number of items.">reader를 지정된 항목 수만큼 앞으로 이동시킵니다.</summary>
      <param name="count" vsli:raw="The number of items to advance.">진행할 항목의 개수입니다.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary vsli:raw="Advances past consecutive instances of the given &lt;paramref name=&quot;value&quot; /&gt;.">지정된 <paramref name="value" />의 이전 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value" vsli:raw="The value past which the reader is to advance.">reader가 이동하는 지난 값입니다.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of either of two specified values.">두 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0" vsli:raw="The first value to skip.">건너뛸 첫 번째 값입니다.</param>
      <param name="value1" vsli:raw="The second value to skip.">건너뛸 두 번째 값입니다.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of three specified values.">세 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0" vsli:raw="The first value to skip.">건너뛸 첫 번째 값입니다.</param>
      <param name="value1" vsli:raw="The second value to skip.">건너뛸 두 번째 값입니다.</param>
      <param name="value2" vsli:raw="The third value to skip.">건너뛸 세 번째 값입니다.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of four specified values.">네 개의 지정된 값 중 하나가 연속 인스턴스를 지나서 이동합니다.</summary>
      <param name="value0" vsli:raw="The first value to skip.">건너뛸 첫 번째 값입니다.</param>
      <param name="value1" vsli:raw="The second value to skip.">건너뛸 두 번째 값입니다.</param>
      <param name="value2" vsli:raw="The third value to skip.">건너뛸 세 번째 값입니다.</param>
      <param name="value3" vsli:raw="The fourth value to skip.">건너뛸 네 번째 값입니다.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Skips consecutive instances of any of the specified &lt;paramref name=&quot;values&quot; /&gt;.">지정된 <paramref name="values" />의 모든 연속 인스턴스를 건너뜁니다.</summary>
      <param name="values" vsli:raw="The values to be skipped.">건너뛸 값입니다.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">reader가 이동하는 위치의 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary vsli:raw="Gets the total number of &lt;typeparamref name=&quot;T&quot; /&gt; values processed by the reader.">reader에서 처리한 <typeparamref name="T" /> 값의 총 수를 가져옵니다.</summary>
      <returns vsli:raw="The total number of values processed by the reader.">판독기에서 처리 한 값의 총 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; that contains the current segment in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 현재 세그먼트가 포함된 <see cref="T:System.Span`1" />을 가져옵니다.</summary>
      <returns vsli:raw="A span that contains the current segment in the sequence.">시퀀스의 현재 세그먼트를 포함 하는 범위입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary vsli:raw="Gets the index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 인덱스를 가져옵니다.</summary>
      <returns vsli:raw="The index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">의 인덱스 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary vsli:raw="Gets a value that indicates whether there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 데이터가 더 이상 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />데이터가 더 이상 없으면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary vsli:raw="Checks whether a specified value is next in the sequence.">지정된 값이 시퀀스의 다음인지 여부를 확인합니다.</summary>
      <param name="next" vsli:raw="The value to compare the next items to.">다음 항목을 비교할 값입니다.</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="next" /> 값을 지나서 이동하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값이 시퀀스의 다음에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Checks whether the values specified in a read-only span are next in the sequence.">읽기 전용 범위에 지정된 값이 시퀀스의 다음인지 확인합니다.</summary>
      <param name="next" vsli:raw="The span to compare the next items to.">다음 항목을 비교하는 범위입니다.</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="next" /> 값을 지나서 이동하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값이 시퀀스의 다음에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary vsli:raw="Gets the count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">reader의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />의 항목 수를 가져옵니다.</summary>
      <returns vsli:raw="The count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">판독기의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 있는 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary vsli:raw="Gets the current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" />의 현재 위치를 가져옵니다.</summary>
      <returns vsli:raw="The current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">의 현재 위치 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary vsli:raw="Gets  the remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">reader의 <see cref="P:System.Buffers.SequenceReader`1.Sequence" />에 나머지 항목을 가져옵니다.</summary>
      <returns vsli:raw="The remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;">판독기의 나머지 항목<see cref="P:System.Buffers.SequenceReader`1.Sequence" /></returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary vsli:raw="Moves the reader back the specified number of items.">reader를 지정된 항목 수만큼 뒤로 이동시킵니다.</summary>
      <param name="count" vsli:raw="The number of items.">항목 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative or greater than &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Consumed&quot; /&gt;.">
        <paramref name="count" />가 음수이거나 <see cref="P:System.Buffers.SequenceReader`1.Consumed" />보다 큽니다.</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary vsli:raw="Gets the underlying &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; for the reader.">reader의 기본 <see cref="T:System.Buffers.ReadOnlySequence`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The underlying read-only sequence for the reader.">판독기에 대 한 기본 읽기 전용 시퀀스입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary vsli:raw="Searches for a specified delimiter and optionally advances past it if it is found.">지정된 구분 기호를 검색하고 필요에 따라 있는 경우 이를 지나서 이동합니다.</summary>
      <param name="delimiter" vsli:raw="The delimiter to search for.">검색할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if it is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Searches for any of a number of specified delimiters and optionally advances past the first one to be found.">지정된 구분 기호 중 하나를 검색하고 필요에 따라 찾은 첫 번째 구분 기호를 지나서 이동합니다.</summary>
      <param name="delimiters" vsli:raw="The delimiters to search for.">검색할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not move past the delimiter.">지정된 <paramref name="delimiters" />의 첫 번째 인스턴스를 지나서 이동하려면 <see langword="true" />이고, 구분 기호를 지나서 이동하지 않으려면 입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the given &lt;paramref name=&quot;delimiters&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <paramref name="delimiters" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Copies data from the current position to the given destination span if there is enough data to fill it.">데이터를 채울 수 있는 충분한 데이터가 있는 경우 현재 위치에서 지정된 대상 범위로 데이터를 복사합니다.</summary>
      <param name="destination" vsli:raw="Destination span to copy to.">복사할 대상 범위입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is enough data to completely fill the &lt;paramref name=&quot;destination&quot; /&gt; span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="destination" /> 범위를 완전히 채울 수 있는 충분한 데이터가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary vsli:raw="Peeks at the next value without advancing the reader.">reader를 이동하지 않고 다음 값을 관찰합니다.</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">다음 값 또는 reader의 끝에 있는 경우 기본값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the peek operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">reader가 해당 끝에 있지 않고 미리 보기 작업이 성공하면 <see langword="true" />이고, reader의 끝에 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary vsli:raw="Reads the next value and advance the reader.">다음 값을 읽고 reader를 진행합니다.</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">다음 값 또는 reader의 끝에 있는 경우 기본값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the read operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">reader가 해당 끝에 있지 않고 일기 작업이 성공하면 <see langword="true" />이고, reader의 끝에 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">
        <paramref name="delimiterEscape" /> 앞에 오는 구분 기호를 무시하고 지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">바로 다음 <paramref name="delimiter" />를 건너뛸 것임을 나타내는 값입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read data until the entire delimiter specified as a read-only span matches.">읽기 전용 범위로 지정된 전체 구분 기호가 일치할 때까지 데이터 읽기를 시도합니다.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter" vsli:raw="A read-only span that contains one or more delimiters.">하나 이상의 구분 기호를 포함하는 읽기 전용 범위입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">
        <paramref name="delimiterEscape" /> 앞에 오는 구분 기호를 무시하고 지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">바로 다음 <paramref name="delimiter" />를 건너뛸 것임을 나타내는 값입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">지정된 <paramref name="delimiter" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">발견되는 경우 <paramref name="delimiter" />를 지나서 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">지정된 <paramref name="delimiters" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <paramref name="delimiters" /> 중 하나에서 처음 발견된 인스턴스를 지나 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiters" />가 발견되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">지정된 <paramref name="delimiters" />까지 모든 항목을 읽으려고 시도합니다.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">메서드가 반환될 때 읽은 데이터(있는 경우)를 포함합니다.</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">찾아야 할 구분 기호입니다.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <paramref name="delimiters" /> 중 하나에서 처음 발견된 인스턴스를 지나 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiters" />가 발견되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary vsli:raw="Gets the unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />의 읽지 않은 부분을 가져옵니다.</summary>
      <returns vsli:raw="The unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">의 읽지 않은 부분 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary vsli:raw="Provides extended functionality for the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; class that allows reading of endian specific numeric values from binary data.">이진 데이터에서 endian 특정 숫자 값을 읽는 데 사용할 수 있는 <see cref="T:System.Buffers.SequenceReader`1" /> 클래스의 확장된 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as big endian.">
        <see cref="T:System.Int16" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int16" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as big endian.">
        <see cref="T:System.Int32" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader from which to read the value.">값을 읽어올 바이트 시퀀스 판독기입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int32" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as big endian.">
        <see cref="T:System.Int64" />을 big endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 big endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int64" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as little endian.">
        <see cref="T:System.Int16" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int16" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as little endian.">
        <see cref="T:System.Int32" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int32" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as little endian.">
        <see cref="T:System.Int64" />를 little endian으로 읽으려고 합니다.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">값을 읽어올 바이트 시퀀스 판독기 인스턴스입니다.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">메서드가 반환할 때 바이트 시퀀스 판독기에서 little endian으로 읽은 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">읽기 작업이 성공하면 <see langword="true" />이고, <see cref="T:System.Int64" />에 대한 데이터가 충분하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary vsli:raw="Represents a standard format string without using an actual string.">실제 문자열을 사용하지 않고 표준 서식 문자열을 나타냅니다.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; structure.">
        <see cref="T:System.Buffers.StandardFormat" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="symbol" vsli:raw="A type-specific format specifier, such as 'G', 'D', or 'X'.">‘G’, ‘D’ 또는 ‘X’ 등의 형식별 형식 지정자입니다.</param>
      <param name="precision" vsli:raw="An optional precision ranging from 0 to 99, or the special value &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; (the default).">0~99 사이의 선택적 전체 자릿수 또는 특수 값 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />(기본값)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;symbol&quot; /&gt; is not &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, and its value is greater than &lt;see cref=&quot;F:System.Buffers.StandardFormat.MaxPrecision&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;symbol&quot; /&gt; cannot be converted to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <paramref name="symbol" />은 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />이 아니며, 해당 값은 <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />보다 큽니다.
또는
<paramref name="symbol" />를 <see cref="T:System.Byte" />로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether the specified &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; is equal to the current instance.">지정된 <see cref="T:System.Buffers.StandardFormat" />이 현재 인스턴스와 동일한지를 나타내는 값을 반환합니다.</summary>
      <param name="other" vsli:raw="The format to compare to the current instance.">현재 인스턴스와 비교할 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the specified object is a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; object that is equal to the current instance.">지정된 개체가 현재 인스턴스와 동일한 <see cref="T:System.Buffers.StandardFormat" /> 개체인지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An object to compare to the current instance.">현재 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary vsli:raw="Gets a value that indicates whether a format has a defined precision.">형식에 정의된 전체 자릿수가 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the format has a precision other than &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />형식이 이외의 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />전체 자릿수 이면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary vsli:raw="Gets a value that indicates whether the current instance is a default format.">현재 인스턴스가 기본 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is a default format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />현재 인스턴스가 기본 형식이 면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary vsli:raw="Defines the maximum valid precision value.">유효한 최대 전체 자릿수 값을 정의합니다.</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary vsli:raw="Indicates that a format doesn't use a precision or that the precision is unspecified.">형식이 전체 자릿수를 사용하지 않거나 해당 전체 자릿수가 지정되지 않았음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are equal.">두 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left" vsli:raw="The first format to compare.">비교할 첫 번째 형식입니다.</param>
      <param name="right" vsli:raw="The second format to compare.">비교할 두 번째 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary vsli:raw="Converts a character to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">
        <see cref="T:System.Buffers.StandardFormat" /> 전체 자릿수를 사용하여 문자를 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 인스턴스로 변환합니다.</summary>
      <param name="symbol" vsli:raw="The character to convert to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; value.">
        <see cref="T:System.Buffers.StandardFormat" /> 값으로 변환할 문자입니다.</param>
      <returns vsli:raw="A format with a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property equal to &lt;paramref name=&quot;symbol&quot; /&gt; and a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <paramref name="symbol" />과 동일한 <see cref="P:System.Buffers.StandardFormat.Symbol" /> 속성 및 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />과 동일한 <see cref="P:System.Buffers.StandardFormat.Precision" /> 속성을 가진 형식입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are unequal.">두 개의 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 다른지를 확인합니다.</summary>
      <param name="left" vsli:raw="The first format to compare.">비교할 첫 번째 형식입니다.</param>
      <param name="right" vsli:raw="The second format to compare.">비교할 두 번째 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two formats are unequal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 개의 형식이 다른 경우 <see langword="true" />이고 같은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Converts a &lt;see langword=&quot;ReadOnlySpan&amp;lt;System.Char&amp;gt;&quot; /&gt; into a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">
        <see langword="ReadOnlySpan&lt;System.Char&gt;" />를 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 전체 자릿수를 사용하여 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환합니다.</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to parse.">구문 분석할 문자를 포함하는 읽기 전용 범위입니다.</param>
      <returns vsli:raw="A value whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property value is the character in &lt;paramref name=&quot;format&quot; /&gt; and whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property value is &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <see cref="P:System.Buffers.StandardFormat.Symbol" /> 속성 값이 <paramref name="format" />의 문자이고 <see cref="P:System.Buffers.StandardFormat.Precision" /> 속성 값이 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />인 값입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary vsli:raw="Converts a classic .NET standard format string to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance.">클래식 .NET 표준 형식 문자열을 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환합니다.</summary>
      <param name="format" vsli:raw="A classic .NET standard format string.">클래식 .NET 표준 형식 문자열입니다.</param>
      <returns vsli:raw="A format.">형식입니다.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid standard format string.">
        <paramref name="format" />이 유효한 형식 문자열이 아닙니다.</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary vsli:raw="Gets the precision component of the format.">형식의 전체 자릿수 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The precision component, which can be &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, or can range from 0 to 9.">전체 자릿수 구성 요소 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />는 0에서 9 사이 이거나 범위를 지정할 수 있습니다.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary vsli:raw="Gets the character component of the format.">형식의 문자 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The character component of the format.">형식의 문자 구성 요소입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary vsli:raw="Returns the string representation of this format.">이 형식의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="The string representation of this format.">이 형식의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary vsli:raw="Attempts to convert a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Char&amp;gt;&quot; /&gt; to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance and returns a value that indicates whether the parsing operation succeeded.">
        <see langword="ReadOnlySpan&lt;Char&gt;" />를 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스로 변환하려고 시도하고 구문 분석 작업의 성공 여부를 나타내는 값을 반환합니다.</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to convert.">변환할 문자를 포함하는 읽기 전용 범위입니다.</param>
      <param name="result" vsli:raw="When the method returns, contains the parsed &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance if the operation was successful.">이 메서드가 반환될 경우 작업에 성공하면 구문 분석된 <see cref="T:System.Buffers.StandardFormat" /> 인스턴스가 포함되어 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parsing operation was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구문 분석 작업에 성공하면 <see langword="true" />이고 실패하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>base 64로 표현되는 이진 데이터와 UTF-8 인코딩 텍스트 간의 변환입니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>base 64로 나타낸 UTF-8 인코딩 텍스트의 범위를 이진 데이터로 디코딩합니다. 입력이 4의 배수가 아닌 경우 최대한 가장 가까운 4의 배수로 디코딩됩니다.</summary>
      <param name="utf8">디코딩되어야 하는 UTF-8 인코딩 텍스트(base 64)를 포함하는 입력 범위입니다.</param>
      <param name="bytes">작업의 결과인 디코딩된 이진 데이터를 포함하는 출력 범위입니다.</param>
      <param name="bytesConsumed">작업 중에 사용된 입력 바이트 수입니다. 필요한 경우 후속 호출에서 입력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="bytesWritten">입력 범위에 작성된 바이트 수입니다. 필요한 경우 후속 호출에서 출력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="isFinalBlock">입력 범위에 디코딩할 전체 데이터가 포함되는 경우 <see langword="true" />(기본값)입니다. 입력 범위에 더 많은 데이터를 팔로우해야 하는 부분 데이터가 포함되는 경우 <see langword="false" />입니다.</param>
      <returns>디코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>UTF-8 인코딩 텍스트(base 64)의 범위를 이진 데이터로 디코딩합니다. 디코딩된 이진 출력은 입력에 포함된 텍스트 데이터보다 작습니다(이 작업은 데이터를 압축함). 입력이 4의 배수가 아닌 경우 이 메서드는 데이터를 디코딩하지 않습니다.</summary>
      <param name="buffer">디코딩되어야 하는 base-64 텍스트 데이터를 포함하는 입력 범위입니다.</param>
      <param name="bytesWritten">버퍼에 작성된 바이트 수입니다.</param>
      <returns>디코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>이진 데이터의 범위를 base 64로 나타낸 UTF-8 인코딩 텍스트로 인코딩합니다.</summary>
      <param name="bytes">디코딩되어야 하는 이진 데이터를 포함하는 입력 범위입니다.</param>
      <param name="utf8">작업의 결과인 UTF-8 인코딩 텍스트(base 64)를 포함하는 출력 범위입니다.</param>
      <param name="bytesConsumed">작업 중에 사용된 입력 바이트 수입니다. 필요한 경우 후속 호출에서 입력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="bytesWritten">입력 범위에 작성된 바이트 수입니다. 필요한 경우 후속 호출에서 출력을 분할하는 데 사용될 수 있습니다.</param>
      <param name="isFinalBlock">입력 범위에 인코딩할 전체 데이터가 포함되는 경우 <see langword="true" />(기본값)입니다. 입력 범위에 더 많은 데이터를 팔로우해야 하는 부분 데이터가 포함되는 경우 <see langword="false" />입니다.</param>
      <returns>인코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>이진 데이터(내부)의 범위를 base 64로 나타낸 UTF-8 인코딩 텍스트로 인코딩합니다. 인코딩된 텍스트 출력은 입력에 포함된 이진 데이터보다 큽니다(이 작업은 데이터를 확장함).</summary>
      <param name="buffer">디코딩되어야 하는 이진 데이터를 포함하는 입력 범위입니다. 메서드는 바로 전환을 수행하기 때문에 작업의 결과를 저장할 수 있을 만큼 커야 합니다.</param>
      <param name="dataLength">인코딩되어야 하는 버퍼에 포함된 이진 데이터의 바이트 수입니다. 이 값은 버퍼 길이보다 작아야 합니다.</param>
      <param name="bytesWritten">버퍼에 작성된 바이트 수입니다.</param>
      <returns>인코딩 작업의 상태를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>지정된 길이의 바이트 범위 내에서 base-64 인코딩 텍스트를 디코딩해야 하는 경우 결과의 최대 길이(바이트 단위)를 반환합니다.</summary>
      <param name="length">바이트 범위의 크기입니다.</param>
      <returns>결과의 최대 길이(바이트 단위)입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>지정된 길이의 바이트 범위 내에서 이진 데이터를 인코딩해야 하는 경우 결과의 최대 길이(바이트 단위)를 반환합니다.</summary>
      <param name="length">바이트 범위의 크기입니다.</param>
      <returns>결과의 최대 길이(바이트 단위)입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">인코딩이 데이터를 4/3으로 확장하므로 <paramref name="length" />는 0보다 작거나 1610612733보다 큽니다.</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary vsli:raw="Provides static methods to format common data types as Utf8 strings.">일반 데이터 형식을 Utf8 문자열로 서식을 지정하는 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Boolean" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Byte&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Byte" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.DateTime" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.DateTimeOffset" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Decimal" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Double&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Double" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Guid&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Guid" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Int16" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Int32" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Int64" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.SByte&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.SByte" />를 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Single&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.Single" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.TimeSpan" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.UInt16" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.UInt32" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; as a UTF8 string.">
        <see cref="T:System.UInt64" />을 UTF8 문자열로 서식을 지정합니다.</summary>
      <param name="value" vsli:raw="The value to format.">형식을 지정할 값입니다.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 형식 값을 쓸 버퍼입니다.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">메서드가 반환될 때 서식이 지정된 텍스트의 길이(바이트)를 포함합니다.</param>
      <param name="format" vsli:raw="The standard format to use.">사용할 표준 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">서식 지정 작업이 성공하면 <see langword="true" />이고, <paramref name="buffer" />가 너무 작으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary vsli:raw="Provides static methods to parse Utf8 strings to common data types.">Utf8 문자열을 일반 데이터 형식으로 구문 분석하는 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Boolean" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Byte&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Byte" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.DateTime" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.DateTimeOffset" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Decimal" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Double&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Double" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Guid&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Guid" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int16&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Int16" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int32&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Int32" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int64&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Int64" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.SByte&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.SByte" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Single&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.Single" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.TimeSpan" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.UInt16" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.UInt32" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; at the start of a Utf8 string.">Utf8 문자열 시작 시 <see cref="T:System.UInt64" />를 구문 분석합니다.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">구문 분석할 Utf8 문자열입니다.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">메서드가 반환될 때 구문 분석 작업이 성공한 경우 <paramref name="source" />에서 구문 분석된 값을 포함합니다.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">구문 분석 작업이 성공하면 메서드가 반환될 때 구문 분석된 하위 문자열의 길이(바이트)를 포함합니다. 메서드가 실패하면 <paramref name="bytesConsumed" />가 0으로 설정됩니다.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 문자열의 예상된 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">성공을 위한 <see langword="true" />입니다. 문자열이 구문론적으로 올바르지 않거나 오버플로 또는 언더플로가 발생한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary vsli:raw="Provides extension methods for the memory- and span-related types, such as &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;, &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, <see cref="T:System.ReadOnlySpan`1" />와 같은 메모리 및 범위 관련 형식에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over the portion of the target string.">대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified index.">지정된 인덱스에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <returns vsli:raw="The read-only character memory representation of the string.">문자열의 읽기 전용 문자 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified character position.">지정된 문자 위치에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt; (&lt;paramref name=&quot;start&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;c&gt;text.Length&lt;/c&gt;).">
        <paramref name="start" />는 <paramref name="text" />의 범위에 없습니다.(<paramref name="start" />는 &lt; 0 또는 &gt; <c>text.Length</c>입니다.)</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string beginning at a specified position with a length.">길이가 있는 지정된 위치에서 시작하는 대상 문자열 부분에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The desired length for the slice.">조각에 대한 원하는 길이입니다.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">문자열의 읽기 전용 문자 메모리 표현 또는 <paramref name="text" />가 <see langword="null" />인 경우 <see langword="default" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a specified range of the target string.">대상 문자열의 지정된 범위에 대해 새로운 <see langword="ReadOnlyMemory&lt;Char&gt;" />를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="range" vsli:raw="The range that indicates the start and length of the sliced string.">조각화된 문자열의 시작과 길이를 나타내는 범위입니다.</param>
      <returns vsli:raw="The read-only character memory representation of the string.">문자열의 읽기 전용 문자 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary vsli:raw="Creates a new memory region over the target array.">대상 배열에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.">배열 끝의 지정된 인덱스에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <param name="startIndex" vsli:raw="The first position of the array.">배열의 첫 번째 위치입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.">배열 끝의 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array" vsli:raw="The target array.">대상 배열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">메모리를 시작할 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; index less than 0 or greater than &lt;see langword=&quot;array.Length&quot; /&gt;.">
        <paramref name="start" /> 인덱스는 0보다 작거나 <see langword="array.Length" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.">지정된 길이를 사용하여 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array" vsli:raw="The target array.">대상 배열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the memory region.">메모리 영역을 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of items in the memory region.">메모리 영역에 있는 항목 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="array" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.">범위의 포괄 시작 인덱스에서 시작하여 범위의 단독 끝 인덱스에서 끝나는 대상 배열 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <param name="range" vsli:raw="The range to convert from the array.">배열에서 변환할 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment.">대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment" vsli:raw="The segment to convert.">변환할 세그먼트입니다.</param>
      <typeparam name="T" vsli:raw="The type of the segment.">세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the segment.">세그먼트의 메모리 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.">세그먼트 끝까지 지정된 위치에서 시작하는 대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">메모리를 시작할 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;segment&quot; /&gt; is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" />는 공변(covariant)이고, <paramref name="segment" />의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" />가 0보다 작거나 <see langword="segment.Count" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.">지정된 길이를 사용하여 지정된 위치에서 시작하는 대상 배열 세그먼트 부분에 대해 새 메모리 영역을 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">메모리를 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of items in the memory.">메모리의 항목 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">배열의 전체 또는 부분에 대한 메모리 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="segment" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary vsli:raw="Creates a new read-only span over a string.">지정된 문자 수에 대해 지정된 위치에서 대상 문자열 부분에 대한 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <returns vsli:raw="The read-only span representation of the string.">문자열의 읽기 전용 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position to the end of the string.">지정된 위치에서 문자열의 끝까지 대상 문자열 부분에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <returns vsli:raw="The read-only span representation of the string.">문자열의 읽기 전용 범위 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Thrown when &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;text.Length&quot; /&gt;.">
        <paramref name="start" />가 0보다 작거나 <see langword="text.Length" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.">문자열에 대해 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="text" vsli:raw="The target string.">대상 문자열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">이 조각을 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The desired length for the slice.">조각에 대한 원하는 길이입니다.</param>
      <returns vsli:raw="The read-only span representation of the string.">문자열의 읽기 전용 범위 표현입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary vsli:raw="Creates a new span over a target array.">대상 배열에 새 범위를 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new span over the portion of the target array defined by an &lt;see cref=&quot;T:System.Index&quot; /&gt; value.">
        <see cref="T:System.Index" /> 값으로 정의되는 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <param name="startIndex" vsli:raw="The starting index.">시작 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The array type.">배열 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of the target array starting at a specified position to the end of the array.">배열 끝의 지정된 위치에서 시작하여 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <param name="start" vsli:raw="The initial index from which the array will be converted.">배열이 변환되는 초기 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over the portion of the target array beginning at a specified position for a specified length.">지정된 길이에 대해 지정된 위치에서 시작하는 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array" vsli:raw="The target array.">대상 배열입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the span.">범위를 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of items in the span.">범위의 항목 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;&quot;.">
        <paramref name="array" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />는 <paramref name="text" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array defined by a &lt;see cref=&quot;T:System.Range&quot; /&gt; value.">
        <see cref="T:System.Range" /> 값으로 정의된 대상 배열 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="array" vsli:raw="The array to convert.">변환할 배열입니다.</param>
      <param name="range" vsli:raw="The range of the array to convert.">변환할 배열의 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new span over a target array segment.">대상 배열 세그먼트에 대해 새 범위를 만듭니다.</summary>
      <param name="segment" vsli:raw="The array segment to convert.">변환할 배열 세그먼트입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">배열 세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary vsli:raw="Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.">지정된 인덱스에서 시작하여 세그먼트 끝에서 끝나는 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the Span.">범위를 시작할 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">배열 세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position to the end of the segment.">지정된 위치에서 세그먼트 끝까지 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the san.">범위를 시작할 인덱스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">배열 세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">배열 세그먼트의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" />가 0보다 작거나 <see langword="segment.Count" />보다 큽니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position for a specified length.">지정된 길이에 대해 지정된 위치에서 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="start" vsli:raw="The index at which to begin the span.">범위를 시작할 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of items in the span.">범위의 항목 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">배열 세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array.">배열의 범위 표현입니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" />은 공변(covariant)이고, 배열의 형식은 정확히 <see langword="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> 또는 <paramref name="start" /> + <paramref name="length" />가 <paramref name="segment" />의 범위에 없습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment using the range start and end indexes.">범위 시작 및 끝 인덱스를 사용하여 대상 배열 세그먼트 부분에 대해 새 범위를 만듭니다.</summary>
      <param name="segment" vsli:raw="The target array segment.">대상 배열 세그먼트입니다.</param>
      <param name="range" vsli:raw="The range which has start and end indexes to use for slicing the array.">배열을 조각화하는 데 사용할 시작 및 끝 인덱스를 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">배열 세그먼트의 형식입니다.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">배열 세그먼트의 범위 표현입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 인터페이스를 사용하여 정렬된 전체 <see cref="T:System.IComparable`1" />에서 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">비교할 때 사용할 <see cref="T:System.IComparable`1" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">지정한 <see cref="T:System.Span`1" /> 제네릭 인터페이스를 사용하여 정렬된 전체 <see cref="T:System.IComparable`1" />에서 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">비교할 때 사용할 <see cref="T:System.IComparable`1" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparer" />에서 지정된 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">비교할 때 사용할 <typeparamref name="TComparer" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">의 <see cref="T:System.Collections.Generic.IComparer`1" />특정 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="value" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="value" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">지정한 <see cref="T:System.ReadOnlySpan`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparable" />에서 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.ReadOnlySpan`1" />입니다.</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">비교할 때 사용할 <typeparamref name="TComparable" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">의 <see cref="T:System.IComparable`1" />특정 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">지정한 <see cref="T:System.Span`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparer" />에서 지정된 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">비교할 때 사용할 <typeparamref name="TComparer" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">의 <see cref="T:System.Collections.Generic.IComparer`1" />특정 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="value" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="value" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">지정한 <see cref="T:System.Span`1" /> 제네릭 형식을 사용하여 정렬된 전체 <typeparamref name="TComparable" />에서 값을 검색합니다.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">검색할 정렬된 <see cref="T:System.Span`1" />입니다.</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">비교할 때 사용할 <typeparamref name="TComparable" />입니다.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">범위의 요소 형식입니다.</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">의 <see cref="T:System.IComparable`1" />특정 형식입니다.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="comparable" />이 있으면 정렬된 <paramref name="span" />에 있는 <paramref name="comparable" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="comparable" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Span`1.Length" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.">지정된 문자열 비교를 사용하여 한 문자 범위를 다른 문자 범위와 비교하고, 정렬 순서에서 상대 위치를 나타내는 정수를 반환합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="other" vsli:raw="The value to compare with the source span.">소스 범위와 비교할 값입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="other" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Indicates whether a specified value occurs within a read-only character span.">지정된 값이 읽기 전용 문자 범위 내에서 발생하는지 여부를 나타냅니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how the characters in &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="value" />의 문자를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; occurs within the span, &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <paramref name="value" />가 범위 내에서 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).">지정된 값을 읽기 전용 범위에서 찾을 수 있는지를 나타냅니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span.">범위의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if found, &lt;see langword=&quot;false&quot; /&gt; otherwise.">찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a span. Values are compared using IEquatable{T}.Equals(T).">범위에서 지정된 값을 찾을 수 있는지를 나타냅니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if found, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; otherwise.">찾은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary vsli:raw="Copies the contents of the array into a memory region.">배열의 내용을 메모리 영역에 복사합니다.</summary>
      <param name="source" vsli:raw="The array to copy items from.">복사할 항목이 있는 배열입니다.</param>
      <param name="destination" vsli:raw="The memory to copy items into.">항목을 복사할 메모리입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination is shorter than the source array.">대상이 소스 배열보다 짧습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary vsli:raw="Copies the contents of the array into the span.">배열의 내용을 범위에 복사합니다.</summary>
      <param name="source" vsli:raw="The array to copy items from.">복사할 항목이 있는 배열입니다.</param>
      <param name="destination" vsli:raw="The span to copy items into.">항목을 복사할 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination Span is shorter than the source array.">대상 범위가 소스 배열보다 짧습니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether the end of the &lt;paramref name=&quot;span&quot; /&gt; matches the specified &lt;paramref name=&quot;value&quot; /&gt; when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">지정한 <paramref name="comparisonType" /> 옵션을 사용하여 비교할 때 <paramref name="span" />의 끝부분과 지정한 <paramref name="value" />이 일치하는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a read-only span.">지정된 시퀀스가 읽기 전용 범위 끝에 표시되는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span.">범위의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a span.">지정된 시퀀스가 범위 끝에 표시되는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">소스 범위의 끝과 비교할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span.">범위의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 끝부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided read-only span.">제공된 읽기 전용 범위에서 <see cref="T:System.Text.Rune" />의 열거형을 반환합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <returns vsli:raw="A rune enumerator.">rune 열거자입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided span.">제공된 범위에서 <see cref="T:System.Text.Rune" />의 열거형을 반환합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <returns vsli:raw="A rune enumerator.">rune 열거자입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether this &lt;paramref name=&quot;span&quot; /&gt; and the specified &lt;paramref name=&quot;other&quot; /&gt; span have the same characters when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">지정한 <paramref name="comparisonType" /> 옵션을 사용하여 비교할 때 이 <paramref name="span" />과 지정된 <paramref name="other" /> 범위에 동일한 문자가 있는지를 확인합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="other" vsli:raw="The value to compare with the source span.">소스 범위와 비교할 값입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="other" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equal, &lt;see langword=&quot;false&quot; /&gt; otherwise.">같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the first occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">현재 <paramref name="span" />에서 지정된 <paramref name="value" />가 맨 처음 발생하는 0부터 시작하는 인덱스를 보고합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="The index of the occurrence of the value in the span.">범위에 있는 값의 발생 인덱스입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 값을 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 시퀀스를 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to search for.">검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 값을 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 시퀀스를 검색하고 맨 처음 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to search for.">검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value2" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="values" vsli:raw="The set of values to search for.">검색할 값의 집합입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value2" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 IndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 첫 번째 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="values" vsli:raw="The set of values to search for.">검색할 값의 집합입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 값의 첫 번째 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Indicates whether the specified span contains only whitespace characters.">지정된 범위에 공백 문자만 포함되어 있는지를 나타냅니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span contains only whitespace characters, &lt;see langword=&quot;false&quot; /&gt; otherwise.">범위에 공백 문자만 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the last occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">현재 <paramref name="span" />에서 지정된 <paramref name="value" />가 마지막으로 발생하는 0부터 시작하는 인덱스를 보고합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">소스 범위 내에서 검색할 값입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="The index of the last occurrence of the value in the span.">범위에 있는 값의 마지막 발생 인덱스입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 값을 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 시퀀스를 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to search for.">검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 값을 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">지정한 시퀀스를 검색하고 마지막으로 발생하는 인덱스를 반환합니다. IEquatable{T}.Equals(T)를 사용하여 값을 비교합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to search for.">검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">범위에 있는 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value2" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="values" vsli:raw="The set of values to search for.">검색할 값의 집합입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value0" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value1" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <param name="value2" vsli:raw="One of the values to search for.">검색할 값 중 하나입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">논리 OR 연산자를 사용하여 LastIndexOf를 여러 번 호출하는 것과 유사한 지정된 값의 마지막 인덱스를 검색합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="values" vsli:raw="The set of values to search for.">검색할 값의 집합입니다.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">범위 및 값의 형식입니다.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">범위에 있는 모든 값의 마지막 발생 인덱스입니다. 찾을 수 없으면 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory.">두 읽기 전용 시퀀스가 메모리에서 겹치는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The first sequence.">첫 번째 시퀀스입니다.</param>
      <param name="other" vsli:raw="The second sequence.">두 번째 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the read-only sequence.">읽기 전용 시퀀스의 elmeents 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory and outputs the element offset.">두 읽기 전용 시퀀스가 메모리에서 겹치는지 여부를 확인하고 요소 오프셋을 출력합니다.</summary>
      <param name="span" vsli:raw="The first sequence.">첫 번째 시퀀스입니다.</param>
      <param name="other" vsli:raw="The second sequence.">두 번째 시퀀스입니다.</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;." />
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory.">범위와 읽기 전용 범위가 메모리에서 겹치는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The span to compare.">비교할 범위입니다.</param>
      <param name="other" vsli:raw="The read-only span to compare.">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory and outputs the element offset.">범위와 읽기 전용 범위가 메모리에서 겹치는지 여부를 확인하고 요소 오프셋을 출력합니다.</summary>
      <param name="span" vsli:raw="The first sequence to compare.">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other" vsli:raw="The second sequence to compare.">비교할 두 번째 시퀀스입니다.</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;.">메서드가 반환될 때 <paramref name="span" />과 <paramref name="other" /> 간의 오프셋을 포함합니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary vsli:raw="Reverses the sequence of the elements in the entire span.">전체 범위에 있는 요소의 시퀀스를 역순으로 바꿉니다.</summary>
      <param name="span" vsli:raw="The span to reverse.">역순으로 바꿀 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).">IComparable{T}.CompareTo(T)를 사용하여 해당 요소를 비교하여 두 읽기 전용 시퀀스의 상대 순서를 확인합니다.</summary>
      <param name="span" vsli:raw="The first sequence to compare.">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other" vsli:raw="The second sequence to compare.">비교할 두 번째 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).">IComparable{T}.CompareTo(T)를 사용하여 요소를 비교하여 범위 및 읽기 전용 범위의 상대 순서를 확인합니다.</summary>
      <param name="span" vsli:raw="The span to compare.">비교할 범위입니다.</param>
      <param name="other" vsli:raw="The read-only span to compare.">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> 및 <paramref name="other" />의 상대 순서를 나타내는 부호 있는 정수입니다.   - 0보다 작은 경우 <paramref name="span" />이 <paramref name="other" />보다 앞에 옵니다.   - 0인 경우 <paramref name="span" />는 <paramref name="other" />와 같습니다.   - 0보다 큰 경우 <paramref name="span" />은 <paramref name="other" />의 뒤에 옵니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).">IEquatable{T}.Equals(T)를 사용하여 요소를 비교하여 두 개의 읽기 전용 시퀀스가 동일한지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The first sequence to compare.">비교할 첫 번째 시퀀스입니다.</param>
      <param name="other" vsli:raw="The second sequence to compare.">비교할 두 번째 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).">IEquatable{T}.Equals(T)를 사용하여 요소를 비교하여 범위 및 읽기 전용 범위가 같은지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The span to compare.">비교할 범위입니다.</param>
      <param name="other" vsli:raw="The read-only span to compare.">비교할 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">시퀀스의 요소 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 시퀀스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether a read-only character span begins with a specified value when compared using a specified &lt;see cref=&quot;T:System.StringComparison&quot; /&gt; value.">지정한 <see cref="T:System.StringComparison" /> 값을 사용하여 비교할 때 읽기 전용 문자 범위가 지정된 값으로 시작하는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="value" vsli:raw="The sequence to compare to the beginning of the source span.">소스 범위의 시작과 비교할 시퀀스입니다.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> 및 <paramref name="value" />를 비교하는 방법을 결정하는 열거형 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a read-only span.">지정된 시퀀스가 읽기 전용 범위의 시작 부분에 표시되는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The read-only character span to search.">검색할 읽기 전용 문자 범위입니다.</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">
        <paramref name="span" />의 시작 부분에서 검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a span.">지정된 시퀀스가 범위의 시작 부분에 표시되는지 여부를 확인합니다.</summary>
      <param name="span" vsli:raw="The span to search.">검색할 범위입니다.</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">
        <paramref name="span" />의 시작 부분에서 검색할 시퀀스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <paramref name="span" />의 시작 부분과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.">지정된 문화권의 대/소문자 규칙을 사용하여 각 문자를 소문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">변환된 문자를 포함하는 대상 범위입니다.</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">문화권별 대/소문자 규칙을 제공하는 개체입니다.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.">고정 문화권의 대/소문자 규칙을 사용하여 각 문자를 소문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">변환된 문자를 포함하는 대상 범위입니다.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.">지정된 문화권의 대/소문자 규칙을 사용하여 각 문자를 대문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">변환된 문자를 포함하는 대상 범위입니다.</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">문화권별 대/소문자 규칙을 제공하는 개체입니다.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.">고정 문화권의 대/소문자 규칙을 사용하여 각 문자를 대문자로 변환하여 소스 범위에서 대상으로 문자를 복사합니다.</summary>
      <param name="source" vsli:raw="The source span.">소스 범위입니다.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">변환된 문자를 포함하는 대상 범위입니다.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">대상 범위에 쓰이는 문자 수입니다. 대상이 너무 작으면 -1을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">소스 및 대상 버퍼가 겹칩니다.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character memory region.">문자 메모리 영역에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed character memory region.">잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character memory region.">읽기 전용 문자 메모리 영역에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed character memory region.">잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character span.">읽기 전용 문자 범위에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified character from a read-only character span.">읽기 전용 문자 범위에서 지정된 문자의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">찾아서 제거할 지정된 문자입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">읽기 전용 범위에 지정된 문자 집합의 선행 및 후행 발생 항목을 읽기 전용 문자 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character span.">문자 범위에서 선행 및 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed character span.">잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a memory region.">메모리 영역에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.">읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only memory region.">읽기 전용 메모리 영역에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 읽기 전용 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only span.">읽기 전용 범위에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.">읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 읽기 전용 영역에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a span.">범위에서 지정된 요소의 선행 및 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.">읽기 전용 범위에 지정된 요소 집합의 선행 및 후행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character memory region.">문자 메모리 영역에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed character memory region.">잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character memory region.">읽기 전용 문자 메모리 영역에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character span.">읽기 전용 문자 범위에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all trailing occurrences of a specified character from a read-only span.">읽기 전용 범위에서 지정된 문자의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">찾아서 제거할 지정된 문자입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">읽기 전용 범위에서 지정된 문자 집합의 후행 발생 항목을 읽기 전용 문자 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character span.">문자 범위에서 후행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed character span.">잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a character memory region.">문자 메모리 영역에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.">읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only memory region.">읽기 전용 메모리 영역에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 읽기 전용 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only span.">읽기 전용 범위에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.">읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 읽기 전용 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a span.">범위에서 지정된 요소의 후행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a span.">읽기 전용 범위에 지정된 요소 집합의 후행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a memory region.">메모리 영역에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed character memory region.">잘린 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only memory region.">읽기 전용 메모리 영역에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">제거할 문자가 있는 소스 메모리입니다.</param>
      <returns vsli:raw="The trimmed read-only character memory region.">잘린 읽기 전용 문자 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only span.">읽기 전용 범위에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading occurrences of a specified character from the span.">범위에서 지정된 문자의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">찾아서 제거할 지정된 문자입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading occurrences of a set of characters specified in a read-only span from the span.">읽기 전용 범위에 지정된 문자 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">제거할 문자 집합을 포함하는 범위입니다.</param>
      <returns vsli:raw="The trimmed read-only character span.">잘린 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a span.">범위에서 선행 공백 문자를 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">제거할 문자가 있는 소스 범위입니다.</param>
      <returns vsli:raw="The trimmed character span.">잘린 문자 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">메모리 영역에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory region from which the element is removed.">제거할 요소가 있는 소스 메모리 영역입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed memory region.">잘린 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">메모리 영역에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 메모리 영역에서 모두 제거합니다.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">제거할 요소가 있는 소스 메모리입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">읽기 전용 메모리 영역에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">잘린 읽기 전용 메모리 영역입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">범위에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">읽기 전용 범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">잘린 읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">범위에서 지정된 요소의 선행 발생 항목을 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">찾아서 제거할 지정된 요소입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">읽기 전용 범위에 지정된 요소 집합의 선행 발생 항목을 범위에서 모두 제거합니다.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">제거할 요소가 있는 소스 범위입니다.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">제거할 요소 집합을 포함하는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">범위에 있는 요소의 형식입니다.</typeparam>
      <returns vsli:raw="The trimmed span.">잘린 범위입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary vsli:raw="Provides methods to interoperate with &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;,  &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and  &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> 및 <see cref="T:System.ReadOnlySpan`1" />과 상호 운영할 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Byte&amp;gt;&quot; /&gt;.">한 가지 기본 형식 <paramref name="T" />의 <see cref="T:System.ReadOnlySpan`1" />을 <see langword="ReadOnlySpan&lt;Byte&gt;" />로 캐스팅합니다.</summary>
      <param name="span" vsli:raw="The source slice to convert.">변환할 소스 조각입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only span.">읽기 전용 범위에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A read-only span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> 형식의 읽기 전용 범위입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">새 <see cref="T:System.ReadOnlySpan`1" />의 <see cref="P:System.ReadOnlySpan`1.Length" /> 속성이 <see cref="F:System.Int32.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;Span&amp;lt;Byte&amp;gt;&quot; /&gt;.">한 가지 기본 형식 <paramref name="T" />의 <see cref="T:System.Span`1" />을 <see langword="Span&lt;Byte&gt;" />로 캐스팅합니다.</summary>
      <param name="span" vsli:raw="The source slice to convert.">변환할 소스 조각입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">범위에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> 형식의 범위입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">새 <see cref="T:System.Span`1" />의 <see cref="P:System.Span`1.Length" /> 속성이 <see cref="F:System.Int32.MaxValue" />를 초과합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" />에서 <see cref="T:System.Memory`1" /> 인스턴스를 만듭니다.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer.">읽기 전용 메모리 버퍼입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A memory block that represents the same memory as the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" />과 동일한 메모리를 나타내는 메모리 블록입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reinterprets a read-only span of bytes as a read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">읽기 전용 바이트 범위를 <paramref name="T" /> 형식의 구조에 대한 읽기 전용 참조로 재해석합니다.</summary>
      <param name="span" vsli:raw="The read-only span to reinterpret.">재해석에 대한 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">반환 된 참조의 형식입니다.</typeparam>
      <returns vsli:raw="The read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 형식의 구조에 대한 읽기 전용 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary vsli:raw="Reinterprets a span of bytes as a reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">바이트 범위를 <paramref name="T" /> 형식의 구조에 대한 참조로 재해석합니다.</summary>
      <param name="span" vsli:raw="The span to reinterpret.">재해석할 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">반환 된 참조의 형식입니다.</typeparam>
      <returns vsli:raw="The reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 형식의 구조에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a read-only span of one primitive type to a read-only span of another primitive type.">한 가지 기본 형식의 읽기 전용 범위를 또 다른 기본 형식의 읽기 전용 범위로 캐스팅합니다.</summary>
      <param name="span" vsli:raw="The source slice to convert.">변환할 소스 조각입니다.</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">형식 원본 범위입니다.</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">대상 범위의 형식입니다.</typeparam>
      <returns vsli:raw="The converted read-only span.">변환된 읽기 전용 범위입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 또는 <paramref name="TTo" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary vsli:raw="Casts a span of one primitive type to a span of another primitive type.">한 가지 기본 형식의 범위를 또 다른 기본 형식의 범위로 캐스팅합니다.</summary>
      <param name="span" vsli:raw="The source slice to convert.">변환할 소스 조각입니다.</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">형식 원본 범위입니다.</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">대상 범위의 형식입니다.</typeparam>
      <returns vsli:raw="The converted span.">변환된 범위입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 또는 <paramref name="TTo" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory buffer over the portion of the pre-pinned target array beginning at the &lt;paramref name=&quot;start&quot; /&gt; index and consisting of &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="start" /> 인덱스에서 시작하고 <paramref name="length" /> 항목으로 구성된 미리 고정된 대상 배열의 일부에 대한 새 메모리 버퍼를 만듭니다.</summary>
      <param name="array" vsli:raw="The pre-pinned source array.">미리 고정된 소스 배열입니다.</param>
      <param name="start" vsli:raw="The index of &lt;paramref name=&quot;array&quot; /&gt; at which to begin the memory block.">메모리 블록을 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="length" vsli:raw="The number of items to include in the memory block.">메모리 블록에 포함할 항목 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the array.">배열의 형식입니다.</typeparam>
      <returns vsli:raw="A block of memory over the specified elements of &lt;paramref name=&quot;array&quot; /&gt;. If &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or if &lt;paramref name=&quot;start&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are 0, the method returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance of &lt;see cref=&quot;P:System.Memory`1.Length&quot; /&gt; zero.">
        <paramref name="array" />의 지정된 요소에 대한 메모리 블록입니다. <paramref name="array" />가 <see langword="null" />이거나 <paramref name="start" /> 및 <paramref name="length" />가 0이면 메서드는 <see cref="P:System.Memory`1.Length" /> 0의 <see cref="T:System.Memory`1" /> 인스턴스를 반환합니다.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;array&quot; /&gt; is not exactly &lt;paramref name=&quot;T[]&quot; /&gt;.">
        <paramref name="array" />는 공변(covariant)이고, <paramref name="array" />의 형식은 정확히 <paramref name="T[]" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;start&quot; /&gt; or the end index is not in the range of 0 to &lt;see cref=&quot;P:System.Array.Length&quot; /&gt;.">
        <paramref name="start" /> 또는 끝 인덱스가 0~<see cref="P:System.Array.Length" /> 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of a regular managed object.">일반 관리형 개체의 일부에 대한 새 읽기 전용 범위를 만듭니다.</summary>
      <param name="reference" vsli:raw="A reference to data.">데이터에 대한 참조입니다.</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" />에 포함된 <paramref name="T" /> 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the data items.">데이터 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A read-only span.">읽기 전용 범위입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a regular managed object.">일반 관리형 개체의 일부에 대한 새 범위를 만듭니다.</summary>
      <param name="reference" vsli:raw="A reference to data.">데이터에 대한 참조입니다.</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" />에 포함된 <paramref name="T" /> 요소 수입니다.</param>
      <typeparam name="T" vsli:raw="The type of the data items.">데이터 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A span.">범위입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Returns a reference to the element of the read-only span at index 0.">인덱스 0에 있는 읽기 전용 범위의 요소에 대한 참조를 반환합니다.</summary>
      <param name="span" vsli:raw="The read-only span from which the reference is retrieved.">참조가 검색되는 읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">범위에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">인덱스 0의 요소에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary vsli:raw="Returns a reference to the element of the span at index 0.">인덱스 0에 있는 범위의 요소에 대한 참조를 반환합니다.</summary>
      <param name="span" vsli:raw="The span from which the reference is retrieved.">참조가 검색되는 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">범위에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">인덱스 0의 요소에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a structure of type &lt;typeparamref name=&quot;T&quot; /&gt; out of a read-only span of bytes.">읽기 전용 범위(바이트)를 벗어난 <param name="T" /> 형식의 구조체를 읽습니다.</summary>
      <param name="source" vsli:raw="A read-only span.">읽기 전용 범위입니다.</param>
      <typeparam name="T" vsli:raw="The type of the item to retrieve from the read-only span.">읽기 전용 범위에서 검색할 항목의 형식입니다.</typeparam>
      <returns vsli:raw="The structure retrieved from the read-only span.">읽기 전용 범위에서 검색된 구조체입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is smaller than &lt;paramref name=&quot;T&quot; /&gt;'s length in bytes.">
        <paramref name="source" />는 <paramref name="T" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; view of the given read-only memory buffer.">지정된 읽기 전용 메모리 버퍼의 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 보기를 만듭니다.</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">읽기 전용 메모리 버퍼입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="An enumerable view of &lt;paramref name=&quot;memory&quot; /&gt;.">열거 가능한 <paramref name="memory" />의 보기입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.">기본 메모리 버퍼에서 배열 세그먼트를 가져오려고 합니다. 반환 값은 작업의 성공을 나타냅니다.</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">읽기 전용 메모리 버퍼입니다.</param>
      <param name="segment" vsli:raw="When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.">이 메서드가 반환되면 기본 읽기 전용 메모리 버퍼에서 검색된 배열 세그먼트가 포함됩니다. 메서드가 실패하면 메서드는 기본 배열 세그먼트를 반환합니다.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method call succeeds; &lt;see langword=&quot;false&quot; /&gt; otherwise.">메서드 호출이 성공하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; from the underlying read-only memory buffer.">기본 읽기 전용 메모리 버퍼에서 <see cref="T:System.Buffers.MemoryManager`1" />을 검색하려고 합니다.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">메모리 관리자를 가져올 읽기 전용 메모리 버퍼입니다.</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">메서드가 반환되면 <paramref name="memory" />의 관리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">형식의 여 <see cref="T:System.Buffers.MemoryManager`1" /> 검색할 합니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method retrieved the memory manager; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 메모리 관리자를 검색한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt;, start index, and length from the underlying read-only memory buffer.">기본 읽기 전용 메모리 버퍼에서 <see cref="T:System.Buffers.MemoryManager`1" />, 시작 인덱스 및 길이를 검색하려고 합니다.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">메모리 관리자를 가져올 읽기 전용 메모리 버퍼입니다.</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">메서드가 반환되면 <paramref name="memory" />의 관리자입니다.</param>
      <param name="start" vsli:raw="When the method returns, the offset from the start of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">메서드가 반환되면 <paramref name="memory" />가 나타나는 <paramref name="manager" />의 시작부터 오프셋입니다.</param>
      <param name="length" vsli:raw="When the method returns, the length of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">메서드가 반환되면 <paramref name="memory" />가 나타나는 <paramref name="manager" />의 길이입니다.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">읽기 전용 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">형식의 여 <see cref="T:System.Buffers.MemoryManager`1" /> 검색할 합니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 성공한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to get the underlying string from a &lt;see langword=&quot;System.ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt;.">
        <see langword="System.ReadOnlyMemory&lt;Char&gt;" />에서 기본 문자열을 가져오려고 합니다.</summary>
      <param name="memory" vsli:raw="Read-only memory containing a block of characters.">문자 블록을 포함하는 읽기 전용 메모리입니다.</param>
      <param name="text" vsli:raw="When the method returns, the string contained in the memory buffer.">메서드가 반환되면 메모리 버퍼에 포함된 문자열입니다.</param>
      <param name="start" vsli:raw="The starting location in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" />의 시작 위치입니다.</param>
      <param name="length" vsli:raw="The number of characters in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" />에 있는 문자 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method successfully retrieves the underlying string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 기본 문자열을 성공적으로 검색하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary vsli:raw="Tries to read a structure of type &lt;paramref name=&quot;T&quot; /&gt; from a read-only span of bytes.">읽기 전형 바이트 범위에서 <paramref name="T" /> 형식의 구조체를 읽으려고 합니다.</summary>
      <param name="source" vsli:raw="A read-only span of bytes.">읽기 전용 범위(바이트)입니다.</param>
      <param name="value" vsli:raw="When the method returns, an instance of &lt;paramref name=&quot;T&quot; /&gt;.">메서드가 반환되면 <paramref name="T" />의 인스턴스입니다.</param>
      <typeparam name="T" vsli:raw="The type of the structure to retrieve.">검색할 구조체의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds in retrieving an instance of the structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 구조체의 인스턴스를 검색하는 데 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Tries to write a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">
        <paramref name="T" /> 형식의 구조체를 바이트 범위로 쓰려고 합니다.</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">구조체를 포함할 범위(바이트)입니다.</param>
      <param name="value" vsli:raw="The structure to be written to the span.">범위에 기록할 구조체입니다.</param>
      <typeparam name="T" vsli:raw="The type of the structure.">구조체의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the write operation succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if the span is too small to contain &lt;paramref name=&quot;T&quot; /&gt;.">쓰기 작업에 성공한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 범위가 너무 작아서 <paramref name="T" />를 포함할 수 없는 경우 메서드는 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Writes a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">
        <paramref name="T" /> 형식의 구조체를 바이트 범위로 씁니다.</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">구조체를 포함할 범위(바이트)입니다.</param>
      <param name="value" vsli:raw="The structure to be written to the span.">범위에 기록할 구조체입니다.</param>
      <typeparam name="T" vsli:raw="The type of the structure.">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" />에는 참조 또는 포인터가 있습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="destination" />이 너무 작아 <paramref name="value" />를 포함할 수 없습니다.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary vsli:raw="Provides a collection of methods for interoperating with &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" />와의 상호 운용을 위한 메서드 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Gets an array segment from the underlying read-only sequence.">기본 읽기 전용 시퀀스에서 배열 세그먼트를 가져옵니다.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the array segment will be retrieved.">배열 세그먼트를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="segment" vsli:raw="The returned array segment.">반환된 배열 세그먼트입니다.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it's possible to retrieve the array segment; otherwise, &lt;see langword=&quot;false&quot; /&gt; and a default array segment is returned.">배열 세그먼트를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" /> 및 기본 배열 세그먼트가 반환됩니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary vsli:raw="Attempts to retrieve a read-only memory from the specified read-only sequence.">지정된 읽기 전용 시퀀스에서 읽기 전용 메모리 검색을 시도합니다.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the memory will be retrieved.">메모리를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="memory" vsli:raw="The returned read-only memory of type T.">T 형식의 반환된 읽기 전용 메모리입니다.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only memory can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">읽기 전용 메모리를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary vsli:raw="Attempts to retrieve a read-only sequence segment from the specified read-only sequence.">지정된 읽기 전용 시퀀스에서 읽기 전용 시퀀스 세그먼트 검색을 시도합니다.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the read-only sequence segment will be retrieved.">읽기 전용 시퀀스 세그먼트를 검색할 읽기 전용 시퀀스입니다.</param>
      <param name="startSegment" vsli:raw="The beginning read-only sequence segment.">시작 읽기 전용 시퀀스 세그먼트입니다.</param>
      <param name="startIndex" vsli:raw="The initial position.">초기 위치입니다.</param>
      <param name="endSegment" vsli:raw="The ending read-only sequence segment.">끝 읽기 전용 시퀀스 세그먼트입니다.</param>
      <param name="endIndex" vsli:raw="The final position.">최종 위치입니다.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">읽기 전용 시퀀스의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence segment can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">읽기 전용 시퀀스 세그먼트를 검색할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary vsli:raw="Attempts to read the specified type out of the buffer. It's dangerous to use this method with arbitrary structs - see remarks for more information.">버퍼에서 지정된 형식 읽기를 시도합니다. 임의 구조체와 함께 이 메서드를 사용하는 것은 위험합니다. 자세한 내용은 설명 부분을 참조하세요.</summary>
      <param name="reader" vsli:raw="A reference to the sequence reader.">시퀀스 판독기에 대한 참조입니다.</param>
      <param name="value" vsli:raw="The returned value if the read was successful. &lt;paramref name=&quot;value&quot; /&gt; will be &lt;see langword=&quot;default&quot; /&gt; if failed (due to lack of space).">읽기에 성공한 경우 반환되는 값입니다. 실패한 경우(공간 부족으로 인해) <paramref name="value" />는 <see langword="default" />가 됩니다.</param>
      <typeparam name="T" vsli:raw="The type of the value.">값의 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read attempt was successful, &lt;see langword=&quot;false&quot; /&gt; otherwise.">읽기 시도에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary vsli:raw="Represents a position in a non-contiguous set of memory. Properties of this type should not be interpreted by anything but the type that created it.">인접하지 않은 메모리 집합의 위치를 나타냅니다. 이 형식의 속성은 해당 속성을 만든 형식으로만 해석되어야 합니다.</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; struct.">
        <see cref="T:System.SequencePosition" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="object" vsli:raw="A non-contiguous set of memory.">인접하지 않은 메모리 집합입니다.</param>
      <param name="integer" vsli:raw="The position in &lt;paramref name=&quot;object&quot; /&gt;.">
        <paramref name="object" /> 내의 위치입니다.</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance is equal to another object.">현재 인스턴스가 다른 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">현재 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is of type &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; and is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see cref="T:System.SequencePosition" /> 유형이고 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary vsli:raw="Indicates whether the current instance is equal to another &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">현재 인스턴스와 다른 <see cref="T:System.SequencePosition" />이 같은지 나타냅니다.</summary>
      <param name="other" vsli:raw="The sequence position to compare with the current instance.">현재 인스턴스와 비교할 시퀀스 위치입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; &lt;see langword=&quot;false&quot; /&gt; otherwise.">두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary vsli:raw="Returns the integer part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">이 <see cref="T:System.SequencePosition" />의 정수 부분을 반환합니다.</summary>
      <returns vsli:raw="The integer part of this sequence position.">이 시퀀스 위치의 정수 부분입니다.</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary vsli:raw="Returns the object part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">이 <see cref="T:System.SequencePosition" />의 개체 부분을 반환합니다.</summary>
      <returns vsli:raw="The object part of this sequence position.">이 시퀀스 위치의 개체 부분입니다.</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary vsli:raw="Provides an enumerator for the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; values represented by a span containing UTF-16 text.">UTF-16 텍스트가 포함된 범위로 표현된 <see cref="T:System.Text.Rune" /> 값의 열거자를 제공합니다.</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">열거자의 현재 위치에 있는 <see cref="T:System.Text.Rune" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">열거자의 현재 위치 에있는입니다.<see cref="T:System.Text.Rune" /></returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary vsli:raw="Returns the current enumerator instance.">현재 열거자 인스턴스를 반환합니다.</summary>
      <returns vsli:raw="The current enumerator instance.">현재 열거자 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; of the span.">열거자를 범위의 다음 <see cref="T:System.Text.Rune" />으로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the span has been reached.">열거자가 다음 항목으로 성공적으로 이동한 경우 <see langword="true" />이며, 범위의 끝에 도달한 경우에는 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 주석을 처리하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>JSON 입력 내에서 주석을 허용하고 유효한 토큰으로 간주합니다. 읽는 동안 호출자는 주석 값에 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>JSON 입력 내에서 주석을 허용하지 않습니다. 주석이 발견되면 잘못된 JSON으로 간주되고 <see cref="T:System.Text.Json.JsonException" />이 throw됩니다. 기본값입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>JSON 입력 내에서 주석을 허용하고 무시합니다. <see cref="T:System.Text.Json.Utf8JsonReader" />는 주석이 없는 것처럼 동작합니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>데이터 값을 자동으로 인스턴스화하지 않고 JSON 값의 구조적 콘텐츠를 검사하는 메커니즘을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>이 <see cref="T:System.Text.Json.JsonDocument" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>시퀀스를 단일 JSON 바이트 값을 나타내는 UTF-8로 인코딩된 텍스트로 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns>JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>
        <see cref="T:System.IO.Stream" />을 단일 JSON 값을 나타내는 UTF-8로 인코딩된 데이터로 구문 분석하여 JsonDocument로 변환합니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 데이터입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns>JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>메모리를 단일 JSON 바이트 값을 나타내는 UTF-8로 인코딩된 텍스트로 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns>JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>단일 JSON 문자 값을 나타내는 텍스트를 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns>JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>단일 JSON 문자열 값을 나타내는 텍스트를 구문 분석하여 JsonDocument로 변환합니다.</summary>
      <param name="json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <returns>JSON 값의 JsonDocument 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.IO.Stream" />을 단일 JSON 값을 나타내는 UTF-8로 인코딩된 데이터로 구문 분석하여 JsonDocument로 변환합니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 데이터입니다.</param>
      <param name="options">구문 분석하는 동안 판독기 동작을 제어하는 옵션입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>JSON 값의 JsonDocument 표현을 생성하는 작업입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" />은 유효한 단일 JSON 값을 나타내지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" />에 지원되지 않는 옵션이 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>제공된 판독기에서 단일 JSON 값(개체 또는 배열 포함)을 구문 분석합니다.</summary>
      <param name="reader">읽을 판독기입니다.</param>
      <returns>판독기에서 읽은 값(및 중첩된 값)을 나타내는 JsonDocument입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" />에 지원되지 않는 옵션이 있습니다.</exception>
      <exception cref="T:System.Text.Json.JsonException">판독기에서 값을 읽을 수 없습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>이 JSON 문서의 루트 요소를 가져옵니다.</summary>
      <returns>문서 값을 나타내는입니다. <see cref="T:System.Text.Json.JsonElement" /></returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>제공된 판독기에서 단일 JSON 값(개체 또는 배열 포함)을 구문 분석하려고 합니다.</summary>
      <param name="reader">읽을 판독기입니다.</param>
      <param name="document">메서드가 반환되면 구문 분석된 문서가 포함됩니다.</param>
      <returns>값을 읽고 JsonDocument로 구문 분석한 경우 <see langword="true" />이고, 구문 분석하는 동안 판독기에 데이터가 부족한 경우 <see langword="false" />입니다. 다른 모든 상황에서는 예외가 발생합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" />에 지원되지 않는 옵션이 있습니다.</exception>
      <exception cref="T:System.Text.Json.JsonException">판독기에서 값을 읽을 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>제공된 기록기에 문서를 JSON 값으로 씁니다.</summary>
      <param name="writer">문서를 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 <see cref="P:System.Text.Json.JsonDocument.RootElement" />의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />로 인해 JSON이 잘못될 수 있습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>JSON을 구문 분석하여 <see cref="T:System.Text.Json.JsonDocument" />를 만들 때 사용자 지정 동작을 정의할 수 있는 기능을 사용자에게 제공합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>읽고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />개체 또는 배열에서 JSON 값 목록의 끝에 쉼표를 추가로 사용할 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다. 기본값은<see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>JSON 데이터를 읽을 때 <see cref="T:System.Text.Json.JsonDocument" />에서 주석을 처리하는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>주석을 처리 하는 방법을 나타내는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">주석 처리 열거형이 지원되지 않거나 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형 범위에 포함되지 않는 값으로 설정되어 있습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>최대 깊이 64를 나타내는 기본값(즉, 0)을 사용하여, JSON 데이터를 구문 분석할 때 허용되는 최대 깊이를 가져오거나 설정합니다.</summary>
      <returns>JSON 데이터를 구문 분석할 때 허용 되는 최대 깊이입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">최대 깊이가 음수 값으로 설정된 경우</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>
        <see cref="T:System.Text.Json.JsonDocument" /> 내에서 특정 JSON 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>JSON 배열 콘텐츠의 열거자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>이 <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>배열에서 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체에서 반복하는 데 사용할 수 있는 <see cref="T:System.Text.Json.JsonElement" /> 배열의 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>원래 <see cref="T:System.Text.Json.JsonDocument" />의 수명을 초과하여 안전하게 저장할 수 있는 JsonElement를 가져옵니다.</summary>
      <returns>원래 <see cref="T:System.Text.Json.JsonDocument" />의 수명을 초과하여 안전하게 저장할 수 있는 JsonElement입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>이 JsonElement로 표현된 JSON 배열의 값을 열거하는 열거자를 가져옵니다.</summary>
      <returns>이 JsonElement로 표현된 JSON 배열의 값을 열거하는 열거자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>이 JsonElement로 표현된 JSON 개체의 속성을 열거하는 열거자를 가져옵니다.</summary>
      <returns>이 JsonElement로 표현된 JSON 개체의 속성을 열거하는 열거자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>현재 배열 값에 포함된 값의 수를 가져옵니다.</summary>
      <returns>현재 배열 값에 포함된 값의 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>요소 값을 <see cref="T:System.Boolean" />으로 가져옵니다.</summary>
      <returns>요소 값은 <see cref="T:System.Boolean" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.True" />도 <see cref="F:System.Text.Json.JsonValueKind.False" />도 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>현재 JSON 숫자를 <see cref="T:System.Byte" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Byte" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Byte" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>요소의 값을 바이트 배열로 가져옵니다.</summary>
      <returns>바이트 배열로 디코딩된 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 Base 64 텍스트로 인코딩되지 않으므로 바이트로 디코딩할 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>요소 값을 <see cref="T:System.DateTime" />으로 가져옵니다.</summary>
      <returns>요소 값은 <see cref="T:System.DateTime" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.DateTime" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>요소 값을 <see cref="T:System.DateTimeOffset" />으로 가져옵니다.</summary>
      <returns>요소 값은 <see cref="T:System.DateTimeOffset" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.DateTimeOffset" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>현재 JSON 숫자를 <see cref="T:System.Decimal" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Decimal" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Decimal" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>현재 JSON 숫자를 <see cref="T:System.Double" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Double" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Double" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>요소 값을 <see cref="T:System.Guid" />으로 가져옵니다.</summary>
      <returns>요소 값은 <see cref="T:System.Guid" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Guid" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int16" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Int16" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Int16" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int32" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Int32" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Int32" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int64" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Int64" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Int64" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>
        <paramref name="utf8PropertyName" />으로 식별된 필수 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />를 가져옵니다.</summary>
      <param name="utf8PropertyName">반환할 속성 이름에 대한 UTF-8 표현(BOM(바이트 순서 표시) 없음)입니다.</param>
      <returns>요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>
        <paramref name="propertyName" />으로 식별된 필수 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />를 가져옵니다.</summary>
      <param name="propertyName">값이 반환될 속성의 이름입니다.</param>
      <returns>요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>
        <paramref name="propertyName" />으로 식별된 필수 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />를 가져옵니다.</summary>
      <param name="propertyName">값이 반환될 속성의 이름입니다.</param>
      <returns>요청한 속성 값을 나타내는 <see cref="T:System.Text.Json.JsonElement" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">요청한 이름의 속성을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>이 값을 지원하는 원래 입력 데이터를 나타내는 문자열을 가져옵니다.</summary>
      <returns>이 값을 지원하는 원래 입력 데이터입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>현재 JSON 숫자를 <see cref="T:System.SByte" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.SByte" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.SByte" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>현재 JSON 숫자를 <see cref="T:System.Single" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.Single" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.Single" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>요소 값을 <see cref="T:System.String" />으로 가져옵니다.</summary>
      <returns>요소 값은 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />도 <see cref="F:System.Text.Json.JsonValueKind.Null" />도 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt16" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.UInt16" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.UInt16" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt32" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.UInt32" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.UInt32" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt64" />로 가져옵니다.</summary>
      <returns>현재 JSON 숫자는 <see cref="T:System.UInt64" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 <see cref="T:System.UInt64" />로 나타낼 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>현재 값이 <see cref="F:System.Text.Json.JsonValueKind.Array" />이면 지정한 인덱스에서 값을 가져옵니다.</summary>
      <param name="index">항목 인덱스입니다.</param>
      <returns>지정한 인덱스의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Array" />가 아닙니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />는 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()] 범위에 있지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>JSON 개체의 속성에 대한 열거자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>이 <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>개체의 속성을 반복하는 열거자를 반환합니다.</summary>
      <returns>개체를 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Text.Json.JsonProperty" /> 개체의 열거자입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>값 형식에 적합한 현재 값에 대한 문자열 표현을 가져옵니다.</summary>
      <returns>값 형식에 적합한 현재 값에 대한 문자열 표현입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Byte" />로 나타내려고 합니다.</summary>
      <param name="value">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 바이트가 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Byte" />으로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Base64로 인코딩된 것으로 가정하고 현재 JSON 문자열을 바이트 배열로 표시하려고 시도합니다.</summary>
      <param name="value">메서드가 성공하면 Base64 텍스트의 디코딩된 이진 표현을 포함합니다.</param>
      <returns>전체 토큰 값이 유효한 Base64 텍스트로 인코딩되고 바이트에 성공적으로 디코딩할 수 있으면 <see langword="true" />입니다.
              그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>현재 JSON 문자열을 <see cref="T:System.DateTime" />으로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 날짜 및 시간 값이 포함됩니다.</param>
      <returns>문자열을 <see cref="T:System.DateTime" />으로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>현재 JSON 문자열을 <see cref="T:System.DateTimeOffset" />으로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 날짜 및 시간이 포함됩니다.</param>
      <returns>문자열을 <see cref="T:System.DateTimeOffset" />으로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Decimal" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 10진수가 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Decimal" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Double" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 배정밀도 부동 소수점 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Double" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>현재 JSON 문자열을 <see cref="T:System.Guid" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 문자열에 해당하는 GUID가 포함됩니다.</param>
      <returns>문자열을 <see cref="T:System.Guid" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />이 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int16" />로 나타내려고 합니다.</summary>
      <param name="value">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 16비트 정수가 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Int16" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int32" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 32비트 정수 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Int32" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Int64" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 64비트 정수 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Int64" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>현재 개체에서 <paramref name="utf8PropertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 메서드에서 해당 값을 <paramref name="value" /> 인수에 할당합니다.</summary>
      <param name="utf8PropertyName">반환할 속성 이름에 대한 UTF-8 표현(BOM(바이트 순서 표시) 없음)입니다.</param>
      <param name="value">찾은 속성 값을 받습니다.</param>
      <returns>속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>현재 개체에서 <paramref name="propertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 메서드에서 해당 값을 <paramref name="value" /> 인수에 할당합니다.</summary>
      <param name="propertyName">찾으려는 속성의 이름입니다.</param>
      <param name="value">이 메서드가 반환되면 지정한 속성 값이 포함됩니다.</param>
      <returns>속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>현재 개체에서 <paramref name="propertyName" />이라는 속성을 찾고 해당 속성이 있는지 여부를 나타내는 값을 반환합니다. 속성이 있으면 해당 값이 <paramref name="value" /> 인수에 할당됩니다.</summary>
      <param name="propertyName">찾으려는 속성의 이름입니다.</param>
      <param name="value">이 메서드가 반환되면 지정한 속성 값이 포함됩니다.</param>
      <returns>속성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Object" />가 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.SByte" />로 나타내려고 합니다.</summary>
      <param name="value">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 부호 있는 바이트가 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.SByte" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.Single" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 단정밀도 부동 소수점 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.Single" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt16" />로 나타내려고 합니다.</summary>
      <param name="value">메서드가 반환되면 변환에 성공한 경우 현재 JSON 숫자에 해당하는 부호 없는 16비트 정수가 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.UInt16" />으로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt32" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 부호 없는 32비트 정수 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.UInt32" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>현재 JSON 숫자를 <see cref="T:System.UInt64" />로 나타내려고 합니다.</summary>
      <param name="value">이 메서드가 반환되면 현재 JSON 숫자에 해당하는 부호 없는 64비트 정수 값이 포함됩니다.</param>
      <returns>숫자를 <see cref="T:System.UInt64" />로 나타낼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.Number" />가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>UTF8으로 인코딩된 바이트 범위로 표시되는 텍스트를 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="utf8Text">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns>이 요소의 문자열 값이 <paramref name="utf8Text" />와 동일한 UTF-8 인코딩을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>지정된 읽기 전용 문자 범위를 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="text">비교할 대상인 텍스트입니다.</param>
      <returns>이 요소의 문자열 값이 <paramref name="text" />와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>지정된 문자열을 이 요소의 문자열 값과 비교합니다.</summary>
      <param name="text">비교할 대상인 텍스트입니다.</param>
      <returns>이 요소의 문자열 값이 <paramref name="text" />와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />은 <see cref="F:System.Text.Json.JsonValueKind.String" />가 아닙니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>현재 JSON 값의 형식을 가져옵니다.</summary>
      <returns>현재 JSON 값의 형식입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>지정된 기록기에 요소를 JSON 값으로 씁니다.</summary>
      <param name="writer">요소를 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />는 <see cref="F:System.Text.Json.JsonValueKind.Undefined" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>UTF-8 또는 UTF-16 인코딩 텍스트를 JSON에 적합한 형식으로 변환하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>UTF-8 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="utf8Value">JSON 인코딩 텍스트로 변환할 UTF-8 인코딩된 텍스트입니다.</param>
      <param name="encoder">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns>인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" />이 너무 큰 경우
또는
<paramref name="utf8Value" />에 잘못된 UTF-8 바이트가 들어 있는 경우</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>지정된 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="value">JSON 인코딩된 텍스트로 변환할 값입니다.</param>
      <param name="encoder">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns>인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 너무 큰 경우
또는
<paramref name="value" />에 잘못된 UTF-16 문자가 들어 있는 경우</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>문자열 텍스트 값을 JSON 문자열로 인코딩합니다.</summary>
      <param name="value">JSON 인코딩된 텍스트로 변환할 값입니다.</param>
      <param name="encoder">문자열을 이스케이프할 때 사용할 인코더입니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</param>
      <returns>인코딩된 JSON 텍스트입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 너무 큰 경우
또는
<paramref name="value" />에 잘못된 UTF-16 문자가 들어 있는 경우</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>미리 인코딩된 JSON 텍스트의 UTF-8 인코딩 표현을 가져옵니다.</summary>
      <returns>미리 인코딩된 JSON 텍스트의 u t f-8로 인코딩된 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체(<see cref="T:System.Text.Json.JsonEncodedText" /> 인스턴스여야 함)의 값이 같은지를 확인합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>이 인스턴스와 지정된 다른 <see cref="T:System.Text.Json.JsonEncodedText" /> 인스턴스의 값이 같은지를 확인합니다.</summary>
      <param name="other">이 인스턴스와 비교할 개체입니다.</param>
      <returns>이 인스턴스와 <paramref name="other" />의 값이 같으면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>이 <see cref="T:System.Text.Json.JsonEncodedText" />의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>이 인스턴스의 값을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>기본 UTF-16 인코딩 문자열입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>잘못된 JSON 텍스트가 발견되거나, 정의된 최대 깊이가 전달되거나, JSON 텍스트가 개체의 속성 형식과 호환되지 않을 때 throw되는 사용자 지정 예외 개체를 정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>직렬화된 데이터로 새 예외 개체를 만듭니다.</summary>
      <param name="info">throw되는 예외에 대한 serialize된 개체 데이터입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">컨텍스트별 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Text.Json.JsonException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">컨텍스트별 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>사용자에게 오류 정보를 릴레이하기 위해 새로운 예외 개체를 만듭니다.</summary>
      <param name="message">컨텍스트별 오류 메시지입니다.</param>
      <param name="path">잘못된 JSON이 발견된 경로입니다.</param>
      <param name="lineNumber">역직렬화할 때 잘못된 JSON이 발견된 줄 번호(0부터 시작)입니다.</param>
      <param name="bytePositionInLine">잘못된 JSON이 발견된 현재 줄(0부터 시작)의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>지정된 내부 예외를 포함하는 사용자에게 오류 정보를 릴레이하는 새 예외 개체를 만듭니다.</summary>
      <param name="message">컨텍스트별 오류 메시지입니다.</param>
      <param name="path">잘못된 JSON이 발견된 경로입니다.</param>
      <param name="lineNumber">역직렬화할 때 잘못된 JSON이 발견된 줄 번호(0부터 시작)입니다.</param>
      <param name="bytePositionInLine">잘못된 JSON이 발견된 현재 줄의 바이트 수입니다(0부터 시작).</param>
      <param name="innerException">현재 예외를 발생시킨 예외입니다.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>예외 앞의 현재 줄에서 읽은 바이트 수를 가져옵니다(0부터 시작).</summary>
      <returns>예외 앞의 현재 줄에서 읽은 바이트 수 (0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>예외에 대한 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info">throw되는 예외에 대한 serialize된 개체 데이터입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 개체입니다.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>예외 전에 읽은 줄의 수를 가져옵니다(0부터 시작).</summary>
      <returns>예외 전에 읽은 줄의 0부터 시작 하는 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>현재 예외를 설명하는 메시지를 가져옵니다.</summary>
      <returns>현재 예외를 설명하는 오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>예외가 발생한 JSON 내의 경로를 가져옵니다.</summary>
      <returns>예외가 발생 한 JSON 내의 경로입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>문자열 기반 이름을 카멜식 대/소문자 형식과 같은 다른 형식으로 변환하는 데 사용되는 명명 정책을 결정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonNamingPolicy" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>카멜식 대/소문자에 대한 명명 정책을 가져옵니다.</summary>
      <returns>카멜식 대/소문자를 구분 하는 명명 정책입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>파생 클래스에서 재정의된 경우 정책에 따라 지정된 이름을 변환합니다.</summary>
      <param name="name">변환할 이름입니다.</param>
      <returns>변환된 이름입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>JSON 개체의 단일 속성을 나타냅니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>이 속성의 이름을 가져옵니다.</summary>
      <returns>이 속성의 이름입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>지정된 UTF-8로 인코딩된 텍스트를 이 속성의 이름과 비교합니다.</summary>
      <param name="utf8Text">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns>이 속성의 이름에 <paramref name="utf8Text" />와 동일한 UTF-8 인코딩이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>문자 범위로 지정된 텍스트를 이 속성의 이름과 비교합니다.</summary>
      <param name="text">비교할 대상인 텍스트입니다.</param>
      <returns>이 속성의 이름이 <paramref name="text" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>지정된 문자열을 이 속성의 이름과 비교합니다.</summary>
      <param name="text">비교할 대상인 텍스트입니다.</param>
      <returns>이 속성의 이름이 <paramref name="text" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 값의 <see cref="T:System.Type" />은 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>디버깅 목적으로 속성의 문자열 표현을 제공합니다.</summary>
      <returns>해석되지 않은 속성 값을 포함하고 있는 문자열이며, 선언 open-quote에서 시작되고 값의 일부인 마지막 문자에서 종료됩니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>이 속성의 값을 가져옵니다.</summary>
      <returns>이 속성의 값입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>제공된 기록기에 속성을 명명된 JSON 개체 속성으로 씁니다.</summary>
      <param name="writer">속성을 작성할 기록기입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" />이 너무 커서 JSON 개체 속성이 될 수 없습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이 JSON 속성의 <see cref="P:System.Text.Json.JsonProperty.Value" />의 <see cref="P:System.Text.Json.JsonElement.ValueKind" />로 인해 JSON이 잘못될 수 있습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">부모 <see cref="T:System.Text.Json.JsonDocument" />가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>JSON을 읽을 때 사용자 지정 동작을 정의할 수 있는 기능을 사용자에게 제공합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>읽고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 정의하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />exra 쉼표가 허용 되는 경우 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>JSON 데이터를 읽을 때 <see cref="T:System.Text.Json.Utf8JsonReader" />에서 주석을 처리하는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>주석을 처리 하는 방법을 나타내는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">속성이 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형의 멤버가 아닌 값으로 설정됩니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>최대 깊이 64를 나타내는 기본값(즉, 0)을 사용하여, JSON을 읽을 때 허용되는 최대 깊이를 가져오거나 설정합니다.</summary>
      <returns>JSON을 읽을 때 허용되는 최대 깊이입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">최대 깊이가 음수 값으로 설정됩니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>불완전한 데이터를 처리한 후에도 계속 읽기 위해 <see cref="T:System.Text.Json.Utf8JsonReader" />에 제공되어야 하는 모든 관련 상태 정보를 보유하고 저장하는 불투명 형식을 정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>새 <see cref="T:System.Text.Json.JsonReaderState" /> 인스턴스를 생성합니다.</summary>
      <param name="options">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의합니다(예: 주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이 64까지 읽습니다.</param>
      <exception cref="T:System.ArgumentException">최대 깊이는 양수가 아닌 값(&lt; 0)으로 설정됩니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>기본 동작인 JSON 사양을 엄격하게 준수하지 않는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체를 사용하여 JSON 데이터를 읽을 때 사용할 사용자 지정 동작을 가져옵니다.</summary>
      <returns>JSON 데이터를 읽을 때 사용할 사용자 지정 동작입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>개체 또는 값 형식을 JSON으로 직렬화하고 JSON을 개체 또는 값 형식으로 deserialize하는 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 구문 분석합니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="returnType">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <returns>JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었거나, <paramref name="returnType" />이 JSON과 호환되지 않거나, 스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 텍스트를 구문 분석합니다.</summary>
      <param name="json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="returnType">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <returns>JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> 또는 <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었거나, <paramref name="returnType" />이 JSON과 호환되지 않거나, 스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>제공된 판독기에서 JSON 값 하나(개체 또는 배열 포함)를 읽고 지정된 형식의 인스턴스로 변환합니다.</summary>
      <param name="reader">읽을 판독기입니다.</param>
      <param name="returnType">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options">읽는 동안 직렬 변환기 동작을 컨트롤하는 옵션입니다.</param>
      <returns>JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었거나, <paramref name="returnType" />이 JSON과 호환되지 않거나, 판독기에서 값을 읽을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" />에서 지원되지 않는 옵션을 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 구문 분석합니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">U t f-8로 인코딩된 텍스트의 대상 형식입니다.</typeparam>
      <returns>JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었습니다.
또는
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
또는
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 텍스트를 구문 분석합니다.</summary>
      <param name="json">구문 분석할 JSON 텍스트입니다.</param>
      <param name="options">구문 분석하는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">JSON 값의 대상 형식입니다.</typeparam>
      <returns>JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었습니다.
또는
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
또는
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>제공된 판독기에서 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 JSON 값 하나(개체 또는 배열 포함)를 읽어옵니다.</summary>
      <param name="reader">읽을 판독기입니다.</param>
      <param name="options">읽는 동안 직렬 변환기 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">JSON 값의 대상 형식입니다.</typeparam>
      <returns>JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었습니다.
또는
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
또는
스트림에 남은 데이터가 있습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" />에서 지원되지 않는 옵션을 사용합니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>단일 JSON 값을 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 비동기적으로 읽습니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 데이터입니다.</param>
      <param name="returnType">변환하고 반환할 개체의 형식입니다.</param>
      <param name="options">읽는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken">읽기 작업을 취소하는 데 사용할 수 있는 취소 토큰입니다.</param>
      <returns>JSON 값의 <paramref name="returnType" /> 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> 또는 <paramref name="returnType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었습니다.
또는
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
또는
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>단일 JSON 값을 제네릭 형식 매개 변수에 지정된 유형의 인스턴스로 나타내는 UTF-8로 인코딩된 텍스트를 비동기적으로 읽습니다. 완료될 때까지 스트림을 읽습니다.</summary>
      <param name="utf8Json">구문 분석할 JSON 데이터입니다.</param>
      <param name="options">읽는 동안 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken">읽기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TValue">JSON 값의 대상 형식입니다.</typeparam>
      <returns>JSON 값의 <typeparamref name="TValue" /> 표현입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">JSON이 잘못되었습니다.
또는
<typeparamref name="TValue" />가 JSON과 호환되지 않습니다.
또는
스트림에 남은 데이터가 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>지정된 형식의 값을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <param name="type">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options">변환 동작을 컨트롤하는 옵션입니다.</param>
      <returns>값의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>지정된 형식의 JSON 값 하나(개체 또는 배열 포함)를 제공된 작성기에 씁니다.</summary>
      <param name="writer">JSON 작성기입니다.</param>
      <param name="value">변환하고 쓸 값입니다.</param>
      <param name="type">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options">직렬화 동작을 컨트롤하는 옵션입니다.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>제네릭 형식 매개 변수에 지정된 형식 값을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <param name="options">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">Serialize 할 값의 형식입니다.</typeparam>
      <returns>값의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>제네릭 형식 매개 변수에 지정된 형식의 JSON 값 하나(개체 또는 배열 포함)를 제공된 작성기에 씁니다.</summary>
      <param name="writer">JSON 작성기입니다.</param>
      <param name="value">변환하고 쓸 값입니다.</param>
      <param name="options">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">Serialize 할 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>지정된 형식의 값을 UTF-8로 인코딩된 JSON 텍스트로 비동기적으로 변환하고 지정된 스트림에 씁니다.</summary>
      <param name="utf8Json">쓸 UTF-8 스트림입니다.</param>
      <param name="value">변환할 값입니다.</param>
      <param name="type">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken">쓰기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>제네릭 형식 매개 변수에 지정된 형식의 값을 UTF-8로 인코딩된 JSON 텍스트로 비동기적으로 변환하고 스트림에 씁니다.</summary>
      <param name="utf8Json">쓸 UTF-8 스트림입니다.</param>
      <param name="value">변환할 값입니다.</param>
      <param name="options">직렬화 동작을 컨트롤하는 옵션입니다.</param>
      <param name="cancellationToken">쓰기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TValue">Serialize 할 값의 형식입니다.</typeparam>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>지정된 형식의 값을 UTF8로 인코딩된 바이트 배열로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <param name="type">변환할 <paramref name="value" />의 형식입니다.</param>
      <param name="options">변환 동작을 컨트롤하는 옵션입니다.</param>
      <returns>값의 UTF-8 표현입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>제네릭 형식 매개 변수에 지정된 형식 값을 UTF-8로 인코딩된 바이트 배열로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <param name="options">변환 동작을 컨트롤하는 옵션입니다.</param>
      <typeparam name="TValue">값의 형식입니다.</typeparam>
      <returns>값의 UTF-8 표현입니다.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>
        <see cref="T:System.Text.Json.JsonSerializer" />와 함께 사용할 옵션을 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonSerializerOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>deserialize하고 있는 JSON 페이로드 내에서 개체 또는 배열의 JSON 값 목록 끝에 추가 쉼표가 허용되는지(그리고 무시되는지) 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />개체 또는 배열에서 JSON 값 목록의 끝에 쉼표를 추가로 사용할 수 있으면이 고, 그렇지 않으면입니다. <see langword="false" /> 그렇지 않으면입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>등록된 사용자 정의 변환기의 목록을 가져옵니다.</summary>
      <returns>사용자 지정 변환기의 목록입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>임시 버퍼를 만들 때 사용할 기본 버퍼 크기(바이트)를 가져오거나 설정합니다.</summary>
      <returns>기본 버퍼 크기 (바이트)입니다.</returns>
      <exception cref="T:System.ArgumentException">버퍼 크기가 1보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 키의 이름을 다른 형식(예: 카멜 대/소문자)으로 변환하는 데 사용하는 정책을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 키의 이름을 다른 형식으로 변환 하는 데 사용 되는 정책입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>문자열을 이스케이프할 때 사용할 인코더를 가져오거나 설정합니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</summary>
      <returns>JavaScript 문자 인코딩입니다.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>지정된 형식에 대한 변환기를 반환합니다.</summary>
      <param name="typeToConvert">변환기를 반환할 형식입니다.</param>
      <returns>지정된 형식을 지원하는 첫 번째 변환기입니다. 또는 변환기가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>serialization 및 deserialization 중에 <see langword="null" /> 값을 무시할지 판별하는 값을 가져오거나 설정합니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns>
        <see langword="true" />serialization 및 deserialization 중에 null 값을 무시 하려면 그렇지 않으면 langword = "false"/&gt;를 참조 하세요.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>serialization 중에 읽기 전용 속성이 무시되는지를 결정하는 값을 가져옵니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns>
        <see langword="true" />serialization 중에 읽기 전용 속성을 무시 하려면 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>JSON을 serialize하거나 deserialize할 때 허용되는 최대 깊이를 가져오거나 설정합니다. 기본값 0이며, 최대 깊이 64를 나타냅니다.</summary>
      <returns>JSON을 serialize 또는 deserialize 할 때 허용 되는 최대 깊이입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">최대 깊이가 음수 값으로 설정된 경우</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>deserialization을 수행하는 동안 속성의 이름에 대/소문자를 구분하지 않는 비교를 사용할지 결정하는 값을 가져오거나 설정합니다. 기본값은 <see langword="false" />입니다.</summary>
      <returns>
        <see langword="true" />대/소문자를 구분 하지 않는 비교를 사용 하 여 속성 이름을 비교 하려면 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>개체의 속성 이름을 카멜 대/소문자 구분과 같은 다른 형식으로 변환하는 데 사용되는 정책을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>의 열거형 값 <see cref="T:System.Text.Json.JsonNamingPolicy" />중 하나입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>deserialization 중에 주석을 처리하는 방법을 정의하는 값을 가져오거나 설정합니다.</summary>
      <returns>주석의 허용, 허용 안 함 또는 건너뜀 여부를 나타내는 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">주석 처리 열거형이 지원되지 않거나 <see cref="T:System.Text.Json.JsonCommentHandling" /> 열거형 범위에 포함되지 않는 값으로 설정되어 있습니다.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>JSON에서 자동 서식 지정을 사용해야 하는지를 정의하는 값을 가져오거나 설정합니다. 기본적으로 JSON은 추가 공백 없이 serialize됩니다.</summary>
      <returns>
        <see langword="true" />JSON이 serialization에서 매우 인쇄 되어야 하는 경우 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 serialization 또는 deserialization이 발생한 후에 설정되었습니다.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>JSON 텍스트를 구성하는 다양한 JSON 토큰을 정의합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>토큰 형식이 주석 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>토큰 형식이 JSON 배열의 끝입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>토큰 형식이 JSON 개체의 끝입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>토큰 형식이 JSON 리터럴 false입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>값이 없습니다(<see cref="F:System.Text.Json.JsonTokenType.Null" />과 다르므로).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>토큰 형식이 JSON 리터럴 null입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>토큰 형식이 JSON 번호입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>토큰 형식이 JSON 속성 이름입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>토큰 형식이 JSON 배열의 시작입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>토큰 형식이 JSON 개체의 시작입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>토큰 형식이 JSON 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>토큰 형식이 JSON 리터럴 true입니다.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>JSON 값의 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>JSON 배열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>값이 JSON 값 <see langword="false" />임을 나타냅니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>JSON 값 <see langword="null" />입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>JSON 번호입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>JSON 개체입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>JSON 문자열입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>JSON 값 <see langword="true" />입니다.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>값이 없습니다(<see cref="F:System.Text.Json.JsonValueKind.Null" />과 다르므로).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>사용자가 <see cref="T:System.Text.Json.Utf8JsonWriter" />를 사용하여 JSON을 작성할 때 사용자 지정 동작을 정의할 수 있습니다.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>문자열을 이스케이프할 때 사용할 인코더를 가져오거나 설정합니다. 기본 인코더를 사용하려는 경우에는 <see langword="null" />입니다.</summary>
      <returns>JavaScript 문자 인코딩입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonWriter" />가 출력 JSON의 형식을 지정해야 하는지를 나타내는 값을 가져오거나 설정합니다. 여기에는 중첩된 JSON 토큰 들여쓰기, 새 줄 추가 및 속성 이름과 값 사이 공백 추가가 포함됩니다.</summary>
      <returns>
        <see langword="true" />JSON 출력의 형식을 지정 하려면 <see langword="false" /> 추가 공백 없이 쓰려면입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonWriter" />가 구조 유효성 검사를 건너뛰고 사용자가 잘못된 JSON을 작성하도록 허용해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />구조 유효성 검사를 건너뛰고 잘못 된 JSON을 허용 하려면 잘못 된 JSON <see cref="T:System.InvalidOperationException" /> 을 쓰려고 할 때를 throw 하려면입니다. <see langword="false" /></returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>serialization 특성에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonAttribute" />의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>개체 또는 값을 JSON으로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>파생 클래스에서 재정의되는 경우 변환기 인스턴스가 지정된 개체 형식을 변환할 수 있는지 결정합니다.</summary>
      <param name="typeToConvert">이 변환기 인스턴스로 변환할 수 있는지를 확인할 개체의 형식입니다.</param>
      <returns>인스턴스가 지정된 개체 형식을 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>개체 또는 값을 JSON으로 변환하거나 그 반대로 변환합니다.</summary>
      <typeparam name="T">변환기에서 처리 하는 개체 또는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>새 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>지정된 형식을 변환할 수 있는지를 확인합니다.</summary>
      <param name="typeToConvert">비교할 형식입니다.</param>
      <returns>형식을 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>JSON을 읽고 <typeparamref name="T" /> 형식으로 변환합니다.</summary>
      <param name="reader">판독기입니다.</param>
      <param name="typeToConvert">변환할 형식입니다.</param>
      <param name="options">사용할 직렬화 옵션을 지정하는 개체입니다.</param>
      <returns>변환된 값입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>지정된 값을 JSON으로 씁니다.</summary>
      <param name="writer">쓰려는 대상 작성기입니다.</param>
      <param name="value">JSON으로 변환할 값입니다.</param>
      <param name="options">사용할 직렬화 옵션을 지정하는 개체입니다.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>속성 또는 형식에 배치될 때 사용할 변환기 유형을 지정합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>지정된 변환기 형식을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType">변환기의 형식입니다.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />의 형식을 가져옵니다. 또는 형식을 사용하지 않고 만든 경우 <see langword="null" />입니다.</summary>
      <returns>의 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />형식 이거나 <see langword="null" /> , 형식 없이 만들어진 경우입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>파생 클래스에서 재정의하고 <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" />이 <see langword="null" />이면 추가 상태를 전달하기 위해 파생 클래스를 사용하여 <see cref="T:System.Text.Json.Serialization.JsonConverter" />를 만들 수 있습니다.</summary>
      <param name="typeToConvert">변환기의 형식입니다.</param>
      <returns>사용자 지정 변환기입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>팩터리 패턴을 통한 여러 형식 변환을 지원합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>지정된 형식에 대한 변환기를 만듭니다.</summary>
      <param name="typeToConvert">변환기에서 처리되는 형식입니다.</param>
      <param name="options">사용할 serialization 옵션입니다.</param>
      <returns>
        <typeparamref name="T" />가 <paramref name="typeToConvert" />와 호환 가능한 변환기입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 형식의 속성에 배치된 경우 일치하는 멤버가 없는 속성은 deserialization 중에 해당 사전에 추가되고 serialization 중에 작성됩니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>속성이 직렬화 또는 deserialize되지 않도록 합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>직렬화 및 역직렬화 시 JSON에 표시되는 속성 이름을 지정합니다. 이는 <see cref="T:System.Text.Json.JsonNamingPolicy" />로 지정된 모든 명명 정책을 재정의합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>지정된 속성 이름을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">속성의 이름입니다.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>열거형 값을 문자열로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>정수 값을 허용하는 기본 명명 정책에 따라 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 클래스의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>지정된 명명 정책과 정의되지 않은 열거형 값이 허용되는지 여부를 나타내는 값을 사용하여 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 클래스의 인스턴스를 초기화합니다.</summary>
      <param name="namingPolicy">열거형 값을 쓰기 위한 선택적 명명 정책입니다.</param>
      <param name="allowIntegerValues">정의되지 않은 열거형 값을 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="true" />일 때 열거형 값이 정의되지 않은 경우 문자열이 아닌 숫자로 출력됩니다.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>지정된 형식을 열거형으로 변환할 수 있는지를 확인합니다.</summary>
      <param name="typeToConvert">확인할 형식입니다.</param>
      <returns>형식을 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <param name="typeToConvert" />
      <param name="options" />
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>UTF-8 인코딩 JSON 텍스트에 대한 정방향 읽기 전용 액세스를 위한 고성능 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>UTF-8로 인코딩된 텍스트의 읽기 전용 시퀀스를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화하고 입력에 처리할 모든 텍스트가 포함되어 있는지 표시합니다.</summary>
      <param name="jsonData">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="isFinalBlock">입력 시퀀스에 처리할 전체 데이터가 포함되어 있으면 <see langword="true" />이고, 입력 범위에 추가 데이터가 뒤에 올 부분 데이터가 포함된 경우에만 <see langword="false" />입니다.</param>
      <param name="state">판독기 상태를 포함하는 개체입니다. 생성자에 대한 첫 번째 호출인 경우 기본 상태를 전달합니다. 그렇지 않으면, 이전 인스턴스 <see cref="T:System.Text.Json.Utf8JsonReader" />의 상태를 캡처하고 다시 전달합니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>지정된 옵션을 사용하여 UTF-8 인코딩된 텍스트의 읽기 전용 시퀀스를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화합니다.</summary>
      <param name="jsonData">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="options">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의하는 개체입니다(주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이는 64입니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>UTF-8로 인코딩된 텍스트의 읽기 전용 범위를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화하고 입력에 처리할 모든 텍스트가 포함되었는지 표시합니다.</summary>
      <param name="jsonData">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="isFinalBlock">입력 시퀀스에 처리할 전체 데이터가 포함되어 있으면 <see langword="true" />이고, 입력 범위에 추가 데이터가 뒤에 올 부분 데이터가 포함된 경우 <see langword="false" />입니다.</param>
      <param name="state">판독기 상태를 포함하는 개체입니다. 생성자를 첫 번째로 호출하면 기본 상태를 반영해야 합니다. 그렇지 않으면, <see cref="T:System.Text.Json.Utf8JsonReader" />의 이전 인스턴스로부터 상태를 캡처하고 다시 전달해야 합니다.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>지정된 옵션을 사용하여 UTF-8 인코딩된 텍스트의 읽기 전용 범위를 처리하는 <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조의 새 인스턴스를 초기화합니다.</summary>
      <param name="jsonData">처리할 UTF-8 인코딩 JSON 텍스트입니다.</param>
      <param name="options">JSON RFC와 다른 <see cref="T:System.Text.Json.Utf8JsonReader" />의 사용자 지정 동작을 정의하는 개체입니다(주석을 처리하는 방법 또는 읽을 때 허용되는 최대 깊이). 기본적으로 <see cref="T:System.Text.Json.Utf8JsonReader" />는 JSON RFC를 엄격하게 준수하며(JSON 내부의 주석은 유효하지 않음) 최대 깊이는 64입니다.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" />의 이 인스턴스에서 지금까지 소비한 총 바이트 수를 가져옵니다.</summary>
      <returns>지금까지 사용한 총 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>현재 토큰의 깊이를 가져옵니다.</summary>
      <returns>현재 토큰의 깊이를 가져옵니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>추가 데이터와 함께 <see cref="T:System.Text.Json.Utf8JsonReader" /> 생성자에 전달할 현재 <see cref="T:System.Text.Json.Utf8JsonReader" /> 상태를 가져옵니다.</summary>
      <returns>현재 판독기 상태입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>원본으로부터 다음 JSON 토큰 값을 <see cref="T:System.Boolean" />으로 읽습니다.</summary>
      <returns>
        <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이 <see cref="F:System.Text.Json.JsonTokenType.True" />이면 <see langword="true" />입니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이 <see cref="F:System.Text.Json.JsonTokenType.False" />인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰의 값은 부울 값(즉, <see cref="F:System.Text.Json.JsonTokenType.True" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.False" />)이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>소스로부터 현재 JSON 토큰 값을 <see cref="T:System.Byte" />로 구문 분석합니다.</summary>
      <returns>UTF-8로 인코딩된 토큰의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
또는
JSON 토큰 값이 <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>소스에서 현재 JSON 토큰 값을 구문 분석하고 Base 64 인코딩 JSON 문자열을 바이트 배열로 디코딩합니다.</summary>
      <returns>현재 JSON 토큰 값을 나타내는 바이트 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰의 형식이 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">값은 Base64 텍스트로 인코딩되지 않으므로 바이트에 디코딩할 수 없습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>소스에서 주석으로 현재 JSON 토큰 값을 구문 분석하여 <see cref="T:System.String" />으로 트랜스코딩합니다.</summary>
      <returns>현재 JSON 토큰 값을 나타내는 주석입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰이 주석이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.DateTime" />에 구문 분석합니다.</summary>
      <returns>UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 날짜 및 시간입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 지원되지 않는 형식입니다. ISO 8601 형식의 하위 집합만 지원됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.DateTimeOffset" />에 구문 분석합니다.</summary>
      <returns>UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 날짜 및 시간 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 지원되지 않는 형식입니다. ISO 8601 형식의 하위 집합만 지원됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Decimal" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Decimal" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Double" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Double" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Guid" />에 구문 분석합니다.</summary>
      <returns>UTF-8로 완전히 인코딩된 토큰 값을 성공적으로 구문 분석할 수 있는 경우의 GUID 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 GUID에 지원되지 않는 형식입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>소스로부터 현재 JSON 토큰 값을 <see cref="T:System.Int16" />로 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Int16" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
또는
JSON 토큰 값이 <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int32" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Int32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
또는
JSON 토큰 값이 <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Int64" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Int64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
또는
JSON 토큰 값이 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>소스로부터 현재 JSON 토큰 값을 <see cref="T:System.SByte" />로 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.SByte" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
또는
JSON 토큰 값이 <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.Single" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.Single" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>이스케이프된 소스로부터 다음 JSON 토큰 값을 읽고 문자열로 트랜스코딩합니다.</summary>
      <returns>문자열로 구문 분석된 토큰 값입니다. <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />이 <see cref="F:System.Text.Json.JsonTokenType.Null" />이면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 문자열이 아닙니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).
또는
JSON 문자열에 잘못된 UTF-8 바이트 또는 잘못된 UTF-16 서로게이트가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>소스로부터 현재 JSON 토큰 값을 <see cref="T:System.UInt16" />로 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.UInt16" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값의 숫자 형식이 잘못되었습니다(예: 소수 값을 포함하거나 과학적 표기법으로 작성됨).
또는
JSON 토큰 값이 <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt32" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.UInt32" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
또는
JSON 토큰 값이 <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>원본으로부터 다음 JSON 토큰 값을 읽고 <see cref="T:System.UInt64" />에 구문 분석합니다.</summary>
      <returns>
        <see cref="T:System.UInt64" />에 구문 분석된 UTF-8 인코딩 토큰 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
      <exception cref="T:System.FormatException">JSON 토큰 값이 잘못된 숫자 형식인 경우 예를 들어 10진수가 포함되거나 과학적 표기법으로 작성되었습니다.
또는
JSON 토큰 값이 <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타내는 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>토큰 값을 가져오기 위해 사용할 <c>값</c> 속성을 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 토큰 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 값을 가져오는 데를 사용 해야 하면입니다. <see langword="false" /> 대신<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 를 사용 해야 합니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>모든 JSON 데이터가 제공되었는지 또는 더 많은 데이터가 있는지를 나타내는 <see cref="T:System.Text.Json.Utf8JsonReader" />의 이 인스턴스 모드를 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 처리할 전체 JSON 데이터를 포함 하는 입력 범위 또는 시퀀스를 사용 하 여 판독기가 생성 되었으면이 고, <see langword="false" /> 더 많은 데이터가 포함 된 부분 JSON 데이터를 포함할 수 있는 입력 범위 또는 시퀀스를 사용 하 여 판독기가 생성 된 경우</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 ReadOnlySpan&lt;byte&gt;로 생성된 경우 제공된 UTF-8 인코딩 입력 ReadOnlySequence&lt;byte&gt; 또는 기본값 <see cref="T:System.SequencePosition" /> 내에서 현재 <see cref="T:System.SequencePosition" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 구조체가 ReadOnlySpan&lt;byte&gt;로 생성된 경우 제공된 UTF-8 인코딩 입력 ReadOnlySequence&lt;byte&gt; 또는 기본값 <see cref="T:System.SequencePosition" /> 내에서 현재 <see cref="T:System.SequencePosition" />을 가져옵니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>입력 소스로부터 다음 JSON 토큰을 읽습니다.</summary>
      <returns>토큰을 성공적으로 읽은 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC에 따라 잘못된 JSON 토큰이 발견되었습니다.
또는
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>현재 JSON 토큰의 자식을 건너뜁니다.</summary>
      <exception cref="T:System.InvalidOperationException">판독기에 팔로우할 더 많은 데이터가 포함된 부분 데이터가 제공되었습니다(즉, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />이 <see langword="false" />임).</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC에 따라 건너뛰는 동안 잘못된 JSON 토큰이 발견되었습니다.
또는
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>지정된 UTF-8 인코딩 입력 텍스트에서 마지막으로 처리된 JSON 토큰이 시작되는 인덱스를 가져와 공백을 건너뜁니다.</summary>
      <returns>지정 된 u t f-8로 인코딩된 입력 텍스트 내에서 마지막으로 처리 된 JSON 토큰의 시작 인덱스입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>UTF-8 인코딩 JSON 텍스트로 마지막으로 처리된 JSON 토큰의 형식을 가져옵니다.</summary>
      <returns>마지막으로 처리 된 JSON 토큰의 형식입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Byte" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Byte" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>소스에서 현재 JSON 토큰 값을 구문 분석하고 Base64 인코딩된 JSON 문자열을 바이트 배열로 디코딩한 다음 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드가 반환될 때 Base64 텍스트의 디코딩된 이진 표현을 포함합니다.</param>
      <returns>전체 토큰 값이 유효한 Base 64 텍스트로 인코딩되고 바이트에 성공적으로 디코딩할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰이 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.DateTime" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.DateTime" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.DateTimeOffset" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.DateTimeOffset" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Decimal" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Decimal" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Double" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Double" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Guid" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Guid" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.String" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int16" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Int16" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int32" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Int32" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Int64" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Int64" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.SByte" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.SByte" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.Single" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.Single" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt16" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.UInt16" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt32" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.UInt32" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>소스에서 현재 JSON 토큰 값을 <see cref="T:System.UInt64" />로 구문 분석하고 작업에 성공했는지를 표시하는 값을 반환합니다.</summary>
      <param name="value">이 메서드를 반환하면 구문 분석된 값이 포함됩니다.</param>
      <returns>전체 UTF-8 인코딩 토큰 값을 <see cref="T:System.UInt64" /> 값으로 구문 분석할 수 있는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">JSON 토큰 값은 <see cref="F:System.Text.Json.JsonTokenType.Number" />가 아닙니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>현재 JSON 토큰의 자식을 건너뛰려고 시도합니다.</summary>
      <returns>자식을 성공적으로 건너뛸 수 있는 충분한 데이터가 있으면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC에 따라 건너뛰는 동안 잘못된 JSON 토큰이 발견되었습니다.
또는
현재 깊이가 최대 깊이에서 설정된 재귀 제한을 초과한 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>마지막으로 처리된 토큰의 값을 입력 페이로드의 <see cref="T:System.ReadOnlySpan`1" /> 조각으로 가져옵니다. <see cref="T:System.Buffers.ReadOnlySequence`1" /> 내에서 JSON을 제공하고 토큰 값을 나타내는 조각이 단일 세그먼트에 적합한 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />에는 분할된 값이 포함되므로 범위로 나타낼 수 있습니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />에는 토큰 값이 포함됩니다.</summary>
      <returns>바이트 읽기 전용 시퀀스입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>마지막으로 처리된 토큰의 값을 입력 페이로드의 ReadOnlySpan&lt;byte&gt; 조각으로 가져옵니다. ReadOnlySequence&lt;byte&gt; 내에서 JSON을 제공하고 토큰 값을 나타내는 조각이 단일 세그먼트에 적합한 경우 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />에는 분할된 값이 포함되므로 범위로 나타낼 수 있습니다. 그렇지 않으면 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />에는 토큰 값이 포함됩니다.</summary>
      <returns>읽기 전용 범위(바이트)입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위의 UTF-8로 인코딩된 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="utf8Text">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns>소스의 JSON 토큰 값이 UTF-8로 인코딩된 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">문자열이 아닌 JSON 토큰입니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위의 UTF-8로 인코딩된 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="text">비교할 UTF-8로 인코딩된 텍스트입니다.</param>
      <returns>소스의 JSON 토큰 값이 UTF-8로 인코딩된 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">문자열이 아닌 JSON 토큰입니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>문자 범위의 텍스트를 소스의 이스케이프되지 않은 JSON 토큰 값과 비교하고, 일치하는지 표시하는 값을 반환합니다.</summary>
      <param name="text">비교할 대상인 텍스트입니다.</param>
      <returns>소스의 JSON 토큰 값이 조회 텍스트와 일치하는 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">문자열이 아닌 JSON 토큰입니다(즉, <see cref="F:System.Text.Json.JsonTokenType.String" /> 또는 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />이 아님).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>캐시되지 않은 정방향 전용 UTF-8 인코딩 JSON 텍스트를 작성할 수 있는 고성능 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>지정한 <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />를 사용하여 새 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 인스턴스를 생성합니다.</summary>
      <param name="bufferWriter">JSON 텍스트를 작성할 대상입니다.</param>
      <param name="options">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />에 대한 사용자 지정 동작을 정의합니다. 기본적으로 최소화된 JSON(추가 공백 없음)을 작성하고, JSON RFC에 따라 작성 중인 JSON이 구조적으로 유효한지 확인합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>지정한 <paramref name="utf8Json" />을 사용하여 새 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 인스턴스를 생성합니다.</summary>
      <param name="utf8Json">JSON 텍스트를 작성할 대상입니다.</param>
      <param name="options">
        <see cref="T:System.Text.Json.Utf8JsonWriter" />에 대한 사용자 지정 동작을 정의합니다. 기본적으로 최소화된 JSON(추가 공백 없음)을 작성하고, JSON RFC에 따라 작성 중인 JSON이 구조적으로 유효한지 확인합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>현재 인스턴스에서 지금까지 출력에 커밋한 총 바이트 수를 가져옵니다.</summary>
      <returns>지금까지 출력 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 에 커밋된 총 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>아직 출력에 플러시되지 않고 커밋되지 않은 <see cref="T:System.Text.Json.Utf8JsonWriter" />에서 지금까지 쓴 바이트 수를 가져옵니다.</summary>
      <returns>아직 출력으로 플러시되고 커밋되지 않은에서 지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 쓴 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>현재 토큰의 깊이를 가져옵니다.</summary>
      <returns>현재 토큰의 수준입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>아직 플러시되지 않은 채 남아 있는 모든 JSON 텍스트를 커밋하고, 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>아직 플러시되지 않은 채 남아 있는 모든 JSON 텍스트를 비동기적으로 커밋하고, 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      <returns>비동기 삭제 조작을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>지금까지 작성한 JSON 텍스트를 커밋하여 출력 대상에 표시합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>지금까지 작성한 JSON 텍스트를 비동기적으로 커밋하여 출력 대상에 표시합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 플러시 조작을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>이 인스턴스를 사용하여 JSON을 작성할 때 사용자 지정 동작을 가져옵니다. 이 동작은 쓰기 중에 출력 형식을 지정할지 여부와 구조적 JSON 유효성 검사를 건너뛸지 여부를 나타냅니다.</summary>
      <returns>서식 지정 및 유효성 검사에 대 한이 인스턴스의 동작을 정의 하는 개체입니다.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>새 <see cref="T:System.Buffers.IBufferWriter`1" /> 인스턴스에서 다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <param name="bufferWriter">JSON 텍스트를 작성할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>새 <see cref="T:System.IO.Stream" /> 인스턴스에서 다시 사용할 수 있도록 이 인스턴스의 내부 상태를 다시 설정합니다.</summary>
      <param name="utf8Json">JSON 텍스트를 작성할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">이 인스턴스가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성할 속성의 UTF-8 인코딩 이름입니다.</param>
      <param name="bytes">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="bytes">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="bytes">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>미리 인코딩된 속성 이름 및 원시 바이트 값(Base64 인코딩 JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">작성할 속성의 JSON 인코딩된 이름입니다.</param>
      <param name="bytes">Base64 인코딩 텍스트로 쓸 이진 데이터입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>원시 바이트 값을 JSON 배열의 요소로서 Base64 인코딩 JSON 문자열로 작성합니다.</summary>
      <param name="bytes">JSON 배열의 Base64 인코딩 JSON 문자열 요소로 작성할 이진 데이터입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 값(JSON 리터럴 true 또는 false)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소로서 JSON 리터럴 true 또는 false로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="utf8Value">/../ 내에서 JSON 주석으로 작성되는 UTF-8로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.
또는
<paramref name="utf8Value" />에 주석 구분 기호(즉, */)가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>UTF-16 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="value">/../ 내에서 UTF-8로 트랜스코딩된 JSON 주석으로 작성되는 UTF-16으로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.
또는
<paramref name="value" />에 주석 구분 기호(즉, */)가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>문자열 텍스트 값을 JSON 주석으로 작성합니다.</summary>
      <param name="value">/../ 내에서 UTF-8로 트랜스코딩된 JSON 주석으로 작성되는 UTF-16으로 인코딩된 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.
또는
<paramref name="value" />에 주석 구분 기호(즉, */)가 포함되어 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>JSON 배열의 끝 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>JSON 개체의 끝을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>문자열로 지정한 속성 이름 및 null JSON 리터럴을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 속성 이름 및 JSON 리터럴 null을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>JSON 리터럴 null을 JSON 배열의 요소로서 작성합니다.</summary>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>
        <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 속성 이름(JSON 문자열)을 JSON 개체 이름/값 쌍의 첫 번째 파트로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>JSON 배열의 시작 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 배열의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>문자열로 지정한 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 속성 이름을 키로 사용하여 JSON 배열의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 배열의 JSON 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우
또는
유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>JSON 개체의 시작 부분을 씁니다.</summary>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다.
또는
유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다. 
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다. 
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>문자열로 지정한 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1,000을 초과합니다. 
또는
유효성 검사가 활성화되고, 이 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 속성 이름을 키로 사용하여 JSON 개체의 시작 부분을 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우
또는
유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>UTF-8 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>UTF-8 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>UTF-8 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>UTF-8 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>UTF-8 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>UTF-8 속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 사용되며, 이 메서드를 사용하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>읽기 전용 문자 범위로 지정한 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>UTF-16 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>UTF-16 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>UTF-16 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>문자열로 지정한 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>문자열로 지정한 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>문자열로 지정한 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>문자열로 지정한 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체의 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름 또는 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 속성 이름이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>미리 인코딩된 속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>미리 인코딩된 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>미리 인코딩된 속성 이름 및 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>미리 인코딩된 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 속성 이름 및 미리 인코딩된 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
      <param name="propertyName">UTF-8로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
      <param name="value">이름/값 쌍의 일부로서 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 작업을 수행하면 잘못된 JSON이 작성됩니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="utf8Value">JSON 배열의 JSON 문자열 요소로 작성될 UTF-8 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>UTF-16 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>문자열 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 값이 너무 큽니다.</exception>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>미리 인코딩된 텍스트 값(JSON 문자열)을 JSON 배열의 요소로 작성합니다.</summary>
      <param name="value">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 JSON 인코딩 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">유효성 검사가 활성화되고, 쓰기 작업에서 잘못된 JSON을 생성합니다.</exception>
    </member>
  </members>
</doc>
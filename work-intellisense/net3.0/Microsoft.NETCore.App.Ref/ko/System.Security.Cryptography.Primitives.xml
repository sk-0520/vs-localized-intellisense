<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>모든 비대칭 알고리즘의 구현에서 상속해야 하는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">파생 클래스의 구현이 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Clear">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create">
      <summary>비대칭 알고리즘을 수행하는 데 사용하는 기본 암호화 개체를 만듭니다.</summary>
      <returns>기본 설정이 &lt;cryptoClass&gt; 요소를 사용하여 변경되지 않는 한 새로운 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)">
      <summary>비대칭 알고리즘의 지정된 구현에 대한 인스턴스를 만듭니다.</summary>
      <param name="algName">사용할 비대칭 알고리즘 구현입니다. 다음 표에서는 <paramref name="algName" /> 매개 변수의 올바른 값과 매핑할 알고리즘을 보여 줍니다.  
  매개 변수 값 
  Implements 
  System.Security.Cryptography.AsymmetricAlgorithm 
 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> RSA 
 <see cref="T:System.Security.Cryptography.RSA" /> System.Security.Cryptography.RSA 
 <see cref="T:System.Security.Cryptography.RSA" /> DSA 
 <see cref="T:System.Security.Cryptography.DSA" /> System.Security.Cryptography.DSA 
 <see cref="T:System.Security.Cryptography.DSA" /> ECDsa 
 <see cref="T:System.Security.Cryptography.ECDsa" /> ECDsaCng 
 <see cref="T:System.Security.Cryptography.ECDsaCng" /> System.Security.Cryptography.ECDsaCng 
 <see cref="T:System.Security.Cryptography.ECDsaCng" /> ECDH 
 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> ECDiffieHellman 
 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> ECDiffieHellmanCng 
 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> System.Security.Cryptography.ECDiffieHellmanCng 
 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /></param>
      <returns>지정된 비대칭 알고리즘 구현의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 내보냅니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <returns>이 키의 PKCS#8 EncryptedPrivateKeyInfo 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="T:System.Char" /> 기반 암호가 필요한 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />를 사용해야 함을 나타냅니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 내보냅니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <returns>이 키의 PKCS#8 EncryptedPrivateKeyInfo 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey">
      <summary>PKCS#8 PrivateKeyInfo 형식으로 현재 키를 내보냅니다.</summary>
      <returns>이 키의 PKCS#8 PrivateKeyInfo 표현을 포함하는 바이트 배열입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo">
      <summary>X.509 SubjectPublicKeyInfo 형식으로 된 현재 키의 퍼블릭 키 부분을 내보냅니다.</summary>
      <returns>이 키의 퍼블릭 키 부분의 X.509 SubjectPublicKeyInfo 표현을 포함하는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)">
      <summary>파생 클래스에서 재정의되는 경우 XML 문자열에서 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체를 다시 생성합니다. 그렇지 않으면 <see cref="T:System.NotImplementedException" />이 throw됩니다.</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체를 재생성하는 데 사용할 XML 문자열입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 바이트 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="passwordBytes">키 자료를 해독할 때 암호로 사용할 바이트입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서는 적용할 KDF(키 파생 함수)가 <see cref="T:System.Char" /> 기반 암호가 필요한 레거시 PKCS#12 KDF임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 문자 기반 암호로 해독한 다음 이 개체의 키를 대체하여 PKCS#8 EncryptedPrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="password">키 자료의 암호를 해독하는 데 사용할 암호입니다.</param>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 EncryptedPrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호가 잘못되었습니다.
또는
<paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 해독한 다음 이 개체의 키를 대체하여 PKCS#8 PrivateKeyInfo 구조에서 퍼블릭/프라이빗 키 쌍을 가져옵니다.</summary>
      <param name="source">ASN.1-BER 인코딩에 있는 PKCS#8 PrivateKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-BER-encoded PKCS#8 PrivateKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 해독한 다음 이 개체의 키를 대체하여 X.509 SubjectPublicKeyInfo 구조에서 퍼블릭 키를 가져옵니다.</summary>
      <param name="source">ASN.1-DER 인코딩으로 된 X.509 SubjectPublicKeyInfo 구조체의 바이트입니다.</param>
      <param name="bytesRead">이 메서드가 반환될 때 <paramref name="source" />에서 읽은 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" />의 콘텐츠에서 ASN.1-DER-encoded X.509 SubjectPublicKeyInfo 구조체를 나타내지 않습니다.
또는
<paramref name="source" />의 콘텐츠에서는 키가 이 인스턴스에서 표시하는 알고리즘 이외의 알고리즘용임을 나타냅니다.
또는
<paramref name="source" />의 콘텐츠는 지원되지 않는 형식의 키를 나타냅니다.
또는
알고리즘별 키 가져오기에 실패했습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
      <summary>파생 클래스에 재정의하는 경우 키 교환 알고리즘의 이름을 가져옵니다. 그렇지 않으면 <see cref="T:System.NotImplementedException" />이 throw됩니다.</summary>
      <returns>키 교환 알고리즘의 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>비대칭 알고리즘에서 사용하는 키 모듈러스의 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>비대칭 알고리즘에서 사용하는 키 모듈러스의 크기(비트 단위)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 모듈러스 크기가 잘못되었습니다.</exception>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue">
      <summary>비대칭 알고리즘에서 사용하는 키 모듈러스의 크기(비트 단위)를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>비대칭 알고리즘에서 지원하는 키 크기를 가져옵니다.</summary>
      <returns>비대칭 알고리즘에서 지원하는 키 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
      <summary>비대칭 알고리즘에서 지원하는 키 크기를 지정합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
      <summary>파생 클래스에서 구현하는 경우 서명 알고리즘 이름을 가져옵니다. 그렇지 않으면 항상 <see cref="T:System.NotImplementedException" />이 throw됩니다.</summary>
      <returns>서명 알고리즘의 이름입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)">
      <summary>파생 클래스에서 재정의되는 경우 현재 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체의 XML 문자열 표현을 만들고 반환합니다. 그렇지 않으면 <see cref="T:System.NotImplementedException" />이 throw됩니다.</summary>
      <param name="includePrivateParameters">private 매개 변수를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>현재 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 개체의 XML 문자열 인코딩입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 바이트 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="passwordBytes">키 자료를 암호화할 때 암호로 사용할 바이트입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.
또는
<paramref name="pbeParameters" />는 <see cref="T:System.Char" /> 기반 암호가 필요한 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />를 사용해야 함을 나타냅니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, 문자 기반 암호를 사용하여 PKCS#8 EncryptedPrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="password">키 자료를 암호화할 때 사용할 암호입니다.</param>
      <param name="pbeParameters">키 자료를 암호화할 때 사용할 PBE(암호 기반 암호화) 매개 변수입니다.</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, PKCS#8 PrivateKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">PKCS # 8 PrivateKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>파생 클래스에서 재정의되는 경우, X.509 SubjectPublicKeyInfo 형식의 현재 키를 제공된 버퍼로 내보내려고 시도합니다.</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo 데이터를 받을 바이트 범위입니다.</param>
      <param name="bytesWritten">이 메서드가 반환될 때 <paramref name="destination" />에 쓴 바이트 수를 나타내는 값을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
      <returns>
        <paramref name="destination" />이 출력을 받을 충분한 크기이면 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키를 내보낼 수 없습니다.</exception>
      <exception cref="T:System.NotImplementedException">파생된 형식이 이 멤버를 재정의하지 않았습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.CipherMode">
      <summary>암호화에 사용할 블록 암호화 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CBC">
      <summary>
        <see langword="CBC" />(Cipher Block Chaining) 모드를 통해 피드백이 형성됩니다. 일반 텍스트 블록이 암호화되기 전에 비트 배타적 OR 연산에 의해 이전 블록의 암호화 텍스트와 결합됩니다. 따라서 일반 텍스트에 여러 개의 동일한 블록이 들어 있어도 각각 다른 암호화 텍스트 블록으로 암호화됩니다. 블록이 암호화되기 전에 비트 배타적 OR 연산에 의해 초기화 벡터에 첫 번째 일반 텍스트 블록이 결합됩니다. 암호화 텍스트 블록의 한 비트라도 손상되면 대응하는 일반 텍스트 블록도 손상됩니다. 또한 손상된 원본 비트와 같은 위치에 있는 다음 블록의 비트도 손상됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CFB">
      <summary>
        <see langword="CFB" />(Cipher Feedback) 모드는 한 번에 전체 블록을 처리하지 않고 일반 텍스트를 조금씩 암호화 텍스트로 처리합니다. 이 모드는 한 블록 길이를 가지며 섹션으로 구분되는 이동 레지스터를 사용합니다. 예를 들어 블록 크기가 한 번에 1바이트씩 처리되는 8바이트이면 이동 레지스터는 여덟 개의 섹션으로 구분됩니다. 암호화 텍스트에서 하나의 비트가 손상되면, 하나의 일반 텍스트 비트가 손상되고 이동 레지스터도 손상됩니다. 이로 인해 잘못된 비트가 이동 레지스터 밖으로 이동될 때까지 이어지는 일반 텍스트 비트는 손상됩니다. 기본 피드백 크기는 알고리즘에 따라 달라질 수 있지만 일반적으로 8비트이거나 블록 크기의 비트 수입니다. <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> 속성을 사용하여 피드백 비트 수를 변경할 수 있습니다. CFB를 지원하는 알고리즘은 이 속성을 사용하여 피드백을 설정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CTS">
      <summary>
        <see langword="CTS" />(Cipher Text Stealing) 모드는 길이 제한 없이 일반 텍스트를 처리하고 일반 텍스트와 동일한 길이를 갖는 암호화 텍스트를 생성합니다. 이 모드는 일반 텍스트의 마지막 두 블록을 제외한 모든 블록에 대해 <see langword="CBC" /> 모드와 동일하게 작동됩니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.ECB">
      <summary>
        <see langword="ECB" />(Electronic Codebook) 모드는 각 블록을 개별적으로 암호화합니다. 동일하면서 같은 메시지에 포함되어 있는 일반 텍스트의 블록이나 같은 키로 암호화된 다른 메시지에 있는 일반 텍스트의 블록이 모두 동일한 암호화 텍스트 블록으로 변환됩니다. 중요:  이 모드를 사용하면 여러 보안 위험에 노출될 수 있으므로 사용하지 않는 것이 좋습니다. 암호화할 일반 텍스트에 반복 부분이 포함되어 있으면 암호화 텍스트를 한 번에 하나의 블록으로 쉽게 구분할 수 있습니다. 블록 분석을 사용하여 암호화 키를 확인할 수도 있습니다. 또한 다른 사용자가 몰래 개별 블록을 대체하거나 교환할 수 있으므로 다른 시점에 몰래 블록을 스트림에 저장 및 삽입할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.OFB">
      <summary>
        <see langword="OFB" />(Output Feedback) 모드는 한 번에 전체 블록을 처리하지 않고 일반 텍스트를 조금씩 암호화 텍스트로 처리합니다. 이 모드는 <see langword="CFB" />와 비슷하며 이동 레지스터를 채우는 방식에서만 차이가 있습니다. 암호화 텍스트의 한 비트가 손상되면 일반 텍스트의 해당 비트도 손상됩니다. 그러나 암호화 텍스트에 추가 비트나 누락된 비트가 있으면 그 지점부터 일반 텍스트가 손상됩니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicOperations" />
    <member name="M:System.Security.Cryptography.CryptographicOperations.FixedTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>시퀀스의 값이 아니라 길이에 따라 달라지는 시간을 사용하여 두 바이트 시퀀스가 같은지 확인합니다.</summary>
      <param name="left">비교할 첫 번째 버퍼입니다.</param>
      <param name="right">비교할 두 번째 버퍼입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />에 동일한 <see cref="P:System.ReadOnlySpan`1.Length" /> 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicOperations.ZeroMemory(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>암호화 작업 중 예상치 못한 작업이 발생할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.String)">
      <summary>지정한 형식에서 지정된 오류 메시지를 사용하여 <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="format">오류 메시지를 출력하는데 사용하는 형식입니다.</param>
      <param name="insert">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>데이터 스트림을 암호화 변환에 연결하는 스트림을 정의합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>대상 데이터 스트림, 사용할 변환 및 스트림 모드를 사용하여 <see cref="T:System.Security.Cryptography.CryptoStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">암호화 변형을 수행할 스트림입니다.</param>
      <param name="transform">스트림에 대해 수행될 암호화 변형입니다.</param>
      <param name="mode">
        <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">암호화 변형을 수행할 스트림입니다.</param>
      <param name="transform">스트림에 대해 수행될 암호화 변형입니다.</param>
      <param name="mode">스트림의 모드입니다.</param>
      <param name="leaveOpen">
        <see cref="T:System.Security.Cryptography.CryptoStream" /> 개체를 삭제할 때 기본 스트림을 닫지 않으려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 읽기 작업을 시작합니다. 대신 <see cref="Overload:System.Security.Cryptography.CryptoStream.ReadAsync" />를 사용하세요.</summary>
      <param name="buffer">데이터를 읽을 버퍼입니다.</param>
      <param name="offset">스트림에서 읽은 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="callback">읽기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 읽기를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림의 끝을 넘어 비동기 읽기를 시도했거나 디스크 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
      <exception cref="T:System.NotSupportedException">현재 <see langword="Stream" /> 구현이 읽기 작업을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 쓰기 작업을 시작합니다. 대신 <see cref="Overload:System.Security.Cryptography.CryptoStream.WriteAsync" />를 사용하세요.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">쓰기를 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="callback">쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 쓰기를 나타내는 <see langword="IAsyncResult" />입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림의 끝을 넘어 비동기 쓰기를 시도했거나 디스크 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
      <exception cref="T:System.NotSupportedException">현재 <see langword="Stream" /> 구현이 쓰기 작업을 지원하지 않는 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />을 읽을 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스트림을 읽을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" /> 내에서 검색할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />에 쓸 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스트림에 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoStream" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.DisposeAsync">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoStream" />에서 사용하는 관리되지 않는 리소스를 비동기적으로 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.EndRead(System.IAsyncResult)">
      <summary>보류 중인 비동기 읽기가 완료되기를 기다립니다. 대신 <see cref="Overload:System.Security.Cryptography.CryptoStream.ReadAsync" />를 사용하세요.</summary>
      <param name="asyncResult">완료할 보류 중인 비동기 요청에 대한 참조입니다.</param>
      <returns>0과 요청한 바이트 수 사이의 스트림에서 읽은 바이트 수입니다. 스트림은 스트림의 끝에서만 0을 반환하며, 그렇지 않으면 사용할 수 있는 바이트가 1바이트 이상이 될 때까지 차단됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">보류 중인 읽기 작업에 대한 핸들을 사용할 수 없는 경우  
 또는  
 보류 중인 작업이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" />가 현재 스트림의 <see cref="M:System.Security.Cryptography.CryptoStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혔거나 내부 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.EndWrite(System.IAsyncResult)">
      <summary>비동기 쓰기 작업을 끝냅니다. 대신 <see cref="Overload:System.Security.Cryptography.CryptoStream.WriteAsync" />를 사용하세요.</summary>
      <param name="asyncResult">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">보류 중인 쓰기 작업에 대한 핸들을 사용할 수 없는 경우  
 또는  
 보류 중인 작업이 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" />가 현재 스트림의 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혔거나 내부 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>현재 스트림의 모든 버퍼를 지우면 버퍼링된 모든 데이터가 내부 디바이스에 쓰여집니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>현재 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 디바이스에 쓰여지도록 하고 취소 요청을 모니터링합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>내부 데이터 소스 또는 리포지토리에 버퍼의 현재 상태를 업데이트한 다음 해당 버퍼를 지웁니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키가 손상되어 스트림에 대한 잘못된 패딩이 발생할 수 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 스트림에 쓸 수 없는 경우  
 또는  
 최종 블록이 이미 변환된 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock">
      <summary>마지막 버퍼 블록을 내부 스트림에 썼는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>마지막 블록을 플러시했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>스트림의 길이(바이트)를 가져옵니다.</summary>
      <returns>이 속성이 지원되지 않는 경우</returns>
      <exception cref="T:System.NotSupportedException">이 속성이 지원되지 않는 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>현재 스트림 내의 위치를 가져오거나 설정합니다.</summary>
      <returns>이 속성이 지원되지 않는 경우</returns>
      <exception cref="T:System.NotSupportedException">이 속성이 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 앞으로 이동합니다.</summary>
      <param name="buffer">바이트 배열입니다. 최대 <paramref name="count" /> 바이트를 현재 스트림에서 읽어 <paramref name="buffer" />에 저장합니다.</param>
      <param name="offset">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">현재 스트림에서 읽을 최대 바이트 수입니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 총 바이트 수는 요청된 바이트를 현재 사용할 수 없는 경우 이 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 됩니다.</returns>
      <exception cref="T:System.NotSupportedException">현재 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 개체와 관련된 <see cref="T:System.Security.Cryptography.CryptoStream" />가 내부 스트림과 일치하지 않는 경우.  예를 들어, <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" />를 쓰기 전용인 내부 스트림과 함께 사용하는 경우에 이 예외가 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작습니다.  
또는 
<paramref name="count" /> 매개 변수가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />와 <paramref name="offset" /> 매개 변수의 합계가 버퍼의 길이보다 긴 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. 작업 개체에 대한 <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과는 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadByte">
      <summary>스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</summary>
      <returns>
        <see langword="Int32" />로 캐스팅된 부호 없는 바이트이거나 스트림의 끝에 있는 경우 -1입니다.</returns>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>현재 스트림 내에서 위치를 설정합니다.</summary>
      <param name="offset">
        <paramref name="origin" /> 매개 변수에 상대적인 바이트 오프셋입니다.</param>
      <param name="origin">새 위치를 가져오는 데 사용되는 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" /> 개체입니다.</param>
      <returns>이 메서드는 지원되지 않습니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>현재 스트림의 길이를 설정합니다.</summary>
      <param name="value">원하는 현재 스트림의 길이(바이트)입니다.</param>
      <exception cref="T:System.NotSupportedException">이 속성은 <see cref="T:System.IO.Stream" />으로부터의 상속을 지원하기 위해서만 존재하므로 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 <see cref="T:System.Security.Cryptography.CryptoStream" />에 바이트의 시퀀스를 쓰고 스트림 내의 현재 위치를 쓰여진 바이트 수만큼 앞으로 이동합니다.</summary>
      <param name="buffer">바이트 배열입니다. 이 메서드는 <paramref name="buffer" />의 <paramref name="count" /> 바이트를 현재 스트림으로 복사합니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">현재 스트림에 쓸 바이트 수입니다.</param>
      <exception cref="T:System.NotSupportedException">현재 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 개체와 관련된 <see cref="T:System.Security.Cryptography.CryptoStream" />가 내부 스트림과 일치하지 않는 경우.  예를 들어, 읽기 전용인 내부 스트림과 함께 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" />를 사용하는 경우에 이 예외가 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작습니다.  
또는 
<paramref name="count" /> 매개 변수가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />와 <paramref name="offset" /> 매개 변수의 합계가 버퍼의 길이보다 긴 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림으로 바이트를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)">
      <summary>스트림의 현재 위치에 바이트를 쓰고 스트림 내 위치를 1바이트씩 앞으로 이동합니다.</summary>
      <param name="value">스트림에 쓸 바이트입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>암호화 스트림의 모드를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>암호화 스트림의 액세스를 읽습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>암호화 스트림의 액세스를 씁니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>모든 암호화 해시 알고리즘의 구현이 파생되어야 하는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>현재 변형을 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>파생 클래스에서 재정의된 경우 여러 개의 블록을 변형할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>여러 개의 블록을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>지정된 바이트 배열에 대해 해시 값을 계산합니다.</summary>
      <param name="buffer">해시 코드를 컴퓨팅할 입력입니다.</param>
      <returns>계산된 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 배열의 지정된 영역에 대해 해시 값을 계산합니다.</summary>
      <param name="buffer">해시 코드를 컴퓨팅할 입력입니다.</param>
      <param name="offset">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="count">데이터로 사용할 배열의 바이트 수입니다.</param>
      <returns>계산된 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 값이 잘못된 경우  
또는 
 <paramref name="buffer" /> 길이가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />이 범위에서 벗어난 경우. 이 매개 변수에는 0 또는 양의 정수가 필요합니다.</exception>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.IO.Stream" /> 개체에 대해 해시 값을 계산합니다.</summary>
      <param name="inputStream">해시 코드를 컴퓨팅할 입력입니다.</param>
      <returns>계산된 해시 코드입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create">
      <summary>해시 알고리즘의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>기본 설정이 다음을 사용하여 변경되지 않는 한 새로운 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)">
      <summary>해시 알고리즘의 지정된 구현의 인스턴스를 만듭니다.</summary>
      <param name="hashName">사용할 해시 알고리즘에 대한 구현입니다. 다음 표에서는 <paramref name="hashName" /> 매개 변수의 올바른 값과 매핑할 알고리즘을 보여 줍니다.  
  매개 변수 값 
  Implements 
  SHA 
 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> SHA1 
 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> System.Security.Cryptography.SHA1 
 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> System.Security.Cryptography.HashAlgorithm 
 <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> MD5 
 <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> System.Security.Cryptography.MD5 
 <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> SHA256 
 <see cref="T:System.Security.Cryptography.SHA256Managed" /> SHA-256 
 <see cref="T:System.Security.Cryptography.SHA256Managed" /> System.Security.Cryptography.SHA256 
 <see cref="T:System.Security.Cryptography.SHA256Managed" /> SHA384 
 <see cref="T:System.Security.Cryptography.SHA384Managed" /> SHA-384 
 <see cref="T:System.Security.Cryptography.SHA384Managed" /> System.Security.Cryptography.SHA384 
 <see cref="T:System.Security.Cryptography.SHA384Managed" /> SHA512 
 <see cref="T:System.Security.Cryptography.SHA512Managed" /> SHA-512 
 <see cref="T:System.Security.Cryptography.SHA512Managed" /> System.Security.Cryptography.SHA512 
 <see cref="T:System.Security.Cryptography.SHA512Managed" /></param>
      <returns>지정된 해시 알고리즘의 새 인스턴스이며, <paramref name="hashName" />이 유효한 해시 알고리즘이 아닐 경우는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>계산된 해시 코드의 값을 가져옵니다.</summary>
      <returns>계산된 해시 코드의 현재 값입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에 재정의된 경우 개체에 쓰여진 데이터의 경로를 해시를 계산할 해시 알고리즘에 지정합니다.</summary>
      <param name="array">해시 코드를 컴퓨팅할 입력입니다.</param>
      <param name="ibStart">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cbSize">데이터로 사용할 바이트 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>파생 클래스에서 재정의된 경우 암호화 스트림 개체에서 마지막 데이터를 처리한 후 해시 계산을 완료합니다.</summary>
      <returns>계산된 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>계산된 해시 코드의 크기(비트 단위)를 가져옵니다.</summary>
      <returns>계산된 해시 코드의 크기(비트 단위)입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>계산된 해시 코드의 크기(비트)를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>계산된 해시 코드의 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 클래스의 구현을 초기화합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>파생 클래스에 재정의된 경우 입력 블록 크기를 가져옵니다.</summary>
      <returns>입력 블록 크기입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>파생 클래스에 재정의된 경우 출력 블록 크기를 가져옵니다.</summary>
      <returns>출력 블록 크기입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>해시 계산의 상태를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>입력 바이트 배열의 지정된 영역에 대한 해시 값을 계산하여 입력 바이트 배열의 지정된 영역을 출력 바이트 배열의 지정된 영역에 복사합니다.</summary>
      <param name="inputBuffer">해시 코드를 컴퓨팅할 입력입니다.</param>
      <param name="inputOffset">데이터 사용을 시작할 입력 바이트 배열의 오프셋입니다.</param>
      <param name="inputCount">데이터로 사용할 입력 바이트 배열의 바이트 수입니다.</param>
      <param name="outputBuffer">해시 코드를 컴퓨팅하는 데 사용되는 입력 배열의 일부에 대한 복사본입니다.</param>
      <param name="outputOffset">데이터 쓰기를 시작할 출력 바이트 배열의 오프셋입니다.</param>
      <returns>쓰여진 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" />에 잘못된 값이 사용된 경우  
또는 
 <paramref name="inputBuffer" />의 길이가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" />이 범위에서 벗어난 경우. 이 매개 변수에는 0 또는 양의 정수가 필요합니다.</exception>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 배열의 지정된 영역에 대해 해시 값을 계산합니다.</summary>
      <param name="inputBuffer">해시 코드를 컴퓨팅할 입력입니다.</param>
      <param name="inputOffset">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="inputCount">데이터로 사용할 바이트 배열의 바이트 수입니다.</param>
      <returns>해시된 입력의 일부에 대한 복사본인 배열입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" />에 잘못된 값이 사용된 경우  
또는 
 <paramref name="inputBuffer" />의 오프셋 길이가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" />이 범위에서 벗어난 경우. 이 매개 변수에는 0 또는 양의 정수가 필요합니다.</exception>
      <exception cref="T:System.ObjectDisposedException">개체가 이미 삭제되었습니다.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TryComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithmName">
      <summary>암호화 해시 알고리즘의 이름을 지정합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)">
      <summary>사용자 지정 이름으로 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 구조의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">사용자 지정 해시 알고리즘 이름입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)">
      <summary>현재 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 개체이고 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 현재 인스턴스의 해당 속성과 같으면 <see langword="true" />입니다. 비교는 서수이며 대/소문자를 구분합니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)">
      <summary>두 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 인스턴스가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <paramref name="other" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 속성이 현재 인스턴스의 해당 속성과 같으면 <see langword="true" />입니다. 비교는 서수이며 대/소문자를 구분합니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.GetHashCode">
      <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 인스턴스의 해시 코드이거나, <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 생성자에 <paramref name="name" /> 값이 제공되지 않은 경우 0입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.MD5">
      <summary>"MD5"를 나타내는 해시 알고리즘 이름을 가져옵니다.</summary>
      <returns>"MD5"를 나타내는 해시 알고리즘 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.Name">
      <summary>알고리즘 이름의 기본 문자열 표현을 가져옵니다.</summary>
      <returns>알고리즘 이름의 문자열 표현이거나, 해시 알고리즘을 사용할 수 없는 경우 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 개체가 같은지 여부를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="left" />와 <paramref name="right" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>지정된 두 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 개체가 같지 않은지 여부를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="left" />와 <paramref name="right" />의 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 값이 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA1">
      <summary>"SHA1"을 나타내는 해시 알고리즘 이름을 가져옵니다.</summary>
      <returns>"SHA1"을 나타내는 해시 알고리즘 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA256">
      <summary>"SHA256"을 나타내는 해시 알고리즘 이름을 가져옵니다.</summary>
      <returns>"SHA256"을 나타내는 해시 알고리즘 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA384">
      <summary>"SHA384"를 나타내는 해시 알고리즘 이름을 가져옵니다.</summary>
      <returns>"SHA384"를 나타내는 해시 알고리즘 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA512">
      <summary>"SHA512"를 나타내는 해시 알고리즘 이름을 가져옵니다.</summary>
      <returns>"SHA512"를 나타내는 해시 알고리즘 이름입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.ToString">
      <summary>현재 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>HMAC(해시 기반 메시지 인증 코드)의 모든 구현이 파생될 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.HMAC" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
      <summary>해시 값에 사용할 블록 크기를 가져오거나 설정합니다.</summary>
      <returns>해시 값에 사용할 블록 크기입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create">
      <summary>HMAC(해시 기반 메시지 인증 코드)의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>기본 설정이 &lt;cryptoClass&gt; 요소를 사용하여 변경되지 않는 한 새로운 SHA-1 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create(System.String)">
      <summary>HMAC(해시 기반 메시지 인증 코드)의 지정된 구현 인스턴스를 만듭니다.</summary>
      <param name="algorithmName">사용할 HMAC 구현입니다. 다음 표에서는 <paramref name="algorithmName" /> 매개 변수의 올바른 값과 매핑할 알고리즘을 보여 줍니다.  
  매개 변수 값 
  Implements 
  System.Security.Cryptography.HMAC 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> System.Security.Cryptography.KeyedHashAlgorithm 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> HMACMD5 
 <see cref="T:System.Security.Cryptography.HMACMD5" /> System.Security.Cryptography.HMACMD5 
 <see cref="T:System.Security.Cryptography.HMACMD5" /> HMACRIPEMD160 
 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> System.Security.Cryptography.HMACRIPEMD160 
 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> HMACSHA1 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> System.Security.Cryptography.HMACSHA1 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> HMACSHA256 
 <see cref="T:System.Security.Cryptography.HMACSHA256" /> System.Security.Cryptography.HMACSHA256 
 <see cref="T:System.Security.Cryptography.HMACSHA256" /> HMACSHA384 
 <see cref="T:System.Security.Cryptography.HMACSHA384" /> System.Security.Cryptography.HMACSHA384 
 <see cref="T:System.Security.Cryptography.HMACSHA384" /> HMACSHA512 
 <see cref="T:System.Security.Cryptography.HMACSHA512" /> System.Security.Cryptography.HMACSHA512 
 <see cref="T:System.Security.Cryptography.HMACSHA512" /> MACTripleDES 
 <see cref="T:System.Security.Cryptography.MACTripleDES" /> System.Security.Cryptography.MACTripleDES 
 <see cref="T:System.Security.Cryptography.MACTripleDES" /></param>
      <returns>지정된 HMAC 구현의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>키 변경이 허용된 경우 <see cref="T:System.Security.Cryptography.HMAC" /> 클래스에서 사용하는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제할 수도 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에 재정의된 경우 개체에 쓰여진 데이터의 경로를 해시 값을 계산할 기본 <see cref="T:System.Security.Cryptography.HMAC" /> 해시 알고리즘에 지정합니다.</summary>
      <param name="rgb">입력 데이터입니다.</param>
      <param name="ib">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="cb">데이터로 사용할 배열의 바이트 수입니다.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.ReadOnlySpan{System.Byte})">
      <param name="source" />
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>파생 클래스에서 재정의된 경우 암호화 스트림 개체에서 마지막 데이터를 처리한 후 해시 계산을 완료합니다.</summary>
      <returns>바이트 배열에 있는 계산된 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>해시에 사용할 해시 알고리즘의 이름을 가져오거나 설정합니다.</summary>
      <returns>해시 알고리즘의 이름입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">현재 해시 알고리즘을 변경할 수 없는 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.HMAC" />의 기본 구현 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>해시 알고리즘에 사용될 키를 가져오거나 설정합니다.</summary>
      <returns>해시 알고리즘에 사용할 키입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">해시가 시작된 후에 <see cref="P:System.Security.Cryptography.HMAC.Key" /> 속성을 변경하려고 한 경우</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>암호화 변형의 기본 작업을 정의합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>현재 변형을 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 변환을 다시 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>여러 개의 블록을 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>여러 개의 블록을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>입력 블록 크기를 가져옵니다.</summary>
      <returns>입력 데이터 블록의 크기(바이트)입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>출력 블록 크기를 가져옵니다.</summary>
      <returns>출력 데이터 블록의 크기(바이트)입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>입력 바이트 배열의 지정된 영역을 변환한 다음 변환 결과를 출력 바이트 배열의 지정된 영역으로 복사합니다.</summary>
      <param name="inputBuffer">변환을 컴퓨팅하는 입력입니다.</param>
      <param name="inputOffset">데이터 사용을 시작할 입력 바이트 배열의 오프셋입니다.</param>
      <param name="inputCount">데이터로 사용할 입력 바이트 배열의 바이트 수입니다.</param>
      <param name="outputBuffer">변환을 기록하는 것으로의 출력입니다.</param>
      <param name="outputOffset">데이터 쓰기를 시작할 출력 바이트 배열의 오프셋입니다.</param>
      <returns>쓰여진 바이트 수입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 배열의 지정된 영역을 변환합니다.</summary>
      <param name="inputBuffer">변환을 컴퓨팅하는 입력입니다.</param>
      <param name="inputOffset">데이터 사용을 시작할 바이트 배열의 오프셋입니다.</param>
      <param name="inputCount">데이터로 사용할 바이트 배열의 바이트 수입니다.</param>
      <returns>연산된 변환입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>키 지정 해시 알고리즘의 모든 구현이 파생될 추상 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create">
      <summary>키 지정 해시 알고리즘의 기본 구현 인스턴스를 만듭니다.</summary>
      <returns>기본 설정이 변경되지 않는 한 새 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)">
      <summary>키 지정 해시 알고리즘의 지정된 구현에 대한 인스턴스를 만듭니다.</summary>
      <param name="algName">사용할 키 지정 해시 알고리즘 구현입니다. 다음 표에서는 <paramref name="algName" /> 매개 변수의 올바른 값과 매핑할 알고리즘을 보여 줍니다.  
  매개 변수 값 
  Implements 
  System.Security.Cryptography.HMAC 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> System.Security.Cryptography.KeyedHashAlgorithm 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> HMACMD5 
 <see cref="T:System.Security.Cryptography.HMACMD5" /> System.Security.Cryptography.HMACMD5 
 <see cref="T:System.Security.Cryptography.HMACMD5" /> HMACRIPEMD160 
 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> System.Security.Cryptography.HMACRIPEMD160 
 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> HMACSHA1 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> System.Security.Cryptography.HMACSHA1 
 <see cref="T:System.Security.Cryptography.HMACSHA1" /> HMACSHA256 
 <see cref="T:System.Security.Cryptography.HMACSHA256" /> System.Security.Cryptography.HMACSHA256 
 <see cref="T:System.Security.Cryptography.HMACSHA256" /> HMACSHA384 
 <see cref="T:System.Security.Cryptography.HMACSHA384" /> System.Security.Cryptography.HMACSHA384 
 <see cref="T:System.Security.Cryptography.HMACSHA384" /> HMACSHA512 
 <see cref="T:System.Security.Cryptography.HMACSHA512" /> System.Security.Cryptography.HMACSHA512 
 <see cref="T:System.Security.Cryptography.HMACSHA512" /> MACTripleDES 
 <see cref="T:System.Security.Cryptography.MACTripleDES" /> System.Security.Cryptography.MACTripleDES 
 <see cref="T:System.Security.Cryptography.MACTripleDES" /></param>
      <returns>키 지정 해시 알고리즘의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>해시 알고리즘에 사용될 키를 가져오거나 설정합니다.</summary>
      <returns>해시 알고리즘에 사용할 키입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">해시가 시작된 후에 <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> 속성을 변경하려고 한 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>해시 알고리즘에 사용할 키입니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>대칭 암호화 알고리즘에 대한 유효한 키 크기 세트를 결정합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>지정된 키 값을 사용하여 <see cref="T:System.Security.Cryptography.KeySizes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="minSize">올바른 최소 키 크기입니다.</param>
      <param name="maxSize">올바른 최대 키 크기입니다.</param>
      <param name="skipSize">올바른 키 크기 간 간격입니다.</param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>최대 키 크기를 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 최대 키 크기입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>최소 키 크기를 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 최소 키 크기입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>유효 키 크기간 간격을 bps 단위로 지정합니다.</summary>
      <returns>bps 단위의 유효 키 크기간 간격입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.PaddingMode">
      <summary>메시지 데이터 블록이 암호화 작업에 필요한 전체 바이트 수보다 짧을 때 적용할 패딩 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ANSIX923">
      <summary>ANSIX923 패딩 문자열에서는 마지막 바이트를 총 패딩 바이트 수로 설정하고 나머지 바이트는 0으로 채웁니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ISO10126">
      <summary>ISO10126 패딩 문자열에서는 마지막 바이트를 총 패딩 바이트 수로 설정하고 나머지 바이트는 임의의 데이터로 채웁니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.None">
      <summary>아무 것도 채워지지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
      <summary>PKCS #7 패딩 문자열은 바이트 시퀀스로 구성되어 있으며, 각각의 시퀀스는 추가된 패딩 바이트의 전체 수와 동일합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
      <summary>패딩 문자열은 0으로 설정된 바이트로 구성됩니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.PbeEncryptionAlgorithm">
      <summary>PBE(Password-Based Encryption)와 함께 사용할 암호화 알고리즘을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes128Cbc">
      <summary>PKCS#7 패딩을 사용하는 CBC 모드에서 AES-128 알고리즘을 사용하여 암호화를 수행해야 한다고 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes192Cbc">
      <summary>PKCS#7 패딩을 사용하는 CBC 모드에서 AES-192 알고리즘을 사용하여 암호화를 수행해야 한다고 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes256Cbc">
      <summary>PKCS#7 패딩을 사용하는 CBC 모드에서 AES-256 알고리즘을 사용하여 암호화를 수행해야 한다고 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12">
      <summary>PKCS#12에서 KDF(키 파생 함수)를 사용하여 파생된 192비트 키를 사용하는 CBC 모드에서 TripleDES 알고리즘으로 암호화를 수행해야 한다고 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Unknown">
      <summary>암호화 알고리즘을 선택하지 않았음을 나타냅니다.</summary>
    </member>
    <member name="T:System.Security.Cryptography.PbeParameters">
      <summary>PBE(Password-Based Encryption)에 사용할 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PbeParameters.#ctor(System.Security.Cryptography.PbeEncryptionAlgorithm,System.Security.Cryptography.HashAlgorithmName,System.Int32)">
      <summary>
        <see cref="T:System.Security.Cryptography.PbeParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="encryptionAlgorithm">데이터를 암호화할 때 사용할 알고리즘입니다.</param>
      <param name="hashAlgorithm">암호를 암호화 키로 전환하기 위해 KDF(키 파생 함수)와 함께 사용할 해시 알고리즘의 이름입니다.</param>
      <param name="iterationCount">암호를 암호화 키로 전환하기 위해 KDF(키 파생 함수)에 제공한 반복 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterationCount" />가 1보다 작습니다.</exception>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.EncryptionAlgorithm">
      <summary>데이터를 암호화할 때 사용할 알고리즘을 가져옵니다.</summary>
      <returns>데이터를 암호화할 때 사용할 알고리즘입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.HashAlgorithm">
      <summary>암호를 암호화 키로 전환하기 위해 KDF(키 파생 함수)와 함께 사용할 해시 알고리즘의 이름을 가져옵니다.</summary>
      <returns>키 파생 함수 (KDF)와 함께 사용 하 여 암호를 암호화 키로 전환 하는 해시 알고리즘의 이름입니다.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.IterationCount">
      <summary>암호를 암호화 키로 전환하기 위해 KDF(키 파생 함수)에 제공한 반복 수를 가져옵니다.</summary>
      <returns>암호를 암호화 키로 전환하기 위해 KDF(키 파생 함수)에 제공한 반복 수입니다.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>모든 대칭 알고리즘의 구현에서 상속해야 하는 추상 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">대칭 알고리즘에서 의 구현이 잘못된 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>암호화 작업의 블록 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>블록 크기(비트 단위)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">블록 크기가 잘못된 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>암호화 작업의 블록 크기(비트)를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create">
      <summary>대칭 알고리즘을 수행하는 데 사용되는 기본 암호화 개체를 만듭니다.</summary>
      <returns>대칭 알고리즘을 수행하는 데 사용되는 기본 암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)">
      <summary>대칭 알고리즘을 수행하는 데 사용되는 지정된 암호화 개체를 만듭니다.</summary>
      <param name="algName">사용할 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스의 특정 구현 이름입니다.</param>
      <returns>대칭 알고리즘을 수행하는 데 사용되는 암호화 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <returns>대칭 decryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 decryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <returns>대칭 decryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>현재 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <returns>대칭 encryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>파생 클래스에서 재정의된 경우 지정된 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 속성 및 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 사용하여 대칭 encryptor 개체를 만듭니다.</summary>
      <param name="rgbKey">대칭 알고리즘에 사용할 비밀 키입니다.</param>
      <param name="rgbIV">대칭 알고리즘에 사용할 초기화 벡터입니다.</param>
      <returns>대칭 encryptor 개체입니다.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize">
      <summary>암호화 작업의 피드백 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>피드백 크기(비트 단위)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">피드백 크기가 블록 크기보다 큰 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
      <summary>암호화 작업의 피드백 크기(비트 단위)를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>파생 클래스에서 재정의된 경우 알고리즘에 사용할 임의의 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 생성합니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>파생 클래스에서 재정의된 경우 알고리즘에 사용할 난수 키(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)를 생성합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>대칭 알고리즘에 대한 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 가져오거나 설정합니다.</summary>
      <returns>초기화 벡터입니다.</returns>
      <exception cref="T:System.ArgumentNullException">초기화 벡터를 <see langword="null" />로 설정하려고 한 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">초기화 벡터를 잘못된 크기로 설정하려고 한 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>대칭 알고리즘에 대한 초기화 벡터(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>대칭 알고리즘에 대한 비밀 키를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용할 비밀 키입니다.</returns>
      <exception cref="T:System.ArgumentNullException">키를 <see langword="null" />로 설정하려고 한 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 크기가 잘못된 경우</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>대칭 알고리즘에서 사용하는 비밀 키의 크기(비트 단위)를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에서 사용하는 비밀 키의 크기(비트 단위)입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">키 크기가 잘못된 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>대칭 알고리즘에서 사용하는 비밀 키의 크기(비트 단위)를 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>대칭 알고리즘에 대한 비밀 키를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>대칭 알고리즘에서 지원하는 블록 크기(비트 단위)를 가져옵니다.</summary>
      <returns>알고리즘에서 지원하는 블록 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>대칭 알고리즘에서 지원하는 블록 크기(비트 단위)를 지정합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>대칭 알고리즘에서 지원하는 키 크기(비트 단위)를 가져옵니다.</summary>
      <returns>알고리즘에서 지원하는 키 크기가 들어 있는 배열입니다.</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>대칭 알고리즘에서 지원하는 키 크기(비트 단위)를 지정합니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
      <summary>대칭 알고리즘의 작업 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘의 작업 모드입니다. 기본값은 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">암호화 모드가 <see cref="T:System.Security.Cryptography.CipherMode" /> 값 중 하나가 아닌 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue">
      <summary>대칭 알고리즘에 사용된 암호화 모드를 나타냅니다.</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
      <summary>대칭 알고리즘에 사용된 패딩 모드를 가져오거나 설정합니다.</summary>
      <returns>대칭 알고리즘에 사용된 패딩 모드입니다. 기본값은 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />입니다.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">패딩 모드가 <see cref="T:System.Security.Cryptography.PaddingMode" /> 값 중 하나가 아닌 경우</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue">
      <summary>대칭 알고리즘에 사용된 패딩 모드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>지정된 키 크기를 현재 알고리즘에 사용할 수 있는지 여부를 결정합니다.</summary>
      <param name="bitLength">올바른 키 크기를 확인하는 길이(비트 단위)입니다.</param>
      <returns>지정된 키 크기를 현재 알고리즘에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>3x2 행렬을 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>지정된 구성 요소에서 3x2 행렬을 만듭니다.</summary>
      <param name="m11">첫 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m12">첫 번째 행의 두 번째 요소에 할당할 값입니다.</param>
      <param name="m21">두 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m22">두 번째 행의 두 번째 요소에 할당할 값입니다.</param>
      <param name="m31">세 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m32">세 번째 행의 두 번째 요소에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>한 행렬의 각 요소와 두 번째 행렬의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />를 합한 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>라디안으로 지정된 회전을 사용하여 회전 행렬을 만듭니다.</summary>
      <param name="radians">회전량(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>라디안으로 지정된 회전 및 중심점을 사용하여 회전 행렬을 만듭니다.</summary>
      <param name="radians">회전량(라디안)입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>지정된 벡터 배율에서 크기 조정 행렬을 만듭니다.</summary>
      <param name="scales">사용할 배율입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 중심점부터 오프셋을 사용하여 지정된 벡터 배율에서 크기 조정 행렬을 만듭니다.</summary>
      <param name="scales">사용할 배율입니다.</param>
      <param name="centerPoint">중심 오프셋입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>지정된 배율로 균일하게 크기가 조정되는 크기 조정 행렬을 만듭니다.</summary>
      <param name="scale">사용할 균일한 배율입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>지정된 중심점부터 오프셋을 사용하여 지정된 배율로 균일하게 크기가 조정되는 크기 조정 행렬을 만듭니다.</summary>
      <param name="scale">사용할 균일한 배율입니다.</param>
      <param name="centerPoint">중심 오프셋입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>지정된 X 및 Y 구성 요소에서 크기 조정 행렬을 만듭니다.</summary>
      <param name="xScale">X축에서 크기를 조정할 값입니다.</param>
      <param name="yScale">Y축에서 크기를 조정할 값입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>지정된 중심점만큼 오프셋되는 크기 조정 행렬을 만듭니다.</summary>
      <param name="xScale">X축에서 크기를 조정할 값입니다.</param>
      <param name="yScale">Y축에서 크기를 조정할 값입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>라디안으로 지정된 각도에서 교대 행렬을 만듭니다.</summary>
      <param name="radiansX">X 각도(라디안)입니다.</param>
      <param name="radiansY">Y 각도(라디안)입니다.</param>
      <returns>교대 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>라디안으로 지정된 각도 및 중심점에서 교대 행렬을 만듭니다.</summary>
      <param name="radiansX">X 각도(라디안)입니다.</param>
      <param name="radiansY">Y 각도(라디안)입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>교대 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>지정된 2차원 벡터에서 변환 행렬을 만듭니다.</summary>
      <param name="position">변환 위치입니다.</param>
      <returns>변환 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>지정된 X 및 Y 구성 요소에서 변환 행렬을 만듭니다.</summary>
      <param name="xPosition">X 위치입니다.</param>
      <param name="yPosition">Y 위치입니다.</param>
      <returns>변환 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>이 인스턴스와 다른 3x2 행렬이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 행렬입니다.</param>
      <returns>두 행렬이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>이 행렬의 행렬식을 계산합니다.</summary>
      <returns>행렬식입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>곱하기 ID 행렬을 가져옵니다.</summary>
      <returns>곱하기 ID 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>지정된 행렬을 반전합니다. 반환 값은 작업의 성공 여부를 나타냅니다.</summary>
      <param name="matrix">반전할 행렬입니다.</param>
      <param name="result">이 메서드가 반환될 때 작업이 성공한 경우 반전된 행렬을 포함합니다.</param>
      <returns>
        <paramref name="matrix" />가 성공적으로 변환되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>현재 행렬이 ID 행렬인지 여부를 나타냅니다.</summary>
      <returns>현재 행렬이 ID 행렬이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>두 번째 행렬의 가중치를 지정하는 값에 따라 한 행렬과 두 번째 행렬 사이의 선형 보간을 수행합니다.</summary>
      <param name="matrix1">첫 번째 행렬입니다.</param>
      <param name="matrix2">두 번째 행렬입니다.</param>
      <param name="amount">
        <paramref name="matrix2" />의 상대적 가중치입니다.</param>
      <returns>보간된 행렬입니다.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>첫 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>첫 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>두 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>두 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>세 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>세 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>두 행렬을 곱한 결과로 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>행렬곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>지정된 행렬의 모든 요소를 스칼라 인수로 크기 조정하여 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">크기를 조정할 행렬입니다.</param>
      <param name="value2">사용할 크기 조정 값입니다.</param>
      <returns>크기 조정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>해당 값에 모두 -1을 곱하여 지정된 행렬을 부정합니다.</summary>
      <param name="value">부정할 행렬입니다.</param>
      <returns>부정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>한 행렬의 각 요소와 두 번째 행렬의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>합한 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>지정된 행렬이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 행렬입니다.</param>
      <param name="value2">비교할 두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>지정된 행렬이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 행렬입니다.</param>
      <param name="value2">비교할 두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>두 행렬을 곱한 결과로 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>행렬곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>지정된 행렬의 모든 요소를 스칼라 인수로 크기 조정하여 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">크기를 조정할 행렬입니다.</param>
      <param name="value2">사용할 크기 조정 값입니다.</param>
      <returns>크기 조정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>두 번째 행렬의 각 요소를 첫 번째 행렬의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>해당 값에 모두 -1을 곱하여 지정된 행렬을 부정합니다.</summary>
      <param name="value">부정할 행렬입니다.</param>
      <returns>부정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>두 번째 행렬의 각 요소를 첫 번째 행렬의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>이 행렬을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 행렬의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>이 행렬의 변환 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>현재 인스턴스의 변환 구성 요소입니다.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>4x4 행렬을 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>지정된 <see cref="T:System.Numerics.Matrix3x2" /> 개체에서 <see cref="T:System.Numerics.Matrix4x4" /> 개체를 만듭니다.</summary>
      <param name="value">3x2 행렬입니다.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>지정된 구성 요소에서 4x4 행렬을 만듭니다.</summary>
      <param name="m11">첫 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m12">첫 번째 행의 두 번째 요소에 할당할 값입니다.</param>
      <param name="m33">세 번째 행의 세 번째 요소에 할당할 값입니다.</param>
      <param name="m34">세 번째 행의 네 번째 요소에 할당할 값입니다.</param>
      <param name="m41">네 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m42">네 번째 행의 두 번째 요소에 할당할 값입니다.</param>
      <param name="m43">네 번째 행의 세 번째 요소에 할당할 값입니다.</param>
      <param name="m44">네 번째 행의 네 번째 요소에 할당할 값입니다.</param>
      <param name="m13">첫 번째 행의 세 번째 요소에 할당할 값입니다.</param>
      <param name="m14">첫 번째 행의 네 번째 요소에 할당할 값입니다.</param>
      <param name="m21">두 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m22">두 번째 행의 두 번째 요소에 할당할 값입니다.</param>
      <param name="m23">두 번째 행의 세 번째 요소에 할당할 값입니다.</param>
      <param name="m24">두 번째 행의 세 번째 요소에 할당할 값입니다.</param>
      <param name="m31">세 번째 행의 첫 번째 요소에 할당할 값입니다.</param>
      <param name="m32">세 번째 행의 두 번째 요소에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>한 행렬의 각 요소와 두 번째 행렬의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />를 합한 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 개체 위치를 중심으로 회전하는 구면 빌보드를 만듭니다.</summary>
      <param name="objectPosition">빌보드의 회전 중심으로 사용할 개체의 위치입니다.</param>
      <param name="cameraPosition">카메라의 위치입니다.</param>
      <param name="cameraUpVector">카메라의 상향 벡터입니다.</param>
      <param name="cameraForwardVector">카메라의 정방향 벡터입니다.</param>
      <returns>만든 빌보드입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 축을 중심으로 회전하는 원통형 빌보드를 만듭니다.</summary>
      <param name="objectPosition">빌보드의 회전 중심으로 사용할 개체의 위치입니다.</param>
      <param name="cameraPosition">카메라의 위치입니다.</param>
      <param name="rotateAxis">빌보드의 회전 중심으로 사용할 축입니다.</param>
      <param name="cameraForwardVector">카메라의 정방향 벡터입니다.</param>
      <param name="objectForwardVector">개체의 정방향 벡터입니다.</param>
      <returns>빌보드 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>임의의 벡터를 중심으로 회전하는 행렬을 만듭니다.</summary>
      <param name="axis">회전 중심으로 사용할 축입니다.</param>
      <param name="angle">
        <paramref name="axis" /> 중심으로 회전할 각도(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값에서 회전 행렬을 만듭니다.</summary>
      <param name="quaternion">원본 쿼터니언입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>지정된 요, 피치 및 롤에서 회전 행렬을 만듭니다.</summary>
      <param name="yaw">Y축을 중심으로 하는 회전 각도(라디안)입니다.</param>
      <param name="pitch">X축을 중심으로 하는 회전 각도(라디안)입니다.</param>
      <param name="roll">Z축을 중심으로 하는 회전 각도(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>보기 행렬을 만듭니다.</summary>
      <param name="cameraPosition">카메라의 위치입니다.</param>
      <param name="cameraTarget">카메라가 가리키는 대상입니다.</param>
      <param name="cameraUpVector">카메라의 관점에서 "위쪽" 방향입니다.</param>
      <returns>보기 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>지정된 보기 볼륨 차원에서 직교 원근 행렬을 만듭니다.</summary>
      <param name="width">보기 볼륨의 너비입니다.</param>
      <param name="height">보기 볼륨의 높이입니다.</param>
      <param name="zNearPlane">보기 볼륨의 최소 Z 값입니다.</param>
      <param name="zFarPlane">보기 볼륨의 최대 Z 값입니다.</param>
      <returns>직교 투영 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>사용자 지정 직교 투영 행렬을 만듭니다.</summary>
      <param name="left">보기 볼륨의 최소 X 값입니다.</param>
      <param name="right">보기 볼륨의 최대 X 값입니다.</param>
      <param name="bottom">보기 볼륨의 최소 Y 값입니다.</param>
      <param name="top">보기 볼륨의 최대 Y 값입니다.</param>
      <param name="zNearPlane">보기 볼륨의 최소 Z 값입니다.</param>
      <param name="zFarPlane">보기 볼륨의 최대 Z 값입니다.</param>
      <returns>직교 투영 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>지정된 보기 볼륨 차원에서 원근 투영 행렬을 만듭니다.</summary>
      <param name="width">근거리 보기 평면에서 보기 볼륨의 너비입니다.</param>
      <param name="height">근거리 보기 평면에서 보기 볼륨의 높이입니다.</param>
      <param name="nearPlaneDistance">근거리 보기 평면까지의 거리입니다.</param>
      <param name="farPlaneDistance">원거리 보기 평면까지의 거리입니다.</param>
      <returns>원근 투영 행렬입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="farPlaneDistance" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="nearPlaneDistance" />가 <paramref name="farPlaneDistance" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>보기 필드, 가로 세로 비율, 근거리 및 원거리 보기 평면 거리에 따라 원근 투영 행렬을 만듭니다.</summary>
      <param name="fieldOfView">Y 방향의 보기 필드(라디안)입니다.</param>
      <param name="aspectRatio">보기 공간 너비를 높이로 나눈 값으로 정의되는 가로 세로 비율입니다.</param>
      <param name="nearPlaneDistance">근거리 보기 평면까지의 거리입니다.</param>
      <param name="farPlaneDistance">원거리 보기 평면까지의 거리입니다.</param>
      <returns>원근 투영 행렬입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="fieldOfView" />가 <see cref="F:System.Math.PI" />보다 크거나 같은 경우  
 <paramref name="nearPlaneDistance" />가 0보다 작거나 같은 경우  
또는 
 <paramref name="farPlaneDistance" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="nearPlaneDistance" />가 <paramref name="farPlaneDistance" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>사용자 지정 원근 투영 행렬을 만듭니다.</summary>
      <param name="left">근거리 보기 평면에서 보기 볼륨의 최소 X 값입니다.</param>
      <param name="right">근거리 보기 평면에서 보기 볼륨의 최대 X 값입니다.</param>
      <param name="bottom">근거리 보기 평면에서 보기 볼륨의 최소 Y 값입니다.</param>
      <param name="top">근거리 보기 평면에서 보기 볼륨의 최대 Y 값입니다.</param>
      <param name="nearPlaneDistance">근거리 보기 평면까지의 거리입니다.</param>
      <param name="farPlaneDistance">원거리 보기 평면까지의 거리입니다.</param>
      <returns>원근 투영 행렬입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="farPlaneDistance" />가 0보다 작거나 같습니다.  
또는 
 <paramref name="nearPlaneDistance" />가 <paramref name="farPlaneDistance" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>지정된 평면을 중심으로 하는 좌표계를 반영하는 행렬을 만듭니다.</summary>
      <param name="value">반사를 만들 때 중심으로 사용할 평면입니다.</param>
      <returns>반사를 표현하는 새 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>X축을 중심으로 점을 회전하기 위한 행렬을 만듭니다.</summary>
      <param name="radians">X축을 중심으로 회전할 양(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>중심점부터 X축을 중심으로 점을 회전하기 위한 행렬을 만듭니다.</summary>
      <param name="radians">X축을 중심으로 회전할 양(라디안)입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Y축을 중심으로 점을 회전하기 위한 행렬을 만듭니다.</summary>
      <param name="radians">Y축을 중심으로 회전할 양(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>중심점부터 Y축을 중심으로 회전할 양(라디안)입니다.</summary>
      <param name="radians">Y축을 중심으로 회전할 양(라디안)입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Z축을 중심으로 점을 회전하기 위한 행렬을 만듭니다.</summary>
      <param name="radians">Z축을 중심으로 회전할 양(라디안)입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>중심점부터 Z축을 중심으로 점을 회전하기 위한 행렬을 만듭니다.</summary>
      <param name="radians">Z축을 중심으로 회전할 양(라디안)입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>회전 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>지정된 벡터 배율에서 크기 조정 행렬을 만듭니다.</summary>
      <param name="scales">사용할 배율입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>중심점을 사용하여 크기 조정 행렬을 만듭니다.</summary>
      <param name="scales">각 축에서 크기를 조정할 양을 포함하는 벡터입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>각 축에서 동일하게 크기가 조정되는 균일한 크기 조정 행렬을 만듭니다.</summary>
      <param name="scale">균일한 크기 조정 인수입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>중심점을 사용하여 각 축에서 동일하게 크기가 조정되는 균일한 크기 조정 행렬을 만듭니다.</summary>
      <param name="scale">균일한 크기 조정 인수입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>지정된 X, Y 및 Z 구성 요소에서 크기 조정 행렬을 만듭니다.</summary>
      <param name="xScale">X축에서 크기를 조정할 값입니다.</param>
      <param name="yScale">Y축에서 크기를 조정할 값입니다.</param>
      <param name="zScale">Z축에서 크기를 조정할 값입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>지정된 중심점만큼 오프셋되는 크기 조정 행렬을 만듭니다.</summary>
      <param name="xScale">X축에서 크기를 조정할 값입니다.</param>
      <param name="yScale">Y축에서 크기를 조정할 값입니다.</param>
      <param name="zScale">Z축에서 크기를 조정할 값입니다.</param>
      <param name="centerPoint">중심점입니다.</param>
      <returns>크기 조정 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>지정된 광원에서 그림자를 만드는 것처럼 지정된 평면에 기하 도형을 평면화하는 행렬을 만듭니다.</summary>
      <param name="lightDirection">그림자를 생성할 빛이 들어오는 방향입니다.</param>
      <param name="plane">그림자를 생성하기 위해 새 행렬이 기하 도형을 평면화해야 하는 평면입니다.</param>
      <returns>지정된 방향에서 지정된 평면에 기하 도형을 평면화하는 데 사용할 수 있는 새 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>지정된 3차원 벡터에서 변환 행렬을 만듭니다.</summary>
      <param name="position">각 축에서 변환할 양입니다.</param>
      <returns>변환 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>지정된 X, Y 및 Z 구성 요소에서 변환 행렬을 만듭니다.</summary>
      <param name="xPosition">X축에서 변환할 양입니다.</param>
      <param name="yPosition">Y축에서 변환할 양입니다.</param>
      <param name="zPosition">Z축에서 변환할 양입니다.</param>
      <returns>변환 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 매개 변수를 사용하여 월드 행렬을 만듭니다.</summary>
      <param name="position">개체의 위치입니다.</param>
      <param name="forward">개체의 정방향입니다.</param>
      <param name="up">개체의 위쪽 방향입니다. 해당 값은 일반적으로 <c>[0, 1, 0]</c>입니다.</param>
      <returns>월드 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>지정된 크기 조정, 회전 또는 변환 행렬에서 크기 조정, 변환 및 회전 구성 요소를 추출하려고 합니다. 반환 값은 작업의 성공 여부를 나타냅니다.</summary>
      <param name="matrix">원본 행렬입니다.</param>
      <param name="scale">이 메서드가 반환될 때 작업이 성공한 경우 변환 행렬의 크기 조정 구성 요소를 포함합니다.</param>
      <param name="rotation">이 메서드가 반환될 때 작업이 성공한 경우 변형 행렬의 회전 구성 요소를 포함합니다.</param>
      <param name="translation">메서드가 반환될 때 작업이 성공한 경우 변환 행렬의 변환 구성 요소를 포함합니다.</param>
      <returns>
        <paramref name="matrix" />가 성공적으로 분해되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>이 인스턴스와 다른 4x4 행렬이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 행렬입니다.</param>
      <returns>두 행렬이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>현재 4x4 행렬의 행렬식을 계산합니다.</summary>
      <returns>행렬식입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>곱하기 ID 행렬을 가져옵니다.</summary>
      <returns>곱하기 ID 행렬을 가져옵니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>지정된 행렬을 반전합니다. 반환 값은 작업의 성공 여부를 나타냅니다.</summary>
      <param name="matrix">반전할 행렬입니다.</param>
      <param name="result">이 메서드가 반환될 때 작업이 성공한 경우 반전된 행렬을 포함합니다.</param>
      <returns>
        <paramref name="matrix" />가 성공적으로 변환되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>현재 행렬이 ID 행렬인지 여부를 나타냅니다.</summary>
      <returns>현재 행렬이 ID 행렬이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>두 번째 행렬의 가중치를 지정하는 값에 따라 한 행렬과 두 번째 행렬 사이의 선형 보간을 수행합니다.</summary>
      <param name="matrix1">첫 번째 행렬입니다.</param>
      <param name="matrix2">두 번째 행렬입니다.</param>
      <param name="amount">
        <paramref name="matrix2" />의 상대적 가중치입니다.</param>
      <returns>보간된 행렬입니다.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>첫 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>첫 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>첫 번째 행의 세 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>첫 번째 행의 네 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>두 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>두 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>두 번째 행의 세 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>두 번째 행의 네 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>세 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>세 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>세 번째 행의 세 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>세 번째 행의 네 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>네 번째 행의 첫 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>네 번째 행의 두 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>네 번째 행의 세 번째 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>네 번째 행의 네 번째 요소입니다.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>두 행렬을 곱한 결과로 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>행렬곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>지정된 행렬의 모든 요소를 스칼라 인수로 크기 조정하여 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">크기를 조정할 행렬입니다.</param>
      <param name="value2">사용할 크기 조정 값입니다.</param>
      <returns>크기 조정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>해당 값에 모두 -1을 곱하여 지정된 행렬을 부정합니다.</summary>
      <param name="value">부정할 행렬입니다.</param>
      <returns>부정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>한 행렬의 각 요소와 두 번째 행렬의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>합한 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>지정된 행렬이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 행렬입니다.</param>
      <param name="value2">비교할 두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>지정된 행렬이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 행렬입니다.</param>
      <param name="value2">비교할 두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>두 행렬을 곱한 결과로 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>행렬곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>지정된 행렬의 모든 요소를 스칼라 인수로 크기 조정하여 생성되는 행렬을 반환합니다.</summary>
      <param name="value1">크기를 조정할 행렬입니다.</param>
      <param name="value2">사용할 크기 조정 값입니다.</param>
      <returns>크기 조정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>두 번째 행렬의 각 요소를 첫 번째 행렬의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>해당 값에 모두 -1을 곱하여 지정된 행렬을 부정합니다.</summary>
      <param name="value">부정할 행렬입니다.</param>
      <returns>부정된 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>두 번째 행렬의 각 요소를 첫 번째 행렬의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 행렬입니다.</param>
      <param name="value2">두 번째 행렬입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 행렬입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>이 행렬을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 행렬의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전을 적용하여 지정된 행렬을 변환합니다.</summary>
      <param name="value">변형할 행렬입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 행렬입니다.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>이 행렬의 변환 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>현재 인스턴스의 변환 구성 요소입니다.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>행렬의 행과 열을 바꿉니다.</summary>
      <param name="matrix">바꿀 행렬입니다.</param>
      <returns>바뀐 행렬입니다.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>평면을 3차원 공간으로 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>지정된 법선 및 법선을 따라 원점으로부터의 거리를 사용하여 <see cref="T:System.Numerics.Plane" /> 개체를 만듭니다.</summary>
      <param name="normal">평면의 법선 벡터입니다.</param>
      <param name="d">법선 벡터를 따라 원점으로부터 평면의 거리입니다.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>지정된 4차원 벡터에서 <see cref="T:System.Numerics.Plane" /> 개체를 만듭니다.</summary>
      <param name="value">처음 세 요소는 법선 벡터를 설명하고 <see cref="F:System.Numerics.Vector4.W" />는 해당 법선을 따라 원점으로부터의 거리를 정의하는 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>법선의 X, Y, Z 구성 요소와 해당 법선에서 원점으로부터의 거리를 사용하여 <see cref="T:System.Numerics.Plane" /> 개체를 만듭니다.</summary>
      <param name="x">법선의 X 구성 요소입니다.</param>
      <param name="y">법선의 Y 구성 요소입니다.</param>
      <param name="z">법선의 Z 구성 요소입니다.</param>
      <param name="d">해당 법선을 따라 원점으로부터 평면의 거리입니다.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 세 점을 포함하는 <see cref="T:System.Numerics.Plane" /> 개체를 만듭니다.</summary>
      <param name="point1">평면을 정의하는 첫 번째 점입니다.</param>
      <param name="point2">평면을 정의하는 두 번째 점입니다.</param>
      <param name="point3">평면을 정의하는 세 번째 점입니다.</param>
      <returns>세 점을 포함하는 평면입니다.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>해당 법선을 따라 원점으로부터 평면의 거리입니다.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>평면과 4차원 벡터의 내적을 계산합니다.</summary>
      <param name="plane">평면입니다.</param>
      <param name="value">4차원 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>이 평면의 지정된 3차원 벡터와 법선 벡터의 내적과 평면의 거리(<see cref="F:System.Numerics.Plane.D" />)를 더한 값을 반환합니다.</summary>
      <param name="plane">평면입니다.</param>
      <param name="value">3차원 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>이 평면의 지정된 3차원 벡터와 <see cref="F:System.Numerics.Plane.Normal" /> 벡터의 내적을 반환합니다.</summary>
      <param name="plane">평면입니다.</param>
      <param name="value">3차원 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>이 인스턴스와 다른 평면 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 평면입니다.</param>
      <returns>두 평면이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>평면의 법선 벡터입니다.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>법선 벡터가 정규화된 소스 평면의 법선 벡터인 새 <see cref="T:System.Numerics.Plane" /> 개체를 만듭니다.</summary>
      <param name="value">원본 평면입니다.</param>
      <returns>정규화된 평면입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>두 평면이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 평면입니다.</param>
      <param name="value2">비교할 두 번째 평면입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>두 평면이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 평면입니다.</param>
      <param name="value2">비교할 두 번째 평면입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>이 평면 개체의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Numerics.Plane" /> 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>4x4 행렬로 정규화된 평면을 변형합니다.</summary>
      <param name="plane">변형할 정규화된 평면입니다.</param>
      <param name="matrix">
        <paramref name="plane" />에 적용할 변환 행렬입니다.</param>
      <returns>변형된 평면입니다.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>쿼터니언 회전으로 정규화된 평면을 변환합니다.</summary>
      <param name="plane">변형할 정규화된 평면입니다.</param>
      <param name="rotation">평면에 적용할 쿼터니언 회전입니다.</param>
      <returns>쿼터니언 회전을 적용한 결과로 생성되는 새 평면입니다.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>3차원 물리적 회전을 인코드하는 데 사용되는 벡터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>지정된 벡터 및 회전 부분에서 쿼터니언을 만듭니다.</summary>
      <param name="vectorPart">쿼터니언의 벡터 부분입니다.</param>
      <param name="scalarPart">쿼터니언의 회전 부분입니다.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>지정된 구성 요소에서 쿼터니언을 생성합니다.</summary>
      <param name="x">쿼터니언의 X 구성 요소에 할당할 값입니다.</param>
      <param name="y">쿼터니언의 Y 구성 요소에 할당할 값입니다.</param>
      <param name="z">쿼터니언의 Z 구성 요소에 할당할 값입니다.</param>
      <param name="w">쿼터니언의 W 구성 요소에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>한 쿼터니언의 각 요소와 두 번째 쿼터니언의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />를 합한 값을 포함하는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언을 연결합니다.</summary>
      <param name="value1">시리즈에서 첫 번째 쿼터니언 회전입니다.</param>
      <param name="value2">시리즈에서 두 번째 쿼터니언 회전입니다.</param>
      <returns>
        <paramref name="value1" /> 회전과 <paramref name="value2" /> 회전의 연결을 나타내는 새 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언의 켤레를 반환합니다.</summary>
      <param name="value">쿼터니언입니다.</param>
      <returns>
        <see langword="value" />의 켤레인 새 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>단위 벡터와 벡터를 중심으로 회전할 각도에서 쿼터니언을 만듭니다.</summary>
      <param name="axis">회전 중심으로 사용할 단위 벡터입니다.</param>
      <param name="angle">벡터를 중심으로 회전할 각도(라디안)입니다.</param>
      <returns>새로 만든 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>지정된 회전 행렬에서 쿼터니언을 만듭니다.</summary>
      <param name="matrix">회전 행렬입니다.</param>
      <returns>새로 만든 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>지정된 요, 피치 및 롤에서 새 쿼터니언을 만듭니다.</summary>
      <param name="yaw">Y축을 중심으로 하는 요 각도(라디안)입니다.</param>
      <param name="pitch">X축을 중심으로 하는 피치 각도(라디안)입니다.</param>
      <param name="roll">Z축을 중심으로 하는 롤 각도(라디안)입니다.</param>
      <returns>결과로 생성되는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>한 쿼터니언을 두 번째 쿼터니언으로 나눕니다.</summary>
      <param name="value1">피제수입니다.</param>
      <param name="value2">제수입니다.</param>
      <returns>
        <paramref name="value1" />을 <paramref name="value2" />로 나눈 결과로 생성되는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언의 내적을 계산합니다.</summary>
      <param name="quaternion1">첫 번째 쿼터니언입니다.</param>
      <param name="quaternion2">두 번째 쿼터니언입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>이 인스턴스와 다른 쿼터니언이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 쿼터니언입니다.</param>
      <returns>두 쿼터니언이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>회전 없음을 나타내는 쿼터니언을 가져옵니다.</summary>
      <returns>값이 포함 된 쿼터 니 언을 <c>(0, 0, 0, 1)</c>합니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>쿼터니언의 역수를 반환합니다.</summary>
      <param name="value">쿼터니언입니다.</param>
      <returns>역 쿼터니언입니다.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>현재 인스턴스가 ID 쿼터니언인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 인스턴스가 ID 쿼터니언이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>쿼터니언 길이를 계산합니다.</summary>
      <returns>계산된 쿼터니언 길이입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>쿼터니언 길이 제곱을 계산합니다.</summary>
      <returns>쿼터니언 길이 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>두 번째 쿼터니언의 가중치를 지정하는 값에 따라 두 쿼터니언 사이의 선형 보간을 수행합니다.</summary>
      <param name="quaternion1">첫 번째 쿼터니언입니다.</param>
      <param name="quaternion2">두 번째 쿼터니언입니다.</param>
      <param name="amount">보간에서 <paramref name="quaternion2" />의 상대적 가중치입니다.</param>
      <returns>보간된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언을 곱한 결과로 생성되는 쿼터니언을 반환합니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>쿼터니언 곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>지정된 쿼터니언의 모든 구성 요소를 스칼라 인수로 크기 조정하여 생성되는 쿼터니언을 반환합니다.</summary>
      <param name="value1">원본 쿼터니언입니다.</param>
      <param name="value2">스칼라 값입니다.</param>
      <returns>크기 조정된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>쿼터니언의 각 구성 요소 부호를 반대로 바꿉니다.</summary>
      <param name="value">부정할 쿼터니언입니다.</param>
      <returns>부정된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>지정된 <see cref="T:System.Numerics.Quaternion" />의 각 구성 요소를 해당 길이로 나눕니다.</summary>
      <param name="value">정규화할 쿼터니언입니다.</param>
      <returns>정규화된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>한 쿼터니언의 각 요소와 두 번째 쿼터니언의 해당 요소를 더합니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />를 합한 값을 포함하는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>한 쿼터니언을 두 번째 쿼터니언으로 나눕니다.</summary>
      <param name="value1">피제수입니다.</param>
      <param name="value2">제수입니다.</param>
      <returns>
        <paramref name="value1" />을 <paramref name="value2" />로 나눈 결과로 생성되는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 쿼터니언입니다.</param>
      <param name="value2">비교할 두 번째 쿼터니언입니다.</param>
      <returns>두 쿼터니언이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언이 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value1">비교할 첫 번째 쿼터니언입니다.</param>
      <param name="value2">비교할 두 번째 쿼터니언입니다.</param>
      <returns>
        <paramref name="value1" />과 <paramref name="value2" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 쿼터니언을 곱한 결과로 생성되는 쿼터니언을 반환합니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>쿼터니언 곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>지정된 쿼터니언의 모든 구성 요소를 스칼라 인수로 크기 조정하여 생성되는 쿼터니언을 반환합니다.</summary>
      <param name="value1">원본 쿼터니언입니다.</param>
      <param name="value2">스칼라 값입니다.</param>
      <returns>크기 조정된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 번째 쿼터니언의 각 요소를 첫 번째 쿼터니언의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>쿼터니언의 각 구성 요소 부호를 반대로 바꿉니다.</summary>
      <param name="value">부정할 쿼터니언입니다.</param>
      <returns>부정된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>구면 선형 보간을 사용하여 두 쿼터니언을 보간합니다.</summary>
      <param name="quaternion1">첫 번째 쿼터니언입니다.</param>
      <param name="quaternion2">두 번째 쿼터니언입니다.</param>
      <param name="amount">보간에서 두 번째 쿼터니언의 상대적 가중치입니다.</param>
      <returns>보간된 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>두 번째 쿼터니언의 각 요소를 첫 번째 쿼터니언의 해당 요소에서 뺍니다.</summary>
      <param name="value1">첫 번째 쿼터니언입니다.</param>
      <param name="value2">두 번째 쿼터니언입니다.</param>
      <returns>
        <paramref name="value2" />의 각 요소를 <paramref name="value1" />의 해당 요소에서 뺀 결과로 생성되는 값을 포함하는 쿼터니언입니다.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>이 쿼터니언을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 쿼터니언의 문자열 표현입니다.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>쿼터니언의 회전 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>쿼터니언 벡터 구성 요소의 X 값입니다.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>쿼터니언 벡터 구성 요소의 Y 값입니다.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>쿼터니언 벡터 구성 요소의 Z 값입니다.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>일반 벡터 만들기, 조작, 결합 및 변환을 위한 정적 편의 메서드 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>요소가 지정된 벡터 요소의 절대 값인 새 벡터를 반환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>절대 값 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 합계인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>두 벡터의 해당하는 각 요소 쌍에서 비트 And Not 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 부호 없는 바이트 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 배정밀도 부동 소수점 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 16비트 정수 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 정수 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 정수(Long) 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 부호 있는 바이트 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 단정밀도 부동 소수점 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 부호 없는 16비트 정수 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 부호 없는 정수 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 비트를 부호 없는 정수(Long) 벡터의 비트로 재해석합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>두 벡터의 각 요소 쌍에서 비트 <see langword="And" /> 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>두 벡터의 각 요소 쌍에서 비트 <see langword="Or" /> 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>정수 마스크 벡터를 기반으로 지정된 두 단정밀도 원본 벡터 사이에서 선택된 요소로 새 단정밀도 벡터를 만듭니다.</summary>
      <param name="condition">선택을 실행하는 데 사용되는 정수 마스크 벡터입니다.</param>
      <param name="left">첫 번째 원본 벡터입니다.</param>
      <param name="right">두 번째 원본 벡터입니다.</param>
      <returns>마스크를 기반으로 선택된 요소가 있는 새 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>정수 마스크 벡터를 기반으로 지정된 두 배정밀도 원본 벡터 사이에서 선택된 요소로 새 배정밀도 벡터를 만듭니다.</summary>
      <param name="condition">선택을 실행하는 데 사용되는 정수 마스크 벡터입니다.</param>
      <param name="left">첫 번째 원본 벡터입니다.</param>
      <param name="right">두 번째 원본 벡터입니다.</param>
      <returns>마스크를 기반으로 선택된 요소가 있는 새 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>정수 마스크 벡터를 기반으로 지정된 같은 형식의 두 원본 벡터 사이에서 선택된 요소로 지정된 형식의 새 벡터를 만듭니다.</summary>
      <param name="condition">선택을 실행하는 데 사용되는 정수 마스크 벡터입니다.</param>
      <param name="left">첫 번째 원본 벡터입니다.</param>
      <param name="right">두 번째 원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>마스크를 기반으로 선택된 요소가 있는 새 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>
        <see cref="System.Numerics.Vector{System.Int64}" /> 를 <see cref="System.Numerics.Vector{System.Double}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt64}" /> 를 <see cref="System.Numerics.Vector{System.Double}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" /> 를 <see cref="System.Numerics.Vector{System.Int32}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>
        <see cref="System.Numerics.Vector{System.Double}" /> 를 <see cref="System.Numerics.Vector{System.Int64}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>
        <see cref="System.Numerics.Vector{System.Int32}" /> 를 <see cref="System.Numerics.Vector{System.Single}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt32}" /> 를 <see cref="System.Numerics.Vector{System.Single}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" /> 를 <see cref="System.Numerics.Vector{System.UInt32}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>
        <see cref="System.Numerics.Vector{System.Double}" /> 를 <see cref="System.Numerics.Vector{System.UInt64}" />로 변환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>변환된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>값이 첫 번째 벡터의 요소를 두 번째 벡터의 해당 요소로 나눈 결과인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>나누어진 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>두 벡터의 내적을 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>지정된 두 배정밀도 벡터의 요소가 같은지 여부를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>지정된 두 정수 벡터의 요소가 같은지 여부를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>지정된 두 정수(long) 벡터의 요소가 같은지 여부를 신호로 알리는 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수(long) 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>지정된 두 단정밀도 벡터의 요소가 같은지 여부를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>같은 형식의 지정된 두 벡터에 있는 요소가 같은지 여부를 신호로 알리는 요소가 포함된 지정된 형식의 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 각 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />의 모든 요소가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>지정된 벡터의 단일 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />의 임의 요소 쌍이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>한 배정밀도 부동 소수점 벡터의 요소가 두 번째 배정밀도 부동 소수점 벡터의 해당 요소보다 큰지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>한 정수 벡터의 요소가 두 번째 정수 벡터의 해당 요소보다 큰지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>한 정수(long) 벡터의 요소가 두 번째 정수(long) 벡터의 해당 요소보다 큰지를 신호로 알리는 요소가 포함된 새 정수(long) 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수(long) 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>한 단정밀도 부동 소수점 벡터의 요소가 두 번째 단정밀도 부동 소수점 벡터의 해당 요소보다 큰지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>지정된 형식의 한 벡터에 있는 요소가 같은 형식의 두 번째 벡터에 있는 해당 요소보다 큰지를 신호로 알리는 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 모든 요소가 두 번째 벡터의 해당 요소보다 큰지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 모든 요소가 <paramref name="right" />의 해당 요소보다 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 임의 요소가 두 번째 벡터의 해당 요소보다 큰지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 임의 요소가 <paramref name="right" />의 해당 요소보다 크면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>한 벡터의 요소가 두 번째 배정밀도 부동 소수점 벡터의 해당 요소보가 크거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>한 정수 벡터의 요소가 두 번째 정수 벡터의 해당 요소보다 크거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>한 정수(long) 벡터의 요소가 두 번째 정수(long) 벡터의 해당 요소보다 크거나 같은지를 신호로 알리는 요소가 포함된 새 정수(long) 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수(long) 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>한 벡터의 요소가 두 번째 단정밀도 부동 소수점 벡터의 해당 요소보다 크거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>지정된 형식의 한 벡터에 있는 요소가 같은 형식의 두 번째 벡터에 있는 해당 요소보다 크거나 같은지를 신호로 알리는 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 모든 요소가 두 번째 벡터의 모든 해당 요소보다 크거나 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 모든 요소가 <paramref name="right" />의 해당 요소보다 크거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 임의 요소가 두 번째 벡터의 해당 요소보다 크거나 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 임의 요소가 <paramref name="right" />의 해당 요소보다 크거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>JIT 내장 지원을 통해 벡터 연산에 하드웨어 가속이 적용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>벡터 작업에 하드웨어 가속이 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>한 배정밀도 부동 소수점 벡터의 요소가 두 번째 배정밀도 부동 소수점 벡터의 해당 요소보다 작은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>한 정수 벡터의 요소가 두 번째 정수 벡터의 해당 요소보다 작은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>한 정수(long) 벡터의 요소가 두 번째 정수(long) 벡터의 해당 요소보다 작은지를 신호로 알리는 요소가 포함된 새 정수(long) 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수(long) 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>한 단정밀도 벡터의 요소가 두 번째 단정밀도 벡터의 해당 요소보다 작은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>한 벡터의 요소가 두 번째 벡터의 해당 요소보다 작은지를 신호로 알리는 요소가 포함된 지정된 형식의 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 모든 요소가 두 번째 벡터의 해당 요소보다 작은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 모든 요소가 <paramref name="right" />의 해당 요소보다 작으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 임의 요소가 두 번째 벡터의 해당 요소보다 작은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 임의 요소가 <paramref name="right" />의 해당 요소보다 작으면  <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>한 배정밀도 부동 소수점 벡터의 요소가 두 번째 배정밀도 부동 소수점 벡터의 해당 요소보다 작거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>한 정수 벡터의 요소가 두 번째 정수 벡터의 해당 요소보다 작거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>한 정수(long) 벡터의 요소가 두 번째 정수(long) 벡터의 해당 요소보다 작거나 같은지를 신호로 알리는 요소가 포함된 새 정수(long) 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수(long) 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>한 단정밀도 부동 소수점 벡터의 요소가 두 번째 단정밀도 부동 소수점 벡터의 해당 요소보다 작거나 같은지를 신호로 알리는 요소가 포함된 새 정수 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>결과 정수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>한 벡터의 요소가 두 번째 벡터의 해당 요소보다 작거나 같은지를 신호로 알리는 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 모든 요소가 두 번째 벡터의 해당 요소보다 작거나 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 모든 요소가 <paramref name="right" />의 해당 요소보다 작거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>첫 번째 벡터의 임의 요소가 두 번째 벡터의 해당 요소보다 작거나 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>
        <paramref name="left" />의 임의 요소가 <paramref name="right" />의 해당 요소보다 작거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>요소가 지정된 두 벡터에 있는 각 요소 쌍의 최대값인 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>최대 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>요소가 지정된 두 벡터에 있는 각 요소 쌍의 최소값인 새 벡터를 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>최소 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>값이 스칼라 값에 지정된 벡터의 각 값을 곱한 결과인 새 벡터를 반환합니다.</summary>
      <param name="left">스칼라 값입니다.</param>
      <param name="right">벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>값이 지정된 벡터의 값에 각각 스칼라 값을 곱한 결과인 새 벡터를 반환합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>두 <see cref="System.Numerics.Vector{System.Double}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.Single}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.Single}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>두 <see cref="System.Numerics.Vector{System.Int16}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.SByte}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.SByte}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>두 <see cref="System.Numerics.Vector{System.Int32}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.Int16}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.Int16}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>두 <see cref="System.Numerics.Vector{System.Int64}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.Int32}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.Int32}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>두 <see cref="System.Numerics.Vector{System.UInt16}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.Byte}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.Byte}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>두 <see cref="System.Numerics.Vector{System.UInt32}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.UInt16}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.UInt16}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>두 <see cref="System.Numerics.Vector{System.UInt64}" /> 인스턴스를 한 <see cref="System.Numerics.Vector{System.UInt32}" />로 축소합니다.</summary>
      <param name="source1">요소가 반환 값의 하위 인덱스 요소가 되는 첫 번째 소스 벡터입니다.</param>
      <param name="source2">요소가 반환 값의 상위 인덱스 요소가 되는 두 번째 소스 벡터입니다.</param>
      <returns>소스 벡터에서 축소된 요소를 포함하는 <see cref="System.Numerics.Vector{System.UInt32}" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터에 있는 해당 요소의 부정인 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>지정된 벡터 요소에서 1의 보수를 가져와서 구한 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>요소가 지정된 벡터 요소의 제곱근인 새 벡터를 반환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>제곱근 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>값이 두 번째 벡터의 요소와 첫 번째 벡터에 있는 해당 요소 간의 차인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>차이 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Byte}" />를 두 <see cref="System.Numerics.Vector{System.UInt16}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Int16}" />를 두 <see cref="System.Numerics.Vector{System.Int32}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Int32}" />를 두 <see cref="System.Numerics.Vector{System.Int64}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.SByte}" />를 두 <see cref="System.Numerics.Vector{System.Int16}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" />를 두 <see cref="System.Numerics.Vector{System.Double}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt16}" />를 두 <see cref="System.Numerics.Vector{System.UInt32}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt32}" />를 두 <see cref="System.Numerics.Vector{System.UInt64}" /> 인스턴스로 확장합니다.</summary>
      <param name="source">요소가 출력으로 확장되는 소스 벡터입니다.</param>
      <param name="dest1">요소가 소스 벡터의 하위 인덱스에서 확장된 요소를 포함하는 첫 번째 출력 벡터입니다.</param>
      <param name="dest2">요소가 소스 벡터의 상위 인덱스에서 확장된 요소를 포함하는 두 번째 출력 벡터입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>두 벡터의 각 요소 쌍에서 배타적 비트 Or(<see langword="XOr" />) 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
      <returns>결과 벡터입니다.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>병렬 알고리즘의 낮은 수준 최적화에 적합한 지정된 숫자 형식의 단일 벡터를 나타냅니다.</summary>
      <typeparam name="T">벡터 형식입니다. <c>T</c>는 기본 숫자 형식일 수 있습니다.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>구성 요소가 지정된 형식인 벡터를 만듭니다.</summary>
      <param name="value">벡터에서 구성 요소의 형식을 정의하는 숫자 형식입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>지정된 배열에서 벡터를 만듭니다.</summary>
      <param name="values">숫자 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>지정된 인덱스 위치에서 시작하는 지정된 배열에서 벡터를 만듭니다.</summary>
      <param name="values">숫자 배열입니다.</param>
      <param name="index">벡터를 만들려는 시작 인덱스 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
<paramref name="values" />에서 <paramref name="index" />를 뺀 길이가 <see cref="P:System.Numerics.Vector`1.Count" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>지정된 <see cref="T:System.ReadOnlySpan`1" />에서 벡터를 구성합니다.</summary>
      <param name="values">T 형식의 읽기 전용 개체 범위로 벡터에 추가할 값입니다. 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 요소를 포함해야 합니다.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>지정된 읽기 전용 바이트 범위에서 벡터를 구성합니다.</summary>
      <param name="values">벡터에 추가할 값을 포함하는 읽기 전용 바이트 범위입니다. 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 요소를 포함해야 합니다.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>지정된 <see cref="T:System.Span`1" />에서 벡터를 구성합니다.</summary>
      <param name="values">T 형식의 개체 범위로 벡터에 추가할 값입니다. 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 요소를 포함해야 합니다.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>지정된 대상 배열에 벡터 인스턴스를 복사합니다.</summary>
      <param name="destination">벡터 값의 복사본을 받을 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 벡터에 있는 요소의 개수가 <paramref name="destination" /> 배열에서 사용할 수 있는 요소의 개수보다 큽니다.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 인덱스 위치에서 시작하는 지정된 대상 배열에 벡터 인스턴스를 복사합니다.</summary>
      <param name="destination">벡터 값의 복사본을 받을 배열입니다.</param>
      <param name="startIndex">복사 작업을 시작할 <paramref name="destination" />의 시작 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 <paramref name="startIndex" />부터 <paramref name="destination" /> 배열 끝까지 사용할 수 있는 요소의 개수보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 <paramref name="destination" />의 마지막 인덱스보다 큽니다.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>벡터를 지정된 범위에 복사합니다. .</summary>
      <param name="destination">값이 복사되는 대상 범위입니다. 대상 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 크기여야 합니다.</param>
      <exception cref="T:System.ArgumentException">소스 벡터의 요소 수가 대상 범위에서 사용할 수 있는 요소 수보다 큽니다.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>벡터를 지정된 <see cref="T:System.Span`1" />에 복사합니다.</summary>
      <param name="destination">값이 복사되는 대상 범위입니다. 대상 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 크기여야 합니다.</param>
      <exception cref="T:System.ArgumentException">소스 벡터의 요소 수가 대상 범위에서 사용할 수 있는 요소 수보다 큽니다.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>벡터에 저장된 요소의 수를 반환합니다.</summary>
      <returns>벡터에 저장된 요소의 수입니다.</returns>
      <exception cref="T:System.NotSupportedException">리플렉션을 통한 속성 getter에 대한 액세스는 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>이 인스턴스가 지정된 벡터와 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">이 인스턴스와 비교할 벡터입니다.</param>
      <returns>현재 인스턴스와 <paramref name="other" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 메서드는 <paramref name="obj" />가 null이거나 <paramref name="obj" />가 현재 인스턴스와 다른 형식의 벡터이면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 요소를 가져옵니다.</summary>
      <param name="index">반환할 요소의 인덱스입니다.</param>
      <returns>인덱스 <paramref name="index" />의 요소입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Numerics.Vector`1.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>1을 모두 포함하는 벡터를 반환합니다.</summary>
      <returns>1을 모두 포함하는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>두 벡터의 각 요소에서 비트 <see langword="And" /> 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />의 비트 <see langword="And" /> 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>두 벡터의 각 요소에서 비트 <see langword="Or" /> 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />에 있는 요소의 비트 <see langword="Or" /> 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />를 <paramref name="right" />로 나눈 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>지정된 두 벡터의 각 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>두 벡터의 각 요소에서 비트 <see langword="XOr" /> 연산을 수행하여 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" />에 있는 요소의 비트 <see langword="XOr" /> 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Byte" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Double" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Int16" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Int32" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Int64" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.SByte" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.Single" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.UInt16" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.UInt32" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>지정된 벡터의 비트를 <see cref="T:System.UInt64" /> 형식의 벡터로 재해석합니다.</summary>
      <param name="value">재해석할 벡터입니다.</param>
      <returns>재해석된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>지정된 벡터의 단일 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>왼쪽과 오른쪽의 임의 요소 쌍이 같으면 <see langword="true" />입니다. 같은 요소 쌍이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>벡터와 지정된 스칼라 값을 곱합니다.</summary>
      <param name="factor">스칼라 값입니다.</param>
      <param name="value">원본 벡터입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>벡터와 지정된 스칼라 값을 곱합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <param name="factor">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>지정된 벡터 요소에서 1의 보수를 가져와서 구한 요소가 포함된 새 벡터를 반환합니다.</summary>
      <param name="value">원본 벡터입니다.</param>
      <returns>1의 보수 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />에서 <paramref name="right" />를 뺀 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>기본 형식을 사용하여 이 벡터의 문자열 표현을 반환합니다.</summary>
      <returns>이 벡터의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하여 이 벡터의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 지정하는 {0} 또는 {0}입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하고 지정된 형식 공급자로 문화권별 형식 지정을 정의하여 이 벡터의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 지정하는 {0} 또는 {0}입니다.</param>
      <param name="formatProvider">문화권별 형식 지정 정보를 제공하는 형식 공급자입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>벡터를 지정된 <see cref="T:System.Span`1" />에 복사하려고 시도합니다.</summary>
      <param name="destination">값이 복사되는 대상 범위입니다. 대상 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 크기여야 합니다.</param>
      <returns>소스 벡터가 성공적으로 <paramref name="destination" />에 복사된 경우 <see langword="true" />입니다. <paramref name="destination" />이 소스 벡터를 보유할 만큼 크지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>벡터를 지정된 바이트 범위에 복사하려고 시도합니다.</summary>
      <param name="destination">값이 복사되는 대상 범위입니다. 대상 범위는 적어도 <see cref="P:System.Numerics.Vector`1.Count" /> 크기여야 합니다.</param>
      <returns>소스 벡터가 성공적으로 <paramref name="destination" />에 복사된 경우 <see langword="true" />입니다. <paramref name="destination" />이 소스 벡터를 보유할 만큼 크지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>0을 모두 포함하는 벡터를 반환합니다.</summary>
      <returns>0을 모두 포함하는 벡터입니다.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>두 개의 단정밀도 부동 소수점 값을 사용하여 벡터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>두 개의 요소가 동일한 값을 가진 새 <see cref="T:System.Numerics.Vector2" /> 개체를 만듭니다.</summary>
      <param name="value">두 요소에 모두 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>해당 요소가 지정된 값을 가진 벡터를 만듭니다.</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector2.X" /> 필드에 할당할 값입니다.</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector2.Y" /> 필드에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>해당 요소가 지정된 각 벡터 요소의 절대 값인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>절대 값 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>최소값과 최대값 사이로 벡터를 제한합니다.</summary>
      <param name="value1">제한할 벡터입니다.</param>
      <param name="min">최소값입니다.</param>
      <param name="max">최대값입니다.</param>
      <returns>제한된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>지정한 인덱스 위치부터 벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="index">벡터의 첫 번째 요소를 복사할 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 배열 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 두 점 사이의 유클리드 거리를 계산합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 두 점 사이의 유클리드 거리 제곱을 반환합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="divisor">스칼라 값입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>두 벡터의 내적을 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>이 인스턴스와 다른 벡터가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 벡터입니다.</param>
      <returns>두 벡터가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>벡터의 길이를 반환합니다.</summary>
      <returns>벡터 길이입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>벡터 길이 제곱을 반환합니다.</summary>
      <returns>벡터 길이 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>지정된 가중치에 따라 두 벡터 사이의 선형 보간을 수행합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <param name="amount">
        <paramref name="value2" />의 가중치를 나타내는 0과 1 사이의 값입니다.</param>
      <returns>보간된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최대값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최대화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최소값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최소화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>벡터와 지정된 스칼라를 곱합니다.</summary>
      <param name="left">곱할 벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">크기 조정된 값입니다.</param>
      <param name="right">벡터입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>지정된 벡터와 방향은 같지만 길이가 1인 벡터를 반환합니다.</summary>
      <param name="value">정규화할 벡터입니다.</param>
      <returns>정규화된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>두 개의 요소가 1과 같은 벡터를 가져옵니다.</summary>
      <returns>두 개의 요소가 들어 있는 하 나와 동일한 벡터 (즉, 벡터를 반환 <c>(1, 1)</c>합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />를 <paramref name="right" />로 나눈 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="value1">벡터입니다.</param>
      <param name="value2">스칼라 값입니다.</param>
      <returns>나누기 결과입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 두 벡터의 각 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 두 벡터가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>지정된 벡터와 지정된 스칼라 값을 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />에서 <paramref name="right" />를 뺀 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>지정된 법선이 있는 표면에서의 벡터 반사를 반환합니다.</summary>
      <param name="vector">원본 벡터입니다.</param>
      <param name="normal">반사되는 표면의 법선입니다.</param>
      <returns>반사된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>해당 요소가 지정된 각 벡터 요소의 제곱근인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>제곱근 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>차이 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>기본 형식을 사용하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하고 지정된 형식 공급자로 문화권별 형식 지정을 정의하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <param name="formatProvider">문화권별 형식 지정 정보를 제공하는 형식 공급자입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>지정된 3x2 행렬로 벡터를 변환합니다.</summary>
      <param name="position">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 벡터를 변형합니다.</summary>
      <param name="position">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값으로 벡터를 변환합니다.</summary>
      <param name="value">회전할 벡터입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>지정된 3x2 행렬로 벡터 법선을 변형합니다.</summary>
      <param name="normal">원본 벡터입니다.</param>
      <param name="matrix">행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 벡터 법선을 변형합니다.</summary>
      <param name="normal">원본 벡터입니다.</param>
      <param name="matrix">행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>벡터 (1,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(1, 0)</c>합니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>벡터 (0,1)을 가져옵니다.</summary>
      <returns>벡터 <c>(0, 1)</c>합니다.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>벡터의 X 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>벡터의 Y 구성 요소입니다.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>두 개의 요소가 0과 같은 벡터를 반환합니다.</summary>
      <returns>두 개의 요소가 0과 같은 벡터 (즉, 벡터를 반환 <c>(0, 0)</c>합니다.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>세 개의 단정밀도 부동 소수점 값을 사용하여 벡터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>지정된 <see cref="T:System.Numerics.Vector2" /> 개체와 지정된 값에서 새 <see cref="T:System.Numerics.Vector3" /> 개체를 만듭니다.</summary>
      <param name="value">두 개의 요소가 있는 벡터입니다.</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector3.Z" /> 필드에 할당할 추가 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>세 개의 요소가 동일한 값을 가진 새 <see cref="T:System.Numerics.Vector3" /> 개체를 만듭니다.</summary>
      <param name="value">세 개의 요소에 모두 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>해당 요소가 지정된 값을 가진 벡터를 만듭니다.</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector3.X" /> 필드에 할당할 값입니다.</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector3.Y" /> 필드에 할당할 값입니다.</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector3.Z" /> 필드에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>해당 요소가 지정된 각 벡터 요소의 절대 값인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>절대 값 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>최소값과 최대값 사이로 벡터를 제한합니다.</summary>
      <param name="value1">제한할 벡터입니다.</param>
      <param name="min">최소값입니다.</param>
      <param name="max">최대값입니다.</param>
      <returns>제한된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>지정한 인덱스 위치부터 벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="index">벡터의 첫 번째 요소를 복사할 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 배열 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>두 벡터의 외적을 계산합니다.</summary>
      <param name="vector1">첫 번째 벡터입니다.</param>
      <param name="vector2">두 번째 벡터입니다.</param>
      <returns>외적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 두 점 사이의 유클리드 거리를 계산합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 두 점 사이의 유클리드 거리 제곱을 반환합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="divisor">스칼라 값입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>두 벡터의 내적을 반환합니다.</summary>
      <param name="vector1">첫 번째 벡터입니다.</param>
      <param name="vector2">두 번째 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>이 인스턴스와 다른 벡터가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 벡터입니다.</param>
      <returns>두 벡터가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>이 벡터 개체의 길이를 반환합니다.</summary>
      <returns>벡터 길이입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>벡터 길이 제곱을 반환합니다.</summary>
      <returns>벡터 길이 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>지정된 가중치에 따라 두 벡터 사이의 선형 보간을 수행합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <param name="amount">
        <paramref name="value2" />의 가중치를 나타내는 0과 1 사이의 값입니다.</param>
      <returns>보간된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최대값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최대화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최소값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최소화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>벡터와 지정된 스칼라를 곱합니다.</summary>
      <param name="left">곱할 벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">크기 조정된 값입니다.</param>
      <param name="right">벡터입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>지정된 벡터와 방향은 같지만 길이가 1인 벡터를 반환합니다.</summary>
      <param name="value">정규화할 벡터입니다.</param>
      <returns>정규화된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>세 개의 요소가 1과 같은 벡터를 가져옵니다.</summary>
      <returns>세 개의 요소가 들어 있는 하 나와 동일한 벡터 (즉, 벡터를 반환 <c>(1,1,1)</c>합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />를 <paramref name="right" />로 나눈 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="value1">벡터입니다.</param>
      <param name="value2">스칼라 값입니다.</param>
      <returns>나누기 결과입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 두 벡터의 각 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 두 벡터가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>지정된 벡터와 지정된 스칼라 값을 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />에서 <paramref name="right" />를 뺀 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>지정된 법선이 있는 표면에서의 벡터 반사를 반환합니다.</summary>
      <param name="vector">원본 벡터입니다.</param>
      <param name="normal">반사되는 표면의 법선입니다.</param>
      <returns>반사된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>해당 요소가 지정된 각 벡터 요소의 제곱근인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>제곱근 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>차이 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>기본 형식을 사용하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하고 지정된 형식 공급자로 문화권별 형식 지정을 정의하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <param name="formatProvider">문화권별 형식 지정 정보를 제공하는 형식 공급자입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 벡터를 변형합니다.</summary>
      <param name="position">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값으로 벡터를 변환합니다.</summary>
      <param name="value">회전할 벡터입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 벡터 법선을 변형합니다.</summary>
      <param name="normal">원본 벡터입니다.</param>
      <param name="matrix">행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>벡터 (1,0,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(1,0,0)</c>합니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>벡터 (0,1,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(0, 1, 0)</c>입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>벡터 (0,0,1)을 가져옵니다.</summary>
      <returns>벡터 <c>(0,0,1)</c>합니다.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>벡터의 X 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>벡터의 Y 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>벡터의 Z 구성 요소입니다.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>세 개의 요소가 0과 같은 벡터를 가져옵니다.</summary>
      <returns>세 개의 요소가 0과 같은 벡터 (즉, 벡터를 반환 <c>(0,0,0)</c>합니다.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>네 개의 단정밀도 부동 소수점 값을 사용하여 벡터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>지정된 <see cref="T:System.Numerics.Vector2" /> 개체와 Z 및 W 구성 요소에서 새 <see cref="T:System.Numerics.Vector4" /> 개체를 만듭니다.</summary>
      <param name="value">X 및 Y 구성 요소에 사용할 벡터입니다.</param>
      <param name="z">Z 구성 요소입니다.</param>
      <param name="w">W 구성 요소입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>지정된 <see cref="T:System.Numerics.Vector3" /> 개체와 W 구성 요소에서 새 <see cref="T:System.Numerics.Vector4" /> 개체를 생성합니다.</summary>
      <param name="value">X, Y 및 Z 구성 요소에 사용할 벡터입니다.</param>
      <param name="w">W 구성 요소입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>네 개의 요소가 동일한 값을 가진 새 <see cref="T:System.Numerics.Vector4" /> 개체를 만듭니다.</summary>
      <param name="value">네 개의 요소에 모두 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>해당 요소가 지정된 값을 가진 벡터를 만듭니다.</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector4.X" /> 필드에 할당할 값입니다.</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector4.Y" /> 필드에 할당할 값입니다.</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector4.Z" /> 필드에 할당할 값입니다.</param>
      <param name="w">
        <see cref="F:System.Numerics.Vector4.W" /> 필드에 할당할 값입니다.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>해당 요소가 지정된 각 벡터 요소의 절대 값인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>절대 값 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>최소값과 최대값 사이로 벡터를 제한합니다.</summary>
      <param name="value1">제한할 벡터입니다.</param>
      <param name="min">최소값입니다.</param>
      <param name="max">최대값입니다.</param>
      <returns>제한된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>지정한 인덱스 위치부터 벡터의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">대상 배열입니다.</param>
      <param name="index">벡터의 첫 번째 요소를 복사할 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">현재 인스턴스에 있는 요소의 개수가 배열에 있는 개수보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 배열 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" />가 다차원 배열인 경우</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>지정된 두 점 사이의 유클리드 거리를 계산합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>지정된 두 점 사이의 유클리드 거리 제곱을 반환합니다.</summary>
      <param name="value1">첫 번째 점입니다.</param>
      <param name="value2">두 번째 점입니다.</param>
      <returns>거리 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="divisor">스칼라 값입니다.</param>
      <returns>나누기 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>두 벡터의 내적을 반환합니다.</summary>
      <param name="vector1">첫 번째 벡터입니다.</param>
      <param name="vector2">두 번째 벡터입니다.</param>
      <returns>내적입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>이 인스턴스와 다른 벡터가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">다른 벡터입니다.</param>
      <returns>두 벡터가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 인스턴스와 <paramref name="obj" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>이 벡터 개체의 길이를 반환합니다.</summary>
      <returns>벡터 길이입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>벡터 길이 제곱을 반환합니다.</summary>
      <returns>벡터 길이 제곱입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>지정된 가중치에 따라 두 벡터 사이의 선형 보간을 수행합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <param name="amount">
        <paramref name="value2" />의 가중치를 나타내는 0과 1 사이의 값입니다.</param>
      <returns>보간된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최대값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최대화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>해당 요소가 지정된 두 벡터에 있는 각 요소 쌍의 최소값인 벡터를 반환합니다.</summary>
      <param name="value1">첫 번째 벡터입니다.</param>
      <param name="value2">두 번째 벡터입니다.</param>
      <returns>최소화된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>벡터와 지정된 스칼라를 곱합니다.</summary>
      <param name="left">곱할 벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">크기 조정된 값입니다.</param>
      <param name="right">벡터입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>지정된 벡터와 방향은 같지만 길이가 1인 벡터를 반환합니다.</summary>
      <param name="vector">정규화할 벡터입니다.</param>
      <returns>정규화된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>네 개의 요소가 1과 같은 벡터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Numerics.Vector4" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>두 벡터를 더합니다.</summary>
      <param name="left">더할 첫 번째 벡터입니다.</param>
      <param name="right">더할 두 번째 벡터입니다.</param>
      <returns>합한 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>첫 번째 벡터를 두 번째 벡터로 나눕니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />를 <paramref name="right" />로 나눈 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>지정된 벡터를 지정된 스칼라 값으로 나눕니다.</summary>
      <param name="value1">벡터입니다.</param>
      <param name="value2">스칼라 값입니다.</param>
      <returns>나누기 결과입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>지정된 두 벡터의 각 요소 쌍이 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>지정된 두 벡터가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 벡터입니다.</param>
      <param name="right">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />과 <paramref name="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>값이 지정된 두 벡터에 있는 각 요소 쌍의 곱인 새 벡터를 반환합니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>element-wise 제품 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>지정된 벡터와 지정된 스칼라 값을 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>스칼라 값과 지정된 벡터를 곱합니다.</summary>
      <param name="left">벡터입니다.</param>
      <param name="right">스칼라 값입니다.</param>
      <returns>크기 조정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>
        <paramref name="left" />에서 <paramref name="right" />를 뺀 결과로 생성되는 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="value">부정할 벡터입니다.</param>
      <returns>부정된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>해당 요소가 지정된 각 벡터 요소의 제곱근인 벡터를 반환합니다.</summary>
      <param name="value">벡터입니다.</param>
      <returns>제곱근 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>첫 번째 벡터에서 두 번째 벡터를 뺍니다.</summary>
      <param name="left">첫 번째 벡터입니다.</param>
      <param name="right">두 번째 벡터입니다.</param>
      <returns>차이 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>기본 형식을 사용하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식 문자열로 개별 요소의 형식을 지정하고 지정된 형식 공급자로 문화권별 형식 지정을 정의하여 현재 인스턴스의 문자열 표현을 반환합니다.</summary>
      <param name="format">개별 요소의 형식을 정의하는 표준 또는 사용자 지정 숫자 서식 문자열입니다.</param>
      <param name="formatProvider">문화권별 형식 지정 정보를 제공하는 형식 공급자입니다.</param>
      <returns>현재 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 2차원 벡터를 변형합니다.</summary>
      <param name="position">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값으로 2차원 벡터를 변형합니다.</summary>
      <param name="value">회전할 벡터입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 3차원 벡터를 변형합니다.</summary>
      <param name="position">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값으로 3차원 벡터를 변형합니다.</summary>
      <param name="value">회전할 벡터입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>지정된 4x4 행렬로 4차원 벡터를 변형합니다.</summary>
      <param name="vector">변환할 벡터입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>지정된 쿼터니언 회전 값으로 4차원 벡터를 변환합니다.</summary>
      <param name="value">회전할 벡터입니다.</param>
      <param name="rotation">적용할 회전입니다.</param>
      <returns>변형된 벡터입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>벡터 (0,0,0,1)을 가져옵니다.</summary>
      <returns>벡터 <c>(0,0,0,1)</c>합니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>벡터 (1,0,0,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(1,0,0,0)</c>합니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>벡터 (0,1,0,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(0, 1, 0, 0)</c>입니다.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>벡터 (0,0,1,0)을 가져옵니다.</summary>
      <returns>벡터 <c>(0,0,1,0)</c>합니다.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>벡터의 W 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>벡터의 X 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>벡터의 Y 구성 요소입니다.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>벡터의 Z 구성 요소입니다.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>네 개의 요소가 0과 같은 벡터를 가져옵니다.</summary>
      <returns>4 개의 요소가 0과 같은 벡터 (즉, 벡터를 반환 <c>(0,0,0,0)</c>합니다.</returns>
    </member>
  </members>
</doc>
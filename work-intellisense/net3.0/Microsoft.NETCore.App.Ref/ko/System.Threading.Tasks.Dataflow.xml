<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for every data element received.">수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Action`1" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput" vsli:raw="The type of data that this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; operates on.">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />이 수행되는 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">지정된 작업을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">지정된 작업 및 구성 옵션을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" />가 <see langword="null" />인 경우  
또는 
 <paramref name="dataflowBlockOptions" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">지정된 작업을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">지정된 작업 및 구성 옵션을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" />가 <see langword="null" />인 경우  
또는 
 <paramref name="dataflowBlockOptions" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary vsli:raw="Signals to the dataflow block  that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.">데이터 흐름 블록에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; object that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The completed task.">완료된 작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of input items waiting to be processed by this block.">이 블록에서 처리되도록 대기 중인 입력 항목의 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary vsli:raw="Posts an item to the target dataflow block.">대상 데이터 흐름 블록에 대한 항목을 게시합니다.</summary>
      <param name="item" vsli:raw="The item being offered to the target.">대상에 제공되는 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is posted to the dataflow block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">데이터 흐름 블록에 항목을 게시하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the dataflow block to complete in a faulted state.">오류 상태에서 데이터 흐름 블록이 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The exception that caused the faulting.">오류를 발생시킨 예외입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the dataflow block, and gives it the opportunity to consume or postpone the message.">메시지를 데이터 흐름 블록에 제공하며 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="The header of the message being offered.">제공되는 메시지의 헤더입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The dataflow block that is offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">메시지를 제공하는 데이터 흐름 블록입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 사용하기 위해 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The status of the offered message.  If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다.  메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기하더라도 원본이 <see langword="null" />이면 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may be &lt;see langword=&quot;true&quot; /&gt; only if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />가 잘못된 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우에만 <paramref name="consumeToAccept" />가 <see langword="true" />일 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary vsli:raw="Provides a dataflow block that batches inputs into arrays.">배열로 입력을 일괄 처리하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of data put into batches.">일괄 처리될 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size.">지정된 배치 크기를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size, declining option, and block options.">지정된 배치 크기, 거부 옵션 및 블록 옵션을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;batchSize&quot; /&gt; must be smaller than the value of the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity&quot; /&gt; option if a non-default value has been set.">
        <paramref name="batchSize" />는 양수여야 합니다.  
또는 
기본값이 설정되지 않은 경우 <paramref name="batchSize" />는 <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> 옵션 값보다 작아야 합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns vsli:raw="The batch size.">일괄 처리 크기입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; .">이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as messageValue through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 messageValue로 전달된 값을 사용하는 대신 반환된 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary vsli:raw="Triggers the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; to initiate a batching operation even if the number of currently queued or postponed items is less than the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize&quot; /&gt;.">현재 대기 중이거나 연기된 항목 수가 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />보다 작으면 <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />을 트리거하여 일괄 처리 작업을 시작합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">하나 이상의 대상에 제공되어 차이가 있을 수 있는 형식에서 지정한 입력 수를 배치로 나누는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />를 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />를 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;batchSize&quot; /&gt; is less than one.">
        <paramref name="batchSize" />가 1보다 작은 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns vsli:raw="The batch size.">일괄 처리 크기입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">하나 이상의 대상에 제공되어 차이가 있을 수 있는 형식에서 지정한 입력 수를 배치로 나누는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">블록의 세 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />를 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />를 초기화합니다.</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns vsli:raw="The batch size.">일괄 처리 크기입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source should unlink from the target after successfully propagating a single message; &lt;see langword=&quot;false&quot; /&gt; to remain connected even after a single message has been propagated.">단일 메시지를 전파한 후 소스와 대상 간 연결을 끊어야 하는 경우 <see langword="true" />이고, 단일 메시지가 전파된 후에도 연결된 상태로 유지하려면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">제 3의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt; in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  모든 항목이 통과할 경우 <paramref name="filter" />가 <see langword="null" />일 수 있습니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary vsli:raw="Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.">최대 한 개의 요소를 한 번에 저장하고 각 메시지가 도착하면 다음 메시지로 덮어쓰기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function.">지정된 복제 함수를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 초기화합니다.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">지정된 복제 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 초기화합니다.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary vsli:raw="Provides a buffer for storing data for a Dataflow.">데이터 흐름에 대한 데이터를 저장하기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">지정된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary vsli:raw="Gets the number of items currently stored in the buffer.">버퍼에 현재 저장된 항목의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of items.">항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to  &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="Set to true to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">메시지를 사용하기 위해 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 동기적으로 호출하도록 대상에 지시하려면 true로 설정합니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received. &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다. <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary vsli:raw="Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.">데이터 흐름 블록으로 작업하기 위한 static(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; abstraction over the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">
        <see cref="T:System.IObservable`1" /> 위에 새 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 추상화를 만듭니다.</summary>
      <param name="source" vsli:raw="The source to wrap.">래핑할 소스입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; that enables observers to be subscribed to the source.">관찰자가 소스를 구독할 수 있도록 하는 <see cref="T:System.IObservable`1" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObserver`1&quot; /&gt; abstraction over the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 위에 새 <see cref="T:System.IObserver`1" /> 추상화를 만듭니다.</summary>
      <param name="target" vsli:raw="The target to wrap.">래핑할 대상입니다.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input accepted by the target block.">대상 블록에서 허용하는 입력 형식을 지정합니다.</typeparam>
      <returns vsli:raw="An observer that wraps the target block.">대상 블록을 래핑하는 관찰자입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1" vsli:raw="The first source.">첫 번째 소스입니다.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2" vsli:raw="The second source.">두 번째 소스입니다.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.  &#xA;  &#xA; This method will only consume an element from one of the two data sources, never both.">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택이 완료되기 전에 두 소스가 완료되면 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.  
이 메서드는 두 데이터 소스의 요소를 모두 사용하는 것이 아니라 둘 중 한 소스의 요소만 사용합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" />이 <see langword="null" />인 경우  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1" vsli:raw="The first source.">첫 번째 소스입니다.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2" vsli:raw="The second source.">두 번째 소스입니다.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">이 선택을 구성하는 옵션입니다.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택을 완료하기 전에 두 소스가 모두 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" />이 <see langword="null" />인 경우  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1" vsli:raw="The first source.">첫 번째 소스입니다.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2" vsli:raw="The second source.">두 번째 소스입니다.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source3" vsli:raw="The third source.">세 번째 소스입니다.</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">세번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">세 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one.">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택이 완료되기 전에 모든 소스가 완료되면 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.  
이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" />이 <see langword="null" />인 경우  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
또는 
<paramref name="source3" />이 <see langword="null" />인 경우  
또는 
<paramref name="action3" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1" vsli:raw="The first source.">첫 번째 소스입니다.</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2" vsli:raw="The second source.">두 번째 소스입니다.</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source3" vsli:raw="The third source.">세 번째 소스입니다.</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">세번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">이 선택을 구성하는 옵션입니다.</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">세 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.">비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택을 완료하기 전에 모든 소스가 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.  
이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다. 요소를 받은 후 취소가 요청된 경우 취소 요청이 무시되고 관련 처리기가 실행될 수 있도록 허용됩니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" />이 <see langword="null" />인 경우  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
또는 
<paramref name="source3" />이 <see langword="null" />인 경우  
또는 
<paramref name="action3" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary vsli:raw="Encapsulates a target and a source into a single propagator.">대상 및 소스를 단일 전파자로 캡슐화합니다.</summary>
      <param name="target" vsli:raw="The target to encapsulate.">캡슐화할 대상입니다.</param>
      <param name="source" vsli:raw="The source to encapsulate.">캡슐화할 소스입니다.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input expected by the target.">대상에서 필요로 하는 입력 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of output produced by the source.">소스에서 생성된 출력 형식을 지정합니다.</typeparam>
      <returns vsli:raw="The encapsulated target and source.">캡슐화된 대상 및 원본입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source" vsli:raw="The source from which to link.">링크할 소스입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />이 <see langword="null" />인 경우  
또는 
<paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source" vsli:raw="The source from which to link.">링크할 소스입니다.</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />이 <see langword="null" />인 경우  
또는 
<paramref name="target" />이 <see langword="null" />인 경우  
또는 
<paramref name="predicate" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source" vsli:raw="The source from which to link.">링크할 소스입니다.</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="One of the enumeration values that specifies how to configure a link between dataflow blocks.">데이터 흐름 블록 사이의 링크를 구성하는 방법을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;source&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;predicate&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="source" />은 null(Visual Basic에서는 Nothing)입니다.  
또는 
<paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.  
또는 
<paramref name="linkOptions" />은 null(Visual Basic에서는 Nothing)입니다.  
또는 
<paramref name="predicate" />은 null(Visual Basic에서는 Nothing)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary vsli:raw="Gets a target block that synchronously accepts all messages offered to it and drops them.">제공된 모든 메시지를 동기적으로 수락하고 삭제하는 대상 블록을 가져옵니다.</summary>
      <typeparam name="TInput" vsli:raw="The type of the messages this block can accept.">이 블록에서 허용할 수 있는 메시지의 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that accepts and subsequently drops all offered messages.">제공된 모든 메시지를 수락하고 이후에 삭제하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</summary>
      <param name="source" vsli:raw="The source to monitor.">모니터링할 소스입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data).  &#xA;  &#xA; If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다.  
<see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</summary>
      <param name="source" vsli:raw="The source to monitor.">모니터링할 소스입니다.</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to cancel the asynchronous operation.">비동기 작업을 취소하는 데 사용할 취소 토큰입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data). If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다. <see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Posts an item to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 항목을 게시합니다.</summary>
      <param name="target" vsli:raw="The target block.">대상 블록입니다.</param>
      <param name="item" vsli:raw="The item being offered to the target.">대상에 제공되는 항목입니다.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the target block.">대상 블록에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item was accepted by the target block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">대상 블록이 해당 항목을 허용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Synchronously receives a value from a specified source.">지정된 소스에서 값을 동기적으로 받습니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="The received value.">받은 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">항목을 소스에서 받을 수 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source and provides a token to cancel the operation.">지정된 소스에서 값을 동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="The received value.">받은 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">소스에서 항목을 받기 전에 작업이 취소되었습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Synchronously receives a value from a specified source, observing an optional time-out period.">지정된 소스에서 값을 동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="The received value.">받은 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">지정된 원본에서 값을 동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="The received value.">받은 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">소스에서 항목을 받기 전에 작업이 취소되었습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Asynchronously receives a value from a specified source.">지정된 소스에서 값을 비동기적으로 받습니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When an item value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the received value. If an item value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 항목 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 받은 값을 반환합니다. 소스가 비어 있고 완료되었기 때문에 항목 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source and provides a token to cancel the operation.">지정된 소스에서 값을 비동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, observing an optional time-out period.">지정된 소스에서 값을 비동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 시간 초과가 만료되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">지정된 원본에서 값을 비동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">값을 받는 소스입니다.</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <param name="cancellationToken" vsli:raw="The token which may be used to cancel the receive operation.">받기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">소스에 포함된 데이터 형식입니다.</typeparam>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed, an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 시간 초과가 만료되었거나 취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</summary>
      <param name="target" vsli:raw="The target to which to post the data.">데이터를 게시할 대상입니다.</param>
      <param name="item" vsli:raw="The item being offered to the target.">대상에 제공되는 항목입니다.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">대상에 게시할 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send. If the target accepts and consumes the offered element during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)&quot; /&gt;, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;true&quot; /&gt;. If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;false&quot; /&gt;. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.">비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 대상에서 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />을 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="true" />로 반환됩니다. 대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="false" />로 반환됩니다. 대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <see cref="P:System.Threading.Tasks.Task`1.Result" />와 함께 작업이 완료됩니다. 대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</summary>
      <param name="target" vsli:raw="The target to which to post the data.">데이터를 게시할 대상입니다.</param>
      <param name="item" vsli:raw="The item being offered to the target.">대상에 제공되는 항목입니다.</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to request cancellation of the send operation.">보내기 작업의 취소를 요청하는 데 사용할 취소 토큰입니다.</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">대상에 게시할 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return true.  If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its &lt;c&gt;Result&lt;/c&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.  &#xA;  &#xA; If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.">비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.  대상에서 SendAsync를 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 true로 반환됩니다.  대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 false로 반환됩니다. 대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <c>Result</c>와 함께 작업이 완료됩니다. 대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.  
대상이 전송된 데이터를 성공적으로 사용하기 전에 취소가 요청된 경우 반환된 작업이 취소됨 상태에서 완료되고 대상에서 해당 데이터를 더 이상 사용할 수 없습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary vsli:raw="Attempts to synchronously receive an item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에서 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="source" vsli:raw="The source from which to receive.">받는 소스입니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks.">데이터 흐름 블록에서 수행하는 처리를 구성하는 데 사용되는 옵션을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be buffered by the block.">블록이 버퍼링 할 수 있는 메시지의 최대 수를 가져오거나 설정 합니다.</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">메시지의 최대 수입니다. 기본값은-1로, 무제한으로 메시지를 나타냅니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary vsli:raw="Gets or sets the  &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; to monitor for cancellation requests.">취소 요청에 대해 모니터링할 <see cref="T:System.Threading.CancellationToken" />을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The token.">토큰입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary vsli:raw="Gets or sets a value that indicates whether ordered processing should be enforced on a block's handling of messages.">순차적된 처리 블록의 처리 메시지에 적용할지 여부를 나타내는 값을 가져오거나 설정 합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if ordered processing should be enforced; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 순차적된 처리; 적용 해야 하는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be processed per task.">작업 당 처리 될 수 있는 메시지의 최대 수를 가져오거나 설정 합니다.</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">메시지의 최대 수입니다. 기본값은-1로, 무제한으로 메시지를 나타냅니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary vsli:raw="Gets or sets the format string to use when a block is queried for its name.">블록의 이름을 쿼리할 때 사용할 형식 문자열을 가져오거나 설정 합니다.</summary>
      <returns vsli:raw="The format string to use when a block is queried for its name.">블록의 이름을 쿼리할 때 사용할 서식 문자열입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Threading.Tasks.TaskScheduler&quot; /&gt; to use for scheduling tasks.">가져오거나 설정 합니다 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 작업을 예약 하는 데 사용 하 합니다.</summary>
      <returns vsli:raw="The task scheduler.">작업 스케줄러입니다.</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary vsli:raw="A constant used to specify an unlimited quantity for  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt; members that provide an upper bound. This field is constant.">상한을 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 멤버의 무제한 수량을 지정하는 데 사용되는 상수입니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary vsli:raw="Provides options used to configure a link between dataflow blocks.">데이터 흐름 블록 사이의 링크를 구성하는 데 사용되는 옵션을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />을 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary vsli:raw="Gets or sets whether the link should be appended to the source's list of links, or whether it should be prepended.">링크가 소스의 링크 목록 뒤에 추가되어야 하는지 아니면 앞에 추가되어야 하는지를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be consumed across the link.">링크에서 사용될 수 있는 메시지의 최대 개수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary vsli:raw="Gets or sets whether the linked target will have completion and faulting notification propagated to it automatically.">연결된 대상이 완성 및 오류 알림을 자동으로 전파 받는지 여부를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary vsli:raw="Provides a container of data attributes for passing between dataflow blocks.">데이터 흐름 블록 간 전달을 위한 데이터 특성의 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; with the specified attributes.">지정된 특성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 초기화합니다.</summary>
      <param name="id" vsli:raw="The ID of the message. Must be unique within the originating source block. It does not need to be globally unique.">메시지 ID입니다. 원래 소스 블록 내에서 고유해야 합니다. 전역적으로 고유할 필요는 없습니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary vsli:raw="Checks boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">boxing된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="A boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID without boxing.">boxing하지 않고 두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="other" vsli:raw="Another  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary vsli:raw="Generates a hash code for the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스의 해시 코드를 생성합니다.</summary>
      <returns vsli:raw="The hash code.">해시 코드입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary vsli:raw="Gets the ID of the message within the source.">원본 내의 메시지의 ID를 가져옵니다.</summary>
      <returns vsli:raw="The ID contained in the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">에 포함 된 ID는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary vsli:raw="Gets the validity of the message.">메시지의 유효성을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the ID of the message is different from 0. &lt;see langword=&quot;false&quot; /&gt; if the ID of the message is 0.">메시지의 ID가 0이 아니면 <see langword="true" />입니다. 메시지의 ID가 0이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for non-equality by ID.">두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같지 않은지 확인합니다.</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary vsli:raw="Represents the status of a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; when passed between dataflow blocks.">데이터 흐름 블록 간에 전달될 때 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />의 상태를 나타냅니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary vsli:raw="Indicates that the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; accepted the message. Once a target has accepted a message, it is wholly owned by the target.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 수락했음을 나타냅니다. 대상에서 메시지를 받아들이면 이는 대상에서 전체를 소유합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 거부했음을 나타냅니다. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.  &#xA;  &#xA; Additionally, the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; will decline all future messages sent by the source.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 거부했음을 나타냅니다. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.  
또한 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />는 소스에서 보내는 이후의 모든 메시지를 거부합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; tried to accept the message from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;, but the message was no longer available.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 메시지를 수락하려고 했으나 더 이상 사용할 수 없는 메시지임을 나타냅니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; postponed the message for potential consumption at a later time.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 나중에 소비할 수 있도록 메시지를 연기했음을 나타냅니다.  
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that process each message through the invocation of a user-provided delegate. These are dataflow blocks such as  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">사용자가 제공한 대리자의 호출을 통해 각 메시지를 처리하는 데이터 흐름 블록에 따라 수행되는 처리를 구성하는 데 사용되는 옵션을 제공합니다. <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 등의 데이터 흐름 블록입니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary vsli:raw="Gets the maximum number of messages that may be processed by the block concurrently.">블록이 동시에 처리할 수 있는 메시지의 최대 개수를 가져옵니다.</summary>
      <returns vsli:raw="The maximum number of messages.">최대 메시지 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary vsli:raw="Gets whether code using the dataflow block is constrained to one producer at a time.">데이터 흐름 블록을 사용하는 코드가 한 번에 하나의 생산자로 제한되어 있는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that group together multiple messages. These are dataflow blocks such as &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">여러 개의 메시지를 그룹화하는 데이터 흐름 블록에 의해 수행된 처리를 구성하는 데 사용되는 옵션을 제공합니다. <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 및 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 등의 데이터 흐름 블록입니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary vsli:raw="Gets or sets the Boolean value to use to determine whether to greedily consume offered messages.">제공된 메시지를 많이 소비할지 여부를 결정하는 데 사용할 부울 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to greedily consume offered messages; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">제공된 메시지를 많이 소비하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary vsli:raw="Gets or sets the maximum number of groups that should be generated by the block.">블록에 의해 생성되어야 하는 최대 그룹 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The maximum number of groups.">최대 그룹 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary vsli:raw="Represents a dataflow block.">데이터 흐름 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary vsli:raw="Represents a dataflow block that is both a target for data and a source of data.">데이터의 대상 및 소스인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">허용 하는 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />합니다.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">제공한 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />합니다.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that supports receiving messages without linking.">링크하지 않고 수신 메시지를 지원하는 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 제공하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a source of data.">데이터의 소스인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">제공한 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be null.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 null이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The messageHeader is not valid.">messageHeader가 유효하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The target is &lt;see langword=&quot;null&quot; /&gt;.">대상은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a target for data.">데이터의 대상인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기해야 하지만 원본이 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple consisting of one item per type.">형식당 하나의 항목을 구성하는 튜플로서 모두 함께 릴리스되기 전에 각 형식이 도착할 때까지 한 항목을 기다리는 과정으로, 여러 데이터 흐름 소스 간에 연결하는 데이터 흐름 블록을 제공합니다. 이 경우 소스는 반드시 같은 유형이 아닐 수도 있습니다.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, which are not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple that contains one item per type.">형식당 하나의 항목을 포함하는 튜플로서 모두 함께 릴리스되기 전에 각 형식이 도착할 때까지 한 항목을 기다리는 과정으로, 여러 데이터 흐름 소스 간에 연결하는 데이터 흐름 블록을 제공합니다. 이 경우 소스는 같은 유형이 아닐 수도 있습니다.</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">블록의 세 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the   source block to the specified target block.">소스 블록을 지정된 대상 블록에 연결합니다.</summary>
      <param name="target" vsli:raw="The target block to which to connect this source.">이 소스를 연결할 대상 블록입니다.</param>
      <param name="linkOptions" vsli:raw="An object that configures the link.">링크를 구성하는 개체입니다.</param>
      <returns vsli:raw="A disposable object that unlinks the source from the target when its &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt; method is called.">해당 <see cref="M:System.IDisposable.Dispose" /> 메서드를 호출하는 경우 대상에서 소스의 연결을 해제하는 삭제 가능한 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />가 <see langword="null" />인 경우  
또는 
 <paramref name="linkOptions" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed." />
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation." />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved." />
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved." />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">제 3의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns vsli:raw="The target.">대상입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Func`2" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />에서 수신하고 작업하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">이 데이터 출력의 형식을 지정 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">지정된 <see cref="T:System.Func`2" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">지정된 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 및 <see cref="T:System.Func`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">지정된 <see cref="T:System.Func`2" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">지정된 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 및 <see cref="T:System.Func`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of input items.">입력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">대상이 메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 대한 호출 중 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출해야 하면 <see langword="true" />입니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 연기되더라도 원본이 <see langword="null" />인 경우 대신 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 올바르지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Func`2" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 수신하고 작업하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 출력하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. 반환된 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" />이 <see langword="null" />인 경우  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of input items.">입력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of output items.">출력 항목 수입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through OfferMessage &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">대상이 메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 대한 호출 중 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출해야 하면 <see langword="true" />입니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 연기되더라도 원본이 <see langword="null" />인 경우 대신 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 올바르지 않은 경우  
또는 
 null이 아닌 <paramref name="consumeToAccept" />가 제공되는 경우 <paramref name="source" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary vsli:raw="Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.">데이터 흐름 블록의 네트워크에서 최대 하나의 요소를 수신 및 저장하기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">새 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />를 초기화합니다.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">지정된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />를 초기화합니다.</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns vsli:raw="The task.">작업입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items" vsli:raw="The items received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">제공되는 메시지의 값입니다.</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item" vsli:raw="The item received from the source.">소스에서 받은 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary vsli:raw="Manages a compact array of bit values, which are represented as Booleans, where &lt;see langword=&quot;true&quot; /&gt; indicates that the bit is on (1) and &lt;see langword=&quot;false&quot; /&gt; indicates the bit is off (0).">부울로 나타나는 간단한 비트 값 배열을 관리합니다. 여기에서 <see langword="true" />는 비트가 설정(1)되었음을 나타내고 <see langword="false" />는 비트가 해제(0)되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of Booleans.">지정한 부울 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values" vsli:raw="An array of Booleans to copy.">복사할 부울 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of bytes.">지정한 바이트 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bytes" vsli:raw="An array of bytes containing the values to copy, where each byte represents eight consecutive bits.">복사할 값을 포함하는 바이트 배열로, 각 바이트는 8개의 연속 비트를 나타냅니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bytes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bytes" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;bytes&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="bytes" />의 길이가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">지정한 <see cref="T:System.Collections.BitArray" />에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bits" vsli:raw="The &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to copy.">복사할 <see cref="T:System.Collections.BitArray" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bits&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bits" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to &lt;see langword=&quot;false&quot; /&gt;.">지정한 비트 값을 보유할 수 있는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다. 이러한 값은 초기에 <see langword="false" />로 설정됩니다.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">새 <see cref="T:System.Collections.BitArray" />에 있는 비트 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to the specified value.">지정한 비트 값을 보유할 수 있는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다. 이러한 값은 초기에 지정된 값으로 설정됩니다.</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">새 <see cref="T:System.Collections.BitArray" />에 있는 비트 값입니다.</param>
      <param name="defaultValue" vsli:raw="The Boolean value to assign to each bit.">각 비트에 할당될 부울 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of 32-bit integers.">지정한 32비트 정수 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values" vsli:raw="An array of integers containing the values to copy, where each integer represents 32 consecutive bits.">복사할 값을 포함하는 정수 배열로, 각 정수는 32개의 연속 비트를 나타냅니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;values&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">
        <paramref name="values" />의 길이가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise AND operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise AND operation.">현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 비트 AND 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 비트 AND 연산 결과 저장하도록 수정됩니다.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise AND operation.">비트 AND 연산이 수행될 배열입니다.</param>
      <returns vsli:raw="An array containing the result of the bitwise AND operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">비트 AND 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary vsli:raw="Creates a shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 부분 복사본을 만듭니다.</summary>
      <returns vsli:raw="A shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.BitArray" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.BitArray" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
소스 <see cref="T:System.Collections.BitArray" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.BitArray" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary vsli:raw="Gets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 특정 위치에서 비트 값을 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get.">가져올 값의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">
        <paramref name="index" /> 위치의 비트 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="T:System.Collections.BitArray" />의 요소 수보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">전체 <see cref="T:System.Collections.BitArray" />의 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.BitArray" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">이 속성은 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.BitArray" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">이 속성은 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 특정 위치에서 비트 값을 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get or set.">가져오거나 설정할 값의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">
        <paramref name="index" /> 위치의 비트 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.BitArray.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.BitArray.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <param name="count" vsli:raw="The number of shifts to make for each bit." />
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary vsli:raw="Gets or sets the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 요소 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />의 요소 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is set to a value that is less than zero.">속성이 0보다 작은 값으로 설정된 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary vsli:raw="Inverts all the bit values in the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;, so that elements set to &lt;see langword=&quot;true&quot; /&gt; are changed to &lt;see langword=&quot;false&quot; /&gt;, and elements set to &lt;see langword=&quot;false&quot; /&gt; are changed to &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />로 설정된 요소는 <see langword="false" />로 변경되고 <see langword="false" />로 설정된 요소는 <see langword="true" />로 변경되도록 현재 <see cref="T:System.Collections.BitArray" />에 있는 모든 비트 값을 반전합니다.</summary>
      <returns vsli:raw="The current instance with inverted bit values.">반전된 비트 값을 가지는 현재 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise OR operation.">현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 비트 OR 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 비트 OR 연산 결과를 저장하도록 수정됩니다.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise OR operation.">비트 OR 연산이 수행될 배열입니다.</param>
      <returns vsli:raw="An array containing the result of the bitwise OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">비트 OR 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <param name="count" vsli:raw="The number of shifts to make for each bit." />
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary vsli:raw="Sets the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">
        <see cref="T:System.Collections.BitArray" />의 특정 위치에 있는 비트를 지정한 값으로 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the bit to set.">설정할 비트의 0부터 시작하는 인덱스입니다.</param>
      <param name="value" vsli:raw="The Boolean value to assign to the bit.">비트에 할당될 부울 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="T:System.Collections.BitArray" />의 요소 수보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary vsli:raw="Sets all bits in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">
        <see cref="T:System.Collections.BitArray" />의 모든 비트를 지정한 값으로 설정합니다.</summary>
      <param name="value" vsli:raw="The Boolean value to assign to all bits.">모든 비트에 할당할 부울 값입니다.</param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise exclusive OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object against the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise exclusive OR operation.">현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 배타적 비트 OR 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 배타적 비트 OR 연산 결과를 저장하도록 수정됩니다.</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise exclusive OR operation.">배타적 비트 OR 연산이 수행될 배열입니다.</param>
      <returns vsli:raw="An array containing the result of the bitwise exclusive OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">배타적 비트 OR 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions" />
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;." />
      <param name="key" vsli:raw="The key of the value to get." />
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary." />
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary." />
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;." />
      <param name="key" vsli:raw="The key of the value to get." />
      <param name="defaultValue" vsli:raw="The default value to return when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;." />
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary." />
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary." />
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;." />
      <param name="key" vsli:raw="The key of the value to remove." />
      <param name="value" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the removed value; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;." />
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;paramref name=&quot;dictionary&quot; /&gt;." />
      <typeparam name="TValue" vsli:raw="The type of the values in the &lt;paramref name=&quot;dictionary&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;." />
      <param name="key" vsli:raw="The key of the value to add." />
      <param name="value" vsli:raw="The value to add." />
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary." />
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary." />
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; generic interface.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스의 구현에 대한 기본 클래스를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">비교할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.Comparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.">파생된 클래스에서 재정의된 경우 같은 형식의 두 개체를 비교한 다음 한 개체가 다른 개체보다 작은지, 큰지 또는 두 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="x" vsli:raw="The first object to compare.">비교할 첫 번째 개체입니다.</param>
      <param name="y" vsli:raw="The second object to compare.">비교할 두 번째 개체입니다.</param>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  값 
  의미 
  0보다 작음 
 <paramref name="x" />가 <paramref name="y" />보다 작은 경우  

  0 
 <paramref name="x" />가 <paramref name="y" />와 같습니다.  

  0보다 큼 
 <paramref name="x" />가 <paramref name="y" />보다 큰 경우</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Type &lt;paramref name=&quot;T&quot; /&gt; does not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">
        <paramref name="T" /> 형식이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary vsli:raw="Creates a comparer by using the specified comparison.">지정된 비교를 사용하여 비교자를 만듭니다.</summary>
      <param name="comparison" vsli:raw="The comparison to use.">사용할 비교입니다.</param>
      <returns vsli:raw="The new comparer.">새 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary vsli:raw="Returns a default sort order comparer for the type specified by the generic argument.">제네릭 인수에서 지정한 형식의 기본 정렬 순서 비교자를 반환합니다.</summary>
      <returns vsli:raw="An object that inherits &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; and serves as a sort order comparer for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Comparer`1" />을 상속하고 <paramref name="T" /> 형식에 대한 정렬 순서 비교자의 역할을 하는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary vsli:raw="Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.">두 개체를 비교하여 한 개체가 다른 개체보다 작거나, 같거나 또는 크다는 것을 나타내는 값을 반환합니다.</summary>
      <param name="x" vsli:raw="The first object to compare.">비교할 첫 번째 개체입니다.</param>
      <param name="y" vsli:raw="The second object to compare.">비교할 두 번째 개체입니다.</param>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  값 
  의미 
  0보다 작음 
 <paramref name="x" />가 <paramref name="y" />보다 작은 경우  

  0 
 <paramref name="x" />가 <paramref name="y" />와 같습니다.  

  0보다 큼 
 <paramref name="x" />가 <paramref name="y" />보다 큰 경우</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; do not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">
        <paramref name="x" /> 또는 <paramref name="y" />가 <paramref name="T" /> 형식으로 캐스팅할 수 없는 형식인 경우  
또는 
 <paramref name="x" />와 <paramref name="y" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary vsli:raw="Represents a collection of keys and values.">키와 값의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.">기본 초기 용량을 갖고 있고 키 형식에 대한 기본 같음 비교자를 사용하는 비어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default equality comparer for the key type.">지정한 <see cref="T:System.Collections.Generic.Dictionary`2" />에서 복사된 요소를 포함하고 키 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.Dictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;  whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;." />
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key." />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">기본 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.">지정한 초기 용량을 갖고 있고 키 형식에 대한 기본 같음 비교자를 사용하는 비어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">지정된 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">지정한 키와 값을 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 모든 키와 값을 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that is used to determine equality of keys for the dictionary.">사전에 대한 키의 일치 여부를 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface implementation that is used to determine equality of keys for the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; and to provide hash values for the keys.">현재 <see cref="T:System.Collections.Generic.Dictionary`2" />에 대한 키의 일치 여부를 확인하고 키에 대한 해시 값을 제공하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스 구현입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains the specified key.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 지정한 키가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.">사전에서 해당 백업 스토리지를 더 이상 확장하지 않고 지정된 수의 항목까지 보유할 수 있는지 확인합니다.</summary>
      <param name="capacity" vsli:raw="The number of entries.">항목 수입니다.</param>
      <returns vsli:raw="The current capacity of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 현재 용량입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.Dictionary`2" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt;.">사전에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</summary>
      <returns vsli:raw="The key of the element in the dictionary at the current position of the enumerator.">사전에서 열거자의 현재 위치에 있는 요소의 키입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the element in the dictionary at the current position of the enumerator.">사전에서 열거자의 현재 위치에 있는 요소의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">컬렉션에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.Dictionary`2" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 연결되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">가져오거나 설정할 값의 키입니다.</param>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키가 있는 새 요소를 만듭니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 키 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 키를 반영하는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">해당 키가 새 <see cref="T:System.Collections.Generic.Dictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.  &#xA;  &#xA; Retrieving the value of this property is an O(1) operation.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에 포함된 요소의 수입니다.  
이 속성 값을 검색하는 것은 O(1) 연산입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 항목이 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 키를 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 지정한 키가 있는 값을 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">요소를 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 <see cref="T:System.Collections.Generic.Dictionary`2" />에 없는 경우 <see langword="false" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <param name="key" vsli:raw="The key of the element to remove." />
      <param name="value" vsli:raw="The removed element." />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified value to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; with the specified key.">지정한 키가 있는 <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값을 추가합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to add to the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 추가할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The key of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" />의 키는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를  <see cref="T:System.Collections.Generic.KeyValuePair`2" />형식의 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dictionary is read-only.">사전이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">사전에서 키와 값을 제거합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 제거할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;keyValuePair&quot; /&gt; is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <paramref name="keyValuePair" />로 표시된 키와 값을 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="keyValuePair" />가 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TKey&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <paramref name="TKey" /> 형식의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TValue&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값을 포함하는 <paramref name="TValue" /> 형식의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 키가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">지정한 키와 값을 사전에 추가합니다.</summary>
      <param name="key" vsli:raw="The object to use as the key.">키로 사용할 개체입니다.</param>
      <param name="value" vsli:raw="The object to use as the value.">값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to &lt;paramref name=&quot;TValue&quot; /&gt;, the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 값 형식인 <paramref name="TValue" />에 할당할 수 없는 경우  
또는 
같은 키가 있는 값이 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 에 대한 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value with the specified key.">지정한 키가 있는 값을 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the value to get.">가져올 값의 키입니다.</param>
      <returns vsli:raw="The value associated with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">지정한 키와 연결된 값입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary vsli:raw="Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.">이 사전의 용량을 원래 모든 항목과 함께 초기화되었을 경우의 용량으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary vsli:raw="Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.">해당 백업 스토리지를 더 이상 확장하지 않고 지정된 수의 항목을 보유할 수 있도록 이 사전의 용량을 설정합니다.</summary>
      <param name="capacity" vsli:raw="The new capacity.">새 용량입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than &lt;see cref=&quot;P:System.Collections.Generic.Dictionary`2.Count&quot; /&gt;.">
        <paramref name="capacity" />가 <see cref="T:System.Collections.Generic.Dictionary`2" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the dictionary.">지정된 키와 값을 사전에 추가하려고 시도합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add. It can be &lt;see langword=&quot;null&quot; /&gt;.">추가할 요소의 값입니다. <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the dictionary successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사전에 키/값 쌍이 성공적으로 추가되었다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key of the value to get.">가져올 값의 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 값 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 값을 반영하는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">해당 값이 새 <see cref="T:System.Collections.Generic.Dictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />가 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스의 구현에 대한 기본 클래스를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">비교할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary vsli:raw="Returns a default equality comparer for the type specified by the generic argument.">제네릭 인수에서 지정한 형식의 기본 같음 비교자를 반환합니다.</summary>
      <returns vsli:raw="The default instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class for type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <typeparamref name="T" /> 형식에 대한 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 클래스의 기본 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, determines whether two objects of type &lt;typeparamref name=&quot;T&quot; /&gt; are equal.">파생 클래스에서 재정의된 경우 <typeparamref name="T" /> 형식의 두 개체가 같은지 여부를 확인합니다.</summary>
      <param name="x" vsli:raw="The first object to compare.">비교할 첫 번째 개체입니다.</param>
      <param name="y" vsli:raw="The second object to compare.">비교할 두 번째 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정한 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary vsli:raw="When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.">파생 클래스에서 재정의된 경우 해시 테이블 같은 해시 알고리즘과 데이터 구조의 지정한 개체에 대한 해시 함수의 역할을 합니다.</summary>
      <param name="obj" vsli:raw="The object for which to get a hash code.">해시 코드를 가져오는 개체입니다.</param>
      <returns vsli:raw="A hash code for the specified object.">지정한 개체의 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> 형식이 참조 형식이고 <paramref name="obj" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether the specified objects are equal.">지정한 개체가 같은지 여부를 확인합니다.</summary>
      <param name="x" vsli:raw="The first object to compare.">비교할 첫 번째 개체입니다.</param>
      <param name="y" vsli:raw="The second object to compare.">비교할 두 번째 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정한 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <paramref name="x" /> 또는 <paramref name="y" />가 <typeparamref name="T" /> 형식으로 캐스팅할 수 없는 형식인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object.">지정한 개체의 해시 코드를 반환합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which a hash code is to be returned.">해시 코드가 반환될 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="A hash code for the specified object.">지정한 개체의 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <paramref name="obj" /> 형식이 참조 형식이고 <paramref name="obj" />가 <see langword="null" />인 경우  
또는 
 <paramref name="obj" />가 <typeparamref name="T" /> 형식으로 캐스팅될 수 없는 형식인 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary vsli:raw="Represents a set of values.">값 집합을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">해시 집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the default equality comparer for the set type.">비어 있으며 집합 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">집합 형식에 대한 기본 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">해당 요소가 새 집합에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">집합 형식에 대한 지정된 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">해당 요소가 새 집합에 복사되는 컬렉션입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 <see langword="null" />을(를) 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the specified equality comparer for the set type.">비어 있으며 집합 형식에 대한 지정된 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 <see langword="null" />을(를) 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty, but has reserved space for &lt;paramref name=&quot;capacity&quot; /&gt; items and uses the default equality comparer for the set type.">비어 있지만 <paramref name="capacity" /> 항목에 대한 공간이 예약되어 있고 집합 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" />의 초기 크기입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate &lt;paramref name=&quot;capacity&quot; /&gt; elements.">집합 형식에 대해 지정된 같음 비교자를 사용하고 <paramref name="capacity" /> 요소를 수용할 수 있을 만큼 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" />의 초기 크기입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation for the set type.">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하려면 null(Visual Basic의 경우 Nothing)을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to a set.">지정된 요소를 집합에 추가합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object; &lt;see langword=&quot;false&quot; /&gt; if the element is already present.">요소가 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 추가되었으면 <see langword="true" />이고, 요소가 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary vsli:raw="Removes all elements from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 포함되어 있는지 확인합니다.</summary>
      <param name="item" vsli:raw="The element to locate in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 찾을 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified number of elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 수의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to copy to &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />에 복사할 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is greater than the available space from the &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큰 경우  
또는 
 <paramref name="count" />가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary vsli:raw="Gets the number of elements that are contained in a set.">집합에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements that are contained in the set.">집합에 포함된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for equality testing of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 대한 같음 테스트에 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for deep equality testing of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 대한 전체 같음 테스트에 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that this hash set can hold the specified number of elements without growing.">이 해시 집합이 확장되지 않고도 지정된 수의 요소를 보유할 수 있도록 합니다.</summary>
      <param name="capacity" vsli:raw="The minimum capacity to ensure.">확보할 최소 용량입니다.</param>
      <returns vsli:raw="The new capacity of this instance.">이 인스턴스의 새 용량입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체에 사용되는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">열거자를 <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">컬렉션에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 반복되는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object for the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체에 대한 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present in that object and in the specified collection.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션에 동시에 있는 요소만 포함합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 상위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체와 관련된 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and a specified collection share common elements.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 요소를 제거합니다.</summary>
      <param name="item" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">요소를 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 <paramref name="item" />이 없으면 이 메서드는 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 제거된 요소 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and the specified collection contain the same elements.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 false입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present either in that object or in the specified collection, but not both.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션 중 하나에만 있는 요소만 포함합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether a collection is read-only.">컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary vsli:raw="Sets the capacity of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 용량을 실제로 포함된 요소 수로 설정하고 구현별로 다른 근방 값으로 올림합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 T의 기본값입니다.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain all elements that are present in itself, the specified collection, or both.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션에 있는 모든 요소를 포함시킵니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary vsli:raw="Represents a doubly linked list.">이중 연결 목록을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is empty.">비어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; and has sufficient capacity to accommodate the number of elements copied.">지정한 <see cref="T:System.Collections.Generic.LinkedList`1" />에서 복사된 요소가 포함되어 있고 복사된 요소의 수를 수용하는 충분한 용량을 가지는 <see cref="T:System.Collections.IEnumerable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.IEnumerable" />에 복사되는 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is serializable with the specified &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.LinkedList`1" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 serialize할 수 있는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Generic.LinkedList`1" />개체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <paramref name="newNode" />를 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />입니다.  
또는 
 <paramref name="newNode" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우  
또는 
 <paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <paramref name="newNode" />를 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />입니다.  
또는 
 <paramref name="newNode" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우  
또는 
 <paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="value" vsli:raw="The value to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 추가할 값입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 시작 위치에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 추가할 값입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 새 노드를 추가합니다.</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 끝에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary vsli:raw="Removes all nodes from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 노드를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary vsli:raw="Determines whether a value is in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">값이 <see cref="T:System.Collections.Generic.LinkedList`1" />에 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="value" />에 있으면 <see cref="T:System.Collections.Generic.LinkedList`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.LinkedList`1" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary vsli:raw="Gets the number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.LinkedList`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary vsli:raw="Finds the first node that contains the specified value.">지정한 값이 포함된 첫 번째 노드를 찾습니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다.</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">지정한 값이 있으면 해당 값이 포함된 첫 번째 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary vsli:raw="Finds the last node that contains the specified value.">지정한 값이 포함된 마지막 노드를 찾습니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다.</param>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">지정한 값이 있으면 해당 값이 포함된 마지막 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary vsli:raw="Gets the first node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 첫 번째 노드를 가져옵니다.</summary>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 첫 번째 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.LinkedList`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary vsli:raw="Gets the last node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 마지막 노드를 가져옵니다.</summary>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 마지막 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified value from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 맨 처음 발견되는 지정된 값을 제거합니다.</summary>
      <param name="value" vsli:raw="The value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 제거할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element containing &lt;paramref name=&quot;value&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="value" />가 포함된 요소가 성공적으로 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="value" />가 원래 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Removes the specified node from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 지정된 노드를 제거합니다.</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에서 제거할 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary vsli:raw="Removes the node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary vsli:raw="Removes the node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 추가할 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the linked list as a collection.">링크된 목록을 컬렉션으로 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the linked list as a collection.">링크된 목록을 컬렉션으로 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary vsli:raw="Represents a node in a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 노드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; class, containing the specified value.">지정한 값을 포함하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value to contain in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 포함할 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 가져옵니다.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; is not linked.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 대한 참조이거나, <see cref="T:System.Collections.Generic.LinkedListNode`1" />이 링크되어 있지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary vsli:raw="Gets the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드를 가져옵니다.</summary>
      <returns vsli:raw="A reference to the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the last element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.Last&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드에 대한 참조이거나, 현재 노드가 <see cref="P:System.Collections.Generic.LinkedList`1.Last" />의 마지막 요소(<see cref="T:System.Collections.Generic.LinkedList`1" />)이면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary vsli:raw="Gets the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드를 가져옵니다.</summary>
      <returns vsli:raw="A reference to the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the first element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.First&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드에 대한 참조이거나, 현재 노드가 <see cref="P:System.Collections.Generic.LinkedList`1.First" />의 첫 번째 요소(<see cref="T:System.Collections.Generic.LinkedList`1" />)이면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary vsli:raw="Gets the value contained in the node.">노드에 포함된 값을 가져옵니다.</summary>
      <returns vsli:raw="The value contained in the node.">노드에 포함된 값입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary vsli:raw="Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.">인덱스로 액세스할 수 있는 강력한 형식의 개체 목록을 나타냅니다. 목록의 검색, 정렬 및 조작에 사용할 수 있는 메서드를 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the default initial capacity.">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new list.">요소가 새 목록에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the specified initial capacity.">비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The number of elements that the new list can initially store.">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">개체를 <see cref="T:System.Collections.Generic.List`1" />의 끝 부분에 추가합니다.</summary>
      <param name="item" vsli:raw="The object to be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 컬렉션의 요소를 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가합니다.</summary>
      <param name="collection" vsli:raw="The collection whose elements should be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">요소가 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가되어야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <paramref name="T" />형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary vsli:raw="Returns a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; wrapper for the current collection.">현재 컬렉션에 대한 읽기 전용 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 래퍼를 반환합니다.</summary>
      <returns vsli:raw="An object that acts as a read-only wrapper around the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">현재 <see cref="T:System.Collections.Generic.List`1" />에 대한 읽기 전용 래퍼 역할을 하는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">기본 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">요소를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
또는 
 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to search.">검색할 범위의 길이입니다.</param>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary vsli:raw="Gets or sets the total number of elements the internal data structure can hold without resizing.">크기를 조정하지 않고 내부 데이터 구조가 보유할 수 있는 전체 요소 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; can contain before resizing is required.">크기를 조정하지 않고 <see cref="T:System.Collections.Generic.List`1" />에 포함될 수 있는 요소 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.List`1.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.List`1.Capacity" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 작은 값으로 설정되어 있습니다.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">시스템에 사용 가능한 메모리가 부족합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary vsli:raw="Converts the elements in the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to another type, and returns a list containing the converted elements.">현재 <see cref="T:System.Collections.Generic.List`1" />의 요소를 다른 형식으로 변환하고 변환된 요소를 포함하는 목록을 반환합니다.</summary>
      <param name="converter" vsli:raw="A &lt;see cref=&quot;T:System.Converter`2&quot; /&gt; delegate that converts each element from one type to another type.">각 요소를 한 형식에서 다른 형식으로 변환하는 <see cref="T:System.Converter`2" /> 대리자입니다.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">대상 배열 요소의 형식입니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">현재 <see cref="T:System.Collections.Generic.List`1" />에서 변환된 요소를 포함하는 대상 유형의 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;converter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="converter" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the number of elements that the destination &lt;paramref name=&quot;array&quot; /&gt; can contain.">소스 <see cref="T:System.Collections.Generic.List`1" /> 요소 수가 대상 <paramref name="array" />를 포함할 수 있는 요소 수보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.List`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index" vsli:raw="The zero-based index in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at which copying begins.">소스 <see cref="T:System.Collections.Generic.List`1" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> 에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to copy.">복사할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="arrayIndex" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt; of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements from &lt;paramref name=&quot;index&quot; /&gt; to the end of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" />가 소스 <see cref="T:System.Collections.Generic.List`1" />의 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같습니다.  
또는 
소스 <see cref="T:System.Collections.Generic.List`1" />의 <paramref name="index" />부터 끝까지에 포함된 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지의 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.List`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.List`1" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.List`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소가 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 하나 이상 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 빈 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
또는 
 <paramref name="count" />가 0보다 작은 경우  
또는 
 <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 요소를 반환합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">지정한 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정한 수의 요소가 들어 있고 지정한 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
또는 
 <paramref name="count" />가 0보다 작은 경우  
또는 
 <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정한 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate to perform on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Action`1" />의 각 요소에 대해 수행할 <see cref="T:System.Collections.Generic.List`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An element in the collection has been modified.">컬렉션의 요소가 수정된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본을 만듭니다.</summary>
      <param name="index" vsli:raw="The zero-based &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; index at which the range starts.">범위가 시작되는 <see cref="T:System.Collections.Generic.List`1" /> 인덱스(0부터 시작)입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range.">범위의 요소 수입니다.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="item" />가 있으면 전체 <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">지정된 개체를 검색하고, 지정된 인덱스부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">
        <paramref name="index" />부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
또는 
 <paramref name="count" />가 0보다 작은 경우  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">삽입할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="collection" vsli:raw="The collection whose elements should be inserted into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">요소가 <see cref="T:System.Collections.Generic.List`1" />에 삽입되어야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <paramref name="T" />형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색된 <paramref name="item" />의 0부터 시작하는 인덱스이고, 검색되지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">지정된 개체를 검색하고, 첫 번째 요소부터 지정된 인덱스까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">첫 번째 요소부터 <paramref name="index" />까지 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위 내에서 마지막으로 검색된 <paramref name="item" />의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">검색할 섹션에 있는 요소 수입니다.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="count" />개의 요소를 포함하고 <paramref name="index" />에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 마지막으로 검색한 <paramref name="item" />의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
또는 
 <paramref name="count" />가 0보다 작은 경우  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" />에서 제거할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="item" />이 성공적으로 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="item" />이 <see cref="T:System.Collections.Generic.List`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="The number of elements removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에서 제거한 요소의 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />에서 요소의 범위를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to remove.">제거할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the default comparer.">기본 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">지정된 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparison&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparison&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="comparison" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparison" />에서 0을 반환하지 않을 수 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">지정된 비교자를 사용하여 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 있는 요소를 정렬합니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The length of the range to sort.">정렬할 범위의 길이입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 지정하지 않습니다.  
또는 
<paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is set and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">속성이 설정되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IList" />에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Generic.List`1" />의 요소를 새 배열에 복사합니다.</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />의 요소 복사본을 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if that number is less than a threshold value.">
        <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 실제 수가 임계값보다 작은 경우 용량을 요소 수로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate.">
        <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하는지 여부를 확인합니다.</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions to check against the elements.">요소에 대해 확인할 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary vsli:raw="Represents a first-in, first-out collection of objects.">개체의 선입선출(FIFO) 컬렉션을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the queue.">큐에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the default initial capacity.">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">해당 요소가 새 <see cref="T:System.Collections.Generic.Queue`1" />에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the specified initial capacity.">비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Queue`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Queue`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.Queue`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary vsli:raw="Removes and returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하고 반환합니다.</summary>
      <returns vsli:raw="The object that is removed from the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작에서 제거하는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">개체를 <see cref="T:System.Collections.Generic.Queue`1" />의 끝 부분에 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Queue`1" />에 추가할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.Queue`1" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Queue`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary vsli:raw="Returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 처음에 있는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to a new array.">
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 새 배열에 복사합니다.</summary>
      <returns vsli:raw="A new array containing elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 복사된 요소를 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.Queue`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <param name="result" vsli:raw="The removed object." />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <param name="result" vsli:raw="If present, the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted on the key.">키에 따라 정렬된 키/값 쌍의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">비어 있고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 사용하는 빈 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">지정된 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 구현을 사용하여 키를 비교하는 빈 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 복사된 요소를 포함하고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 구현을 사용하여 키를 비교하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IComparer`1" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;">
        <see cref="T:System.Collections.Generic.IComparer`1" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key.">지정된 키를 갖는 요소가 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value.">지정된 값을 갖는 요소가 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; to the specified array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures, starting at the specified index.">지정한 인덱스로부터 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체의 지정한 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures that is the destination of the elements copied from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; The array must have zero-based indexing.">현재 <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 복사된 요소의 대상인 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 구조체의 1차원 배열입니다. 이 배열의 인덱스는 0부터 시작해야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">열거자의 현재 위치에 있는 요소를 <see cref="T:System.Collections.DictionaryEntry" /> 구조체로 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the dictionary, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">컬렉션에서 사전의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" /> 구조체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</summary>
      <returns vsli:raw="The key of the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소의 키입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">가져오거나 설정할 값의 키입니다.</param>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키가 있는 새 요소를 만듭니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 키를 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">해당 키가 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거되었으면 <see langword="true" />이고, 제거되지 않았으면 <see langword="false" />입니다. 이 메서드는 항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">
        <see cref="T:System.Collections.ICollection" />의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 키를 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <see langword="false" />가 <paramref name="key" />에 없는 경우에도 <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 추가할 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of the specified element from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 지정된 요소를 제거합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 제거할 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />이 <paramref name="keyValuePair" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="keyValuePair" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">의 값을 포함 하는 컬렉션 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">추가할 요소의 값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 값 형식 <paramref name="TValue" />에 할당할 수 없는 경우  
또는 
같은 키를 가진 요소가 이미 <see cref="T:System.Collections.IDictionary" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 에 대한 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the element to get.">가져올 요소의 키입니다.</param>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">지정한 키를 갖는 요소입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key of the value to get.">가져올 값의 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 값을 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">해당 값이 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specified value.">집합에 지정된 값이 <see cref="T:System.Collections.Generic.ICollection`1" />에 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">
        <see cref="T:System.Collections.ICollection" />의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 값을 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted by key based on the associated &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation.">연관된 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 기반으로 키에 따라 정렬된 키/값 쌍의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">컬렉션에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the collection.">컬렉션에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">기본 초기 용량을 갖고 있고 기본 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">기본 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">지정된 <see cref="T:System.Collections.Generic.SortedList`2" />에서 복사된 요소가 포함되어 있고, 복사된 요소의 수를 수용할 수 있는 충분한 용량을 가지며, 기본 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">지정된 <see cref="T:System.Collections.Generic.SortedList`2" />에서 복사된 요소가 포함되어 있고, 복사된 요소의 수를 수용할 수 있는 충분한 용량을 가지며, 지정된 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">지정된 초기 용량을 갖고 있고 기본 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">지정된 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Generic.SortedList`2" />에 추가합니다.</summary>
      <param name="key" vsli:raw="The key of the element to add.">추가할 요소의 키입니다.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedList`2" />에 있는 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary vsli:raw="Gets or sets the number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 요소의 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 요소의 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" />가 <see cref="P:System.Collections.Generic.SortedList`2.Count" />보다 작은 값으로 설정되어 있습니다.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">시스템에 사용 가능한 메모리가 부족합니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; for the sorted list.">정렬된 목록에 대한 <see cref="T:System.Collections.Generic.IComparer`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; for the current &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">현재 <see cref="T:System.IComparable`1" />에 대한 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific key.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" />에 대한 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary vsli:raw="Searches for the specified key and returns the zero-based index within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">지정한 키를 검색하고 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;key&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">전체 <see cref="T:System.Collections.Generic.SortedList`2" />에 <paramref name="key" />가 있으면 해당 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary vsli:raw="Searches for the specified value and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">지정한 값을 검색하고 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 이 값이 맨 처음 발견되는 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 값입니다.  참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="value" />가 있으면 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key whose value to get or set.">가져오거나 설정할 값이 있는 키입니다.</param>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt; and a set operation creates a new element using the specified key.">지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키를 사용하여 새 요소를 만듭니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, in sorted order.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 있는 키가 들어있는 컬렉션을 정렬 순서대로 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 원래 <see cref="T:System.Collections.Generic.SortedList`2" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.SortedList`2.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 키/값 쌍을 추가합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 추가할 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific element.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific key/value pair from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 키/값 쌍을 제거합니다.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 제거할 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />이 <paramref name="keyValuePair" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="keyValuePair" />가 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns vsli:raw="An object containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">의 값을 포함 하는 개체 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an enumerable collection that contains the keys in the read-only dictionary.">읽기 전용 사전의 키를 포함하는 열거 가능한 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An enumerable collection that contains the keys in the read-only dictionary.">읽기 전용 사전의 키를 포함하는 열거 가능한 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an enumerable collection that contains the values in the read-only dictionary.">읽기 전용 사전의 값을 포함하는 열거 가능한 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An enumerable collection that contains the values in the read-only dictionary.">읽기 전용 사전의 값을 포함하는 열거 가능한 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">추가할 요소의 키로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">추가할 요소의 값으로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 값 형식 <paramref name="TValue" />에 할당할 수 없는 경우  
또는 
같은 키를 가진 요소가 이미 <see cref="T:System.Collections.IDictionary" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 에 대한 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">가져오거나 설정할 요소의 키입니다.</param>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">지정한 키를 갖는 요소입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
또는 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.SortedList`2" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key whose value to get.">가져올 값이 있는 키입니다.</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" />의 값을 포함하는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary vsli:raw="Represents a collection of objects that is maintained in sorted order.">정렬된 순서대로 유지 관리되는 개체의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that uses a specified comparer.">지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">개체 비교에 사용할 기본 비교자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection.">지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">복사할 열거 가능한 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection and that uses a specified comparer.">지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하고 지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">복사할 열거 가능한 컬렉션입니다.</param>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">개체 비교에 사용할 기본 비교자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains serialized data.">serialize된 데이터가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 개체입니다.</param>
      <param name="context" vsli:raw="The structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에 연결된 serialize된 스트림의 소스와 대상이 들어 있는 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary vsli:raw="Adds an element to the set and returns a value that indicates if it was successfully added.">집합에 요소를 추가하고 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item" vsli:raw="The element to add to the set.">집합에 추가할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is added to the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" />이 집합에 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the set.">집합에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; object that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값을 정렬하는 데 사용된 <see cref="T:System.Collections.Generic.IComparer`1" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="The comparer that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값을 정렬하는 데 사용하는 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains a specific element.">집합에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The element to locate in the set.">집합에서 찾을 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains &lt;paramref name=&quot;item&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">집합에 <paramref name="item" />이 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; exceeds the number of elements that the destination array can contain.">소스 <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소의 수가 대상 배열이 포함할 수 있는 요소의 수를 초과하는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a specified number of elements from &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 지정된 개수의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements to copy.">복사할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used to create a collection that contains individual sets.">개별 집합이 들어 있는 컬렉션을 만드는 데 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A comparer for creating a collection of sets.">집합의 컬렉션을 만들기 위한 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object, according to a specified comparer, that can be used to create a collection that contains individual sets.">지정된 비교자에 따라 개별 집합이 들어 있는 컬렉션을 만드는 데 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <param name="memberEqualityComparer" vsli:raw="The comparer to use for creating the returned comparer.">반환된 비교자를 만드는 데 사용할 비교자입니다.</param>
      <returns vsli:raw="A comparer for creating a collection of sets.">집합의 컬렉션을 만들기 위한 비교자입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">열거자를 <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements that are in a specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 지정된 컬렉션에 있는 모든 요소를 제거합니다.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in sorted order.">정렬된 순서로 <see cref="T:System.Collections.Generic.SortedSet`1" />을 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data that you must have to serialize a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary vsli:raw="Returns a view of a subset in a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 하위 집합의 뷰를 반환합니다.</summary>
      <param name="lowerValue" vsli:raw="The lowest desired value in the view.">뷰에서 원하는 가장 낮은 값입니다.</param>
      <param name="upperValue" vsli:raw="The highest desired value in the view.">뷰에서 원하는 가장 높은 값입니다.</param>
      <returns vsli:raw="A subset view that contains only the values in the specified range.">지정된 범위의 값만 포함하는 하위 집합 뷰입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;lowerValue&quot; /&gt; is more than &lt;paramref name=&quot;upperValue&quot; /&gt; according to the comparer.">비교자에 따르면 <paramref name="lowerValue" />은 <paramref name="upperValue" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="A tried operation on the view was outside the range specified by &lt;paramref name=&quot;lowerValue&quot; /&gt; and &lt;paramref name=&quot;upperValue&quot; /&gt;.">뷰에서 시도한 작업이 <paramref name="lowerValue" /> 및 <paramref name="upperValue" />에 의해 지정된 범위를 벗어났습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are also in a specified collection.">지정된 컬렉션에도 있는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 상위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최대값을 가져옵니다.</summary>
      <returns vsli:raw="The maximum value in the set.">집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최소값을 가져옵니다.</summary>
      <returns vsli:raw="The minimum value in the set.">집합의 최소값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and a specified collection share common elements.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes a specified item from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 항목을 제거합니다.</summary>
      <param name="item" vsli:raw="The element to remove.">제거할 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is found and successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">요소를 찾아서 성공적으로 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 조건자로 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션에서 제거된 요소 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />를 역순으로 반복하는 <see cref="T:System.Collections.Generic.SortedSet`1" />을 반환합니다.</summary>
      <returns vsli:raw="An enumerator that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and the specified collection contain the same elements.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 false입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are present either in the current object or in the specified collection, but not both.">현재 개체나 지정된 컬렉션에 있고 둘 다에는 없는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether a &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.ICollection" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.IDeserializationCallback&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">
        <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and returns the data that you need to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 인스턴스를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 연결되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">검색할 값입니다.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 T의 기본값입니다.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains all elements that are present in either the current object or the specified collection.">현재 개체 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary vsli:raw="Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.">지정한 동일 형식의 인스턴스로 이루어진 가변 크기 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the stack.">스택에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the default initial capacity.">비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection" vsli:raw="The collection to copy elements from.">요소를 복사할 원본 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.">비어 있는 상태이고 지정한 초기 용량과 기본 초기 용량 중에서 더 큰 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Stack`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Stack`1" />을 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Stack`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">소스 <see cref="T:System.Collections.Generic.Stack`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">열거자를 <see cref="T:System.Collections.Generic.Stack`1" />의 다음 요소로 이동합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 대한 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Stack`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하지 않고 반환합니다.</summary>
      <returns vsli:raw="The object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 있는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary vsli:raw="Removes and returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하고 반환합니다.</summary>
      <returns vsli:raw="The object removed from the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 제거되는 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">개체를 <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 삽입합니다.</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Stack`1" />에 적용할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Generic.Stack`1" />을 새 배열에 복사합니다.</summary>
      <returns vsli:raw="A new array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소 복사본을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.Stack`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary vsli:raw="Provides objects for performing a structural comparison of two collection objects.">두 컬렉션 개체의 구조를 비교하기 위한 개체를 제공합니다.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary vsli:raw="Gets a predefined object that performs a structural comparison of two objects.">두 개체의 구조를 비교하는 미리 정의된 개체를 가져옵니다.</summary>
      <returns vsli:raw="A predefined object that is used to perform a structural comparison of two collection objects.">두 컬렉션 개체의 구조를 비교하는 데 사용되는 미리 정의된 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary vsli:raw="Gets a predefined object that compares two objects for structural equality.">두 개체의 구조가 같은지 비교하는 미리 정의된 개체를 가져옵니다.</summary>
      <returns vsli:raw="A predefined object that is used to compare two collection objects for structural equality.">두 컬렉션 개체의 구조가 같은지 비교하는 데 사용되는 미리 정의된 개체입니다.</returns>
    </member>
  </members>
</doc>
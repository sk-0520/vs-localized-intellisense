<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary vsli:raw="Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트에서의 동적 이항 연산을 나타내며, 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation" vsli:raw="The binary operation kind.">이항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">동적 연산의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">동적 연산의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">동적 이항 연산의 대상입니다.</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">동적 이항 연산의 오른쪽 피연산자입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">동적 이항 연산의 대상입니다.</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">동적 이항 연산의 오른쪽 피연산자입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result if the binding fails, or null.">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary vsli:raw="The binary operation kind.">이항 연산 종류입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object representing the kind of binary operation.">이항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary vsli:raw="Represents a set of binding restrictions on the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; under which the dynamic binding is valid.">동적 바인딩이 유효한 <see cref="T:System.Dynamic.DynamicMetaObject" />의 바인딩 제한 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary vsli:raw="Combines binding restrictions from the list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances into one set of restrictions.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록의 바인딩 제한을 하나의 제한 집합으로 결합합니다.</summary>
      <param name="contributingObjects" vsli:raw="The list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances from which to combine restrictions.">제한을 결합할 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록입니다.</param>
      <returns vsli:raw="The new set of binding restrictions.">새 바인딩 제한 집합입니다.</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary vsli:raw="Represents an empty set of binding restrictions. This field is read only.">빈 바인딩 제한 집합을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for arbitrary immutable properties.">식에서 임의의 변경할 수 없는 속성을 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression" vsli:raw="The expression representing the restrictions.">제한을 나타내는 식입니다.</param>
      <returns vsli:raw="The new binding restrictions.">새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for object instance identity.">식에서 개체 인스턴스 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression" vsli:raw="The expression to test.">테스트할 식입니다.</param>
      <param name="instance" vsli:raw="The exact object instance to test.">테스트할 정확한 개체 인스턴스입니다.</param>
      <returns vsli:raw="The new binding restrictions.">새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates the binding restriction that check the expression for runtime type identity.">식에서 런타임 형식 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression" vsli:raw="The expression to test.">테스트할 식입니다.</param>
      <param name="type" vsli:raw="The exact type to test.">테스트할 정확한 형식입니다.</param>
      <returns vsli:raw="The new binding restrictions.">새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Merges the set of binding restrictions with the current binding restrictions.">바인딩 제한 집합을 현재 바인딩 제한과 병합합니다.</summary>
      <param name="restrictions" vsli:raw="The set of restrictions with which to merge the current binding restrictions.">현재 바인딩 제한과 병합할 제한 집합입니다.</param>
      <returns vsli:raw="The new set of binding restrictions.">새 바인딩 제한 집합입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary vsli:raw="Creates the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the binding restrictions.">바인딩 제한을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</summary>
      <returns vsli:raw="The expression tree representing the restrictions.">제한을 나타내는 식 트리입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary vsli:raw="Describes arguments in the dynamic binding process.">동적 바인딩 프로세스의 인수에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Creates a new CallInfo that represents arguments in the dynamic binding process.">동적 바인딩 프로세스의 인수를 나타내는 새 CallInfo를 만듭니다.</summary>
      <param name="argCount" vsli:raw="The number of arguments.">인수의 수입니다.</param>
      <param name="argNames" vsli:raw="The argument names.">인수 이름입니다.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary vsli:raw="Creates a new &lt;c&gt;PositionalArgumentInfo&lt;/c&gt;.">새 <c>PositionalArgumentInfo</c>를 만듭니다.</summary>
      <param name="argCount" vsli:raw="The number of arguments.">인수의 수입니다.</param>
      <param name="argNames" vsli:raw="The argument names.">인수 이름입니다.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary vsli:raw="The number of arguments.">인수의 수입니다.</summary>
      <returns vsli:raw="The number of arguments.">인수의 수입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary vsli:raw="The argument names.">인수 이름입니다.</summary>
      <returns vsli:raw="The read-only collection of argument names.">인수 이름의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified CallInfo instance is considered equal to the current.">지정된 CallInfo 인스턴스와 현재 인스턴스가 같다고 간주할지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The instance of &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt; to compare with the current instance.">현재 인스턴스와 비교할 <see cref="T:System.Dynamic.CallInfo" />의 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified instance is equal to the current one otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 인스턴스가 현재 인스턴스와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">현재 <see cref="T:System.Dynamic.CallInfo" />의 해시 함수로 사용됩니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">현재 <see cref="T:System.Dynamic.CallInfo" />의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary vsli:raw="Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트에서의 동적 변환 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.ConvertBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type to convert to.">변환할 대상 형식입니다.</param>
      <param name="explicit" vsli:raw="Is true if the conversion should consider explicit conversions; otherwise, false.">변환 시 명시적 변환을 고려해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic convert operation.">동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">동적 변환 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic convert operation.">동적 변환 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary vsli:raw="Gets the value indicating if the conversion should consider explicit conversions.">변환 시 명시적 변환을 고려해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an explicit conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />명시적 변환이 있는 경우입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">동적 변환 작업의 대상입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">동적 변환 작업의 대상입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary vsli:raw="The type to convert to.">변환할 대상 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary vsli:raw="Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트에서의 동적 만들기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.CreateInstanceBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation.">동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">동적 만들기 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic create operation.">동적 만들기 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">동적 만들기 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">동적 만들기 작업의 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">동적 만들기 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">동적 만들기 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary vsli:raw="Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 인덱스 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete index operation.">동적 인덱스 삭제 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">동적 인덱스 삭제 작업의 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">동적 인덱스 삭제 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary vsli:raw="Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 멤버 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member to delete.">삭제할 멤버의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">동적 멤버 삭제 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete member operation.">동적 멤버 삭제 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">동적 멤버 삭제 작업의 대상입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">동적 멤버 삭제 작업의 대상입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string comparison should ignore case; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />문자열 비교 시 대/소문자를 무시 해야 하는 경우 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to delete.">삭제할 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the member to delete.">삭제할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary vsli:raw="Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.">동적 바인딩에 참가하는 개체의 바인딩 논리와 동적 바인딩을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">바인딩이 유효한 바인딩 제한 집합입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">바인딩이 유효한 바인딩 제한 집합입니다.</param>
      <param name="value" vsli:raw="The runtime value represented by the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.BinaryOperationBinder" />의 인스턴스입니다.</param>
      <param name="arg" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the right hand side of the binary operation.">이항 연산의 오른쪽을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />의 인스턴스입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary vsli:raw="Performs the binding of the dynamic conversion operation.">동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.ConvertBinder" />의 인스턴스입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create instance operation.">동적 인스턴스 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.CreateInstanceBinder" />의 인스턴스입니다.</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the create instance operation.">인스턴스 만들기 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the delete index operation.">인덱스 삭제 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteMemberBinder" />의 인스턴스입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the get index operation.">인덱스 가져오기 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetMemberBinder" />의 인스턴스입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">동적 호출 작업 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeBinder" />의 인스턴스입니다.</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke operation.">호출 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeMemberBinder" />의 인스턴스입니다.</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke member operation.">멤버 호출 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the set index operation.">인덱스 설정 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set index operation.">인덱스 설정 작업의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetMemberBinder" />의 인스턴스입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set member operation.">멤버 설정 작업의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.UnaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.UnaryOperationBinder" />의 인스턴스입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a meta-object for the specified object.">지정한 개체에 대한 메타 개체를 만듭니다.</summary>
      <param name="value" vsli:raw="The object to get a meta-object for.">메타 개체를 가져올 개체입니다.</param>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <returns vsli:raw="If the given object implements &lt;see cref=&quot;T:System.Dynamic.IDynamicMetaObjectProvider&quot; /&gt; and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by &lt;see cref=&quot;M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)&quot; /&gt;. Otherwise a plain new meta-object with no restrictions is created and returned.">지정된 개체가 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />를 구현하고 현재 AppDomain 외부의 원격 개체가 아니면 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />에서 반환된 개체의 특정 메타 개체를 반환합니다. 그렇지 않으면 아무 제한도 없는 일반 메타 개체가 새로 만들어져 반환됩니다.</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary vsli:raw="Represents an empty array of type &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;. This field is read only.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 빈 배열을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">동적 바인딩을 수행하는 동안 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</summary>
      <returns vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">동적 바인딩을 수행하는 동안 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">모든 동적 멤버 이름의 열거형을 반환합니다.</summary>
      <returns vsli:raw="The list of dynamic member names.">동적 멤버 이름의 목록입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />에 런타임 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 <see cref="T:System.Dynamic.DynamicMetaObject" /> 런타임 값이 있으면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary vsli:raw="Gets the limit type of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />의 제한 형식을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.RuntimeType&quot; /&gt; if runtime value is available, a type of the &lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.Expression&quot; /&gt; otherwise.">런타임 값을 사용할 수 있으면 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />이고, 그렇지 않으면 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />의 형식입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary vsli:raw="The set of binding restrictions under which the binding is valid.">바인딩이 유효한 바인딩 제한 집합입니다.</summary>
      <returns vsli:raw="The set of binding restrictions.">바인딩 제한 집합입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has no value associated with it.">런타임 값의 <see cref="T:System.Type" /> 또는 <see cref="T:System.Dynamic.DynamicMetaObject" />에 연결된 값이 없는 경우 null을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null.">런타임 값의 <see cref="T:System.Type" /> 또는 null입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">이 <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</summary>
      <returns vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">이 <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary vsli:raw="The dynamic call site binder that participates in the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; binding protocol.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 바인딩 프로토콜에 참가하는 동적 호출 사이트 바인더입니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObjectBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic operation.">파생 클래스에서 재정의된 경우 동적 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">동적 연산의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">동적 연산의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">동적 연산에 대한 인수 배열입니다.</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">동적 연산의 인수에서 테스트를 수행하고 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다. 이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 작업의 바인딩을 지연합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">동적 연산의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">동적 연산의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 작업의 바인딩을 지연합니다.</summary>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">동적 연산의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary vsli:raw="Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">바인딩이 업데이트되도록 할 식을 가져옵니다. 식의 바인딩이 더 이상 유효하지 않음을 나타냅니다. 일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the resulting expression; any type is allowed.">결과 식의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성입니다. 모든 형식을 사용할 수 있습니다.</param>
      <returns vsli:raw="The update expression.">업데이트 식입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary vsli:raw="Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.">런타임에 동적 동작을 지정하기 위한 기본 클래스를 제공합니다. 이 클래스는 상속되어야 하며 직접 인스턴스화할 수 없습니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary vsli:raw="Enables derived types to initialize a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; type.">파생 형식이 <see cref="T:System.Dynamic.DynamicObject" /> 형식의 새 인스턴스를 초기화할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">모든 동적 멤버 이름의 열거형을 반환합니다.</summary>
      <returns vsli:raw="A sequence that contains dynamic member names.">동적 멤버 이름이 들어 있는 시퀀스입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; that dispatches to the dynamic virtual methods. The object can be encapsulated inside another &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 제공합니다. 개체를 다른 <see cref="T:System.Dynamic.DynamicMetaObject" /> 내에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다. 이 메서드는 언어 구현자에 대한 동적 언어 런타임 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="parameter" vsli:raw="The expression that represents &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to dispatch to the dynamic virtual methods.">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <returns vsli:raw="An object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary vsli:raw="Provides implementation for binary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as addition and multiplication.">이항 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 더하기와 곱하기 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the binary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &lt;c&gt;ExpressionType.Add&lt;/c&gt;.">이항 연산에 대한 정보를 제공합니다. <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다. 예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 <c>ExpressionType.Add</c>를 반환합니다.</param>
      <param name="arg" vsli:raw="The right operand for the binary operation. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;arg&quot; /&gt; is equal to &lt;c&gt;second&lt;/c&gt;.">이항 연산의 오른쪽 피연산자입니다. 예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <paramref name="arg" />는 <c>두 번째</c>와 동일합니다.</param>
      <param name="result" vsli:raw="The result of the binary operation.">이항 연산의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for type conversion operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that convert an object from one type to another.">형식 변환 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체를 한 형식에서 다른 형식으로 변환하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the conversion operation. The &lt;c&gt;binder.Type&lt;/c&gt; property provides the type to which the object must be converted. For example, for the statement &lt;c&gt;(String)sampleObject&lt;/c&gt; in C# (&lt;c&gt;CType(sampleObject, Type)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Type&lt;/c&gt; returns the &lt;see cref=&quot;T:System.String&quot; /&gt; type. The &lt;c&gt;binder.Explicit&lt;/c&gt; property provides information about the kind of conversion that occurs. It returns &lt;see langword=&quot;true&quot; /&gt; for explicit conversion and &lt;see langword=&quot;false&quot; /&gt; for implicit conversion.">변환 연산에 대한 정보를 제공합니다. <c>binder.Type</c> 속성은 개체가 변환되어야 하는 형식을 제공합니다. 예를 들어 C#에서 <c>(String)sampleObject</c>(Visual Basic에서 <c>CType(sampleObject, Type)</c>) 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Type</c>은 <see cref="T:System.String" /> 형식을 반환합니다. <c>binder.Explicit</c> 속성은 발생하는 변환의 종류에 대한 정보를 제공합니다. 명시적 변환의 경우 <see langword="true" />를 반환하고, 암시적 변환의 경우 <see langword="false" />를 반환합니다.</param>
      <param name="result" vsli:raw="The result of the type conversion operation.">형식 변환 연산의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.">동적 개체의 새 인스턴스를 초기화하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the initialization operation.">초기화 연산에 대한 정보를 제공합니다.</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during initialization. For example, for the &lt;c&gt;new SampleType(100)&lt;/c&gt; operation, where &lt;c&gt;SampleType&lt;/c&gt; is the type derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">초기화하는 동안 개체에 전달되는 인수입니다. 예를 들어 <c>새 SampleType(100)</c> 작업의 경우 여기서 <c>SampleType</c>은 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되는 형식입니다. <c>args[0]</c>는 100과 같습니다.</param>
      <param name="result" vsli:raw="The result of the initialization.">초기화의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary vsli:raw="Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.">인덱스별로 개체를 삭제하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">삭제에 대한 정보를 제공합니다.</param>
      <param name="indexes" vsli:raw="The indexes to be deleted.">삭제할 인덱스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.">개체 멤버를 삭제하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">삭제에 대한 정보를 제공합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for indexing operations.">인덱스별로 값을 가져오는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 인덱싱 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">연산에 대한 정보를 제공합니다.</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3]&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">연산에 사용되는 인덱스입니다. 예를 들어 C#에서 <c>sampleObject[3]</c>(Visual Basic에서 <c>sampleObject(3)</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</param>
      <param name="result" vsli:raw="The result of the index operation.">인덱스 연산의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as getting a value for a property.">멤버 값을 가져오는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 가져오기와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the &lt;c&gt;Console.WriteLine(sampleObject.SampleProperty)&lt;/c&gt; statement, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">동적 연산을 호출한 개체에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다. 예를 들어 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="result" vsli:raw="The result of the get operation. For example, if the method is called for a property, you can assign the property value to &lt;paramref name=&quot;result&quot; /&gt;.">가져오기 연산의 결과입니다. 예를 들어 속성에 대한 메서드가 호출되면 <paramref name="result" />에 속성 값을 할당할 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke an object. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.">개체를 호출하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체 또는 대리자 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the invoke operation.">호출 연산에 대한 정보를 제공합니다.</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during the invoke operation. For example, for the &lt;c&gt;sampleObject(100)&lt;/c&gt; operation, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">호출 연산을 수행하는 동안 개체에 전달되는 인수입니다. 예를 들어 <c>sampleObject(100)</c> 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</param>
      <param name="result" vsli:raw="The result of the object invocation.">개체 호출의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke a member. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as calling a method.">멤버를 호출하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 메서드 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleMethod&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">동적 연산에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다. 예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleMethod"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="args" vsli:raw="The arguments that are passed to the object member during the invoke operation. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">호출 연산을 수행하는 동안 개체 멤버에 전달되는 인수입니다. 예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</param>
      <param name="result" vsli:raw="The result of the member invocation.">멤버 호출의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that access objects by a specified index.">인덱스별로 값을 설정하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 지정된 인덱스별로 개체에 액세스하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">연산에 대한 정보를 제공합니다.</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">연산에 사용되는 인덱스입니다. 예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</param>
      <param name="value" vsli:raw="The value to set to the object that has the specified index. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;value&quot; /&gt; is equal to 10.">지정된 인덱스를 가진 개체로 설정할 값입니다. 예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <paramref name="value" />는 10과 같습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as setting a value for a property.">멤버 값을 설정하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 설정과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member to which the value is being assigned. For example, for the statement &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">동적 연산을 호출한 개체에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 값이 할당될 멤버의 이름을 제공합니다. 예를 들어 <c>sampleObject.SampleProperty = "Test"</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="value" vsli:raw="The value to set to the member. For example, for &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, the &lt;paramref name=&quot;value&quot; /&gt; is &quot;Test&quot;.">멤버에 설정할 값입니다. 예를 들어 <c>sampleObject.SampleProperty = "Test"</c>의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <paramref name="value" />는 "Test"를 반환합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for unary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.">단항 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 부정, 증가 또는 감소와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder" vsli:raw="Provides information about the unary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;negativeNumber = -number&lt;/c&gt; statement, where &lt;c&gt;number&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &quot;Negate&quot;.">단항 연산에 대한 정보를 제공합니다. <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다. 예를 들어 <c>negativeNumber = -number</c> 문의 경우 여기서 <c>번호</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 "Negate"를 반환합니다.</param>
      <param name="result" vsli:raw="The result of the unary operation.">단항 연산의 결과입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary vsli:raw="Represents an object whose members can be dynamically added and removed at run time.">런타임에 동적으로 추가 및 제거할 수 있는 멤버가 있는 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary vsli:raw="Initializes a new &lt;see langword=&quot;ExpandoObject&quot; /&gt; that does not have members.">멤버가 없는 새 <see langword="ExpandoObject" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.">제공된 MetaObject가 동적 가상 메서드에 디스패치됩니다. 개체를 다른 MetaObject에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.</summary>
      <param name="parameter" vsli:raw="The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.">동적 가상 메서드에 디스패치할 MetaObject를 나타내는 식입니다.</param>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary vsli:raw="Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 인덱스 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.GetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get index operation.">동적 인덱스 가져오기 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">동적 인덱스 가져오기 작업의 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">동적 인덱스 가져오기 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary vsli:raw="Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 멤버 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.GetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">동적 멤버 가져오기 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get member operation.">동적 멤버 가져오기 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">동적 멤버 가져오기 작업의 대상입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">동적 멤버 가져오기 작업의 대상입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case가 무시 되 면이 고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">가져올 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the member to obtain.">가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary vsli:raw="Represents a dynamic object, that can have its operations bound at runtime.">런타임에 작업이 바인딩될 수 있는 동적 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; responsible for binding operations performed on this object.">이 개체에 대해 바인딩 작업을 수행하는 <see cref="T:System.Dynamic.DynamicMetaObject" />를 반환합니다.</summary>
      <param name="parameter" vsli:raw="The expression tree representation of the runtime value.">런타임 값의 식 트리 표현입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to bind this object.">이 개체를 바인딩할 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary vsli:raw="Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.">get 작업을 수행할 때 get 멤버가 속성을 호출할지 여부를 알려 주는 동적 get 멤버 작업에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary vsli:raw="Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.">get 작업을 수행할 때 이 get 멤버 작업이 속성을 호출할지 여부를 알려 주는 값을 가져옵니다. 이 인터페이스가 없으면 기본값은 true입니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this get member operation should invoke properties when they perform the get operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />get 작업을 수행할 때이 get member 작업에서 속성을 호출 해야 하면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary vsli:raw="Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트에서의 동적 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.InvokeBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">동적 호출 작업 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">동적 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke operation.">동적 호출 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">대상 동적 개체를 바인드할 수 없는 경우 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">동적 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">동적 호출 작업의 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">대상 동적 개체를 바인드할 수 없는 경우 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">동적 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">동적 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary vsli:raw="Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 멤버 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.InvokeMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member to invoke.">호출할 멤버의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="true if the name should be matched ignoring case; false otherwise.">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke member operation.">동적 멤버 호출 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">동적 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">동적 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">동적 멤버 호출 작업의 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">동적 멤버 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case가 무시 되 면이 고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to invoke.">호출할 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the member to invoke.">호출할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary vsli:raw="Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 인덱스 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.SetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set index operation.">동적 인덱스 설정 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">동적 인덱스 설정 작업의 인수입니다.</param>
      <param name="value" vsli:raw="The value to set to the collection.">컬렉션에 설정할 값입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">동적 인덱스 설정 작업의 인수입니다.</param>
      <param name="value" vsli:raw="The value to set to the collection.">컬렉션에 설정할 값입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary vsli:raw="Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트에서의 동적 멤버 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.SetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set member operation.">동적 멤버 설정 작업의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="value" vsli:raw="The value to set to the member.">멤버에 설정할 값입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="value" vsli:raw="The value to set to the member.">멤버에 설정할 값입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case가 무시 되 면이 고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">가져올 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the member to obtain.">가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary vsli:raw="Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.">호출 사이트의 동적 단항 연산을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation" vsli:raw="The unary operation kind.">단항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">동적 연산의 대상입니다.</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">동적 연산의 인수 배열입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">동적 단항 연산의 대상입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">동적 단항 연산의 대상입니다.</param>
      <param name="errorSuggestion" vsli:raw="The binding result in case the binding fails, or null.">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary vsli:raw="The unary operation kind.">단항 연산 종류입니다.</summary>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents the unary operation kind.">단항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />의 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">작업의 결과 형식입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary vsli:raw="Represents an expression that has a binary operator.">이항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the expression tree node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />식 트리 노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary vsli:raw="Gets the type conversion function that is used by a coalescing or compound assignment operation.">결합 또는 복합 할당 연산에 사용되는 형식 변환 함수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function.">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드가 리프트된 호출을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">연산자의 반환 형식이 nullable 형식으로 리프트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary vsli:raw="Gets the left operand of the binary operation.">이항 연산의 왼쪽 피연산자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand of the binary operation.">이항 연산의 왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the binary operation.">이항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary vsli:raw="Gets the right operand of the binary operation.">이항 연산의 오른쪽 피연산자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand of the binary operation.">이항 연산의 오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성입니다.</param>
      <param name="conversion" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성입니다.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary vsli:raw="Represents a block that contains a sequence of expressions where variables can be defined.">변수를 정의할 수 있는 식의 시퀀스가 포함된 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary vsli:raw="Gets the expressions in this block.">이 블록의 식을 가져옵니다.</summary>
      <returns vsli:raw="The read-only collection containing all the expressions in this block.">이 블록의 모든 식이 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary vsli:raw="Gets the last expression in this block.">이 블록의 마지막 식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the last expression in this block.">이 블록의 마지막 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Variables&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 속성입니다.</param>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Expressions&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary vsli:raw="Gets the variables defined in this block.">이 블록에 정의된 변수를 가져옵니다.</summary>
      <returns vsli:raw="The read-only collection containing all the variables defined in this block.">이 블록에 정의된 모든 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary vsli:raw="Represents a catch statement in a try block.">try 블록의 catch 문을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary vsli:raw="Gets the body of the catch block.">catch 블록의 본문을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the catch body.">catch 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary vsli:raw="Gets the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터의 본문을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">
        <see cref="T:System.Linq.Expressions.Expression" /> 필터의 본문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary vsli:raw="Gets the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">이 처리기가 catch하는 <see cref="T:System.Exception" />의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">이 처리기가 catch하는 <see cref="T:System.Type" />의 형식을 나타내는 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variable" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Variable&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 속성입니다.</param>
      <param name="filter" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Filter&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 속성입니다.</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Body&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; object representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary vsli:raw="Represents an expression that has a conditional operator.">조건부 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;false&quot; /&gt;.">테스트 결과가 <see langword="false" />인 경우 실행할 식을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;false&quot; /&gt;.">테스트가 <see langword="false" />인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;true&quot; /&gt;.">테스트 결과가 <see langword="true" />인 경우 실행할 식을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;true&quot; /&gt;.">테스트가 <see langword="true" />인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary vsli:raw="Gets the test of the conditional operation.">조건 연산의 테스트를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the test of the conditional operation.">조건 연산의 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 동일한 경우 이 식을 반환합니다.</summary>
      <param name="test" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성입니다.</param>
      <param name="ifTrue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성입니다.</param>
      <param name="ifFalse" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary vsli:raw="Represents an expression that has a constant value.">상수 값이 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary vsli:raw="Gets the value of the constant expression.">상수 식의 값을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; equal to the value of the represented expression.">표현된 식의 값과 같은 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary vsli:raw="Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.">디버그 정보에 대한 시퀀스 위치를 내보내거나 지워 디버깅할 때 디버거가 올바른 소스 코드를 강조 표시할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary vsli:raw="Gets the end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열을 가져옵니다.</summary>
      <returns vsli:raw="The number of the end column of the code that was used to generate the wrapped expression.">래핑된 식을 생성하는 데 사용된 코드의 끝 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary vsli:raw="Gets the end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄을 가져옵니다.</summary>
      <returns vsli:raw="The number of the end line of the code that was used to generate the wrapped expression.">래핑된 식을 생성하는 데 사용된 코드의 끝 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary vsli:raw="Gets the value to indicate if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />이 시퀀스 점을 지우는 데 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 시퀀스 위치를 지우기 위한 이면이 고, <see langword="false" />그렇지 않으면입니다. <see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary vsli:raw="Gets the start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열을 가져옵니다.</summary>
      <returns vsli:raw="The number of the start column of the code that was used to generate the wrapped expression.">래핑된 식을 생성하는 데 사용된 코드의 시작 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary vsli:raw="Gets the start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄을 가져옵니다.</summary>
      <returns vsli:raw="The number of the start line of the code that was used to generate the wrapped expression.">래핑된 식을 생성하는 데 사용된 코드의 시작 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DebugInfoExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary vsli:raw="Represents the default value of a type or an empty expression.">형식 또는 빈 식의 기본값을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DefaultExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary vsli:raw="Represents a dynamic operation.">동적 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the dynamic operation.">동적 작업의 인수를 가져옵니다.</summary>
      <returns vsli:raw="The read-only collections containing the arguments to the dynamic operation.">동적 작업에 대한 인수를 포함하는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary vsli:raw="Gets the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용하는 대리자의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Type" />에서 사용하는 대리자의 형식을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">동적 작업의 네 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">동적 작업의 네 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인수 수를 식 트리 노드에 반환합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">선택적으로 호출 사이트를 만들고 DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트를 반환합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrite this node replacing the dynamic expression's arguments with the provided values. The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression. You should not use this type. It is only public due to assembly refactoring, and it is used internally for performance optimizations. This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">제공된 값으로 동적 식의 인수를 바꾸어 이 노드를 다시 씁니다. <paramref name="args" />의 숫자가 현재 식의 숫자와 일치해야 합니다. 이 형식은 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다. 이 도우미 메서드를 사용하면 호출 사이트에서 사용되는 DynamicExpression에서 파생된 특정 구현 클래스와 독립적으로 노드를 다시 작성할 수 있습니다.</summary>
      <param name="args" vsli:raw="The arguments.">인수입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the rewritten expression.">다시 쓴 식인 <see cref="T:System.Linq.Expressions.Expression" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Compares the value sent to the parameter, &lt;paramref name=&quot;arguments&quot; /&gt;, to the &lt;see langword=&quot;Arguments&quot; /&gt; property of the current instance of &lt;see langword=&quot;DynamicExpression&quot; /&gt;. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new &lt;see langword=&quot;DynamicExpression&quot; /&gt; instance is returned that is identical to the current instance except that the &lt;see langword=&quot;Arguments&quot; /&gt; property is set to the value of parameter &lt;paramref name=&quot;arguments&quot; /&gt;.">매개 변수 <paramref name="arguments" />로 보낸 값을 <see langword="Arguments" />의 현재 인스턴스의 <see langword="DynamicExpression" /> 속성과 비교합니다. 매개 변수 및 속성의 값이 같으면 현재 인스턴스가 반환됩니다. 인스턴스가 일치하지 않으면 <see langword="DynamicExpression" />  속성이 매개 변수 <paramref name="arguments" />의 값으로 설정되는 경우를 제외하고 현재 인스턴스와 동일한 새 <see langword="Arguments" /> 인스턴스가 반환됩니다.</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for dynamic expression trees.">동적 식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpressionVisitor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식인 <see cref="T:System.Linq.Expressions.Expression" />을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary vsli:raw="Represents an initializer for a single element of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션의 단일 요소에 대한 이니셜라이저를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary vsli:raw="Gets the instance method that is used to add an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 데 사용하는 인스턴스 메서드를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that adds an element to a collection.">컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary vsli:raw="Gets the collection of arguments that are passed to a method that adds an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 메서드에 전달된 인수의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments for a method that adds an element to a collection.">컬렉션에 요소를 추가하는 메서드의 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary vsli:raw="Returns a textual representation of an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현을 반환합니다.</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary vsli:raw="Provides the base class from which the classes that represent expression tree nodes are derived. It also contains &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) factory methods to create the various node types. This is an &lt;see langword=&quot;abstract&quot; /&gt; class.">식 트리 노드를 나타내는 클래스가 파생되는 기본 클래스를 제공합니다. 또한 다양한 노드 형식을 만드는 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 팩터리 메서드가 들어 있습니다. 이 클래스는 <see langword="abstract" /> 클래스입니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary vsli:raw="Constructs a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; class.">
        <see cref="T:System.Linq.Expressions.Expression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nodeType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; to set as the node type.">노드 형식으로 설정할 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="P:System.Linq.Expressions.Expression.Type" />의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking.">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.">오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking.">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.">오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 가 <see langword="null" /> 이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation.">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation. The implementing method can be specified.">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;.">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우  
또는 
 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.">첫 번째 피연산자가 true로 확인되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우  
또는 
 <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access a multidimensional array.">다차원 배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="An expression that represents the multidimensional array.">다차원 배열을 나타내는 식입니다.</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; containing expressions used to index the array.">배열을 인덱싱하는 데 사용되는 식이 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access an array.">배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="An expression representing the array to index.">인덱싱할 배열을 나타내는 식입니다.</param>
      <param name="indexes" vsli:raw="An array that contains expressions used to index the array.">배열을 인덱싱하는 데 사용되는 식이 포함된 배열입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to an array of rank more than one.">차수가 1보다 큰 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다.</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우  
또는 
<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우  
또는 
<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents applying an array index operator to an array of rank one.">차수가 1인 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="index" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayIndex&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;index&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 또는 <paramref name="index" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt;.Type represents an array type whose rank is not 1.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt;.Type does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우  
또는 
 <paramref name="array" />.Type이 나타내는 배열 형식의 차수가 1이 아닌 경우  
또는 
 <paramref name="index" />.Type이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to a multidimensional array.">다차원 배열에 대한 배열 인덱스 연산자를 적용하는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; instances - indexes for the array index operation.">배열 인덱스 작업에 대한 <see cref="T:System.Linq.Expressions.Expression" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우  
또는 
<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우  
또는 
<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression for obtaining the length of a one-dimensional array.">1차원 배열 길이를 가져오는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayLength&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to &lt;paramref name=&quot;array&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 속성이 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />인 <paramref name="array" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an assignment operation.">할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Assign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a field or property.">필드 또는 속성 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" />이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property represented by &lt;paramref name=&quot;member&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우  
또는 
<paramref name="member" />가 나타내는 속성에 <see langword="set" /> 접근자가 없는 경우  
또는 
 <paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a member by using a property accessor method.">속성 접근자 메서드를 사용한 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />으로 설정된 <paramref name="expression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property accessed by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우  
또는 
<paramref name="propertyAccessor" />에서 액세스되는 속성에 <see langword="set" /> 접근자가 없는 경우  
또는 
 <paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="variables" vsli:raw="The variables in the block.">블록의 변수입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="variables" vsli:raw="The variables in the block.">블록의 변수입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains two expressions and has no variables.">2개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">블록의 첫 번째 식입니다.</param>
      <param name="arg1" vsli:raw="The second expression in the block.">블록의 두 번째 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains three expressions and has no variables.">3개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">블록의 첫 번째 식입니다.</param>
      <param name="arg1" vsli:raw="The second expression in the block.">블록의 두 번째 식입니다.</param>
      <param name="arg2" vsli:raw="The third expression in the block.">블록의 세 번째 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains four expressions and has no variables.">4개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">블록의 첫 번째 식입니다.</param>
      <param name="arg1" vsli:raw="The second expression in the block.">블록의 두 번째 식입니다.</param>
      <param name="arg2" vsli:raw="The third expression in the block.">블록의 세 번째 식입니다.</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">블록의 네 번째 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains five expressions and has no variables.">5개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">블록의 첫 번째 식입니다.</param>
      <param name="arg1" vsli:raw="The second expression in the block.">블록의 두 번째 식입니다.</param>
      <param name="arg2" vsli:raw="The third expression in the block.">블록의 세 번째 식입니다.</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">블록의 네 번째 식입니다.</param>
      <param name="arg4" vsli:raw="The fifth expression in the block.">블록의 다섯 번째 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the block.">블록의 결과 형식입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the block.">블록의 결과 형식입니다.</param>
      <param name="variables" vsli:raw="The variables in the block.">블록의 변수입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the block.">블록의 결과 형식입니다.</param>
      <param name="variables" vsli:raw="The variables in the block.">블록의 변수입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the block.">블록의 결과 형식입니다.</param>
      <param name="expressions" vsli:raw="The expressions in the block.">블록의 식입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement.">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement. The value passed to the label upon jumping can be specified.">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type. The value passed to the label upon jumping can be specified.">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type.">지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정된 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes no arguments.">인수를 받지 않는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" />가 <see langword="null" />인 경우  
또는 
 <paramref name="instance" /> 가 <see langword="null" /> 이고 <paramref name="method" /> 가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다. <see langword="null" />(Visual Basic에서는 <see langword="static" />) 메서드의 경우 <see langword="Shared" />을 전달합니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" />가 <see langword="null" />인 경우  
또는 
 <paramref name="instance" /> 가 <see langword="null" /> 이고 <paramref name="method" /> 가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우  
또는 
<paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우  
또는 
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes two arguments.">2개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes three arguments.">3개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and one or more of its elements is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />인 경우  
또는 
 <paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우  
또는 
 <paramref name="arguments" />가 <see langword="null" />이 아니고 하나 이상의 해당 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우  
또는 
<paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우  
또는 
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method by calling the appropriate factory method.">적합한 팩터리 메서드를 호출하여 메서드를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property value will be searched for a specific method.">특정 메서드에 대해 <see cref="T:System.Linq.Expressions.Expression" /> 속성 값을 검색할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="methodName" vsli:raw="The name of the method.">메서드의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다. methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represents the arguments to the method.">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to &lt;paramref name=&quot;instance&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified instance method, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; set to the specified arguments.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고, <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />이고, <paramref name="instance" />가 지정된 인스턴스 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />로 설정되고 <see cref="T:System.Reflection.MethodInfo" />가 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.">
        <paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 없는 경우  
또는 
<paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static (Shared in Visual Basic) method.">static(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the call arguments.">호출 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />의 컬렉션입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that takes one argument.">1개 인수를 받는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes two arguments.">2개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes three arguments.">3개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes four arguments.">4개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes five arguments.">5개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg4" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fifth argument.">다섯 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that has arguments.">인수가 있는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우  
또는 
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method by calling the appropriate factory method.">적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드를 호출하는 동작을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The type that contains the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method.">지정된 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 포함하는 형식입니다.</param>
      <param name="methodName" vsli:raw="The name of the method.">메서드의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다. methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the method.">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method, and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property set to the specified arguments.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 지정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />(Visual Basic에서는 <see cref="T:System.Reflection.MethodInfo" />) 메서드를 나타내는 <see langword="static" />로 설정되고 <see langword="Shared" /> 속성이 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.">
        <paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 없는 경우  
또는 
<paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary vsli:raw="Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.">노드를 더 단순한 노드로 줄일 수 있는지 나타냅니다. true를 반환하면 Reduce()를 호출하여 축소된 형식을 만들 수 있습니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for use in the handler body.">처리기 본문에 사용하기 위해 catch된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 문의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter and a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터와 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 문의 본문입니다.</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement.">catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 문의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter but no reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터는 있지만 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조는 없는 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 문의 본문입니다.</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation.">결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation, given a conversion function.">지정된 변환 함수를 사용한 병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;conversion&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;conversion&quot; /&gt;.Type is a delegate type that does not take exactly one argument.">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우  
또는 
 <paramref name="conversion" />이 <see langword="null" />이 아니고 <paramref name="conversion" />.Type이 정확히 하나의 인수를 받지 않는 대리자 형식인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; represents a type that is not assignable to the parameter type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;right&quot; /&gt; is not equal to the return type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우  
또는 
<paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 대리자 형식 <paramref name="conversion" />.Type의 매개 변수 형식에 할당할 수 없는 경우  
또는 
<paramref name="right" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 대리자 형식 <paramref name="conversion" />.Type의 반환 형식과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt; or &lt;paramref name=&quot;ifTrue&quot; /&gt; or &lt;paramref name=&quot;ifFalse&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="test" />, <paramref name="ifTrue" /> 또는 <paramref name="ifFalse" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt;.Type is not &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ifTrue&quot; /&gt;.Type is not equal to &lt;paramref name=&quot;ifFalse&quot; /&gt;.Type.">
        <paramref name="test" />.Type이 <see cref="T:System.Boolean" />이 아닌 경우  
또는 
 <paramref name="ifTrue" />.Type이 <paramref name="ifFalse" />.Type과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />을 만듭니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">
        <see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">
        <see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;type&quot; /&gt; is not assignable from the dynamic type of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />이 아니고 <paramref name="type" />의 동적 형식에서 <paramref name="value" />을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement.">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement with the specified type.">지정된 형식을 사용하여 continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a type conversion operation.">형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation for which the implementing method is specified.">구현 메서드가 지정된 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우  
또는 
<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우  
또는 
 <paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed.">대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.">구현 메서드가 지정된 대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우  
또는 
<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우  
또는 
 <paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; with the specified span.">지정된 범위를 사용하여 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
      <param name="startLine" vsli:raw="The start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄입니다. 0보다 커야 합니다.</param>
      <param name="startColumn" vsli:raw="The start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열입니다. 0보다 커야 합니다.</param>
      <param name="endLine" vsli:raw="The end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater or equal than the start line.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄입니다. 시작 줄보다 크거나 같아야 합니다.</param>
      <param name="endColumn" vsli:raw="The end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열입니다. 끝 줄이 시작 줄과 같을 경우 끝 열은 시작 열보다 크거나 같아야 합니다. 어떤 경우에도 0보다 커야 합니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation.">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation. The implementing method can be specified.">산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 가 <see langword="null" /> 이고 나누기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">동적 작업의 네 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">동적 식의 결과 형식입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; as the second argument.">지정된 <see cref="T:System.Linq.Expressions.ElementInit" />을 두 번째 인수로 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" />를 만듭니다.</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the number of parameters for the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="addMethod" />를 나타내는 메서드 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우  
또는 
<paramref name="addMethod" />를 나타내는 메서드가 인스턴스 메서드가 아닌 경우  
또는 
 <paramref name="arguments" />의 요소 수가 <paramref name="addMethod" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우  
또는 
<paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an array of values as the second argument.">지정된 값 배열을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 개체의 배열입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that addMethod represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that addMethod represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">addMethod가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우  
또는 
addMethod가 나타내는 메서드가 인스턴스 메서드가 아닌 경우  
또는 
인수에 들어 있는 요소 수가 addMethod가 나타내는 메서드의 매개 변수 개수와 다른 경우  
또는 
<paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary vsli:raw="Creates an empty expression that has &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see cref="T:System.Void" /> 형식을 가진 빈 식을 만듭니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />로 설정된 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison.">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison. The implementing method can be specified.">같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 <see langword="XOR" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types. The implementing method can be specified.">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <see langword="XOR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. For &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), &lt;paramref name=&quot;expression&quot; /&gt; must be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. <see langword="static" />(Visual Basic에서는 <see langword="Shared" />)의 경우 <paramref name="expression" />이 <see langword="null" />입니다.</param>
      <param name="field" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.FieldInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;field&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field represented by &lt;paramref name=&quot;field&quot; /&gt; is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="field" />가 <see langword="null" />인 경우  
또는 
<paramref name="field" />가 나타내는 필드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the field represented by &lt;paramref name=&quot;field&quot; /&gt;.">
        <paramref name="expression" />.Type을 <paramref name="field" />가 나타내는 필드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field given the name of the field.">필드 이름을 통한 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a field named &lt;paramref name=&quot;fieldName&quot; /&gt;. This can be null for static fields.">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 필드가 포함된 <paramref name="fieldName" />입니다. 이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="fieldName" vsli:raw="The name of a field to be accessed.">액세스할 필드의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the field denoted by &lt;paramref name=&quot;fieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="fieldName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="fieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No field named &lt;paramref name=&quot;fieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="fieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="The containing object of the field. This can be null for static fields.">필드의 포함 개체입니다. 이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the field.">필드를 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="fieldName" vsli:raw="The field to be accessed.">액세스할 필드입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">특정 형식 인수가 있는 제네릭 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="T:System.Type" /> 개체를 만듭니다.</summary>
      <param name="typeArgs" vsli:raw="An array of up to sixteen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type.">
        <see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 16개의 <see langword="System.Action" /> 개체가 들어있는 배열입니다.</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate that has the specified type arguments.">지정된 형식 인수가 있는 <c>System.Action</c> 대리자의 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains more than sixteen elements.">
        <paramref name="typeArgs" />에 17개 이상의 요소가 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary vsli:raw="Gets a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; or &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 또는 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 가져옵니다.</summary>
      <param name="typeArgs" vsli:raw="The type arguments of the delegate.">대리자의 형식 인수입니다.</param>
      <returns vsli:raw="The delegate type.">대리자 형식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">특정 형식 인수가 있는 제네릭 <c>System.Func</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다. 마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <param name="typeArgs" vsli:raw="An array of one to seventeen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see langword=&quot;System.Func&quot; /&gt; delegate type.">
        <see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 17개의 <see langword="System.Func" /> 개체가 포함된 배열입니다.</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate that has the specified type arguments.">지정된 형식 인수가 있는 <c>System.Func</c> 대리자의 형식입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains fewer than one or more than seventeen elements.">
        <paramref name="typeArgs" />에 1개 미만 또는 17개보다 많은 요소가 들어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement.">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.">"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type.">지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison.">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.">"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 크거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 가 <see langword="null" /> 이고 “크거나 같음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with an &lt;see langword=&quot;if&quot; /&gt; statement.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="if" />을 만듭니다.</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, properties set to the specified values. The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property is set to default expression and the type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다. <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성은 기본 식으로 설정되고 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with &lt;see langword=&quot;if&quot; /&gt; and &lt;see langword=&quot;else&quot; /&gt; statements.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 및 <see langword="if" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="else" />을 만듭니다.</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values. The type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다. 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression value by 1.">값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression by 1.">1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied to.">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체가 포함된 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우  
또는 
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied.">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우  
또는 
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">식이 false로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">식이 false로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">식이 true로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">식이 true로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and no name.">이름이 없는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label without a default value.">기본값이 없는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; without a default value.">기본값이 없는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label with the given default value.">지정된 기본값을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</param>
      <param name="defaultValue" vsli:raw="The value of this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow.">일반 제어 흐름을 통해 레이블에 접근하는 경우 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; with the given default value.">지정된 기본값이 있는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and the given name.">void 형식과 지정된 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="name" vsli:raw="The name of the label.">레이블의 이름입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type.">지정된 유형을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">레이블로 이동할 때 전달되는 값의 형식입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type and name.">지정된 형식과 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">레이블로 이동할 때 전달되는 값의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the label.">레이블의 이름입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" />가 <see langword="null" />입니다.  
또는 
<paramref name="parameters" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parameters&quot; /&gt; contains more than sixteen elements.">
        <paramref name="parameters" />에 17개 이상의 요소가 포함된 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">먼저 식 본문에서 대리자 형식을 생성하고 람다 이름과 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우  
또는 
 <paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우  
또는 
 <paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우  
또는 
<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우  
또는 
 <paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우  
또는 
 <paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우  
또는 
<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" />가 대리자 형식이 아닌 경우  
또는 
 <paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우  
또는 
 <paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우  
또는 
<paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" />가 <see langword="null" />인 경우  
또는 
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" />가 대리자 형식이 아닌 경우  
또는 
 <paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우  
또는 
 <paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우  
또는 
<paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging info.">람다의 이름입니다. 디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging information.">람다의 이름입니다. 디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 "보다 작음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot; less than or equal&quot; numeric comparison.">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than or equal&quot; numeric comparison.">"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" />가 <see langword="null" />입니다.  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우  
또는 
<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우  
또는 
<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; based on a specified property accessor method.">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우  
또는 
<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; object based on a specified property accessor method.">지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우  
또는 
<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우  
또는 
<paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우  
또는 
<paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우  
또는 
"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우  
또는 
<paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우  
또는 
<paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우  
또는 
"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method named &quot;Add&quot; (case insensitive), that adds an element to a collection.">컬렉션에 요소를 추가하는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우  
또는 
 <paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우  
또는 
 <paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that takes one argument, that adds an element to a collection.">하나의 인수를 받으며 컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우  
또는 
 <paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우  
또는 
 <paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the loop.">루프의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body and break target.">지정된 본문과 break 대상을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the loop.">루프의 본문입니다.</param>
      <param name="break" vsli:raw="The break target used by the loop body.">루프 본문에서 사용하는 break 대상입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the loop.">루프의 본문입니다.</param>
      <param name="break" vsli:raw="The break target used by the loop body.">루프 본문에서 사용하는 break 대상입니다.</param>
      <param name="continue" vsli:raw="The continue target used by the loop body.">루프 본문에서 사용하는 continue 대상입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left and right operands, by calling an appropriate factory method.">지정된 왼쪽 및 오른쪽 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand and implementing method, by calling the appropriate factory method.">지정된 왼쪽 피연산자, 오른쪽 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.">지정된 왼쪽 피연산자, 오른쪽 피연산자, 구현 메서드 및 형식 변환 함수를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function. This parameter is used only if &lt;paramref name=&quot;binaryType&quot; /&gt; is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; or compound assignment.">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다. 이 매개 변수는 <paramref name="binaryType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 또는 복합 할당으로 설정되어 있는 경우에만 사용됩니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with the specified elements.">지정된 요소를 사용하여 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 문의 본문입니다.</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">동적 작업의 네 번째 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">동적 작업의 인수입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a jump of the specified &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt;. The value passed to the label upon jumping can also be specified.">지정된 <see cref="T:System.Linq.Expressions.GotoExpression" />의 이동을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />을 만듭니다. 이동 시 레이블에 전달되는 값도 지정할 수 있습니다.</summary>
      <param name="kind" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" />의 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to &lt;paramref name=&quot;kind&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />이고, <paramref name="kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; that represents accessing an indexed property in an object.">개체의 인덱싱된 속성에 액세스하는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. It should be null if the property is &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;shared&quot; /&gt; in Visual Basic).">속성이 속해 있는 개체입니다. 속성이 <see langword="static" />(Visual Basic에서는 <see langword="shared" />)인 경우 null입니다.</param>
      <param name="indexer" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the property to index.">인덱싱할 속성을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;Expression&amp;gt;&lt;/c&gt; (&lt;c&gt;IEnumerable (Of Expression)&lt;/c&gt; in Visual Basic) that contains the arguments that will be used to index the property.">속성을 인덱싱하는 데 사용할 인수가 포함된 <c>IEnumerable&lt;Expression&gt;</c>(Visual Basic에서는 <c>IEnumerable (Of Expression)</c>)입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing either a field or a property.">필드 또는 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the object that the member belongs to. This can be null for static members.">멤버가 속하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다. 이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the field or property to be accessed.">액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with the specified elements.">지정된 요소를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the try expression. If null, body and all handlers must have identical type.">try 식의 결과 형식입니다. null일 경우 본문 및 모든 처리기에 같은 형식이 있어야 합니다.</param>
      <param name="body" vsli:raw="The body of the try block.">try 블록의 본문입니다.</param>
      <param name="finally" vsli:raw="The body of the finally block. Pass null if the try block has no finally block associated with it.">finally 블록의 본문입니다. try 블록에 연결된 finally 블록이 없을 경우 null을 전달합니다.</param>
      <param name="fault" vsli:raw="The body of the fault block. Pass null if the try block has no fault block associated with it.">fault 블록의 본문입니다. try 블록에 연결된 fault 블록이 없을 경우 null을 전달합니다.</param>
      <param name="handlers" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;s representing the catch statements to be associated with the try block.">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />의 컬렉션입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand, by calling the appropriate factory method.">지정된 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand and implementing method, by calling the appropriate factory method.">지정된 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우  
또는 
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우  
또는 
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우  
또는 
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우  
또는 
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Represents an expression that creates a new object and initializes a property of the object.">새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 만듭니다.</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 나머지 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking.">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.">오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor that takes no arguments.">인수를 받지 않는 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents has at least one parameter.">
        <paramref name="constructor" />가 나타내는 생성자에 매개 변수가 하나 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" />가 <see langword="null" />입니다.  
또는 
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우  
또는 
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다. 생성자에서 초기화되는 필드에 액세스하는 멤버가 지정됩니다.</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <param name="members" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" />가 <see langword="null" />인 경우  
또는 
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.  
또는 
<paramref name="members" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우  
또는 
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우  
또는 
<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우  
또는 
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다. 생성자에서 초기화되는 필드에 액세스하는 멤버가 배열로 지정됩니다.</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <param name="members" vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">
        <see cref="T:System.Reflection.MemberInfo" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" />가 <see langword="null" />입니다.  
또는 
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.  
또는 
<paramref name="members" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우  
또는 
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우  
또는 
<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우  
또는 
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" />가 <see langword="null" />인 경우  
또는 
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;arguments&quot; /&gt; does match the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" />의 길이가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 일치하는 경우  
또는 
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the parameterless constructor of the specified type.">지정된 형식의 매개 변수가 없는 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that has a constructor that takes no arguments.">인수를 받지 않는 생성자가 있는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the constructor without parameters for the specified type.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 형식에 대한 매개 변수 없이 생성자를 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />로 설정된 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type that &lt;paramref name=&quot;type&quot; /&gt; represents does not have a constructor without parameters.">
        <paramref name="type" />이 나타내는 형식에 매개 변수가 없는 생성자가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우  
또는 
<paramref name="bounds" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우  
또는 
<paramref name="bounds" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type that &lt;paramref name=&quot;type&quot; /&gt; represents.">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" />이 나타내는 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우  
또는 
<paramref name="initializers" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary vsli:raw="Gets the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; values.">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation.">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">
        <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation. The implementing method can be specified.">비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the expression representing the ones complement.">1의 보수를 나타내는 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the expression representing the ones complement.">1의 보수를 나타내는 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우  
또는 
 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우  
또는 
 <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">매개 변수 또는 변수의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the parameter or variable, used for debugging or printing purpose only.">디버깅 또는 인쇄용으로만 사용되는 매개 변수 또는 변수의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Parameter&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Name&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우  
또는 
 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />이고 지수 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우  
또는 
 <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property by using a property accessor method.">속성 접근자 메서드를 통한 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyAccessor" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" />가 <see langword="null" />인 경우  
또는 
<paramref name="propertyAccessor" />가 나타내는 메서드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not a property accessor method.">
        <paramref name="expression" />.Type을 <paramref name="propertyAccessor" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우  
또는 
<paramref name="propertyAccessor" />가 나타내는 메서드가 속성 접근자 메서드가 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.PropertyInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property that &lt;paramref name=&quot;property&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" />가 <see langword="null" />인 경우  
또는 
<paramref name="property" />가 나타내는 속성이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the property that &lt;paramref name=&quot;property&quot; /&gt; represents.">
        <paramref name="expression" />.Type을 <paramref name="property" />가 나타내는 속성의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property named &lt;paramref name=&quot;propertyName&quot; /&gt;. This can be &lt;see langword=&quot;null&quot; /&gt; for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성이 포함된 <paramref name="propertyName" />입니다. 정적 속성의 경우 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="propertyName" vsli:raw="The name of a property to be accessed.">액세스할 속성의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property denoted by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property named &lt;paramref name=&quot;propertyName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성이 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="propertyName" vsli:raw="The name of the indexer.">인덱서의 이름입니다.</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; accessing a property.">속성에 액세스하는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="The containing object of the property. This can be null for static properties.">속성의 포함 개체입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the property.">속성이 포함된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="propertyName" vsli:raw="The property to be accessed.">액세스할 속성입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property or field.">속성 또는 필드에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성 또는 필드가 포함된 <paramref name="propertyOrFieldName" />입니다. 이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="propertyOrFieldName" vsli:raw="The name of a property or field to be accessed.">액세스할 속성 또는 필드의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the property or field denoted by &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성 또는 필드를 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="propertyOrFieldName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="propertyOrFieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyOrFieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성 또는 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 형식의 상수 값이 있는 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">이 노드를 더 단순한 식으로 줄입니다. CanReduce가 true를 반환하면 유효한 식을 반환합니다. 이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">이 노드를 더 단순한 식으로 줄입니다. CanReduce가 true를 반환하면 유효한 식을 반환합니다. 이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary vsli:raw="Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.">알려진 노드 형식(확장 노드가 아님)으로 식을 줄이거나 이미 알려진 형식인 경우 식을 반환합니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference equality comparison.">참조 같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference inequality comparison.">참조 다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception with a given type.">지정된 형식을 사용하여 예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement.">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement. The value passed to the label upon jumping can be specified.">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type. The value passed to the label upon jumping can be specified.">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type.">지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <param name="variables" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 컬렉션입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <param name="variables" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 배열입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 가 <see langword="null" /> 이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" /> (Visual Basic의<see langword="Shared" /> )이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 가 <see langword="null" /> 이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" /> (Visual Basic의<see langword="Shared" /> )이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">사용할 같음 비교 메서드입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">사용할 같음 비교 메서드입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement without a default case.">기본 사례가 없는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the switch.">switch의 결과 형식입니다.</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">사용할 같음 비교 메서드입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="type" vsli:raw="The result type of the switch.">switch의 결과 형식입니다.</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">사용할 같음 비교 메서드입니다.</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">이 switch 식의 사례 집합입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; object to be used in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the case.">case의 본문입니다.</param>
      <param name="testValues" vsli:raw="The test values of the case.">case의 테스트 값입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; for use in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchCase" />에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" />를 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the case.">case의 본문입니다.</param>
      <param name="testValues" vsli:raw="The test values of the case.">case의 테스트 값입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</param>
      <param name="documentType" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; equal to.">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception.">예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception with a given type.">지정된 형식을 사용하여 예외를 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현을 반환합니다.</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and neither a fault nor finally block.">원하는 수의 catch 문을 사용하고 fault 또는 finally 블록은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the try block.">try 블록의 본문입니다.</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and a finally block.">원하는 수의 catch 문과 finally 블록 하나를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the try block.">try 블록의 본문입니다.</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally 블록의 본문입니다.</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a fault block and no catch statements.">catch 문은 사용하지 않고 fault 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the try block.">try 블록의 본문입니다.</param>
      <param name="fault" vsli:raw="The body of the fault block.">fault 블록의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a finally block and no catch statements.">catch 문은 사용하지 않고 finally 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body" vsli:raw="The body of the try block.">try 블록의 본문입니다.</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally 블록의 본문입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Action delegate type that has specific type arguments.">특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Action delegate type.">System.Action 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="actionType" vsli:raw="When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Action 대리자 형식이 포함됩니다. <paramref name="typeArgs" />와 일치하는 제네릭 System.Action 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Action delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">제네릭 System.Action 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다. 마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Func delegate type.">System.Func 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="funcType" vsli:raw="When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Func 대리자 형식이 포함됩니다. <paramref name="typeArgs" />와 일치하는 제네릭 System.Func 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Func delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">제네릭 System.Func 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit reference or boxing conversion where &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails.">변환에 실패하면 <see cref="T:System.Linq.Expressions.UnaryExpression" />이 제공되는 boxing 변환이나 명시적 참조를 나타내는 <see langword="null" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeAs&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; that compares run-time type identity.">런타임 형식 ID를 비교하는 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)&quot; /&gt; and for which the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 및 <see cref="T:System.Linq.Expressions.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeIs&quot; /&gt; and for which the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">
        <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우  
또는 
 <paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit unboxing.">명시적 unboxing을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to unbox.">unboxing할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">매개 변수 또는 변수의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the parameter or variable. This name is used for debugging or printing purpose only.">매개 변수나 변수의 이름입니다. 이 이름은 디버깅 또는 인쇄용으로만 사용됩니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.">노드를 줄인 다음 줄인 식에서 방문자 대리자를 호출합니다. 이 메서드는 노드를 줄일 수 없으면 예외를 throw합니다.</summary>
      <param name="visitor" vsli:raw="An instance of &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">
        <see cref="T:System.Func`2" />의 인스턴스입니다.</param>
      <returns vsli:raw="The expression being visited, or an expression which should replace it in the tree.">방문하는 식 또는 트리에서 해당 식을 바꿀 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary vsli:raw="Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.">강력한 형식의 람다 식을 식 트리 형태의 데이터 구조로 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate that the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; represents.">
        <see cref="T:System.Linq.Expressions.Expression`1" />에서 나타내는 대리자의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.">식 트리로 기술된 람다 식을 실행 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns vsli:raw="A delegate of type &lt;paramref name=&quot;TDelegate&quot; /&gt; that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" />로 기술된 컴파일된 람다 식을 나타내는 <paramref name="TDelegate" /> 형식의 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.">식 트리로 설명되는 람다 식을 해석되거나 컴파일된 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it is available; &lt;see langword=&quot;false&quot; /&gt; otherwise.">식이 해석된 형식으로 컴파일되어야 함을 나타내려면 <see langword="true" />이고(사용 가능 시), 그러지 않은 경우 <see langword="false" />입니다.</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" />에서 설명하는 컴파일된 람다 식을 나타내는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">컴파일러에서 시퀀스 위치를 표시하고 지역 변수에 주석을 추가하는 데 사용하는 디버깅 정보 생성기입니다.</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">컴파일된 람다 버전을 포함하는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성입니다.</param>
      <param name="parameters" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary vsli:raw="Describes the node types for the nodes of an expression tree.">식 트리에 있는 노드의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;a + b&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>a + b</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>(a += b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, with overflow checking, for numeric operands.">
        <c>(a += b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;(a + b)&lt;/c&gt;, with overflow checking, for numeric operands.">
        <c>(a + b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; operation, such as &lt;c&gt;(a &amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a And b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a &amp; b)</c> 및 Visual Basic의 <c>(a And b)</c>와 같은 비트 또는 논리 <see langword="AND" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary vsli:raw="A conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;. It corresponds to &lt;c&gt;(a &amp;amp;&amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a AndAlso b)&lt;/c&gt; in Visual Basic.">첫 번째 피연산자가 <see langword="AND" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="true" /> 연산입니다. C#의 <c>(a &amp;&amp; b)</c> 및 Visual Basic의 <c>(a AndAlso b)</c>에 해당합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a &amp;amp;= b)&lt;/c&gt; in C#.">C#의 <c>(a &amp;= b)</c>와 같은 비트 또는 논리 <see langword="AND" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary vsli:raw="An indexing operation in a one-dimensional array, such as &lt;c&gt;array[index]&lt;/c&gt; in C# or &lt;c&gt;array(index)&lt;/c&gt; in Visual Basic.">C#의 <c>array[index]</c> 또는 Visual Basic의 <c>array(index)</c>와 같은 1차원 배열의 인덱싱 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary vsli:raw="An operation that obtains the length of a one-dimensional array, such as &lt;c&gt;array.Length&lt;/c&gt;.">
        <c>array.Length</c>와 같은 1차원 배열의 길이를 가져오는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary vsli:raw="An assignment operation, such as &lt;c&gt;(a = b)&lt;/c&gt;.">
        <c>(a = b)</c>와 같은 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary vsli:raw="A block of expressions.">식 블록입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary vsli:raw="A method call, such as in the &lt;c&gt;obj.sampleMethod()&lt;/c&gt; expression.">
        <c>obj.sampleMethod()</c> 에서와 같은 메서드 호출입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary vsli:raw="A node that represents a null coalescing operation, such as &lt;c&gt;(a ?? b)&lt;/c&gt; in C# or &lt;c&gt;If(a, b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a ?? b)</c> 또는 Visual Basic의 <c>If(a, b)</c>와 같은 null 결합 연산을 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary vsli:raw="A conditional operation, such as &lt;c&gt;a &amp;gt; b ? a : b&lt;/c&gt; in C# or &lt;c&gt;If(a &amp;gt; b, a, b)&lt;/c&gt; in Visual Basic.">C#의 <c>a &gt; b ? a : b</c> 또는 Visual Basic의 <c>If(a &gt; b, a, b)</c>와 같은 조건부 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary vsli:raw="A constant value.">상수 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.">C#의 <c>(SampleType) obj</c> 또는 Visual Basic의 <c>CType(obj, SampleType)</c>과 같은 캐스트 또는 변환 연산입니다. 숫자 변환의 경우 변환된 값이 대상 형식에 비해 너무 크면 예외가 throw되지 않습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.">C#의 <c>(SampleType) obj</c> 또는 Visual Basic의 <c>CType(obj, SampleType)</c>과 같은 캐스트 또는 변환 연산입니다. 숫자 변환의 경우 변환된 값이 대상 형식에 맞지 않으면 예외가 throw됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary vsli:raw="Debugging information.">디버깅 정보.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary vsli:raw="A unary decrement operation, such as &lt;c&gt;(a - 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">C# 및 Visual Basic의 <c>(a - 1)</c>과 같은 단항 감소 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary vsli:raw="A default value.">기본값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary vsli:raw="A division operation, such as &lt;c&gt;(a / b)&lt;/c&gt;, for numeric operands.">
        <c>(a / b)</c>와 같이 숫자 피연산자에 대한 나누기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary vsli:raw="An division compound assignment operation, such as &lt;c&gt;(a /= b)&lt;/c&gt;, for numeric operands.">
        <c>(a /= b)</c>와 같이 숫자 피연산자에 대한 나누기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary vsli:raw="A dynamic operation.">동적 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary vsli:raw="A node that represents an equality comparison, such as &lt;c&gt;(a == b)&lt;/c&gt; in C# or &lt;c&gt;(a = b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a == b)</c> 또는 Visual Basic의 <c>(a = b)</c>와 같은 같음 비교를 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; operation, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in C# or &lt;c&gt;(a Xor b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a ^ b)</c> 및 Visual Basic의 <c>(a Xor b)</c>와 같은 비트 또는 논리 <see langword="XOR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in C#.">C#의 <c>(a ^= b)</c>와 같은 비트 또는 논리 <see langword="XOR" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary vsli:raw="An extension expression.">확장 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary vsli:raw="A &quot;go to&quot; expression, such as &lt;c&gt;goto Label&lt;/c&gt; in C# or &lt;c&gt;GoTo Label&lt;/c&gt; in Visual Basic.">C#의 <c>goto 레이블</c> 또는 Visual Basic의 <c>GoTo 레이블</c>과 같은 "이동" 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary vsli:raw="A &quot;greater than&quot; comparison, such as &lt;c&gt;(a &amp;gt; b)&lt;/c&gt;.">
        <c>(a &gt; b)</c>와 같은 "보다 큼" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary vsli:raw="A &quot;greater than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;gt;= b)&lt;/c&gt;.">
        <c>(a &gt;= b)</c>와 같은 "보다 크거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary vsli:raw="A unary increment operation, such as &lt;c&gt;(a + 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">C# 및 Visual Basic의 <c>(a + 1)</c>과 같은 단항 증가 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary vsli:raw="An index operation or an operation that accesses a property that takes arguments.">인덱스 연산이거나 인수를 받는 속성에 액세스하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary vsli:raw="An operation that invokes a delegate or lambda expression, such as &lt;c&gt;sampleDelegate.Invoke()&lt;/c&gt;.">
        <c>sampleDelegate.Invoke()</c>와 같은 대리자 또는 람다 식을 호출하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary vsli:raw="A &lt;see langword=&quot;false&quot; /&gt; condition value.">
        <see langword="false" /> 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary vsli:raw="A &lt;see langword=&quot;true&quot; /&gt; condition value.">
        <see langword="true" /> 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary vsli:raw="A label.">레이블입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary vsli:raw="A lambda expression, such as &lt;c&gt;a =&amp;gt; a + a&lt;/c&gt; in C# or &lt;c&gt;Function(a) a + a&lt;/c&gt; in Visual Basic.">C#의 <c>a =&gt; a + a</c> 또는 Visual Basic의 <c>Function(a) a + a</c>와 같은 람다 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary vsli:raw="A bitwise left-shift operation, such as &lt;c&gt;(a &amp;lt;&amp;lt; b)&lt;/c&gt;.">
        <c>(a &lt;&lt; b)</c>와 같은 비트 왼쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary vsli:raw="A bitwise left-shift compound assignment, such as &lt;c&gt;(a &amp;lt;&amp;lt;= b)&lt;/c&gt;.">
        <c>(a &lt;&lt;= b)</c>와 같은 비트 왼쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary vsli:raw="A &quot;less than&quot; comparison, such as &lt;c&gt;(a &amp;lt; b)&lt;/c&gt;.">
        <c>(a &lt; b)</c>와 같은 "보다 큼" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary vsli:raw="A &quot;less than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;lt;= b)&lt;/c&gt;.">
        <c>(a &lt;= b)</c>와 같은 "보다 작거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary vsli:raw="An operation that creates a new &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; object and initializes it from a list of elements, such as &lt;c&gt;new List&amp;lt;SampleType&amp;gt;(){ a, b, c }&lt;/c&gt; in C# or &lt;c&gt;Dim sampleList = { a, b, c }&lt;/c&gt; in Visual Basic.">C#의 <c>new List&lt;SampleType&gt;(){ a, b, c }</c> 또는 Visual Basic의 <c>Dim sampleList = { a, b, c }</c>와 같이 새 <see cref="T:System.Collections.IEnumerable" /> 개체를 만들고 요소 목록에서 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary vsli:raw="A loop, such as &lt;c&gt;for&lt;/c&gt; or &lt;c&gt;while&lt;/c&gt;.">
        <c>for</c> 또는 <c>while</c>과 같은 루프입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary vsli:raw="An operation that reads from a field or property, such as &lt;c&gt;obj.SampleProperty&lt;/c&gt;.">
        <c>obj.SampleProperty</c>와 같이 필드 또는 속성에서 읽는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary vsli:raw="An operation that creates a new object and initializes one or more of its members, such as &lt;c&gt;new Point { X = 1, Y = 2 }&lt;/c&gt; in C# or &lt;c&gt;New Point With {.X = 1, .Y = 2}&lt;/c&gt; in Visual Basic.">C#의 <c>new Point { X = 1, Y = 2 }</c> 또는 Visual Basic의 <c>New Point With {.X = 1, .Y = 2}</c>와 같이 새 개체를 만들고 하나 이상의 멤버를 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary vsli:raw="An arithmetic remainder operation, such as &lt;c&gt;(a % b)&lt;/c&gt; in C# or &lt;c&gt;(a Mod b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a % b)</c> 또는 Visual Basic의 <c>(a Mod b)</c>와 같은 산술 나머지 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary vsli:raw="An arithmetic remainder compound assignment operation, such as &lt;c&gt;(a %= b)&lt;/c&gt; in C#.">C#의 <c>(a %= b)</c>와 같은 산술 나머지 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary vsli:raw="A multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>(a * b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>(a *= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">
        <c>(a *= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary vsli:raw="An multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, that has overflow checking, for numeric operands.">
        <c>(a * b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">
        <c>(-a)</c>와 같은 산술 부정 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;, that has overflow checking. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">
        <c>(-a)</c>와 같이 오버플로를 검사하는 산술 부정 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary vsli:raw="An operation that calls a constructor to create a new object, such as &lt;c&gt;new SampleType()&lt;/c&gt;.">
        <c>new SampleType()</c>과 같이 생성자를 호출하여 새 개체를 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary vsli:raw="An operation that creates a new array, in which the bounds for each dimension are specified, such as &lt;c&gt;new SampleType[dim1, dim2]&lt;/c&gt; in C# or &lt;c&gt;New SampleType(dim1, dim2)&lt;/c&gt; in Visual Basic.">C#의 <c>new SampleType[dim1, dim2]</c> 또는 Visual Basic의 <c>New SampleType(dim1, dim2)</c>과 같이 각 차원의 경계가 지정된 새 배열을 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary vsli:raw="An operation that creates a new one-dimensional array and initializes it from a list of elements, such as &lt;c&gt;new SampleType[]{a, b, c}&lt;/c&gt; in C# or &lt;c&gt;New SampleType(){a, b, c}&lt;/c&gt; in Visual Basic.">C#의 <c>new SampleType[]{a, b, c}</c> 또는 Visual Basic의 <c>New SampleType(){a, b, c}</c>와 같이 새 1차원 배열을 만들고 요소 목록을 사용하여 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary vsli:raw="A bitwise complement or logical negation operation. In C#, it is equivalent to &lt;c&gt;(~a)&lt;/c&gt; for integral types and to &lt;c&gt;(!a)&lt;/c&gt; for Boolean values. In Visual Basic, it is equivalent to &lt;c&gt;(Not a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">비트 보수 또는 논리 부정 연산입니다. C#에서는 정수 형식의 <c>(~a)</c> 및 부울 값의 <c>(!a)</c>와 동일하고, Visual Basic에서는 <c>(Not a)</c>와 동일합니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary vsli:raw="An inequality comparison, such as &lt;c&gt;(a != b)&lt;/c&gt; in C# or &lt;c&gt;(a &amp;lt;&amp;gt; b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a != b)</c> 또는 Visual Basic의 <c>(a &lt;&gt; b)</c>와 같은 다름 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary vsli:raw="A ones complement operation, such as &lt;c&gt;(~a)&lt;/c&gt; in C#.">C#의 <c>(~a)</c>와 같은 1의 보수 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a | b)&lt;/c&gt; in C# or &lt;c&gt;(a Or b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a | b)</c> 및 Visual Basic의 <c>(a Or b)</c>와 같은 비트 또는 논리 <see langword="OR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; compound assignment, such as &lt;c&gt;(a |= b)&lt;/c&gt; in C#.">C#의 <c>(a |= b)</c>와 같은 비트 또는 논리 <see langword="OR" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary vsli:raw="A short-circuiting conditional &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a || b)&lt;/c&gt; in C# or &lt;c&gt;(a OrElse b)&lt;/c&gt; in Visual Basic.">C#의 <c>(a || b)</c> 또는 Visual Basic의 <c>(a OrElse b)</c>와 같은 단락(short circuit) 조건부 <see langword="OR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary vsli:raw="A reference to a parameter or variable that is defined in the context of the expression. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">식의 컨텍스트에 정의된 매개 변수 또는 변수에 대한 참조입니다. 자세한 내용은 <see cref="T:System.Linq.Expressions.ParameterExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary vsli:raw="A unary postfix decrement, such as &lt;c&gt;(a--)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">
        <c>(a--)</c>와 같은 단항 후위 감소입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary vsli:raw="A unary postfix increment, such as &lt;c&gt;(a++)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">
        <c>(a++)</c>와 같은 단항 후위 증가입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary vsli:raw="A mathematical operation that raises a number to a power, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in Visual Basic.">Visual Basic의 <c>(a ^ b)</c>와 같은 숫자 거듭제곱의 수학 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary vsli:raw="A compound assignment operation that raises a number to a power, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in Visual Basic.">Visual Basic의 <c>(a ^= b)</c>와 같은 숫자 거듭제곱 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary vsli:raw="A unary prefix decrement, such as &lt;c&gt;(--a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">
        <c>(--a)</c>와 같은 단항 전위 감소입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary vsli:raw="A unary prefix increment, such as &lt;c&gt;(++a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">
        <c>(++a)</c>와 같은 단항 전위 증가입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary vsli:raw="An expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;. A &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; node can contain references to parameters that are defined in the context of the expression it represents.">
        <see cref="T:System.Linq.Expressions.Expression" /> 형식의 상수 값이 있는 식입니다. <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 노드에는 표현된 식의 컨텍스트에 정의된 매개 변수에 대한 참조가 포함될 수 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary vsli:raw="A bitwise right-shift operation, such as &lt;c&gt;(a &amp;gt;&amp;gt; b)&lt;/c&gt;.">
        <c>(a &gt;&gt; b)</c>와 같은 비트 오른쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary vsli:raw="A bitwise right-shift compound assignment operation, such as &lt;c&gt;(a &amp;gt;&amp;gt;= b)&lt;/c&gt;.">
        <c>(a &gt;&gt;= b)</c>와 같은 비트 오른쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary vsli:raw="A list of run-time variables. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">런타임 변수 목록입니다. 자세한 내용은 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary vsli:raw="A subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>(a - b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 빼기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, without overflow checking, for numeric operands.">
        <c>(a -= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">
        <c>(a -= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary vsli:raw="An arithmetic subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, that has overflow checking, for numeric operands.">
        <c>(a - b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 산술 빼기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary vsli:raw="A switch operation, such as &lt;see langword=&quot;switch&quot; /&gt; in C# or &lt;see langword=&quot;Select Case&quot; /&gt; in Visual Basic.">C#의 <see langword="switch" /> 또는 Visual Basic의 <see langword="Select Case" /> 같은 switch 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary vsli:raw="An operation that throws an exception, such as &lt;c&gt;throw new Exception()&lt;/c&gt;.">
        <c>throw new Exception()</c>과 같이 예외를 throw하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary vsli:raw="A &lt;see langword=&quot;try-catch&quot; /&gt; expression.">
        <see langword="try-catch" /> 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary vsli:raw="An explicit reference or boxing conversion in which &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails, such as &lt;c&gt;(obj as SampleType)&lt;/c&gt; in C# or &lt;c&gt;TryCast(obj, SampleType)&lt;/c&gt; in Visual Basic.">C#의 <c>(obj as SampleType)</c> 또는 Visual Basic의 <c>TryCast(obj, SampleType)</c>과 같이 변환에 실패하면 <see langword="null" />이 제공되는 boxing 변환이나 명시적 참조입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary vsli:raw="An exact type test.">정확한 형식 테스트입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary vsli:raw="A type test, such as &lt;c&gt;obj is SampleType&lt;/c&gt; in C# or &lt;c&gt;TypeOf obj is SampleType&lt;/c&gt; in Visual Basic.">C#의 <c>obj is SampleType</c> 및 Visual Basic의 <c>TypeOf obj is SampleType</c>과 같은 테스트 형식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary vsli:raw="A unary plus operation, such as &lt;c&gt;(+a)&lt;/c&gt;. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.">
        <c>(+a)</c>와 같은 단항 더하기 연산입니다. 미리 정의된 단항 더하기 연산의 결과는 피연산자의 값과 일치하지만, 구현을 사용자 정의하여 예외적인 결과를 생성할 수도 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary vsli:raw="An unbox value type operation, such as &lt;see langword=&quot;unbox&quot; /&gt; and &lt;see langword=&quot;unbox.any&quot; /&gt; instructions in MSIL.">MSIL 명령 <see langword="unbox" /> 및 <see langword="unbox.any" /> 같은 unbox 값 형식 연산입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for expression trees.">식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionVisitor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Dispatches the list of expressions to one of the more specialized visit methods in this class.">이 클래스의 보다 특수한 visit 메서드 중 하나에 식의 목록을 디스패치합니다.</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.">요소 중 하나가 수정되었으면 수정된 식 목록이고, 그렇지 않으면 원래 식 목록을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Dispatches the expression to one of the more specialized visit methods in this class.">이 클래스의 보다 특수한 visit 메서드 중 하나에 식을 디스패치합니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary vsli:raw="Visits all nodes in the collection using a specified element visitor.">지정된 요소 방문자를 사용하여 컬렉션의 모든 노드를 열어 봅니다.</summary>
      <param name="nodes" vsli:raw="The nodes to visit.">열어 볼 노드입니다.</param>
      <param name="elementVisitor" vsli:raw="A delegate that visits a single element, optionally replacing it with a new element.">단일 요소를 열어 보는 대리자이며 선택적으로 해당 요소를 새 요소로 바꿉니다.</param>
      <typeparam name="T" vsli:raw="The type of the nodes.">노드의 형식입니다.</typeparam>
      <returns vsli:raw="The modified node list, if any of the elements were modified; otherwise, returns the original node list.">요소가 하나라도 수정되었으면 수정된 노드 목록이고, 그렇지 않으면 원래 노드 목록을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary vsli:raw="Visits an expression, casting the result back to the original expression type.">식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report to report a better error message.">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T" vsli:raw="The type of the expression.">식의 형식입니다.</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for this node returned a different type.">이 노드에 대한 방문 메서드가 다른 형식을 반환한 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary vsli:raw="Visits all expressions in the collection, casting the results back to the original expression type.">컬렉션에서 모든 식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">열어 볼 식입니다.</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report a better error message.">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T" vsli:raw="The type of the expressions.">식의 형식입니다.</typeparam>
      <returns vsli:raw="The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.">식이 수정되었으면 수정된 식 컬렉션이고, 그렇지 않으면 원래 식 컬렉션을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for one of the expressions returned a different type.">다른 형식을 반환한 식 중 하나에 대한 방문 메서드입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.BlockExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.CatchBlock" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" />을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" />을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ElementInit" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Visits the children of the extension expression.">확장 식의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.IndexExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.InvocationExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelTarget" />을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <typeparam name="T" vsli:raw="The type of the delegate.">대리자의 형식입니다.</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LoopExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.NewExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchCase" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node" vsli:raw="The expression to visit.">열어 볼 식입니다.</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary vsli:raw="Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.">무조건 점프를 나타냅니다. 여기에는 return 문, break 및 continue 문, 기타 점프가 포함됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary vsli:raw="The kind of the &quot;go to&quot; expression. Serves information purposes only.">"go to" 식의 종류입니다. 정보 제공 목적으로만 사용됩니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; object representing the kind of the &quot;go to&quot; expression.">"go to" 식의 종류를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary vsli:raw="The target label where this node jumps to.">이 노드가 점프하는 대상 레이블입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing the target label for this node.">이 노드의 대상 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Value&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary vsli:raw="The value passed to the target, or null if the target is of type System.Void.">대상에 전달된 값 또는 대상이 System.Void 형식인 경우 null입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the value passed to the target or null.">대상에 전달된 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 또는 null입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary vsli:raw="Specifies what kind of jump this &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.GotoExpression" />이 나타내는 점프 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a break statement.">break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a continue statement.">continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a jump to some location.">일정 위치로의 점프를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a return statement.">return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).  This API is for internal use only.">여러 트리 노드(DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression 및 IndexExpression)의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.  이 API는 내부 전용입니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. This API is for internal use only.">인수 수를 식 트리 노드에 반환합니다. 이 API는 내부 전용입니다.</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at &lt;paramref name=&quot;index&quot; /&gt;, throwing if &lt;paramref name=&quot;index&quot; /&gt; is out of bounds. This API is for internal use only.">
        <paramref name="index" />에서 인수를 반환하며, <paramref name="index" />가 범위를 벗어나는 경우 throw합니다. 이 API는 내부 전용입니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="The argument at index.">인덱스의 인수입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.">CallSite 및 Rewriting 기능뿐만 아니라 DynamicExpression 트리 노드의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.  이 API를 사용하면 안됩니다.  DLL 리팩터링으로 인해 공용으로만 사용되며 내부 성능 최적화용으로만 존재합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">선택적으로 호출 사이트를 만들고 DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트를 반환합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="The CallSite for the DynamicExpression's polymorphic inline cache.">DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary vsli:raw="Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression's polymorphic inline cache.">동적 식의 다형 형식 인라인 캐시에 사용되는 규칙 형식인 CallSite에서 사용하는 대리자 형식을 가져옵니다.</summary>
      <returns vsli:raw="The delegate type used by the CallSite.">호출 사이트에서 사용하는 대리자 형식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrites this node replacing the dynamic expression's arguments with the provided values.  The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">제공된 값으로 동적 식의 인수를 바꾸어 이 노드를 다시 씁니다.  <paramref name="args" />의 숫자가 현재 식의 숫자와 일치해야 합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.  이 도우미 메서드를 사용하면 호출 사이트에서 사용되는 DynamicExpression에서 파생된 특정 구현 클래스와 독립적으로 노드를 다시 작성할 수 있습니다.</summary>
      <param name="args" vsli:raw="The arguments used to replace this node.">이 노드를 바꾸는 데 사용되는 인수입니다.</param>
      <returns vsli:raw="The rewritten node, but if no changes were made, then returns the same node.">다시 작성된 노드를 변경하지 않은 경우 동일한 노드를 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary vsli:raw="Represents indexing a property or array.">속성 또는 배열의 인덱싱을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary vsli:raw="Gets the arguments that will be used to index the property or array.">속성 또는 배열을 인덱싱하는 데 사용할 인수를 가져옵니다.</summary>
      <returns vsli:raw="The read-only collection containing the arguments that will be used to index the property or array.">속성 또는 배열을 인덱싱하는 데 사용할 인수를 포함하는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, returns null otherwise.">식이 인덱싱된 속성을 나타내는 경우 속성의 <see cref="T:System.Reflection.PropertyInfo" />를 가져오고, 그러지 않으면 null을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, otherwise null.">식이 인덱싱된 속성을 나타내는 경우 속성의 <see cref="T:System.Reflection.PropertyInfo" />이고, 그러지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary vsli:raw="An object to index.">인덱스에 대한 개체입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the object to index.">인덱싱할 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Object&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 속성입니다.</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary vsli:raw="Represents an expression that applies a delegate or lambda expression to a list of argument expressions.">인수 식 목록에 대리자 또는 람다 식을 적용하는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary vsli:raw="Gets the arguments that the delegate or lambda expression is applied to.">대리자 또는 람다 식이 적용되는 인수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments that the delegate is applied to.">대리자가 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary vsli:raw="Gets the delegate or lambda expression to be applied.">적용할 대리자 또는 람다 식을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate to be applied.">적용할 대리자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds, as &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">인덱스에서 인수를 반환하며, 인덱스가 <see cref="T:System.Linq.Expressions.Expression" />으로 범위를 벗어나는 경우 발생합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; represents.">이 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 속성입니다.</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary vsli:raw="Represents a label, which can be put in any &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; context. If it is jumped to, it will get the value provided by the corresponding &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;. Otherwise, it receives the value in &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt;. If the &lt;see cref=&quot;T:System.Type&quot; /&gt; equals System.Void, no value should be provided.">모든 <see cref="T:System.Linq.Expressions.Expression" /> 컨텍스트에 배치할 수 있는 레이블을 나타냅니다. 레이블로 점프하면 해당 <see cref="T:System.Linq.Expressions.GotoExpression" />이 제공하는 값을 가져옵니다. 그렇지 않으면 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />의 값을 받습니다. <see cref="T:System.Type" />이 System.Void와 같으면 아무 값도 제공되지 않습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary vsli:raw="The value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow (for example, is not jumped to).">레이블로 점프하지 않고 일반 제어 흐름을 통해 레이블에 접근하는 경우 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</summary>
      <returns vsli:raw="The Expression object representing the value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 값을 나타내는 Expression 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">이 레이블이 연결된 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">이 레이블이 연결된 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Target&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 속성입니다.</param>
      <param name="defaultValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary vsli:raw="Used to represent the target of a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 대상을 나타내는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary vsli:raw="Gets the name of the label.">레이블의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the label.">레이블의 이름입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary vsli:raw="The type of value that is passed when jumping to the label (or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed).">레이블로 점프할 때 전달되는 값의 형식 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the value that is passed when jumping to the label or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed.">레이블로 점프할 때 전달되는 값의 형식을 나타내는 <see cref="T:System.Type" /> 개체 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary vsli:raw="Describes a lambda expression. This captures a block of code that is similar to a .NET method body.">람다 식을 설명합니다. .NET 메서드 본문과 유사한 코드 블록을 캡처합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary vsli:raw="Gets the body of the lambda expression.">람다 식의 본문을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the body of the lambda expression.">람다 식의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Delegate&quot; /&gt; that contains the compiled version of the lambda expression.">람다 식의 컴파일된 버전을 포함하는 <see cref="T:System.Delegate" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary vsli:raw="Produces an interpreted or compiled delegate that represents the lambda expression.">람다 식을 나타내는 해석되거나 컴파일된 대리자를 생성합니다.</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">식이 해석된 형식으로 컴파일되어야 함을 나타내려면 <see langword="true" />이고(사용 가능 시), 그러지 않은 경우 <see langword="false" />입니다.</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 개체에서 설명하는 컴파일된 람다 식을 나타내는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">컴파일러에서 시퀀스 위치를 표시하고 지역 변수에 주석을 추가하는 데 사용하는 디버깅 정보 생성기입니다.</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">컴파일된 람다 버전을 포함하는 대리자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary vsli:raw="Gets the name of the lambda expression.">람다 식의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the lambda expression.">람다 식의 이름입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary vsli:raw="Gets the parameters of the lambda expression.">람다 식의 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects that represent the parameters of the lambda expression.">람다 식의 매개 변수를 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary vsli:raw="Gets the return type of the lambda expression.">람다 식의 반환 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the lambda expression.">람다 식의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary vsli:raw="Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.">마무리 호출 최적화를 사용하여 람다 식을 컴파일할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the lambda expression will be compiled with the tail call optimization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />마무리 호출 최적화를 사용 하 여 람다 식을 컴파일하는 경우 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary vsli:raw="Represents a constructor call that has a collection initializer.">컬렉션 이니셜라이저가 있는 생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary vsli:raw="Gets the element initializers that are used to initialize a collection.">컬렉션을 초기화하는 데 사용되는 요소 이니셜라이저를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects which represent the elements that are used to initialize the collection.">컬렉션을 초기화하는 데 사용되는 요소를 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that contains a call to the constructor of a collection type.">컬렉션 형식의 생성자에 대한 호출이 들어 있는 식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the call to the constructor of a collection type.">컬렉션 형식의 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary vsli:raw="Represents an infinite loop. It can be exited with &quot;break&quot;.">무한 루프를 나타냅니다. "break"를 사용하여 종료할 수 있습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">루프 본문에서 break 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">루프 본문에서 break 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">루프 본문에서 continue 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">루프 본문에서 continue 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="breakLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.BreakLabel&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 속성입니다.</param>
      <param name="continueLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.ContinueLabel&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 속성입니다.</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Body&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary vsli:raw="Represents assignment operation for a field or property of an object.">필드 또는 개체의 속성에 대한 할당 작업을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary vsli:raw="Gets the expression to assign to the field or property.">필드 또는 속성에 할당할 식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the value to assign to the field or property.">필드 또는 속성에 할당할 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary vsli:raw="Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.">새로 만든 개체의 멤버를 초기화하는 데 사용되는 바인딩을 나타내는 클래스가 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; class.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; that discriminates the type of binding that is represented.">표현된 바인딩의 형식을 식별하는 <see cref="T:System.Linq.Expressions.MemberBindingType" />입니다.</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to be initialized.">초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary vsli:raw="Gets the type of binding that is represented.">표현된 바인딩의 형식을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; values.">
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary vsli:raw="Gets the field or property to be initialized.">초기화할 필드 또는 속성을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be initialized.">초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현을 반환합니다.</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary vsli:raw="Describes the binding types that are used in &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; objects.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 개체에 사용된 바인딩 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary vsli:raw="A binding that represents initializing a member with the value of an expression.">멤버를 식의 값으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary vsli:raw="A binding that represents initializing a member of type &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; or &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; from a list of elements.">요소 목록을 사용하여 <see cref="T:System.Collections.IList" /> 또는 <see cref="T:System.Collections.Generic.ICollection`1" /> 형식의 멤버를 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary vsli:raw="A binding that represents recursively initializing members of a member.">멤버의 멤버를 재귀적으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary vsli:raw="Represents accessing a field or property.">필드 또는 속성에 대한 액세스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary vsli:raw="Gets the containing object of the field or property.">필드 또는 속성을 포함하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the containing object of the field or property.">필드 또는 속성을 포함하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary vsli:raw="Gets the field or property to be accessed.">액세스할 필드 또는 속성을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be accessed.">액세스할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt;.">이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary vsli:raw="Represents calling a constructor and initializing one or more members of the new object.">생성자를 호출하고 새 개체의 멤버를 하나 이상 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of the newly created object.">새로 만든 개체의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects which describe how to initialize the members.">멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.MemberBinding" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that represents the constructor call.">생성자 호출을 나타내는 식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the constructor call.">생성자 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary vsli:raw="Reduces the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; to a simpler expression.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 더 단순한 식으로 줄입니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary vsli:raw="Represents initializing the elements of a collection member of a newly created object.">새로 만든 개체의 컬렉션 멤버 요소에 대한 초기화를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary vsli:raw="Gets the element initializers for initializing a collection member of a newly created object.">새로 만든 개체의 컬렉션 멤버 요소를 초기화하기 위한 요소 이니셜라이저를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection member with.">컬렉션 멤버를 초기화하는 데 사용할 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary vsli:raw="Represents initializing members of a member of a newly created object.">새로 만든 개체의 멤버의 멤버를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of a member.">멤버의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects that describe how to initialize the members of the member.">멤버의 멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.MemberBinding" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary vsli:raw="Represents a call to either static or an instance method.">정적 메서드 또는 인스턴스 메서드에 대한 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary vsli:raw="Gets a collection of expressions that represent arguments of the called method.">호출된 메서드의 인수를 나타내는 식 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments to the called method.">호출된 메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the method to be called.">호출되는 메서드에 대한 <see cref="T:System.Reflection.MethodInfo" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the called method.">호출된 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the instance for instance method calls or null for static method calls.">인스턴스 메서드 호출의 인스턴스 또는 정적 메서드 호출의 null을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the receiving object of the method.">메서드를 받는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">인수에 따라 식 트리 노드를 수가 <see cref="T:System.Int32" />합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성입니다.</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary vsli:raw="Represents creating a new array and possibly initializing the elements of the new array.">새 배열을 만들고 선택적으로 새 배열의 요소를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary vsli:raw="Gets the bounds of the array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt;, or the values to initialize the elements of the new array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt;.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />이면 배열의 경계를 가져오고, <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />이면 새 배열의 요소를 초기화할 값을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent either the bounds of the array or the initialization values.">배열의 경계 또는 초기화 값을 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary vsli:raw="Represents a constructor call.">생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the constructor.">생성자에 대한 인수를 가져옵니다.</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the constructor.">생성자에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary vsli:raw="Gets the called constructor.">호출된 생성자를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the called constructor.">호출된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary vsli:raw="Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.">생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 가져옵니다.</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.">생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Gets the number of arguments to the expression tree node.">식 트리 노드에 대한 인수 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of arguments to the expression tree node.">식 트리 노드에 대한 인수 개수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.">인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.</summary>
      <param name="index" vsli:raw="The index of the argument.">인수의 인덱스입니다.</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds.">인덱스에서 인수를 반환하며, 인덱스가 범위를 벗어나는 경우 발생합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary vsli:raw="Represents a named parameter expression.">명명된 매개 변수 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">이 노드를 열어 볼 방문자입니다.</param>
      <returns vsli:raw="The result of visiting this node.">이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary vsli:raw="Indicates that this &lt;c&gt;ParameterExpression&lt;/c&gt; is to be treated as a &lt;see langword=&quot;ByRef&quot; /&gt; parameter.">이 <c>ParameterExpression</c>이 <see langword="ByRef" /> 매개 변수로 처리됨을 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;c&gt;ParameterExpression&lt;/c&gt; is a &lt;see langword=&quot;ByRef&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 <c>system.linq.expressions.parameterexpression&gt;</c> 가 <see langword="ByRef" /> 매개 변수 이면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary vsli:raw="Gets the name of the parameter or variable.">매개 변수 또는 변수의 이름을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the parameter.">매개 변수의 이름이 들어 있는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary vsli:raw="An expression that provides runtime read/write permission for variables.">변수에 대한 런타임 읽기/쓰기 권한을 제공하는 식입니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary vsli:raw="The variables or parameters to which to provide runtime access.">런타임 액세스를 제공할 변수 또는 매개 변수입니다.</summary>
      <returns vsli:raw="The read-only collection containing parameters that will be provided the runtime access.">런타임 액세스를 제공할 매개 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary vsli:raw="Represents one case of a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 case 하나를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary vsli:raw="Gets the body of this case.">이 case의 본문을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object that represents the body of the case block.">case 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary vsli:raw="Gets the values of this case. This case is selected for execution when the &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; matches any of these values.">이 case의 값을 가져옵니다. 이 case는 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />가 이러한 값과 일치할 때 실행되도록 선택됩니다.</summary>
      <returns vsli:raw="The read-only collection of the values for this case block.">이 case 블록에 대한 값의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="testValues" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.TestValues&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 속성입니다.</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.Body&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary vsli:raw="Represents a control expression that handles multiple selections by passing control to &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">제어를 <see cref="T:System.Linq.Expressions.SwitchCase" />로 전달하여 다중 선택을 처리하는 제어 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects for the switch.">switch에 대한 <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary vsli:raw="Gets the equality comparison method, if any.">같음 비교 메서드를 가져옵니다(있는 경우).</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the equality comparison method.">같음 비교 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary vsli:raw="Gets the test for the switch.">switch에 대한 테스트를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">switch에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary vsli:raw="Gets the test for the switch.">switch에 대한 테스트를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">switch에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="switchValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 속성입니다.</param>
      <param name="cases" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Cases&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 속성입니다.</param>
      <param name="defaultBody" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.DefaultBody&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary vsli:raw="Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.">소스 파일에 대한 디버깅 기호 정보를 내보내는 데 필요한 정보, 특히 파일 이름과 고유한 언어 식별자를 저장합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary vsli:raw="Returns the document type's unique identifier, if any.">문서 형식의 고유 식별자를 반환합니다(있는 경우). 기본값으로 텍스트 파일의 GUID로 설정됩니다.</summary>
      <returns vsli:raw="The document type's unique identifier. The default is the GUID for a text file.">문서 형식의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary vsli:raw="The source file name.">소스 파일 이름입니다.</summary>
      <returns vsli:raw="The string representing the source file name.">소스 파일 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary vsli:raw="Returns the language's unique identifier, if any.">언어의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns vsli:raw="The language's unique identifier.">언어의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary vsli:raw="Returns the language vendor's unique identifier, if any.">언어 공급업체의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns vsli:raw="The language vendor's unique identifier.">언어 공급업체의 고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary vsli:raw="Represents a try/catch/finally/fault block.">try/catch/finally/fault 블록을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">try 블록에 연결된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">try 블록에 연결된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Body&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 속성입니다.</param>
      <param name="handlers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Handlers&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 속성입니다.</param>
      <param name="finally" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Finally&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 속성입니다.</param>
      <param name="fault" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Fault&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary vsli:raw="Represents an operation between an expression and a type.">식과 형식 간의 연산을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary vsli:raw="Gets the expression operand of a type test operation.">형식 테스트 연산의 식 피연산자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression operand of a type test operation.">형식 테스트 연산의 식 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; represents.">이 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary vsli:raw="Gets the type operand of a type test operation.">형식 테스트 연산의 형식 피연산자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type operand of a type test operation.">형식 테스트 연산의 형식 피연산자를 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary vsli:raw="Represents an expression that has a unary operator.">단항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드가 리프트된 호출을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">연산자의 반환 형식이 nullable 형식으로 리프트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the unary operation.">단항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary vsli:raw="Gets the operand of the unary operation.">단항 연산의 피연산자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand of the unary operation.">단항 연산의 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary vsli:raw="Reduces the expression node to a simpler expression.">식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns vsli:raw="The reduced expression.">축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Type&quot; /&gt; that represents the static type of the expression.">식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="operand" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property of the result.">결과의 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성입니다.</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary vsli:raw="Represents the result of a sorting operation.">정렬 작업의 결과를 나타냅니다.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary vsli:raw="Represents the result of a sorting operation.">정렬 작업의 결과를 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The type of the content of the data source.">데이터 소스 콘텐츠의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.">데이터 형식이 지정되지 않은 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary vsli:raw="Gets the type of the element(s) that are returned when the expression tree associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; is executed.">
        <see cref="T:System.Linq.IQueryable" />의 이 인스턴스에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.">이 개체에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary vsli:raw="Gets the expression tree that is associated with the instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable" />의 인스턴스에 연결된 식 트리를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />의 이 인스턴스에 연결된 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary vsli:raw="Gets the query provider that is associated with this data source.">이 데이터 소스에 연결된 쿼리 공급자를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryProvider&quot; /&gt; that is associated with this data source.">이 데이터 소스에 연결된 <see cref="T:System.Linq.IQueryProvider" />입니다.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.">데이터 형식이 알려진 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of the data in the data source.">데이터 소스의 데이터 형식입니다.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary vsli:raw="Defines methods to create and execute queries that are described by an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object.">
        <see cref="T:System.Linq.IQueryable" /> 개체가 설명하는 쿼리를 만들고 실행하는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable" /> 개체를 생성합니다.</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that can evaluate the query represented by the specified expression tree.">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable`1" /> 개체를 생성합니다.</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of the &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that is returned.">반환되는 <see cref="T:System.Linq.IQueryable`1" />의 요소 형식입니다.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that can evaluate the query represented by the specified expression tree.">지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the query represented by a specified expression tree.">지정된 식 트리가 나타내는 쿼리를 실행합니다.</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <returns vsli:raw="The value that results from executing the specified query.">지정된 쿼리를 실행한 결과 값입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the strongly-typed query represented by a specified expression tree.">지정된 식 트리가 나타내는 강력한 형식의 쿼리를 실행합니다.</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TResult" vsli:raw="The type of the value that results from executing the query.">쿼리를 실행한 결과 값의 형식입니다.</typeparam>
      <returns vsli:raw="The value that results from executing the specified query.">지정된 쿼리를 실행한 결과 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary vsli:raw="A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.">동적 호출 사이트의 기본 클래스입니다. 이 형식은 동적 사이트 대상에 대한 매개 변수 형식으로 사용됩니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary vsli:raw="Class responsible for binding dynamic operations on the dynamic site.">동적 사이트에서 동적 연산을 바인딩하는 클래스입니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; object responsible for binding dynamic operations.">동적 연산을 바인딩하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates a call site with the given delegate type and binder.">지정된 대리자 형식 및 바인더를 사용하여 호출 사이트를 만듭니다.</summary>
      <param name="delegateType" vsli:raw="The call site delegate type.">호출 사이트의 대리자 형식입니다.</param>
      <param name="binder" vsli:raw="The call site binder.">호출 사이트의 바인더입니다.</param>
      <returns vsli:raw="The new call site.">새 호출 사이트입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary vsli:raw="Dynamic site type.">동적 사이트 형식입니다.</summary>
      <typeparam name="T" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.">이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더를 사용하여 초기화되는 동적 호출 사이트의 인스턴스를 만듭니다.</summary>
      <param name="binder" vsli:raw="The binder responsible for the runtime binding of the dynamic operations at this call site.">이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더입니다.</param>
      <returns vsli:raw="The new instance of dynamic call site.">동적 호출 사이트의 새 인스턴스입니다.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary vsli:raw="The Level 0 cache - a delegate specialized based on the site history.">수준 0 캐시 - 사이트 기록을 기준으로 특수화된 대리자입니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary vsli:raw="The update delegate. Called when the dynamic site experiences cache miss.">업데이트 대리자입니다. 동적 사이트에서 캐시가 누락되는 경우 호출됩니다.</summary>
      <returns vsli:raw="The update delegate.">업데이트 대리자입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary vsli:raw="Class responsible for runtime binding of the dynamic operations on the dynamic call site.">동적 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">동적 연산에 대한 인수 배열입니다.</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">동적 연산의 인수에서 테스트를 수행하고 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다. 이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary vsli:raw="Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.">하위 수준 런타임 바인딩 지원을 제공합니다. 클래스를 사용하여 이를 재정의하고 규칙 구현을 위한 대리자를 직접 제공할 수 있습니다. 이를 통해 디스크에 규칙을 저장하거나 런타임에서 특수화된 규칙을 사용할 수 있게 하거나 다른 캐싱 정책을 제공할 수 있습니다.</summary>
      <param name="site" vsli:raw="The CallSite the bind is being performed for.">바인드가 수행되는 CallSite입니다.</param>
      <param name="args" vsli:raw="The arguments for the binder.">바인더의 인수입니다.</param>
      <typeparam name="T" vsli:raw="The target type of the CallSite.">CallSite의 대상 형식입니다.</typeparam>
      <returns vsli:raw="A new delegate which replaces the CallSite Target.">CallSite 대상을 대체하는 새 대리자입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary vsli:raw="Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.">알려진 대상의 캐시에 대상을 추가합니다. 캐시된 대상은 새 규칙을 생성하기 위해 BindDelegate를 호출하기 전에 검색됩니다.</summary>
      <param name="target" vsli:raw="The target delegate to be added to the cache.">캐시에 추가될 대상 대리자입니다.</param>
      <typeparam name="T" vsli:raw="The type of target being added.">추가되는 대상의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary vsli:raw="Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">바인딩이 업데이트되도록 하는 데 사용할 수 있는 레이블을 가져옵니다. 식의 바인딩이 더 이상 유효하지 않음을 나타냅니다. 일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing a label that can be used to trigger the binding update.">바인딩 업데이트를 트리거하는 데 사용할 수 있는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary vsli:raw="Class that contains helper methods for DLR CallSites.">DLR CallSite에 대한 도우미 메서드가 들어 있는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary vsli:raw="Checks if a &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack.">
        <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하면 안 되는지 확인합니다.</summary>
      <param name="mb" vsli:raw="The input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt;.">입력 <see cref="T:System.Reflection.MethodBase" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack. Otherwise, &lt;see langword=&quot;false&quot; /&gt;.">입력 <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하면 안 되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary vsli:raw="Generates debug information for lambda expressions in an expression tree.">식 트리에 있는 람다 식의 디버그 정보를 생성합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DebugInfoGenerator&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary vsli:raw="Creates a program database (PDB) symbol generator.">PDB(프로그램 데이터베이스) 기호 생성기를 만듭니다.</summary>
      <returns vsli:raw="A PDB symbol generator.">PDB 기호 생성기입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Marks a sequence point in Microsoft intermediate language (MSIL) code.">MSIL(Microsoft Intermediate Language) 코드에 시퀀스 위치를 표시합니다.</summary>
      <param name="method" vsli:raw="The lambda expression that is generated.">생성되는 람다 식입니다.</param>
      <param name="ilOffset" vsli:raw="The offset within MSIL code at which to mark the sequence point.">MSIL 코드 내에서 시퀀스 위치를 표시할 오프셋입니다.</param>
      <param name="sequencePoint" vsli:raw="Debug information that corresponds to the sequence point.">시퀀스 위치에 해당하는 디버그 정보입니다.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary vsli:raw="Indicates that the use of &lt;see cref=&quot;T:System.Object&quot; /&gt; on a member is meant to be treated as a dynamically dispatched type.">멤버에서 <see cref="T:System.Object" />를 사용하면 동적으로 디스패치되는 형식으로 처리된다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="transformFlags" vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" /> 를 지정합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" /> 를 지정합니다.</summary>
      <returns vsli:raw="The list of &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences that are meant to be treated as a dynamically dispatched type.">동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" />의 목록입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary vsli:raw="Represents the values of run-time variables.">런타임 변수의 값을 나타냅니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary vsli:raw="Gets a count of the run-time variables.">런타임 변수의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of run-time variables.">런타임 변수의 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary vsli:raw="Gets the value of the run-time variable at the specified index.">지정된 인덱스 위치에서 런타임 변수의 값을 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the run-time variable whose value is to be returned.">값을 반환할 런타임 변수의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The value of the run-time variable.">런타임 변수의 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary vsli:raw="The builder for read only collection.">읽기 전용 컬렉션의 작성기입니다.</summary>
      <typeparam name="T" vsli:raw="The type of the collection element.">컬렉션 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, copying the contents of the given collection.">지정된 컬렉션의 콘텐츠를 복사하여 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다.</summary>
      <param name="collection" vsli:raw="Collection to copy elements from.">요소를 복사할 원본 컬렉션입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.">지정된 초기 용량으로 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다. 콘텐츠는 비어 있지만 작성기에서는 재할당을 요구하기 전에 지정된 수의 요소에 대한 공간을 예약해 둡니다.</summary>
      <param name="capacity" vsli:raw="Initial capacity.">초기 용량입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 항목을 추가합니다.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 추가할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary vsli:raw="Gets or sets the capacity of this &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 용량을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The capacity of this &lt;c&gt;ReadOnlyCollectionBuilder.&lt;/c&gt;">이 용량 <c>ReadOnlyCollectionBuilder 합니다.</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; contains a specific value.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item" vsli:raw="the object to locate in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 찾을 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" /> 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />입니다.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in the builder.">작성기에서 맨 처음 발견되는 특정 값의 인덱스를 반환합니다.</summary>
      <param name="item" vsli:raw="An item to search for.">검색할 항목입니다.</param>
      <returns vsli:raw="The index of the first occurrence of an item.">맨 처음 나타나는 항목의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; at the specified index.">항목을 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which item should be inserted.">항목을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 제거할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, false. This method also returns false if item is not found in the original &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">항목이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 제거되면 true이고, 그렇지 않으면 false입니다. 이 메서드는 원래 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 항목을 찾지 못한 경우에도 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; item at the specified index.">지정한 인덱스에서 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">전체 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to a new array.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소를 새 배열에 복사합니다.</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 복사본을 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; containing all of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, avoiding copying the elements to the new array if possible. Resets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; after the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; has been created.">가능하면 요소를 새 배열로 복사하지 않고 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />의 모든 요소를 포함하는 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />을 만듭니다. <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />을 만든 후에 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />을 다시 설정합니다.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary vsli:raw="Represents a cache of runtime binding rules.">런타임 바인딩 규칙의 캐시를 나타냅니다.</summary>
      <typeparam name="T" vsli:raw="The delegate type.">대리자 형식입니다.</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary vsli:raw="Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的二元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation" vsli:raw="The binary operation kind.">二元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">執行動態二元運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動態作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動態運算的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">動態二元運算的目標。</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">動態二元運算的右運算元。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">動態二元運算的目標。</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">動態二元運算的右運算元。</param>
      <param name="errorSuggestion" vsli:raw="The binding result if the binding fails, or null.">如果繫結失敗，傳回繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary vsli:raw="The binary operation kind.">二元運算類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object representing the kind of binary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件，表示二元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The result type of the operation.">作業的結果型別。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary vsli:raw="Represents a set of binding restrictions on the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; under which the dynamic binding is valid.">表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 上的一組繫結限制，符合它的動態繫結即為有效的繫結。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary vsli:raw="Combines binding restrictions from the list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances into one set of restrictions.">將 <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體清單上的繫結限制結合成一組限制。</summary>
      <param name="contributingObjects" vsli:raw="The list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances from which to combine restrictions.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的清單，要從中結合限制。</param>
      <returns vsli:raw="The new set of binding restrictions.">一組新的繫結限制。</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary vsli:raw="Represents an empty set of binding restrictions. This field is read only.">表示一組空的繫結限制。 這個欄位是唯讀的。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for arbitrary immutable properties.">建立繫結限制，該限制會檢查運算式中是否有任意不可變屬性。</summary>
      <param name="expression" vsli:raw="The expression representing the restrictions.">表示限制的運算式。</param>
      <returns vsli:raw="The new binding restrictions.">新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for object instance identity.">建立繫結限制，該限制會檢查運算式中是否有物件執行個體識別。</summary>
      <param name="expression" vsli:raw="The expression to test.">要測試的運算式。</param>
      <param name="instance" vsli:raw="The exact object instance to test.">要測試的確切物件執行個體。</param>
      <returns vsli:raw="The new binding restrictions.">新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates the binding restriction that check the expression for runtime type identity.">建立繫結限制，該限制會檢查運算式中是否有執行階段型別識別。</summary>
      <param name="expression" vsli:raw="The expression to test.">要測試的運算式。</param>
      <param name="type" vsli:raw="The exact type to test.">要測試的確切型別。</param>
      <returns vsli:raw="The new binding restrictions.">新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Merges the set of binding restrictions with the current binding restrictions.">將此繫結限制集與目前的繫結限制合併。</summary>
      <param name="restrictions" vsli:raw="The set of restrictions with which to merge the current binding restrictions.">與目前繫結限制合併的繫結限制集。</param>
      <returns vsli:raw="The new set of binding restrictions.">一組新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary vsli:raw="Creates the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the binding restrictions.">建立表示繫結限制的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns vsli:raw="The expression tree representing the restrictions.">表示限制的運算式樹狀架構。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary vsli:raw="Describes arguments in the dynamic binding process.">描述動態繫結處理序中的引數。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Creates a new CallInfo that represents arguments in the dynamic binding process.">建立新的 CallInfo，表示動態繫結處理序中的引數。</summary>
      <param name="argCount" vsli:raw="The number of arguments.">引數數目。</param>
      <param name="argNames" vsli:raw="The argument names.">引數名稱。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary vsli:raw="Creates a new &lt;c&gt;PositionalArgumentInfo&lt;/c&gt;.">建立新的 <c>PositionalArgumentInfo</c>。</summary>
      <param name="argCount" vsli:raw="The number of arguments.">引數數目。</param>
      <param name="argNames" vsli:raw="The argument names.">引數名稱。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary vsli:raw="The number of arguments.">引數數目。</summary>
      <returns vsli:raw="The number of arguments.">引數數目。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary vsli:raw="The argument names.">引數名稱。</summary>
      <returns vsli:raw="The read-only collection of argument names.">引數名稱的唯讀集合。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified CallInfo instance is considered equal to the current.">判斷指定的 CallInfo 執行個體是否視為等於目前的執行個體。</summary>
      <param name="obj" vsli:raw="The instance of &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt; to compare with the current instance.">要與目前執行個體比較的 <see cref="T:System.Dynamic.CallInfo" /> 執行個體。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified instance is equal to the current one otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的執行個體等於目前的執行個體，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">做為目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊函式。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary vsli:raw="Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的轉換動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新執行個體。</summary>
      <param name="type" vsli:raw="The type to convert to.">要轉換的目標類型。</param>
      <param name="explicit" vsli:raw="Is true if the conversion should consider explicit conversions; otherwise, false.">如果轉換應該考慮明確轉換，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic convert operation.">執行動態轉換作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動態轉換作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic convert operation.">動態轉換作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary vsli:raw="Gets the value indicating if the conversion should consider explicit conversions.">取得值，這個值表示轉換是否應該考慮明確轉換。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an explicit conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果有明確的轉換, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動態轉換作業的目標。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動態轉換作業的目標。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary vsli:raw="The type to convert to.">要轉換的目標類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type to convert to.">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary vsli:raw="Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態建立作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的新執行個體。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation.">執行動態建立作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動態建立作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic create operation.">動態建立作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動態建立作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">動態建立作業的引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動態建立作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">動態建立作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary vsli:raw="Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態刪除索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">執行動態刪除索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動態刪除索引作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete index operation.">動態刪除索引作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動態刪除索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">動態刪除索引作業的引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動態刪除索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">動態刪除索引作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary vsli:raw="Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態刪除成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member to delete.">要刪除的成員名稱。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">執行動態刪除成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動態刪除成員作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete member operation.">動態刪除成員作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動態刪除成員作業的目標。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動態刪除成員作業的目標。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string comparison should ignore case; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果字串比較應該忽略大小寫, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to delete.">取得要刪除的成員名稱。</summary>
      <returns vsli:raw="The name of the member to delete.">要刪除的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary vsli:raw="Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.">表示動態繫結以及參與動態繫結之物件的繫結邏輯。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">繫結限制集，符合它的繫結即為有效的繫結。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">繫結限制集，符合它的繫結即為有效的繫結。</param>
      <param name="value" vsli:raw="The runtime value represented by the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">由 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">執行動態二元運算的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="arg" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the right hand side of the binary operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 的執行個體，表示二元運算的右邊。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary vsli:raw="Performs the binding of the dynamic conversion operation.">執行動態轉換運算的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.ConvertBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create instance operation.">執行動態建立執行個體作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the create instance operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於建立執行個體作業的引數) 的陣列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">執行動態刪除索引作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the delete index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於刪除索引作業的索引) 的陣列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">執行動態刪除成員作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.DeleteMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">執行動態取得索引作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.GetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the get index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於取得索引作業的索引) 的陣列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">執行動態取得成員作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.GetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">執行動態叫用作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.InvokeBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於叫用作業的引數) 的陣列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">執行動態叫用成員作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke member operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於叫用成員作業的引數) 的陣列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">執行動態設定索引作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.SetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the set index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於設定索引作業的索引) 的陣列。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定索引作業的值。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">執行動態設定成員作業的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.SetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set member operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定成員作業的值。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">執行動態一元運算的繫結。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.UnaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">
        <see cref="T:System.Dynamic.UnaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a meta-object for the specified object.">為指定的物件建立中繼物件。</summary>
      <param name="value" vsli:raw="The object to get a meta-object for.">要取得中繼物件的物件。</param>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns vsli:raw="If the given object implements &lt;see cref=&quot;T:System.Dynamic.IDynamicMetaObjectProvider&quot; /&gt; and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by &lt;see cref=&quot;M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)&quot; /&gt;. Otherwise a plain new meta-object with no restrictions is created and returned.">如果指定的物件實作 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> 而且不是來自目前 AppDomain 之外的遠端物件，則傳回該物件的特定中繼物件 (由 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> 所傳回)。 否則會建立及傳回不含任何限制的全新中繼物件。</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary vsli:raw="Represents an empty array of type &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;. This field is read only.">表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類型的空陣列。 這個欄位是唯讀的。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">傳回所有動態成員名稱的列舉型別。</summary>
      <returns vsli:raw="The list of dynamic member names.">動態成員名稱的清單。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value.">取得值，這個值表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 是否有執行階段值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果具有運行時間值, 則為, <see langword="false" />否則為。 <see cref="T:System.Dynamic.DynamicMetaObject" /></returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary vsli:raw="Gets the limit type of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">取得 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的限制型別。</summary>
      <returns vsli:raw="&lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.RuntimeType&quot; /&gt; if runtime value is available, a type of the &lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.Expression&quot; /&gt; otherwise.">如果有執行階段值則為 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />，否則為 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 型別。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary vsli:raw="The set of binding restrictions under which the binding is valid.">繫結限制集，符合它的繫結即為有效的繫結。</summary>
      <returns vsli:raw="The set of binding restrictions.">繫結限制集。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has no value associated with it.">取得執行階段值的 <see cref="T:System.Type" />，如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 沒有相關值則為 null。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null.">執行階段值的 <see cref="T:System.Type" /> 或 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">由這個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</summary>
      <returns vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">由這個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary vsli:raw="The dynamic call site binder that participates in the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; binding protocol.">參與 <see cref="T:System.Dynamic.DynamicMetaObject" /> 繫結通訊協定的動態呼叫位置繫結器。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObjectBinder&quot; /&gt; class.">初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic operation.">在衍生類別中覆寫時，執行動態作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動態作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動態運算的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">在一組引數上執行動態作業的執行階段繫結。</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">動態作業的引數陣列。</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">LabelTarget，用來傳回動態繫結的結果。</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。 如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動態作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動態運算的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動態運算的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary vsli:raw="Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">取得會導致繫結更新的運算式。 它表示運算式的繫結不再是有效。 這通常用於在動態物件的「版本」已變更時。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the resulting expression; any type is allowed.">產生之運算式的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性；允許任何型別。</param>
      <returns vsli:raw="The update expression.">更新的運算式。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary vsli:raw="Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.">提供基底類別，以便指定在執行階段時的動態行為。 此類別必須以讓其他類別繼承的方式使用，您無法直接將它執行個體化。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary vsli:raw="Enables derived types to initialize a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; type.">讓衍生型別得以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 型別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">傳回所有動態成員名稱的列舉型別。</summary>
      <returns vsli:raw="A sequence that contains dynamic member names.">包含動態成員名稱的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; that dispatches to the dynamic virtual methods. The object can be encapsulated inside another &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.">提供分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。 此物件可以封裝在另一個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 內部，以提供個別動作的自訂行為。 這個方法支援語言實作者適用的動態語言執行階段基礎結構，但不建議直接在程式碼中使用。</summary>
      <param name="parameter" vsli:raw="The expression that represents &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to dispatch to the dynamic virtual methods.">運算式，表示分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns vsli:raw="An object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary vsli:raw="Provides implementation for binary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as addition and multiplication.">提供二進位運算的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定加法和乘法這類運算的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the binary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &lt;c&gt;ExpressionType.Add&lt;/c&gt;.">提供二進位運算的相關資訊。 <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。 例如，對於 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 <c>ExpressionType.Add</c>。</param>
      <param name="arg" vsli:raw="The right operand for the binary operation. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;arg&quot; /&gt; is equal to &lt;c&gt;second&lt;/c&gt;.">二進位運算的右運算元。 例如，針對 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<paramref name="arg" /> 等於 <c>second</c>。</param>
      <param name="result" vsli:raw="The result of the binary operation.">二進位運算的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for type conversion operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that convert an object from one type to another.">提供型別轉換作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定物件型別轉換作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the conversion operation. The &lt;c&gt;binder.Type&lt;/c&gt; property provides the type to which the object must be converted. For example, for the statement &lt;c&gt;(String)sampleObject&lt;/c&gt; in C# (&lt;c&gt;CType(sampleObject, Type)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Type&lt;/c&gt; returns the &lt;see cref=&quot;T:System.String&quot; /&gt; type. The &lt;c&gt;binder.Explicit&lt;/c&gt; property provides information about the kind of conversion that occurs. It returns &lt;see langword=&quot;true&quot; /&gt; for explicit conversion and &lt;see langword=&quot;false&quot; /&gt; for implicit conversion.">提供轉換作業的相關資訊。 <c>binder.Type</c> 屬性提供物件必須轉換成的目標類型。 例如，對於 C# 中的 <c>(String)sampleObject</c> (Visual Basic 中的 <c>CType(sampleObject, Type)</c>) 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Type</c> 會傳回 <see cref="T:System.String" /> 類型。 <c>binder.Explicit</c> 屬性提供發生之轉換類型的資訊。 如果是明確轉換則會傳回 <see langword="true" />，如果是隱含轉換則會傳回 <see langword="false" />。</param>
      <param name="result" vsli:raw="The result of the type conversion operation.">型別轉換作業的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.">提供作業的實作，這些作業會初始化動態物件的新執行個體。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder" vsli:raw="Provides information about the initialization operation.">提供初始設定作業的相關資訊。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during initialization. For example, for the &lt;c&gt;new SampleType(100)&lt;/c&gt; operation, where &lt;c&gt;SampleType&lt;/c&gt; is the type derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">在初始設定期間傳遞給物件的引數。 例如，對於 <c>new SampleType(100)</c> 運算 (其中 <c>SampleType</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類型)，<c>args[0]</c> 等於 100。</param>
      <param name="result" vsli:raw="The result of the initialization.">初始設定的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary vsli:raw="Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.">提供依索引刪除物件之作業的實作。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">提供刪除的相關資訊。</param>
      <param name="indexes" vsli:raw="The indexes to be deleted.">要刪除的索引。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.">提供刪除物件成員之作業的實作。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">提供刪除的相關資訊。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for indexing operations.">提供依索引取得值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定索引作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">提供作業的相關資訊。</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3]&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">用於作業的索引。 例如，對於 C# 中的 <c>sampleObject[3]</c> (Visual Basic 中的 <c>sampleObject(3)</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</param>
      <param name="result" vsli:raw="The result of the index operation.">索引作業的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大部分情況下，會擲回執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as getting a value for a property.">提供取得成員值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定取得屬性值這類作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the &lt;c&gt;Console.WriteLine(sampleObject.SampleProperty)&lt;/c&gt; statement, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">提供已呼叫動態作業之物件的相關資訊。 <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。 例如，對於 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="result" vsli:raw="The result of the get operation. For example, if the method is called for a property, you can assign the property value to &lt;paramref name=&quot;result&quot; /&gt;.">取得作業的結果。 例如，如果是針對屬性呼叫這個方法，您可以將屬性值指派給 <paramref name="result" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大部分情況下，會擲回執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke an object. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.">提供叫用物件之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定叫用物件或委派這類作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the invoke operation.">提供叫用作業的相關資訊。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during the invoke operation. For example, for the &lt;c&gt;sampleObject(100)&lt;/c&gt; operation, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">在叫用作業期間傳遞給物件的引數。 例如，對於 <c>sampleObject(100)</c> 作業 (其中<c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args[0]</c> 等於 100。</param>
      <param name="result" vsli:raw="The result of the object invocation.">物件引動過程的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke a member. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as calling a method.">提供叫用成員之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定呼叫方法這類作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleMethod&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">提供動態作業的相關資訊。 <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。 例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleMethod"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object member during the invoke operation. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">在叫用作業期間傳遞給物件成員的引數。 例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args [0]</c> 等於 100。</param>
      <param name="result" vsli:raw="The result of the member invocation.">成員引動過程的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that access objects by a specified index.">提供依索引設定值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定依指定之索引存取物件之作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">提供作業的相關資訊。</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">用於作業的索引。 例如，對於 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</param>
      <param name="value" vsli:raw="The value to set to the object that has the specified index. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;value&quot; /&gt; is equal to 10.">要設定給具有所指定索引之物件的值。 例如，針對 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<paramref name="value" /> 等於 10。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as setting a value for a property.">提供設定成員值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定設定屬性值這類作業的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member to which the value is being assigned. For example, for the statement &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">提供已呼叫動態作業之物件的相關資訊。 <c>binder.Name</c> 屬性會提供獲得指派該值之成員的名稱。 例如，對於 <c>sampleObject.SampleProperty = "Test"</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="value" vsli:raw="The value to set to the member. For example, for &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, the &lt;paramref name=&quot;value&quot; /&gt; is &quot;Test&quot;.">要設定給成員的值。 例如，針對 <c>sampleObject.SampleProperty = "Test"</c> (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<paramref name="value" /> 會傳回 "Test"。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for unary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.">提供一元運算的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定負號、遞增或遞減這類運算的動態行為。</summary>
      <param name="binder" vsli:raw="Provides information about the unary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;negativeNumber = -number&lt;/c&gt; statement, where &lt;c&gt;number&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &quot;Negate&quot;.">提供一元運算的相關資訊。 <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。 例如，對於 <c>negativeNumber = -number</c> 陳述式 (其中 <c>number</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 "Negate"。</param>
      <param name="result" vsli:raw="The result of the unary operation.">一元運算的結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary vsli:raw="Represents an object whose members can be dynamically added and removed at run time.">表示物件，此物件的成員可以在執行階段時動態加入和移除。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary vsli:raw="Initializes a new &lt;see langword=&quot;ExpandoObject&quot; /&gt; that does not have members.">初始化沒有成員的新 <see langword="ExpandoObject" />。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">當屬性值變更時發生。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.">提供的 MetaObject 將會分派給動態虛擬方法。 此物件可以封裝在另一個 MetaObject 內部，以提供個別動作的自訂行為。</summary>
      <param name="parameter" vsli:raw="The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.">運算式，表示分派給動態虛擬方法的 MetaObject。</param>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary vsli:raw="Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態取得索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">執行動態取得索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動態取得索引作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get index operation.">動態取得索引作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動態取得索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">動態取得索引作業的引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動態取得索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">動態取得索引作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary vsli:raw="Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態取得成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">要取得的成員名稱。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">執行動態取得成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動態取得成員作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get member operation.">動態取得成員作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動態取得成員作業的目標。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動態取得成員作業的目標。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果忽略大小寫, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">取得要獲得的成員名稱。</summary>
      <returns vsli:raw="The name of the member to obtain.">要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary vsli:raw="Represents a dynamic object, that can have its operations bound at runtime.">表示可在執行階段繫結作業的動態物件。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; responsible for binding operations performed on this object.">傳回負責在此物件上執行繫結作業的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <param name="parameter" vsli:raw="The expression tree representation of the runtime value.">執行階段值的運算式樹狀架構表示。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to bind this object.">要繫結此物件的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary vsli:raw="Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.">表示動態取得成員作業的相關資訊，這項資料表示該取得成員是否要在屬性執行取得作業時叫用這些屬性。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary vsli:raw="Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.">取得值，這個值表示此取得成員作業是否應該在屬性執行取得作業時叫用這些屬性。 當這個介面不存在時，預設值為 true。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this get member operation should invoke properties when they perform the get operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果此「取得成員」作業在執行「取得」作業時應該叫用屬性, 則為。否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary vsli:raw="Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的叫用動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新執行個體。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">執行動態叫用作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動態叫用作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke operation.">動態叫用作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動態叫用作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動態叫用作業的引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動態叫用作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動態叫用作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary vsli:raw="Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的叫用成員動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member to invoke.">要叫用之成員的名稱。</param>
      <param name="ignoreCase" vsli:raw="true if the name should be matched ignoring case; false otherwise.">如果名稱比對應該忽略大小寫，則為 true，否則為 false。</param>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">執行動態叫用成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動態叫用成員作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke member operation.">動態叫用成員作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動態叫用作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動態叫用作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動態叫用成員作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">動態叫用成員作業的引數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動態叫用成員作業的目標。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">動態叫用成員作業的引數。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果忽略大小寫, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to invoke.">取得要叫用的成員名稱。</summary>
      <returns vsli:raw="The name of the member to invoke.">要叫用之成員的名稱。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary vsli:raw="Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的動態設定索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">執行動態設定索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動態定索引作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set index operation.">動態設定索引作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">取得位於呼叫位置的引數簽章。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動態定索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">動態設定索引作業的引數。</param>
      <param name="value" vsli:raw="The value to set to the collection.">要設定給集合的值。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動態定索引作業的目標。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">動態設定索引作業的引數。</param>
      <param name="value" vsli:raw="The value to set to the collection.">要設定給集合的值。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary vsli:raw="Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.">代表呼叫位置上的動態設定成員作業，並提供繫結語意和作業的詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt;.">初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">要取得的成員名稱。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">執行動態設定成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動態設定成員作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set member operation.">動態設定成員作業的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動態設定成員作業的目標。</param>
      <param name="value" vsli:raw="The value to set to the member.">要設定給成員的值。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動態設定成員作業的目標。</param>
      <param name="value" vsli:raw="The value to set to the member.">要設定給成員的值。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">繫結失敗時要使用的繫結結果或 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果忽略大小寫, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">取得要獲得的成員名稱。</summary>
      <returns vsli:raw="The name of the member to obtain.">要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary vsli:raw="Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.">表示呼叫位置上的一元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation" vsli:raw="The unary operation kind.">一元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">執行動態一元運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動態作業的目標。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動態運算的引數陣列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">動態一元運算的目標。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">動態一元運算的目標。</param>
      <param name="errorSuggestion" vsli:raw="The binding result in case the binding fails, or null.">如果繫結失敗，則傳回繫結結果，否則為 null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary vsli:raw="The unary operation kind.">一元運算類型。</summary>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents the unary operation kind.">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 的物件，表示一元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">作業的結果型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary vsli:raw="Represents an expression that has a binary operator.">代表具有二元運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the expression tree node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果可以減少運算式樹狀架構節點, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary vsli:raw="Gets the type conversion function that is used by a coalescing or compound assignment operation.">取得聯合或複合指派運算所使用的型別轉換函式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function.">代表類型轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」呼叫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果節點表示消除呼叫，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」呼叫，該運算子的傳回型別對可為 Null 的型別已消除。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果運算子的傳回型別對可為 null 的型別消除，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary vsli:raw="Gets the left operand of the binary operation.">取得二元作業的左運算元。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand of the binary operation.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的左運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the binary operation.">取得二元作業的實作方法。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary vsli:raw="Gets the right operand of the binary operation.">取得二元作業的右運算元。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand of the binary operation.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的右運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性。</param>
      <param name="conversion" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary vsli:raw="Represents a block that contains a sequence of expressions where variables can be defined.">表示區塊，其中包含可定義變數的運算式序列。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary vsli:raw="Gets the expressions in this block.">取得這個區塊中的運算式。</summary>
      <returns vsli:raw="The read-only collection containing all the expressions in this block.">唯讀集合，包含這個區塊中的所有運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary vsli:raw="Gets the last expression in this block.">取得這個區塊中的最後一個運算式。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the last expression in this block.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示這個區塊中的最後一個運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Variables&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 屬性。</param>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Expressions&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 屬性。</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">如果沒有變更任何子系則為這個運算式，否則為具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary vsli:raw="Gets the variables defined in this block.">取得這個區塊中定義的變數。</summary>
      <returns vsli:raw="The read-only collection containing all the variables defined in this block.">唯讀集合，包含這個區塊中定義的所有變數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary vsli:raw="Represents a catch statement in a try block.">表示 try 區塊中的 catch 陳述式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary vsli:raw="Gets the body of the catch block.">取得 catch 區塊的主體。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the catch body.">表示 catch 主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary vsli:raw="Gets the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">取得 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary vsli:raw="Gets the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">取得這個處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">
        <see cref="T:System.Type" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variable" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Variable&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 屬性。</param>
      <param name="filter" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Filter&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 屬性。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Body&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">取得這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; object representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary vsli:raw="Represents an expression that has a conditional operator.">代表具有條件運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;false&quot; /&gt;.">如果測試評估為 <see langword="false" />，則取得運算式來執行。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 <see langword="false" />)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;true&quot; /&gt;.">如果測試評估為 <see langword="true" />，則取得運算式來執行。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 <see langword="true" />)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary vsli:raw="Gets the test of the conditional operation.">取得條件運算的測試。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the test of the conditional operation.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示條件運算的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，則會傳回這個運算式。</summary>
      <param name="test" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性。</param>
      <param name="ifTrue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性。</param>
      <param name="ifFalse" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性。</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">如果沒有變更任何子系則為這個運算式，否則為具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary vsli:raw="Represents an expression that has a constant value.">代表具有常數值的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary vsli:raw="Gets the value of the constant expression.">取得常數運算式的值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; equal to the value of the represented expression.">
        <see cref="T:System.Object" /> 等於表示之運算式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary vsli:raw="Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.">發出或清除偵錯資訊的序列點。 這可讓偵錯工具在偵錯時反白顯示正確的原始程式碼。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">取得表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary vsli:raw="Gets the end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。</summary>
      <returns vsli:raw="The number of the end column of the code that was used to generate the wrapped expression.">用來產生包裝運算式的程式碼結尾欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary vsli:raw="Gets the end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。</summary>
      <returns vsli:raw="The number of the end line of the code that was used to generate the wrapped expression.">用來產生包裝運算式的程式碼結尾行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary vsli:raw="Gets the value to indicate if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point.">取得值，這個值表示 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用來清除序列點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果是用於清除序列點, 則為, <see langword="false" />否則為。 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary vsli:raw="Gets the start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。</summary>
      <returns vsli:raw="The number of the start column of the code that was used to generate the wrapped expression.">用來產生包裝運算式的程式碼起始欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary vsli:raw="Gets the start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns vsli:raw="The number of the start line of the code that was used to generate the wrapped expression.">用來產生包裝運算式的程式碼起始行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DebugInfoExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary vsli:raw="Represents the default value of a type or an empty expression.">表示型別的預設值或空運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DefaultExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary vsli:raw="Represents a dynamic operation.">表示動態運算。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the dynamic operation.">取得動態運算的引數。</summary>
      <returns vsli:raw="The read-only collections containing the arguments to the dynamic operation.">包含動態運算引數的唯讀集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">取得 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，用來判斷動態網站的執行階段行為。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，會判斷動態網站的執行階段行為。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary vsli:raw="Gets the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">取得 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用委派的型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用委派的型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">傳遞至動態運算的第四個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">動態運算的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和兩個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">傳遞至動態運算的第四個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回運算式樹狀節點的引數數目。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回位於索引的引數，如果索引超出範圍則擲回引數。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">選擇性地建立 CallSite，並針對 DynamicExpression 的多型內嵌快取傳回 CallSite。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Object&quot; /&gt;.">傳回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrite this node replacing the dynamic expression's arguments with the provided values. The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression. You should not use this type. It is only public due to assembly refactoring, and it is used internally for performance optimizations. This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">重寫這個節點，以提供的值取代動態運算式的引數。 <paramref name="args" /> 的數目必須符合目前的運算式數目。 您不應該使用這個類型。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。 這個 Helper 方法可在呼叫位置所使用之 DynamicExpression 的衍生特定實作類別之外重寫節點。</summary>
      <param name="args" vsli:raw="The arguments.">引數。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the rewritten expression.">傳回重寫的運算式 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Compares the value sent to the parameter, &lt;paramref name=&quot;arguments&quot; /&gt;, to the &lt;see langword=&quot;Arguments&quot; /&gt; property of the current instance of &lt;see langword=&quot;DynamicExpression&quot; /&gt;. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new &lt;see langword=&quot;DynamicExpression&quot; /&gt; instance is returned that is identical to the current instance except that the &lt;see langword=&quot;Arguments&quot; /&gt; property is set to the value of parameter &lt;paramref name=&quot;arguments&quot; /&gt;.">將傳送至參數 <paramref name="arguments" /> 的值與 <see langword="Arguments" /> 目前執行個體的 <see langword="DynamicExpression" /> 屬性相比較。 如果參數值和屬性值相等，則會傳回目前執行個體。 如果它們不相等，則會傳回新的 <see langword="DynamicExpression" /> 執行個體，這個執行個體與目前的執行個體完全相同，但 <see langword="Arguments" /> 屬性設定為參數 <paramref name="arguments" /> 的值例外。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for dynamic expression trees.">代表動態運算式樹狀架構的造訪者或重新寫入器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpressionVisitor&quot; /&gt;.">初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回 <see cref="T:System.Linq.Expressions.Expression" />，修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary vsli:raw="Represents an initializer for a single element of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">表示 <see cref="T:System.Collections.IEnumerable" /> 集合中單一項目的初始設定式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary vsli:raw="Gets the instance method that is used to add an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">取得可用來將項目加入 <see cref="T:System.Collections.IEnumerable" /> 集合的執行個體方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that adds an element to a collection.">
        <see cref="T:System.Reflection.MethodInfo" />，代表會將項目加入集合的執行個體方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary vsli:raw="Gets the collection of arguments that are passed to a method that adds an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">取得引數集合，這些引數會傳遞到將項目加入至 <see cref="T:System.Collections.IEnumerable" /> 集合的方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments for a method that adds an element to a collection.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示將項目加入至集合之方法的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary vsli:raw="Returns a textual representation of an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">傳回 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary vsli:raw="Provides the base class from which the classes that represent expression tree nodes are derived. It also contains &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) factory methods to create the various node types. This is an &lt;see langword=&quot;abstract&quot; /&gt; class.">提供基底類別，表示運算式樹狀架構節點的類別可由此基底類別衍生。 它也包含 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) Factory 方法來建立各種節點類型。 這是 <see langword="abstract" /> 類別。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary vsli:raw="Constructs a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">建構 <see cref="T:System.Linq.Expressions.Expression" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; class.">初始化 <see cref="T:System.Linq.Expressions.Expression" /> 類別的新執行個體。</summary>
      <param name="nodeType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; to set as the node type.">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 可設定為節點類型。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術加法運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Addition 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術加法運算。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術加法運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Addition 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術加法運算。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation.">建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="AND" />。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="AND" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation. The implementing method can be specified.">建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="AND" />。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="AND" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="AND" /> 時才求第二個運算元之值的 <see langword="true" /> 條件運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="AND" /> 運算子。  
-或- 
 <paramref name="left" />.Type 和 <paramref name="right" />.Type 是不相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表只在第一個運算元解析為 true 時才評估第二個運算元的條件 <see langword="AND" /> 運算。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="AND" /> 運算子。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />，且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access a multidimensional array.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取多維陣列。</summary>
      <param name="array" vsli:raw="An expression that represents the multidimensional array.">表示多維陣列的運算式。</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; containing expressions used to index the array.">包含用於對陣列進行索引之運算式的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access an array.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取陣列。</summary>
      <param name="array" vsli:raw="An expression representing the array to index.">表示要編制索引之陣列的運算式。</param>
      <param name="indexes" vsli:raw="An array that contains expressions used to index the array.">包含用於對陣列進行索引之運算式的陣列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to an array of rank more than one.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表將陣列索引運算子套用到陣序規範大於 1 的陣列。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type 不代表陣列類型。  
-或- 
<paramref name="array" />.Type 的陣序規範不符合 <paramref name="indexes" /> 中的項目數。  
-或- 
<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents applying an array index operator to an array of rank one.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表將陣列索引運算子套用到陣序規範 1 的陣列。</summary>
      <param name="array" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayIndex&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;index&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 或 <paramref name="index" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt;.Type represents an array type whose rank is not 1.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt;.Type does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type 不代表陣列類型。  
-或- 
 <paramref name="array" />.Type 代表其陣序規範不為 1 的陣列類型。  
-或- 
 <paramref name="index" />.Type 不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to a multidimensional array.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表將陣列索引運算子套用到多維陣列。</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; instances - indexes for the array index operation.">
        <see cref="T:System.Linq.Expressions.Expression" /> 執行個體 (用於陣列索引運算的索引) 的陣列。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type 不代表陣列類型。  
-或- 
<paramref name="array" />.Type 的陣序規範不符合 <paramref name="indexes" /> 中的項目數。  
-或- 
<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression for obtaining the length of a one-dimensional array.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表用於取得一維陣列長度的運算式。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayLength&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to &lt;paramref name=&quot;array&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性等於 <paramref name="array" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.">
        <paramref name="array" />.Type 不代表陣列類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an assignment operation.">建立代表指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Assign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a field or property.">建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，代表初始化欄位或屬性。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 或 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property represented by &lt;paramref name=&quot;member&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> 不代表欄位或屬性。  
-或- 
<paramref name="member" /> 所表示的屬性沒有 <see langword="set" /> 存取子。  
-或- 
 無法將 <paramref name="expression" />.Type 指派給 <paramref name="member" /> 代表的欄位或屬性類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a member by using a property accessor method.">建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，代表使用屬性存取子方法初始化成員。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表在 <paramref name="propertyAccessor" /> 中存取的屬性，以及將 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為 <paramref name="expression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property accessed by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。  
-或- 
<paramref name="propertyAccessor" /> 所存取的屬性沒有 <see langword="set" /> 存取子。  
-或- 
 無法將 <paramref name="expression" />.Type 指派給 <paramref name="member" /> 代表的欄位或屬性類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="variables" vsli:raw="The variables in the block.">區塊中的變數。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="variables" vsli:raw="The variables in the block.">區塊中的變數。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains two expressions and has no variables.">建立包含兩個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">區塊中的第一個運算式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">區塊中的第二個運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains three expressions and has no variables.">建立包含三個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">區塊中的第一個運算式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">區塊中的第二個運算式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">區塊中的第三個運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains four expressions and has no variables.">建立包含四個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">區塊中的第一個運算式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">區塊中的第二個運算式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">區塊中的第三個運算式。</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">區塊中的第四個運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains five expressions and has no variables.">建立包含五個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">區塊中的第一個運算式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">區塊中的第二個運算式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">區塊中的第三個運算式。</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">區塊中的第四個運算式。</param>
      <param name="arg4" vsli:raw="The fifth expression in the block.">區塊中的第五個運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">建立包含指定的運算式、有指定之結果類型、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type" vsli:raw="The result type of the block.">區塊的結果類型。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type" vsli:raw="The result type of the block.">區塊的結果類型。</param>
      <param name="variables" vsli:raw="The variables in the block.">區塊中的變數。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type" vsli:raw="The result type of the block.">區塊的結果類型。</param>
      <param name="variables" vsli:raw="The variables in the block.">區塊中的變數。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">建立包含指定的運算式、有指定之結果類型、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type" vsli:raw="The result type of the block.">區塊的結果類型。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">區塊中的運算式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement.">建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement. The value passed to the label upon jumping can be specified.">建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type. The value passed to the label upon jumping can be specified.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 break 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 break 陳述式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes no arguments.">建立代表呼叫不採用任何引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法會傳遞 <see langword="Shared" />)。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" /> 為 <see langword="null" />。  
-或- 
 <paramref name="instance" /> 為 <see langword="null" /> ， <paramref name="method" /> 則代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">建立代表呼叫至採用引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (針對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法傳遞 <see langword="Shared" />)。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" /> 為 <see langword="null" />。  
-或- 
 <paramref name="instance" /> 為 <see langword="null" /> ， <paramref name="method" /> 則代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。  
-或- 
<paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。  
-或- 
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes two arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用兩個引數的方法。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">為執行個體呼叫指定執行個體的 <see cref="T:System.Linq.Expressions.Expression" />。 (對靜態方法 (在 Visual Basic 中為共用方法) 傳遞 Null)。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes three arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用三個引數的方法。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">為執行個體呼叫指定執行個體的 <see cref="T:System.Linq.Expressions.Expression" />。 (對靜態方法 (在 Visual Basic 中為共用方法) 傳遞 Null)。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">建立代表呼叫至採用引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法會傳遞 <see langword="Shared" />)。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and one or more of its elements is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />。  
-或- 
 <paramref name="instance" /> 為 <see langword="null" />，<paramref name="method" /> 則代表執行個體方法。  
-或- 
 <paramref name="arguments" /> 不是 <see langword="null" />，且它的一或多個子項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。  
-或- 
<paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。  
-或- 
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method by calling the appropriate factory method.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表透過呼叫適當的 Factory 方法來呼叫方法。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property value will be searched for a specific method.">
        <see cref="T:System.Linq.Expressions.Expression" />，將搜尋其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性值中的特定方法。</param>
      <param name="methodName" vsli:raw="The name of the method.">方法的名稱。</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">
        <see cref="T:System.Type" /> 物件的陣列，這些物件可指定泛型方法的類型參數。 當 methodName 指定非泛型方法時，這個引數應該為 Null。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represents the arguments to the method.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，這個陣列代表方法的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to &lt;paramref name=&quot;instance&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified instance method, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; set to the specified arguments.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性等於 <paramref name="instance" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 設定為代表指定執行個體方法的 <see cref="T:System.Reflection.MethodInfo" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 設定為指定的引數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.">
        <paramref name="methodName" />.Type 或其基底類型中找不到名稱為 <paramref name="typeArguments" />、其類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="instance" /> 的方法。  
-或- 
<paramref name="methodName" />.Type 或其基底類型中找到多個名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="instance" /> 的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static (Shared in Visual Basic) method.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫靜態方法 (在 Visual Basic 中為共用方法)。</summary>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the call arguments.">
        <see cref="T:System.Linq.Expressions.Expression" /> 的集合，代表呼叫引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that takes one argument.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用一個引數的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes two arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用兩個引數的靜態方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes three arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用三個引數的靜態方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes four arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用四個引數的靜態方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">表示第四個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes five arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用五個引數的靜態方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">表示第四個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fifth argument.">表示第五個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that has arguments.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫有引數的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" />，代表 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法，將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。  
-或- 
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method by calling the appropriate factory method.">建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表透過呼叫適當的 Factory 方法來呼叫 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="type" vsli:raw="The type that contains the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method.">包含所指定 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法的型別。</param>
      <param name="methodName" vsli:raw="The name of the method.">方法的名稱。</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">
        <see cref="T:System.Type" /> 物件的陣列，這些物件可指定泛型方法的類型參數。 當 methodName 指定非泛型方法時，這個引數應該為 Null。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the method.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，這個陣列代表方法的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method, and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property set to the specified arguments.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為 <see cref="T:System.Reflection.MethodInfo" />，代表指定的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的引數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.">
        <paramref name="methodName" /> 或其基底類型中找不到名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="type" /> 的方法。  
-或- 
<paramref name="methodName" /> 或其基底類型中找到多個名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="type" /> 的方法。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary vsli:raw="Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.">表示節點可精簡為更簡單的節點。 如果傳回 true，則可呼叫 Reduce() 以產生精簡的形式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果可以減少節點, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for use in the handler body.">建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式，以便用於處理常式主體。</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 陳述式的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter and a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含 <see cref="T:System.Exception" /> 篩選條件和已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 陳述式的主體。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement.">建立代表 catch 陳述式的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 陳述式的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter but no reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含 <see cref="T:System.Exception" /> 篩選條件但沒有已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 陳述式的主體。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">建立用於清除序列點的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體，用於清除序列點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation.">建立代表聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考類型或可為 Null 的實值類型。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation, given a conversion function.">指定轉換函式，建立代表聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;conversion&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;conversion&quot; /&gt;.Type is a delegate type that does not take exactly one argument.">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。  
-或- 
 <paramref name="conversion" /> 不是 <see langword="null" />，且 <paramref name="conversion" />.Type 為委派類型，其採用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; represents a type that is not assignable to the parameter type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;right&quot; /&gt; is not equal to the return type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考類型或可為 Null 的實值類型。  
-或- 
<paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派至委派類型 <paramref name="conversion" />.Type 的參數類型。  
-或- 
<paramref name="right" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不等於委派類型 <paramref name="conversion" />.Type 的傳回類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt; or &lt;paramref name=&quot;ifTrue&quot; /&gt; or &lt;paramref name=&quot;ifFalse&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="test" />、<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt;.Type is not &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ifTrue&quot; /&gt;.Type is not equal to &lt;paramref name=&quot;ifFalse&quot; /&gt;.Type.">
        <paramref name="test" />.Type 不是 <see cref="T:System.Boolean" />。  
-或- 
 <paramref name="ifTrue" />.Type 不等於 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">要將 <see cref="T:System.Object" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，而 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">要將 <see cref="T:System.Object" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，且 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;type&quot; /&gt; is not assignable from the dynamic type of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 不為 <see langword="null" />，且 <paramref name="type" /> 無法從 <paramref name="value" /> 的動態類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement.">建立代表 continue 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement with the specified type.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，代表含指定之類型的 continue 陳述式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a type conversion operation.">建立代表類型轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation for which the implementing method is specified.">建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，此轉換作業已指定實作方法。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。  
-或- 
 <paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表方法的引數類型。  
-或- 
<paramref name="method" /> 所代表方法的傳回類型無法指派給 <paramref name="type" />。  
-或- 
 <paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的實值類型，且對應之不可為 Null 的實值類型不等於 <paramref name="method" /> 所表示之方法的引數類型或傳回類型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">已找到一個以上的方法符合 <paramref name="method" /> 說明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed.">建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />；若目標類型已溢位，此運算式便會擲回例外狀況。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.">建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，如果目標類型已溢位，且已指定此作業的實作方法，則此作業會擲回例外狀況。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。  
-或- 
 <paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表方法的引數類型。  
-或- 
<paramref name="method" /> 所代表方法的傳回類型無法指派給 <paramref name="type" />。  
-或- 
 <paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的實值類型，且對應之不可為 Null 的實值類型不等於 <paramref name="method" /> 所表示之方法的引數類型或傳回類型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">已找到一個以上的方法符合 <paramref name="method" /> 說明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; with the specified span.">使用指定的時間範圍建立 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine" vsli:raw="The start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。 必須大於 0。</param>
      <param name="startColumn" vsli:raw="The start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。 必須大於 0。</param>
      <param name="endLine" vsli:raw="The end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater or equal than the start line.">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。 必須大於或等於起始行。</param>
      <param name="endColumn" vsli:raw="The end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。 如果結尾行與起始行相同，則結尾欄必須大於或等於起始欄。 在任何情況下，都必須大於 0。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞減 1。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">代表遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞減 1。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">代表遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">建立 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的類型。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，而 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation.">建立代表算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property to.">將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property to.">將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Division 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation. The implementing method can be specified.">建立代表算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的除法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">傳遞至動態運算的第四個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動態運算式的結果類型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; as the second argument.">指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 做為第二個引數，建立 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the number of parameters for the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">未將 <paramref name="addMethod" /> 所代表的方法命名為 "Add" (不區分大小寫)。  
-或- 
<paramref name="addMethod" /> 所代表的方法不是執行個體方法。  
-或- 
 <paramref name="arguments" /> 所包含的項目數與 <paramref name="addMethod" /> 所代表之方法的參數數目不同。  
-或- 
<paramref name="arguments" /> 的一或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所代表之方法的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an array of values as the second argument.">指定值陣列做為第二個引數，建立 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 物件陣列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that addMethod represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that addMethod represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">addMethod 所表示的方法名稱不是 "Add" (不區分大小寫)。  
-或- 
addMethod 所表示的方法不是執行個體方法。  
-或- 
引數包含的項目數目與 addMethod 所表示之方法的參數數目不同。  
-或- 
<paramref name="arguments" /> 的一或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所代表之方法的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary vsli:raw="Creates an empty expression that has &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">建立具有 <see cref="T:System.Void" /> 類型的空運算式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison.">建立代表相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison. The implementing method can be specified.">建立代表相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立表示位元 <see langword="XOR" /> 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 <see langword="XOR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types. The implementing method can be specified.">使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立表示位元 <see langword="XOR" /> 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義類型 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的 <see langword="XOR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">建立代表存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. For &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), &lt;paramref name=&quot;expression&quot; /&gt; must be &lt;see langword=&quot;null&quot; /&gt;.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 若為 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，<paramref name="expression" /> 必須是 <see langword="null" />。</param>
      <param name="field" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.FieldInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;field&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field represented by &lt;paramref name=&quot;field&quot; /&gt; is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="field" /> 為 <see langword="null" />。  
-或- 
<paramref name="field" /> 所表示的欄位不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the field represented by &lt;paramref name=&quot;field&quot; /&gt;.">
        <paramref name="expression" />.Type 無法指派給 <paramref name="field" /> 所代表之欄位的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field given the name of the field.">建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表存取可指定欄位名稱的欄位。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a field named &lt;paramref name=&quot;fieldName&quot; /&gt;. This can be null for static fields.">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="fieldName" /> 的欄位。 如果是靜態欄位，可以是 Null。</param>
      <param name="fieldName" vsli:raw="The name of a field to be accessed.">要存取的欄位名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the field denoted by &lt;paramref name=&quot;fieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.FieldInfo" />，代表 <paramref name="fieldName" /> 所表示的欄位。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No field named &lt;paramref name=&quot;fieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="fieldName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">建立代表存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="The containing object of the field. This can be null for static fields.">欄位的包含物件。 如果是靜態欄位，可以是 Null。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the field.">包含欄位的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName" vsli:raw="The field to be accessed.">要存取的欄位。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">建立 <see cref="T:System.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Action</c> 委派類型。</summary>
      <param name="typeArgs" vsli:raw="An array of up to sixteen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type.">最多包含十六個 <see cref="T:System.Type" /> 物件的陣列，指定 <see langword="System.Action" /> 委派類型的類型引數。</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate that has the specified type arguments.">
        <c>System.Action</c> 委派的類型，具有指定的型別引數。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains more than sixteen elements.">
        <paramref name="typeArgs" /> 包含十六個以上的項目。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary vsli:raw="Gets a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; or &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">取得 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Func</c> 或 <c>System.Action</c> 委派類型。</summary>
      <param name="typeArgs" vsli:raw="The type arguments of the delegate.">委派的類型引數。</param>
      <returns vsli:raw="The delegate type.">委派類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Func</c> 委派類型。 最後一個類型引數指定已建立之委派的傳回類型。</summary>
      <param name="typeArgs" vsli:raw="An array of one to seventeen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see langword=&quot;System.Func&quot; /&gt; delegate type.">包含一到十七個 <see cref="T:System.Type" /> 物件的陣列，指定 <see langword="System.Func" /> 委派類型的類型引數。</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate that has the specified type arguments.">
        <c>System.Func</c> 委派的類型，具有指定的型別引數。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains fewer than one or more than seventeen elements.">
        <paramref name="typeArgs" /> 包含少於一個或多過十七個項目。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement.">建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.">建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 "go to" 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 "go to" 陳述式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison.">建立代表「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.">建立代表「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">建立代表「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">建立代表「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with an &lt;see langword=&quot;if&quot; /&gt; statement.">建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，代表具有 <see langword="if" /> 陳述式的條件區塊。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, properties set to the specified values. The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property is set to default expression and the type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為指定的值。 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性已設定為預設運算式，而這個方法傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的類型為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with &lt;see langword=&quot;if&quot; /&gt; and &lt;see langword=&quot;else&quot; /&gt; statements.">建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，代表具有 <see langword="if" /> 和 <see langword="else" /> 陳述式的條件區塊。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values. The type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。 這個方法所傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的類型為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression value by 1.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式值遞增 1。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression by 1.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞增 1。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied to.">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要套用的委派或 Lambda 運算式。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，代表要套用委派或 Lambda 運算式的引數。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type 不代表委派類型或 <see cref="T:System.Linq.Expressions.Expression`1" />。  
-或- 
<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數類型。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied.">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要套用的委派或 Lambda 運算式。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，代表要套用委派或 Lambda 運算式的引數。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type 不代表委派類型或 <see cref="T:System.Linq.Expressions.Expression`1" />。  
-或- 
<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數類型。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">傳回運算式是否評估為 false。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">傳回運算式是否評估為 false。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">傳回運算式是否評估為 true。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">傳回運算式是否評估為 true。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and no name.">建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含 void 類型但沒有名稱的標籤。</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label without a default value.">建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，代表沒有預設值的標籤。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">這個 <see cref="T:System.Linq.Expressions.LabelTarget" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; without a default value.">沒有預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label with the given default value.">建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，代表包含指定之預設值的標籤。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">這個 <see cref="T:System.Linq.Expressions.LabelTarget" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue" vsli:raw="The value of this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow.">透過一般控制流程到達標籤時，這個 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; with the given default value.">包含指定之預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and the given name.">建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含 void 類型和指定之名稱的標籤。</summary>
      <param name="name" vsli:raw="The name of the label.">標籤名稱。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type.">建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含指定之類型的標籤。</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">跳至標籤時所傳遞值的類型。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type and name.">建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含指定之類型和名稱的標籤。</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">跳至標籤時所傳遞值的類型。</param>
      <param name="name" vsli:raw="The name of the label.">標籤名稱。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別、指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別、指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別與參數運算式的陣列，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameters" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parameters&quot; /&gt; contains more than sixteen elements.">
        <paramref name="parameters" /> 包含十六個以上的項目。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別、lambda 的名稱、指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">先從運算式主體建構委派型別、lambda 的名稱與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">使用參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">
        <see cref="T:System.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">表示 Lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" /> 不表示委派類型。  
-或- 
 <paramref name="body" />.Type 表示的類型無法指派給 <paramref name="delegateType" /> 所表示之委派類型的傳回類型。  
-或- 
 <paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派類型的參數清單不同。  
-或- 
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派類型的對應參數類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">使用參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">
        <see cref="T:System.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">表示 Lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" /> 不表示委派類型。  
-或- 
 <paramref name="body" />.Type 表示的類型無法指派給 <paramref name="delegateType" /> 所表示之委派類型的傳回類型。  
-或- 
 <paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派類型的參數清單不同。  
-或- 
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派類型的對應參數類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">使用 lambda 的名稱、指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">使用 lambda 的名稱與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">使用參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" /> 不是委派類型。  
-或- 
 <paramref name="body" />.Type 所表示的類型無法指派給 <paramref name="TDelegate" /> 的傳回類型。  
-或- 
 <paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。  
-或- 
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數類型的類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">使用參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" /> 不是委派類型。  
-或- 
 <paramref name="body" />.Type 所表示的類型無法指派給 <paramref name="TDelegate" /> 的傳回類型。  
-或- 
 <paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。  
-或- 
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數類型的類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">使用 lambda 的名稱、指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging info.">Lambda 的名稱。 用於產生偵錯資訊。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">使用 lambda 的名稱與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging information.">Lambda 的名稱。 用於產生偵錯資訊。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">委派類型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type. 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" /> 且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">建立代表「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">建立代表「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot; less than or equal&quot; numeric comparison.">建立代表「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than or equal&quot; numeric comparison.">建立代表「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" /> 不代表欄位或屬性。  
-或- 
<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" /> 不代表欄位或屬性。  
-或- 
<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; based on a specified property accessor method.">根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 則會填入 <paramref name="initializers" /> 的項目。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。  
-或- 
屬性 (由 <paramref name="propertyAccessor" /> 存取表示的方法) 的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; object based on a specified property accessor method.">根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 物件。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 則會填入 <paramref name="initializers" /> 的項目。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。  
-或- 
屬性 (由 <paramref name="propertyAccessor" /> 存取表示的方法) 的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將項目加入集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">未在 <paramref name="newExpression" />.Type 或其基底型別中宣告名為 "Add" (不區分大小寫) 的執行個體。  
-或- 
<paramref name="newExpression" />.Type 或其基底型別中的 add 方法不是只接受一個引數。  
-或- 
<paramref name="initializers" />的第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所代表的型別，無法指派給 <paramref name="newExpression" />.Type 或其基底型別上的 add 方法的引數類型。  
-或- 
多個名為 "Add" (不區分大小寫) 的引數相容方法存在於 <paramref name="newExpression" /> .Type 和/或其基底型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將項目加入集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">未在 <paramref name="newExpression" />.Type 或其基底型別中宣告名為 "Add" (不區分大小寫) 的執行個體。  
-或- 
<paramref name="newExpression" />.Type 或其基底型別中的 add 方法不是只接受一個引數。  
-或- 
<paramref name="initializers" />的第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所代表的型別，無法指派給 <paramref name="newExpression" />.Type 或其基底型別上的 add 方法的引數類型。  
-或- 
多個名為 "Add" (不區分大小寫) 的引數相容方法存在於 <paramref name="newExpression" /> .Type 和/或其基底型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將項目加入集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method named &quot;Add&quot; (case insensitive), that adds an element to a collection.">
        <see cref="T:System.Reflection.MethodInfo" />，代表名為 "Add" (區分大小寫) 的執行個體方法，可將項目加入集合。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。  
-或- 
 <paramref name="addMethod" /> 不是 <see langword="null" />，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只採用一個引數。  
-或- 
 <paramref name="addMethod" /> 不是 <see langword="null" />，且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的類型無法指派給 <paramref name="addMethod" /> 所表示之方法的引數類型。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" /> 是 <see langword="null" />，且 <paramref name="newExpression" />.Type 或其基底類型上沒有採用一個類型相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將項目加入集合。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that takes one argument, that adds an element to a collection.">
        <see cref="T:System.Reflection.MethodInfo" />，代表採用一個引數的執行個體方法，可將項目加入集合。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。  
-或- 
 <paramref name="addMethod" /> 不是 <see langword="null" />，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只採用一個引數。  
-或- 
 <paramref name="addMethod" /> 不是 <see langword="null" />，且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的類型無法指派給 <paramref name="addMethod" /> 所表示之方法的引數類型。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" /> 是 <see langword="null" />，且 <paramref name="newExpression" />.Type 或其基底類型上沒有採用一個類型相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body" vsli:raw="The body of the loop.">迴圈的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body and break target.">建立包含指定之主體和 break 目標的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body" vsli:raw="The body of the loop.">迴圈的主體。</param>
      <param name="break" vsli:raw="The break target used by the loop body.">迴圈主體所使用的 break 目標。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body" vsli:raw="The body of the loop.">迴圈的主體。</param>
      <param name="break" vsli:raw="The break target used by the loop body.">迴圈主體所使用的 break 目標。</param>
      <param name="continue" vsli:raw="The continue target used by the loop body.">迴圈主體所使用的 continue 目標。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left and right operands, by calling an appropriate factory method.">透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元和右運算元。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand and implementing method, by calling the appropriate factory method.">透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元和實作方法。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.">透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元、實作方法和類型轉換函式。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function. This parameter is used only if &lt;paramref name=&quot;binaryType&quot; /&gt; is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; or compound assignment.">代表類型轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 只有當 <paramref name="binaryType" /> 為 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或複合指派時，才會使用此參數。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with the specified elements.">建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表含指定之項目的 catch 陳述式。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch 陳述式的主體。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">動態運算的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和兩個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四個引數所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動態作業的第一個引數。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">傳遞至動態作業的第二個引數。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">傳遞至動態作業的第三個引數。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">傳遞至動態運算的第四個引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動態作業的執行階段繫結器。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動態作業的引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a jump of the specified &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt;. The value passed to the label upon jumping can also be specified.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，代表指定之 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳躍點。 也可以指定在跳躍時傳遞至標籤的值。</summary>
      <param name="kind" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to &lt;paramref name=&quot;kind&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 <paramref name="kind" />、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; that represents accessing an indexed property in an object.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，代表存取物件中的索引屬性。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. It should be null if the property is &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;shared&quot; /&gt; in Visual Basic).">屬性所屬的物件。 如果屬性為 <see langword="static" /> (在 Visual Basic 中為 <see langword="shared" />)，則應該是 Null。</param>
      <param name="indexer" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the property to index.">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要編製索引的屬性。</param>
      <param name="arguments" vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;Expression&amp;gt;&lt;/c&gt; (&lt;c&gt;IEnumerable (Of Expression)&lt;/c&gt; in Visual Basic) that contains the arguments that will be used to index the property.">
        <c>IEnumerable&lt;Expression&gt;</c> (在 Visual Basic 中為 <c>IEnumerable (Of Expression)</c>)，包含將用於對屬性進行索引的引數。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing either a field or a property.">建立代表存取欄位或屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the object that the member belongs to. This can be null for static members.">
        <see cref="T:System.Linq.Expressions.Expression" />，代表成員所屬的物件。 如果是靜態成員，可以是 Null。</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the field or property to be accessed.">
        <see cref="T:System.Reflection.MemberInfo" />，說明要存取的欄位或屬性。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.">
        <paramref name="member" /> 不代表欄位或屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with the specified elements.">建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含指定之項目的 try 區塊。</summary>
      <param name="type" vsli:raw="The result type of the try expression. If null, body and all handlers must have identical type.">try 運算式的結果類型。 如果為 Null，則主體和所有處理常式必須具有相同的類型。</param>
      <param name="body" vsli:raw="The body of the try block.">try 區塊的主體。</param>
      <param name="finally" vsli:raw="The body of the finally block. Pass null if the try block has no finally block associated with it.">finally 區塊的主體。 如果 try 區塊沒有相關聯的 finally 區塊，則傳遞 Null。</param>
      <param name="fault" vsli:raw="The body of the fault block. Pass null if the try block has no fault block associated with it.">fault 區塊的主體。 如果 try 區塊沒有相關聯的 fault 區塊，則傳遞 Null。</param>
      <param name="handlers" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;s representing the catch statements to be associated with the try block.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合，代表要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand, by calling the appropriate factory method.">指定運算元並呼叫適當的 Factory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的類型。</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">代表運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">
        <see cref="T:System.Type" />，指定轉換後的類型 (如果不適用，則傳遞 <see langword="null" />)。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand and implementing method, by calling the appropriate factory method.">指定運算元和實作方法並透過呼叫適當的 Fatory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的類型。</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">代表運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">
        <see cref="T:System.Type" />，指定轉換後的類型 (如果不適用，則傳遞 <see langword="null" />)。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> 不代表欄位或屬性。  
-或- 
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> 不代表欄位或屬性。  
-或- 
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性則設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。  
-或- 
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性類型成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性則設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。  
-或- 
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性類型成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Represents an expression that creates a new object and initializes a property of the object.">表示建立新物件並初始化物件屬性的運算式。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">建立代表算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義餘數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">建立代表算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，且未針對 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義模數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術乘法運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術乘法運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術乘法運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術乘法運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">建立代表算術負運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">建立代表算術負運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元減號運算子。  
-或- 
 <paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其代表包含溢位檢查的算術負運算。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其代表包含溢位檢查的算術負運算。 實作的方法可加以指定。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元減號運算子。  
-或- 
 <paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor that takes no arguments.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，代表呼叫不採用任何引數的指定建構函式。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，而 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents has at least one parameter.">由 <paramref name="constructor" /> 表示的建構函式，擁有至少一個參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> 為 <see langword="null" />。  
-或- 
<paramref name="arguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。  
-或- 
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。 已指定可存取由建構函式初始化欄位的成員。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <param name="members" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> 為 <see langword="null" />。  
-或- 
<paramref name="arguments" /> 的項目是 <see langword="null" />。  
-或- 
<paramref name="members" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。  
-或- 
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。  
-或- 
<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。  
-或- 
<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 其對應項目所表示成員類型的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。 已指定可存取由建構函式初始化欄位的成員為陣列。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <param name="members" vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">用以填入 <see cref="T:System.Reflection.MemberInfo" /> 集合之 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> 為 <see langword="null" />。  
-或- 
<paramref name="arguments" /> 的項目是 <see langword="null" />。  
-或- 
<paramref name="members" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。  
-或- 
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。  
-或- 
<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。  
-或- 
<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 其對應項目所表示成員類型的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> 為 <see langword="null" />。  
-或- 
<paramref name="arguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;arguments&quot; /&gt; does match the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" /> 的長度不符合 <paramref name="constructor" /> 代表之建構函式的參數數目。  
-或- 
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the parameterless constructor of the specified type.">建立 <see cref="T:System.Linq.Expressions.NewExpression" />，代表呼叫指定類型的無參數建構函式。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that has a constructor that takes no arguments.">
        <see cref="T:System.Type" />，具有不採用任何引數的建構函式。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the constructor without parameters for the specified type.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為 <see cref="T:System.Reflection.ConstructorInfo" />，代表不含指定類型之參數的建構函式。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type that &lt;paramref name=&quot;type&quot; /&gt; represents does not have a constructor without parameters.">
        <paramref name="type" /> 表示的類型沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立具有指定之陣序的陣列。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="bounds" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 <see langword="null" />。  
-或- 
<paramref name="bounds" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立具有指定之陣序的陣列。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="bounds" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 <see langword="null" />。  
-或- 
<paramref name="bounds" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立一維陣列，並從項目清單將此陣列初始化。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type that &lt;paramref name=&quot;type&quot; /&gt; represents.">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派給 <paramref name="type" /> 所表示的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立一維陣列，並從項目清單將此陣列初始化。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。  
-或- 
<paramref name="initializers" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派給 <paramref name="type" /> 類型。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary vsli:raw="Gets the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">取得這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; values.">其中一個 <see cref="T:System.Linq.Expressions.ExpressionType" /> 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation.">建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">不會為 <paramref name="expression" />.Type 定義一元 NOT 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation. The implementing method can be specified.">建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元 NOT 運算子。  
-或- 
 <paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">建立代表不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">建立代表不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the expression representing the ones complement.">傳回表示 1 補數的運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the expression representing the ones complement.">傳回表示 1 補數的運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="OR" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="OR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="OR" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="OR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="OR" /> 時才求第二個運算元之值的 <see langword="false" /> 條件運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="OR" /> 運算子。  
-或- 
 <paramref name="left" />.Type 和 <paramref name="right" />.Type 是不相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="OR" /> 時才求第二個運算元之值的 <see langword="false" /> 條件運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="OR" /> 運算子。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />，且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">參數或變數的類型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">參數或變數的類型。</param>
      <param name="name" vsli:raw="The name of the parameter or variable, used for debugging or printing purpose only.">參數或變數的名稱，僅供偵錯或列印之用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Parameter&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Name&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">建立代表將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Exponentiation 運算子。  
-或- 
 <paramref name="left" />.Type 和 (或) <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">建立代表將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的乘冪運算子。  
-或- 
 <paramref name="method" /> 是 <see langword="null" /> 和 <paramref name="left" />.Type，且/或 <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property by using a property accessor method.">建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表透過使用屬性存取子來存取屬性。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 如果是靜態屬性，可以是 null。</param>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表在 <paramref name="propertyAccessor" /> 中存取的屬性。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。  
-或- 
<paramref name="propertyAccessor" /> 所表示的方法不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not a property accessor method.">
        <paramref name="expression" />.Type 無法指派給 <paramref name="propertyAccessor" /> 所代表之方法的宣告類型。  
-或- 
<paramref name="propertyAccessor" /> 所表示的方法不是屬性存取子方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">建立代表存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 如果是靜態屬性，可以是 null。</param>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.PropertyInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property that &lt;paramref name=&quot;property&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> 為 <see langword="null" />。  
-或- 
<paramref name="property" /> 所表示的屬性不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the property that &lt;paramref name=&quot;property&quot; /&gt; represents.">
        <paramref name="expression" />.Type 無法指派給 <paramref name="property" /> 所表示屬性的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">
        <see cref="T:System.Reflection.PropertyInfo" />，代表要編製索引的屬性。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，用於對屬性進行索引。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">
        <see cref="T:System.Reflection.PropertyInfo" />，代表要編製索引的屬性。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">建立代表存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property named &lt;paramref name=&quot;propertyName&quot; /&gt;. This can be &lt;see langword=&quot;null&quot; /&gt; for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyName" /> 的屬性。 如果是靜態屬性，可以是 <see langword="null" />。</param>
      <param name="propertyName" vsli:raw="The name of a property to be accessed.">要存取的屬性名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property denoted by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表 <paramref name="propertyName" /> 所表示的屬性。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property named &lt;paramref name=&quot;propertyName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="propertyName" vsli:raw="The name of the indexer.">索引子的名稱。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; accessing a property.">建立用於存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression" vsli:raw="The containing object of the property. This can be null for static properties.">屬性的包含物件。 如果是靜態屬性，可以是 null。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the property.">包含屬性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName" vsli:raw="The property to be accessed.">要存取的屬性。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property or field.">建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表存取屬性或欄位。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyOrFieldName" /> 的屬性或欄位。 如果是靜態成員，可以是 Null。</param>
      <param name="propertyOrFieldName" vsli:raw="The name of a property or field to be accessed.">要存取之屬性或欄位的名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the property or field denoted by &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.FieldInfo" />，代表 <paramref name="propertyOrFieldName" /> 所表示的屬性或欄位。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyOrFieldName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的屬性或欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表具有 <see cref="T:System.Linq.Expressions.Expression" /> 類型常數值的運算式。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">將這個節點精簡為更簡單的運算式。 如果 CanReduce 傳回 true，則應該傳回有效的運算式。 這個方法可以傳回其他本身必須精簡的節點。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">將這個節點精簡為更簡單的運算式。 如果 CanReduce 傳回 true，則應該傳回有效的運算式。 這個方法可以傳回其他本身必須精簡的節點。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary vsli:raw="Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.">將運算式精簡為已知的節點類型 (不是 Extension 節點)，如果已經是已知的類型，則僅傳回運算式。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference equality comparison.">建立表示參考相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference inequality comparison.">建立表示參考不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示重新擲回例外狀況。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception with a given type.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表重新擲回含指定之類型的例外狀況。</summary>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">運算式的新 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement. The value passed to the label upon jumping can be specified.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type. The value passed to the label upon jumping can be specified.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 return 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type.">建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 return 陳述式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">建立代表位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">建立代表位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <param name="variables" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的集合，用來填入 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <param name="variables" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 物件的陣列。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術減法運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Subtraction 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術減法運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" /> ，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的<see langword="Shared" /> )，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術減法運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Subtraction 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術減法運算。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> 不是 <see langword="null" /> ，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的<see langword="Shared" /> )，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">要使用的相等比較方法。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">要使用的相等比較方法。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement without a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，代表不含 default case 的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="type" vsli:raw="The result type of the switch.">參數的結果類型。</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">要使用的相等比較方法。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="type" vsli:raw="The result type of the switch.">參數的結果類型。</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">針對每個案例所要測試的值。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">要使用的相等比較方法。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">這個 switch 運算式的案例集合。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; object to be used in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; object.">建立要在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 物件。</summary>
      <param name="body" vsli:raw="The body of the case.">案例的主體。</param>
      <param name="testValues" vsli:raw="The test values of the case.">案例的測試值。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; for use in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.SwitchCase" /> 以便用於 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <param name="body" vsli:raw="The body of the case.">案例的主體。</param>
      <param name="testValues" vsli:raw="The test values of the case.">案例的測試值。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <param name="documentType" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; equal to.">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; properties set to the specified value.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示擲回例外狀況。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception with a given type.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表擲回含指定之類型的例外狀況。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">運算式的新 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and neither a fault nor finally block.">建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 catch 陳述式 (數目不拘) 但不含 fault 區塊或 finally 區塊的 try 區塊。</summary>
      <param name="body" vsli:raw="The body of the try block.">try 區塊的主體。</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and a finally block.">建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 catch 陳述式 (數目不拘) 和 finally 區塊的 try 區塊。</summary>
      <param name="body" vsli:raw="The body of the try block.">try 區塊的主體。</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally 區塊的主體。</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a fault block and no catch statements.">建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 fault 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <param name="body" vsli:raw="The body of the try block.">try 區塊的主體。</param>
      <param name="fault" vsli:raw="The body of the fault block.">fault 區塊的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a finally block and no catch statements.">建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 finally 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <param name="body" vsli:raw="The body of the try block.">try 區塊的主體。</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally 區塊的主體。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Action delegate type that has specific type arguments.">建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 System.Action 委派類型。</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Action delegate type.">Type 物件的陣列，指定 System.Action 委派類型的類型引數。</param>
      <param name="actionType" vsli:raw="When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">這個方法在傳回時會包含具有特定類型引數的泛型 System.Action 委派類型。 如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Action 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Action delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Action 委派類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定類型引數的泛型 System.Func 委派類型。 最後一個類型引數指定已建立之委派的傳回類型。</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Func delegate type.">Type 物件的陣列，指定 System.Func 委派類型的類型引數。</param>
      <param name="funcType" vsli:raw="When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">這個方法在傳回時會包含具有特定型別引數的泛型 System.Func 委派類型。 如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Func 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Func delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Func 委派類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit reference or boxing conversion where &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表明確參考或 Boxing 轉換，其中若轉換失敗，則提供 <see langword="null" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeAs&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; that compares run-time type identity.">建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 以比較執行階段類型識別。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)&quot; /&gt; and for which the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 以及 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設為指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeIs&quot; /&gt; and for which the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 以及 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設為指定值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">建立代表一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">不會為 <paramref name="expression" />.Type 定義一元正運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">建立代表一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元正運算子。  
-或- 
 <paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit unboxing.">建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表明確 Unboxing。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to unbox.">要 Unbox 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">運算式的新 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">參數或變數的類型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">參數或變數的類型。</param>
      <param name="name" vsli:raw="The name of the parameter or variable. This name is used for debugging or printing purpose only.">參數或變數的名稱。 這個名稱僅供偵錯或列印之用。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.">精簡節點，然後呼叫精簡後的運算式上的訪問項委派。 如果節點無法縮減，此方法會擲回例外狀況。</summary>
      <param name="visitor" vsli:raw="An instance of &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">
        <see cref="T:System.Func`2" /> 的執行個體。</param>
      <returns vsli:raw="The expression being visited, or an expression which should replace it in the tree.">受訪的運算式，或是在樹狀結構中應取代該運算式的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary vsli:raw="Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.">將強類型 Lambda 運算式用樹狀架構形式的資料結構來表示。 此類別無法獲得繼承。</summary>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate that the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; represents.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 所代表之委派的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.">將運算式樹狀架構所描述的 Lambda 運算式編譯為可執行程式碼，並產生表示 Lambda 運算式的委派。</summary>
      <returns vsli:raw="A delegate of type &lt;paramref name=&quot;TDelegate&quot; /&gt; that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <paramref name="TDelegate" /> 型別的委派，表示由 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.">將運算式樹狀架構所描述的 Lambda 運算式，編譯成已解譯或已編譯的程式碼，並產生代表 Lambda 運算式的委派。</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it is available; &lt;see langword=&quot;false&quot; /&gt; otherwise.">如有應該編譯成解譯表單的運算式，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">委派，表示 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">產生代表 Lambda 運算式的委派。</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">編譯器使用的偵錯資訊產生工具，用以標記序列點以及標註區域變數。</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">委派，包含 Lambda 的編譯版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性。</param>
      <param name="parameters" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary vsli:raw="Describes the node types for the nodes of an expression tree.">說明運算式樹狀結構之節點的節點型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;a + b&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的加法運算，例如 <c>a + b</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的加法複合指派運算，例如 <c>(a += b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, with overflow checking, for numeric operands.">數值運算元的加法複合指派運算，例如 <c>(a += b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;(a + b)&lt;/c&gt;, with overflow checking, for numeric operands.">數值運算元的加法運算，例如 <c>(a + b)</c>，包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; operation, such as &lt;c&gt;(a &amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a And b)&lt;/c&gt; in Visual Basic.">位元或邏輯 <see langword="AND" /> 運算，例如 C# 中的 <c>(a &amp; b)</c> 和 Visual Basic 中的 <c>(a And b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary vsli:raw="A conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;. It corresponds to &lt;c&gt;(a &amp;amp;&amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a AndAlso b)&lt;/c&gt; in Visual Basic.">條件 <see langword="AND" /> 運算，此種運算只有在第一個運算元評估為 <see langword="true" /> 時才會評估第二個運算元。 它對應到 C# 中的 <c>(a &amp;&amp; b)</c> 和 Visual Basic 中的 <c>(a AndAlso b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a &amp;amp;= b)&lt;/c&gt; in C#.">位元或邏輯 <see langword="AND" /> 複合指派運算，例如 C# 中的 <c>(a &amp;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary vsli:raw="An indexing operation in a one-dimensional array, such as &lt;c&gt;array[index]&lt;/c&gt; in C# or &lt;c&gt;array(index)&lt;/c&gt; in Visual Basic.">一維陣列中的索引運算，例如 C# 中的 <c>array[index]</c> 或 Visual Basic 中的 <c>array(index)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary vsli:raw="An operation that obtains the length of a one-dimensional array, such as &lt;c&gt;array.Length&lt;/c&gt;.">一種運算，用於取得一維陣列的長度，例如 <c>array.Length</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary vsli:raw="An assignment operation, such as &lt;c&gt;(a = b)&lt;/c&gt;.">指派運算，例如 <c>(a = b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary vsli:raw="A block of expressions.">運算式的區塊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary vsli:raw="A method call, such as in the &lt;c&gt;obj.sampleMethod()&lt;/c&gt; expression.">方法呼叫，例如在 <c>obj.sampleMethod()</c> 運算式中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary vsli:raw="A node that represents a null coalescing operation, such as &lt;c&gt;(a ?? b)&lt;/c&gt; in C# or &lt;c&gt;If(a, b)&lt;/c&gt; in Visual Basic.">表示 Null 聯合運算的節點，例如 C# 中的 <c>(a ?? b)</c> 或 Visual Basic 中的 <c>If(a, b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary vsli:raw="A conditional operation, such as &lt;c&gt;a &amp;gt; b ? a : b&lt;/c&gt; in C# or &lt;c&gt;If(a &amp;gt; b, a, b)&lt;/c&gt; in Visual Basic.">條件運算，例如 C# 中的 <c>a &gt; b ? a : b</c> 或 Visual Basic 中的 <c>If(a &gt; b, a, b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary vsli:raw="A constant value.">常數值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.">轉型或轉換作業，例如 C# 中的 <c>(SampleType)obj</c> 或 Visual Basic 中的 <c>CType(obj, SampleType)</c>。 對於數值轉換，如果轉換的值對目的型別而言太大，則不會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.">轉型或轉換作業，例如 C# 中的 <c>(SampleType)obj</c> 或 Visual Basic 中的 <c>CType(obj, SampleType)</c>。 對於數值轉換，如果轉換的值不符合目的型別，則會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary vsli:raw="Debugging information.">偵錯資訊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary vsli:raw="A unary decrement operation, such as &lt;c&gt;(a - 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">一元遞減運算，例如 C# 和 Visual Basic 中的 <c>(a - 1)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary vsli:raw="A default value.">預設值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary vsli:raw="A division operation, such as &lt;c&gt;(a / b)&lt;/c&gt;, for numeric operands.">數值運算元的除法運算，例如 <c>(a / b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary vsli:raw="An division compound assignment operation, such as &lt;c&gt;(a /= b)&lt;/c&gt;, for numeric operands.">數值運算元的除法複合指派運算，例如 <c>(a /= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary vsli:raw="A dynamic operation.">動態運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary vsli:raw="A node that represents an equality comparison, such as &lt;c&gt;(a == b)&lt;/c&gt; in C# or &lt;c&gt;(a = b)&lt;/c&gt; in Visual Basic.">表示相等比較的節點，例如 C# 中的 <c>(a == b)</c> 或 Visual Basic 中的 <c>(a = b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; operation, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in C# or &lt;c&gt;(a Xor b)&lt;/c&gt; in Visual Basic.">位元或邏輯 <see langword="XOR" /> 運算，例如 C# 中的 <c>(a ^ b)</c> 或 Visual Basic 中的 <c>(a Xor b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in C#.">位元或邏輯 <see langword="XOR" /> 複合指派運算，例如 C# 中的 <c>(a ^= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary vsli:raw="An extension expression.">延伸運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary vsli:raw="A &quot;go to&quot; expression, such as &lt;c&gt;goto Label&lt;/c&gt; in C# or &lt;c&gt;GoTo Label&lt;/c&gt; in Visual Basic.">「移至」運算式，例如 C# 中的 <c>goto Label</c> 或 Visual Basic 中的 <c>GoTo Label</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary vsli:raw="A &quot;greater than&quot; comparison, such as &lt;c&gt;(a &amp;gt; b)&lt;/c&gt;.">「大於」比較，例如 <c>(a &gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary vsli:raw="A &quot;greater than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;gt;= b)&lt;/c&gt;.">「大於或等於」比較，例如 <c>(a &gt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary vsli:raw="A unary increment operation, such as &lt;c&gt;(a + 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">一元遞增運算，例如 C# 和 Visual Basic 中的 <c>(a + 1)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary vsli:raw="An index operation or an operation that accesses a property that takes arguments.">索引運算或是用於存取採用引數之屬性的運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary vsli:raw="An operation that invokes a delegate or lambda expression, such as &lt;c&gt;sampleDelegate.Invoke()&lt;/c&gt;.">叫用委派或 Lambda 運算式的運算，例如 <c>sampleDelegate.Invoke()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary vsli:raw="A &lt;see langword=&quot;false&quot; /&gt; condition value.">
        <see langword="false" /> 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary vsli:raw="A &lt;see langword=&quot;true&quot; /&gt; condition value.">
        <see langword="true" /> 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary vsli:raw="A label.">標籤。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary vsli:raw="A lambda expression, such as &lt;c&gt;a =&amp;gt; a + a&lt;/c&gt; in C# or &lt;c&gt;Function(a) a + a&lt;/c&gt; in Visual Basic.">Lambda 運算式，例如 C# 中的 <c>a =&gt; a + a</c> 或 Visual Basic 中的 <c>Function(a) a + a</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary vsli:raw="A bitwise left-shift operation, such as &lt;c&gt;(a &amp;lt;&amp;lt; b)&lt;/c&gt;.">位元左移運算，例如 <c>(a &lt;&lt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary vsli:raw="A bitwise left-shift compound assignment, such as &lt;c&gt;(a &amp;lt;&amp;lt;= b)&lt;/c&gt;.">位元左移複合指派，例如 <c>(a &lt;&lt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary vsli:raw="A &quot;less than&quot; comparison, such as &lt;c&gt;(a &amp;lt; b)&lt;/c&gt;.">「小於」比較，例如 <c>(a &lt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary vsli:raw="A &quot;less than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;lt;= b)&lt;/c&gt;.">「小於或等於」比較，例如 <c>(a &lt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary vsli:raw="An operation that creates a new &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; object and initializes it from a list of elements, such as &lt;c&gt;new List&amp;lt;SampleType&amp;gt;(){ a, b, c }&lt;/c&gt; in C# or &lt;c&gt;Dim sampleList = { a, b, c }&lt;/c&gt; in Visual Basic.">一種運算，用於建立新的 <see cref="T:System.Collections.IEnumerable" /> 物件並以項目清單將其初始化，例如 C# 中的 <c>new List&lt;SampleType&gt;(){ a, b, c }</c> 或 Visual Basic 中的 <c>Dim sampleList = { a, b, c }</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary vsli:raw="A loop, such as &lt;c&gt;for&lt;/c&gt; or &lt;c&gt;while&lt;/c&gt;.">一種迴圈，例如 <c>for</c> 或 <c>while</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary vsli:raw="An operation that reads from a field or property, such as &lt;c&gt;obj.SampleProperty&lt;/c&gt;.">讀取欄位或屬性的運算，例如 <c>obj.SampleProperty</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary vsli:raw="An operation that creates a new object and initializes one or more of its members, such as &lt;c&gt;new Point { X = 1, Y = 2 }&lt;/c&gt; in C# or &lt;c&gt;New Point With {.X = 1, .Y = 2}&lt;/c&gt; in Visual Basic.">一種運算，用於建立新的物件並初始化其中一個或多個成員，例如 C# 中的 <c>new Point { X = 1, Y = 2 }</c> 或 Visual Basic 中的 <c>New Point With {.X = 1, .Y = 2}</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary vsli:raw="An arithmetic remainder operation, such as &lt;c&gt;(a % b)&lt;/c&gt; in C# or &lt;c&gt;(a Mod b)&lt;/c&gt; in Visual Basic.">算術餘數運算，例如 C# 中的 <c>(a % b)</c> 或 Visual Basic 中的 <c>(a Mod b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary vsli:raw="An arithmetic remainder compound assignment operation, such as &lt;c&gt;(a %= b)&lt;/c&gt; in C#.">算術餘數複合指派運算，例如 C# 中的 <c>(a %= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary vsli:raw="A multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的乘法運算，例如 <c>(a * b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的乘法複合指派運算，例如 <c>(a *= b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">數值運算元的乘法複合指派運算，例如 <c>(a *= b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary vsli:raw="An multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, that has overflow checking, for numeric operands.">數值運算元的乘法運算，例如 <c>(a * b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">算術負數運算，例如 <c>(-a)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;, that has overflow checking. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">算術負數運算，例如 <c>(-a)</c>，具有溢位檢查。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary vsli:raw="An operation that calls a constructor to create a new object, such as &lt;c&gt;new SampleType()&lt;/c&gt;.">一種運算，用於呼叫建構函式以建立新物件，例如 <c>new SampleType()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary vsli:raw="An operation that creates a new array, in which the bounds for each dimension are specified, such as &lt;c&gt;new SampleType[dim1, dim2]&lt;/c&gt; in C# or &lt;c&gt;New SampleType(dim1, dim2)&lt;/c&gt; in Visual Basic.">一種運算，用於建立新的陣列並指定每個維度的界限，例如 C# 中的 <c>new SampleType[dim1, dim2]</c> 或 Visual Basic 中的 <c>New SampleType(dim1, dim2)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary vsli:raw="An operation that creates a new one-dimensional array and initializes it from a list of elements, such as &lt;c&gt;new SampleType[]{a, b, c}&lt;/c&gt; in C# or &lt;c&gt;New SampleType(){a, b, c}&lt;/c&gt; in Visual Basic.">一種運算，用於建立新的一維陣列並以項目清單將其初始化，例如 C# 中的 <c>new SampleType[]{a, b, c}</c> 或 Visual Basic 中的 <c>New SampleType(){a, b, c}</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary vsli:raw="A bitwise complement or logical negation operation. In C#, it is equivalent to &lt;c&gt;(~a)&lt;/c&gt; for integral types and to &lt;c&gt;(!a)&lt;/c&gt; for Boolean values. In Visual Basic, it is equivalent to &lt;c&gt;(Not a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">位元補數或邏輯負數運算。 在 C# 中，這相當於 <c>(~a)</c> (適用於整數型別) 和 <c>(!a)</c> (適用於布林值)。 在 Visual Basic 中，則相當於 <c>(Not a)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary vsli:raw="An inequality comparison, such as &lt;c&gt;(a != b)&lt;/c&gt; in C# or &lt;c&gt;(a &amp;lt;&amp;gt; b)&lt;/c&gt; in Visual Basic.">不相等比較，例如 C# 中的 <c>(a != b)</c> 或 Visual Basic 中的 <c>(a &lt;&gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary vsli:raw="A ones complement operation, such as &lt;c&gt;(~a)&lt;/c&gt; in C#.">1 的補數運算，例如 C# 中的 <c>(~a)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a | b)&lt;/c&gt; in C# or &lt;c&gt;(a Or b)&lt;/c&gt; in Visual Basic.">位元或邏輯 <see langword="OR" /> 運算，例如 C# 中的 <c>(a | b)</c> 或 Visual Basic 中的 <c>(a Or b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; compound assignment, such as &lt;c&gt;(a |= b)&lt;/c&gt; in C#.">位元或邏輯 <see langword="OR" /> 複合指派，例如 C# 中的 <c>(a |= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary vsli:raw="A short-circuiting conditional &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a || b)&lt;/c&gt; in C# or &lt;c&gt;(a OrElse b)&lt;/c&gt; in Visual Basic.">最少運算 (Short-Circuiting) 條件 <see langword="OR" /> 運算，例如 C# 中的 <c>(a || b)</c> 或 Visual Basic 中的 <c>(a OrElse b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary vsli:raw="A reference to a parameter or variable that is defined in the context of the expression. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">在運算式內容中定義之參數或變數的參考。 如需詳細資訊，請參閱<see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary vsli:raw="A unary postfix decrement, such as &lt;c&gt;(a--)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">一元後置遞減，例如 <c>(a--)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary vsli:raw="A unary postfix increment, such as &lt;c&gt;(a++)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">一元後置遞增，例如 <c>(a++)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary vsli:raw="A mathematical operation that raises a number to a power, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in Visual Basic.">一種數學運算，可將數字提升為乘冪數，例如 Visual Basic 中的 <c>(a ^ b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary vsli:raw="A compound assignment operation that raises a number to a power, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in Visual Basic.">一種複合指派運算，可將數字提升為乘冪數，例如 Visual Basic 中的 <c>(a ^= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary vsli:raw="A unary prefix decrement, such as &lt;c&gt;(--a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">一元前置遞減，例如 <c>(--a)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary vsli:raw="A unary prefix increment, such as &lt;c&gt;(++a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">一元前置遞增，例如 <c>(++a)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary vsli:raw="An expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;. A &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; node can contain references to parameters that are defined in the context of the expression it represents.">有 <see cref="T:System.Linq.Expressions.Expression" /> 型別之常數值的運算式。 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 節點可包含參數的參考，這些參數都定義在節點所表示的運算式內容中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary vsli:raw="A bitwise right-shift operation, such as &lt;c&gt;(a &amp;gt;&amp;gt; b)&lt;/c&gt;.">位元右移運算，例如 <c>(a &gt;&gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary vsli:raw="A bitwise right-shift compound assignment operation, such as &lt;c&gt;(a &amp;gt;&amp;gt;= b)&lt;/c&gt;.">位元右移複合指派運算，例如 <c>(a &gt;&gt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary vsli:raw="A list of run-time variables. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">執行階段變數的清單。 如需詳細資訊，請參閱<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary vsli:raw="A subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的減法運算，例如 <c>(a - b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, without overflow checking, for numeric operands.">數值運算元的減法複合指派運算，例如 <c>(a -= b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">數值運算元的減法複合指派運算，例如 <c>(a -= b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary vsli:raw="An arithmetic subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, that has overflow checking, for numeric operands.">數值運算元的算術減法運算，例如 <c>(a - b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary vsli:raw="A switch operation, such as &lt;see langword=&quot;switch&quot; /&gt; in C# or &lt;see langword=&quot;Select Case&quot; /&gt; in Visual Basic.">切換運算，例如 C# 中的 <see langword="switch" /> 或 Visual Basic 中的 <see langword="Select Case" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary vsli:raw="An operation that throws an exception, such as &lt;c&gt;throw new Exception()&lt;/c&gt;.">擲回例外狀況的運算，例如 <c>throw new Exception()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary vsli:raw="A &lt;see langword=&quot;try-catch&quot; /&gt; expression.">
        <see langword="try-catch" /> 運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary vsli:raw="An explicit reference or boxing conversion in which &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails, such as &lt;c&gt;(obj as SampleType)&lt;/c&gt; in C# or &lt;c&gt;TryCast(obj, SampleType)&lt;/c&gt; in Visual Basic.">明確參考或 Boxing 轉換，轉換若失敗，則提供 <see langword="null" />，例如 C# 中的 <c>(obj as SampleType)</c> 或 Visual Basic 中的 <c>TryCast(obj, SampleType)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary vsli:raw="An exact type test.">確切型別測試。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary vsli:raw="A type test, such as &lt;c&gt;obj is SampleType&lt;/c&gt; in C# or &lt;c&gt;TypeOf obj is SampleType&lt;/c&gt; in Visual Basic.">型別測試，例如 C# 中的 <c>obj is SampleType</c> 或 Visual Basic 中的 <c>TypeOf obj is SampleType</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary vsli:raw="A unary plus operation, such as &lt;c&gt;(+a)&lt;/c&gt;. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.">一元正運算，例如 <c>(+a)</c>。 預先定義之一元正運算的結果是運算元的值，但使用者定義的實作可能會有不尋常的結果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary vsli:raw="An unbox value type operation, such as &lt;see langword=&quot;unbox&quot; /&gt; and &lt;see langword=&quot;unbox.any&quot; /&gt; instructions in MSIL.">Unbox 值型別運算，例如 MSIL 中的 <see langword="unbox" /> 和 <see langword="unbox.any" /> 指令。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for expression trees.">代表運算式樹狀架構的造訪者或重新寫入器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionVisitor&quot; /&gt;.">初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Dispatches the list of expressions to one of the more specialized visit methods in this class.">將運算式清單分派給此類別中較為特殊的造訪方法之一。</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.">如果任何項目已經修改，則傳回修改的運算式清單，否則傳回原始運算式清單。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Dispatches the expression to one of the more specialized visit methods in this class.">將運算式分派給此類別中較為特殊的造訪方法之一。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary vsli:raw="Visits all nodes in the collection using a specified element visitor.">使用特殊的項目造訪者，造訪集合中所有的節點。</summary>
      <param name="nodes" vsli:raw="The nodes to visit.">要造訪的節點。</param>
      <param name="elementVisitor" vsli:raw="A delegate that visits a single element, optionally replacing it with a new element.">造訪單一項目的委派，並選擇性地將它取代為新項目。</param>
      <typeparam name="T" vsli:raw="The type of the nodes.">節點的型別。</typeparam>
      <returns vsli:raw="The modified node list, if any of the elements were modified; otherwise, returns the original node list.">如果任何項目已經修改，則傳回修改的節點清單，否則傳回原始節點清單。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary vsli:raw="Visits an expression, casting the result back to the original expression type.">造訪運算式，並將結果轉換回原始運算式型別。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report to report a better error message.">呼叫方法的名稱，用來回報較佳的錯誤訊息。</param>
      <typeparam name="T" vsli:raw="The type of the expression.">運算式的型別。</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for this node returned a different type.">這個節點的造訪方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary vsli:raw="Visits all expressions in the collection, casting the results back to the original expression type.">瀏覽集合中的運算式，並將結果轉換回原始運算式類型。</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">要造訪的運算式。</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report a better error message.">呼叫方法的名稱，用於回報更佳的錯誤訊息。</param>
      <typeparam name="T" vsli:raw="The type of the expressions.">運算式的類型。</typeparam>
      <returns vsli:raw="The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.">如果任一運算式已經修正，則會傳回修正的運算式集合，否則傳回原始運算式集合。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for one of the expressions returned a different type.">其中一個運算式的瀏覽方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Visits the children of the extension expression.">造訪延伸運算式的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <typeparam name="T" vsli:raw="The type of the delegate.">委派的型別。</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">造訪 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子系。</summary>
      <param name="node" vsli:raw="The expression to visit.">要造訪的運算式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary vsli:raw="Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.">表示無條件跳躍。 這包含 return 陳述式、break 和 continue 陳述式，以及其他跳躍。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary vsli:raw="The kind of the &quot;go to&quot; expression. Serves information purposes only.">「移至」運算式的類型。 只做為資訊參考之用。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; object representing the kind of the &quot;go to&quot; expression.">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 物件，表示「移至」運算式的類型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary vsli:raw="The target label where this node jumps to.">這個節點跳至的目標標籤。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing the target label for this node.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示這個節點的目標標籤。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Value&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary vsli:raw="The value passed to the target, or null if the target is of type System.Void.">傳遞給目標的值，如果目標為 System.Void 型別則為 null。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the value passed to the target or null.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示傳遞給目標的值，或者是 null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary vsli:raw="Specifies what kind of jump this &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; represents.">指定這個 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所代表的跳躍類型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a break statement.">表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a continue statement.">表示 continue 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a jump to some location.">
        <see cref="T:System.Linq.Expressions.GotoExpression" />，表示跳至某個位置。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a return statement.">表示 return 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).  This API is for internal use only.">提供內部介面以存取多個樹狀節點 (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 IndexExpression) 的引數。  此 API 僅供內部使用。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. This API is for internal use only.">傳回運算式樹狀節點的引數數目。 此 API 僅供內部使用。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">做為 <see cref="T:System.Int32" /> 的運算式樹狀節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at &lt;paramref name=&quot;index&quot; /&gt;, throwing if &lt;paramref name=&quot;index&quot; /&gt; is out of bounds. This API is for internal use only.">傳回位於 <paramref name="index" /> 的引數，如果 <paramref name="index" /> 超出範圍則擲回引數。 此 API 僅供內部使用。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="The argument at index.">位於索引的引數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.">提供內部介面，用於存取 DynamicExpression 樹狀節點的引數以及 CallSite 和 Rewriting 功能。  您不應該使用這個 API。  它只有在 DLL 重構時為公用，且存在的唯一目的是將內部效能最佳化。</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">選擇性地建立 CallSite，並針對 DynamicExpression 的多型內嵌快取傳回 CallSite。  您不應該使用這個類型。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="The CallSite for the DynamicExpression's polymorphic inline cache.">針對 DynamicExpression 的多型內嵌快取傳回 CallSite。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary vsli:raw="Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression's polymorphic inline cache.">取得 CallSite 所使用的委派類型，也就是動態運算式多型內嵌快取中使用的規則類型。</summary>
      <returns vsli:raw="The delegate type used by the CallSite.">CallSite 使用的委派類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrites this node replacing the dynamic expression's arguments with the provided values.  The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">重寫這個節點，以所提供值取代動態運算式的引數。  <paramref name="args" /> 的數目必須符合目前的運算式數目。  您不應該使用這個類型。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。  這個 Helper 方法可在呼叫位置所使用之 DynamicExpression 的衍生特定實作類別之外重寫節點。</summary>
      <param name="args" vsli:raw="The arguments used to replace this node.">用來取代這個節點的引數。</param>
      <returns vsli:raw="The rewritten node, but if no changes were made, then returns the same node.">重寫的節點；如果未進行任何變更，則會傳回相同的節點。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary vsli:raw="Represents indexing a property or array.">表示對屬性或陣列進行索引。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary vsli:raw="Gets the arguments that will be used to index the property or array.">取得引數，這些引數將做為屬性或陣列的索引。</summary>
      <returns vsli:raw="The read-only collection containing the arguments that will be used to index the property or array.">唯讀集合，包含將做為屬性或陣列索引的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, returns null otherwise.">如果運算式表示索引屬性，則取得屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則傳回 null。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, otherwise null.">如果運算式表示索引屬性，則為屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則為 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary vsli:raw="An object to index.">要進行索引的物件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the object to index.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要進行索引的物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Object&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 屬性。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary vsli:raw="Represents an expression that applies a delegate or lambda expression to a list of argument expressions.">表示將委派或 lambda 運算式套用至引數運算式清單的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary vsli:raw="Gets the arguments that the delegate or lambda expression is applied to.">取得要套用委派或 Lambda 運算式的引數。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments that the delegate is applied to.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，代表要套用委派的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary vsli:raw="Gets the delegate or lambda expression to be applied.">取得要套用的委派或 lambda 運算式。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate to be applied.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要套用的委派。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">做為 <see cref="T:System.Int32" /> 的運算式樹狀節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds, as &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">位於索引的引數，如果索引超出範圍則擲回引數，如同 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; represents.">取得此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 屬性。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary vsli:raw="Represents a label, which can be put in any &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; context. If it is jumped to, it will get the value provided by the corresponding &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;. Otherwise, it receives the value in &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt;. If the &lt;see cref=&quot;T:System.Type&quot; /&gt; equals System.Void, no value should be provided.">表示可放在任何 <see cref="T:System.Linq.Expressions.Expression" /> 內容中的標籤。 如果跳至標籤，它會取得對應的 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所提供的值。 否則它會接收 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 中的值。 如果 <see cref="T:System.Type" /> 等於 System.Void，則不應提供任何值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary vsli:raw="The value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow (for example, is not jumped to).">透過一般控制流程到達標籤 (例如，不是跳至標籤) 時，則為 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</summary>
      <returns vsli:raw="The Expression object representing the value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">運算式物件，表示 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">與這個標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">與這個標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Target&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 屬性。</param>
      <param name="defaultValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary vsli:raw="Used to represent the target of a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">用來表示 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的目標。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary vsli:raw="Gets the name of the label.">取得標籤的名稱。</summary>
      <returns vsli:raw="The name of the label.">標籤名稱。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary vsli:raw="The type of value that is passed when jumping to the label (or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed).">跳至標籤時所傳遞值的型別 (如果不應傳遞任何值則為 <see cref="T:System.Void" />)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the value that is passed when jumping to the label or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed.">
        <see cref="T:System.Type" /> 物件，表示跳至標籤時所傳遞值的型別，如果不應傳遞任何值則為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary vsli:raw="Describes a lambda expression. This captures a block of code that is similar to a .NET method body.">說明 Lambda 運算式。 這會擷取類似於 .NET 方法主體的程式碼區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary vsli:raw="Gets the body of the lambda expression.">取得 Lambda 運算式的主體。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the body of the lambda expression.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示 Lambda 運算式的主體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">產生代表 Lambda 運算式的委派。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Delegate&quot; /&gt; that contains the compiled version of the lambda expression.">
        <see cref="T:System.Delegate" />，包含編譯後的 Lambda 運算式版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary vsli:raw="Produces an interpreted or compiled delegate that represents the lambda expression.">會產生代表 Lambda 運算式的解譯或編譯委派。</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示運算式應編譯為已解譯的形式 (如果可行)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; object.">委派，表示 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 物件描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">產生代表 Lambda 運算式的委派。</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">編譯器使用的偵錯資訊產生工具，用以標記序列點以及標註區域變數。</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">委派，包含 Lambda 的編譯版本。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary vsli:raw="Gets the name of the lambda expression.">取得 Lambda 運算式的名稱。</summary>
      <returns vsli:raw="The name of the lambda expression.">Lambda 運算式的名稱。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary vsli:raw="Gets the parameters of the lambda expression.">取得 Lambda 運算式的參數。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects that represent the parameters of the lambda expression.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表 Lambda 運算式的參數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary vsli:raw="Gets the return type of the lambda expression.">取得 Lambda 運算式的傳回型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the lambda expression.">
        <see cref="T:System.Type" /> 物件，表示 Lambda 運算式的型別。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary vsli:raw="Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.">取得值，這個值表示 Lambda 運算式是否會以 tail 呼叫最佳化來編譯。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the lambda expression will be compiled with the tail call optimization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果 lambda 運算式將使用 tail 呼叫優化進行編譯, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary vsli:raw="Represents a constructor call that has a collection initializer.">表示具有集合初始設定式的建構函式呼叫。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果可以減少節點, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary vsli:raw="Gets the element initializers that are used to initialize a collection.">取得可用來初始化集合的項目初始化設定式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects which represent the elements that are used to initialize the collection.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ElementInit" />，表示用於初始化集合的項目。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that contains a call to the constructor of a collection type.">取得運算式，這個運算式包含對集合型別之建構函式的呼叫。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the call to the constructor of a collection type.">
        <see cref="T:System.Linq.Expressions.NewExpression" />，表示對集合型別之建構函式的呼叫。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性。</param>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary vsli:raw="Represents an infinite loop. It can be exited with &quot;break&quot;.">表示無限迴圈。 可使用「中斷」結束它。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">取得做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">取得迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">取得迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="breakLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.BreakLabel&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 屬性。</param>
      <param name="continueLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.ContinueLabel&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 屬性。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Body&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary vsli:raw="Represents assignment operation for a field or property of an object.">表示物件之欄位或屬性的指派運算。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary vsli:raw="Gets the expression to assign to the field or property.">取得要指派到欄位或屬性的運算式。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the value to assign to the field or property.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示要指派給欄位或屬性的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary vsli:raw="Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.">提供基底類別，從其中衍生的類別表示用於初始化新建立物件的繫結。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; class.">初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; that discriminates the type of binding that is represented.">
        <see cref="T:System.Linq.Expressions.MemberBindingType" />，可區分表示的繫結型別。</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to be initialized.">
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary vsli:raw="Gets the type of binding that is represented.">取得所表示之繫結的型別。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; values.">其中一個 <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary vsli:raw="Gets the field or property to be initialized.">取得要初始化的欄位或屬性。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be initialized.">
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary vsli:raw="Describes the binding types that are used in &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; objects.">描述用於 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 物件中的繫結型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary vsli:raw="A binding that represents initializing a member with the value of an expression.">表示以運算式的值來初始化成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary vsli:raw="A binding that represents initializing a member of type &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; or &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; from a list of elements.">表示初始化項目清單中 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 型別之成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary vsli:raw="A binding that represents recursively initializing members of a member.">表示遞迴初始化成員之成員的繫結。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary vsli:raw="Represents accessing a field or property.">表示存取欄位或屬性。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary vsli:raw="Gets the containing object of the field or property.">取得欄位或屬性的包含物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the containing object of the field or property.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示欄位或屬性的包含物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary vsli:raw="Gets the field or property to be accessed.">取得要存取的欄位或屬性。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be accessed.">
        <see cref="T:System.Reflection.MemberInfo" />，表示要存取的欄位或屬性。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt;.">傳回這個 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary vsli:raw="Represents calling a constructor and initializing one or more members of the new object.">表示呼叫建構函式，並初始化新物件的一個或多個成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of the newly created object.">取得繫結，這個繫結說明如何初始化新建立物件的成員。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects which describe how to initialize the members.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.MemberBinding" />，說明如何初始化成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果可以減少節點, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that represents the constructor call.">取得表示建構函式呼叫的運算式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the constructor call.">表示建構函式呼叫的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary vsli:raw="Reduces the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; to a simpler expression.">將 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 精簡為更簡單的運算式。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 屬性。</param>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary vsli:raw="Represents initializing the elements of a collection member of a newly created object.">表示初始化新建立物件之集合成員的項目。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary vsli:raw="Gets the element initializers for initializing a collection member of a newly created object.">取得初始化新建立物件之集合成員的初始設定式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection member with.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ElementInit" />，用來初始化集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary vsli:raw="Represents initializing members of a member of a newly created object.">表示初始化新建立物件之成員的成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of a member.">取得繫結，這個繫結說明如何初始化成員的成員。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects that describe how to initialize the members of the member.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.MemberBinding" />，說明初始化成員的成員。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary vsli:raw="Represents a call to either static or an instance method.">表示呼叫靜態或執行個體方法。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary vsli:raw="Gets a collection of expressions that represent arguments of the called method.">取得運算式的集合，這些運算式表示所呼叫方法的引數。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments to the called method.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示已呼叫方法的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the method to be called.">取得要呼叫之方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the called method.">
        <see cref="T:System.Reflection.MethodInfo" />，表示已呼叫方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the instance for instance method calls or null for static method calls.">取得 <see cref="T:System.Linq.Expressions.Expression" />，表示執行個體 (適用於執行個體方法呼叫) 或 Null (適用於靜態方法呼叫)。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the receiving object of the method.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示方法的接收物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">做<see cref="T:System.Int32" />為的運算式樹狀結構節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary vsli:raw="Represents creating a new array and possibly initializing the elements of the new array.">表示建立新陣列，並可能初始化新陣列的項目。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary vsli:raw="Gets the bounds of the array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt;, or the values to initialize the elements of the new array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt;.">如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，則取得陣列的界限，如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，則取得值以初始化新陣列的項目。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent either the bounds of the array or the initialization values.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示陣列的界限或初始化值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary vsli:raw="Represents a constructor call.">表示建構函式呼叫。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the constructor.">取得建構函式的引數。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the constructor.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的集合，表示建構函式的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary vsli:raw="Gets the called constructor.">取得所呼叫的建構函式。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the called constructor.">代表所呼叫建構函式的 <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary vsli:raw="Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.">取得可擷取以建構函式引數初始化之欄位值的成員。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.">
        <see cref="T:System.Reflection.MemberInfo" /> 物件的集合，表示可擷取以建構函式引數初始化之欄位值的成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Gets the number of arguments to the expression tree node.">取得運算式樹狀節點的引數數目。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node.">運算式樹狀節點的引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.">傳回位於索引的引數，如果索引超出範圍則擲回引數。</summary>
      <param name="index" vsli:raw="The index of the argument.">引數的索引。</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds.">位於索引的引數，如果索引超出範圍則擲回。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary vsli:raw="Represents a named parameter expression.">表示具名參數運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">瀏覽這個節點的造訪者。</param>
      <returns vsli:raw="The result of visiting this node.">瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary vsli:raw="Indicates that this &lt;c&gt;ParameterExpression&lt;/c&gt; is to be treated as a &lt;see langword=&quot;ByRef&quot; /&gt; parameter.">表示這個 <c>ParameterExpression</c> 會被視為 <see langword="ByRef" /> 參數。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;c&gt;ParameterExpression&lt;/c&gt; is a &lt;see langword=&quot;ByRef&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果這個<c>system.linq.expressions.parameterexpression&gt;</c>是<see langword="ByRef" />參數, 則為, <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary vsli:raw="Gets the name of the parameter or variable.">取得參數或變數的名稱。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the parameter.">包含參數名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary vsli:raw="An expression that provides runtime read/write permission for variables.">為變數提供執行階段讀取/寫入權限的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary vsli:raw="The variables or parameters to which to provide runtime access.">要提供執行階段存取的變數或參數。</summary>
      <returns vsli:raw="The read-only collection containing parameters that will be provided the runtime access.">唯讀集合，包含將提供執行階段存取的參數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary vsli:raw="Represents one case of a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">表示 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的一個案例。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary vsli:raw="Gets the body of this case.">取得這個案例的主體。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object that represents the body of the case block.">表示 case 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary vsli:raw="Gets the values of this case. This case is selected for execution when the &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; matches any of these values.">取得這個案例的值。 當 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 符合任何這些值時，會選取這個案例開始執行。</summary>
      <returns vsli:raw="The read-only collection of the values for this case block.">這個 case 區塊的唯讀值集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="testValues" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.TestValues&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 屬性。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.Body&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary vsli:raw="Represents a control expression that handles multiple selections by passing control to &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">表示透過將控制權傳遞至 <see cref="T:System.Linq.Expressions.SwitchCase" /> 來處理多重選擇的控制運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects for the switch.">取得切換的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件集合。</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary vsli:raw="Gets the equality comparison method, if any.">取得相等比較方法 (如果有的話)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the equality comparison method.">表示相等比較方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary vsli:raw="Gets the test for the switch.">取得切換的測試。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary vsli:raw="Gets the test for the switch.">取得切換的測試。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="switchValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 屬性。</param>
      <param name="cases" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Cases&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 屬性。</param>
      <param name="defaultBody" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.DefaultBody&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary vsli:raw="Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.">儲存發出原始程式檔偵錯符號資訊所需的資訊，特別是檔名和唯一語言識別項。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary vsli:raw="Returns the document type's unique identifier, if any.">傳回文件類型的唯一識別項 (如果有的話)。 預設為文字檔的 GUID。</summary>
      <returns vsli:raw="The document type's unique identifier. The default is the GUID for a text file.">文件類型的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary vsli:raw="The source file name.">原始程式檔的名稱。</summary>
      <returns vsli:raw="The string representing the source file name.">表示原始程式檔名稱的字串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary vsli:raw="Returns the language's unique identifier, if any.">傳回語言的唯一識別項 (如果有的話)。</summary>
      <returns vsli:raw="The language's unique identifier.">語言的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary vsli:raw="Returns the language vendor's unique identifier, if any.">傳回語言廠商的唯一識別項 (如果有的話)。</summary>
      <returns vsli:raw="The language vendor's unique identifier.">語言廠商的唯一識別項。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary vsli:raw="Represents a try/catch/finally/fault block.">表示 try/catch/finally/fault 區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">取得表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">取得表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">取得表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">取得與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Body&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 屬性。</param>
      <param name="handlers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Handlers&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 屬性。</param>
      <param name="finally" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Finally&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 屬性。</param>
      <param name="fault" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Fault&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary vsli:raw="Represents an operation between an expression and a type.">表示運算式和型別之間的作業。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary vsli:raw="Gets the expression operand of a type test operation.">取得型別測試作業的運算式運算元。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression operand of a type test operation.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示型別測試作業的運算式運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; represents.">取得此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary vsli:raw="Gets the type operand of a type test operation.">取得型別測試作業的型別運算元。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type operand of a type test operation.">
        <see cref="T:System.Type" />，表示型別測試作業的型別運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary vsli:raw="Represents an expression that has a unary operator.">表示有一元 (Unary) 運算子的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果可以減少節點, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">取得值，這個值指出運算式樹狀節點是否表示對運算子的消除呼叫。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果節點表示消除呼叫，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">取得值，這個值指出運算式樹狀節點是否表示對運算子的消除呼叫，該運算子的傳回型別對可為 null 的型別已消除。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果運算子的傳回型別對可為 null 的型別消除，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the unary operation.">取得一元作業的實作方法。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary vsli:raw="Gets the operand of the unary operation.">取得一元作業的運算元。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand of the unary operation.">
        <see cref="T:System.Linq.Expressions.Expression" />，表示一元作業的運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary vsli:raw="Reduces the expression node to a simpler expression.">將運算式節點精簡為更簡單的運算式。</summary>
      <returns vsli:raw="The reduced expression.">精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Type&quot; /&gt; that represents the static type of the expression.">代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="operand" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property of the result.">結果的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary vsli:raw="Represents the result of a sorting operation.">代表排序作業的結果。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary vsli:raw="Represents the result of a sorting operation.">代表排序作業的結果。</summary>
      <typeparam name="T" vsli:raw="The type of the content of the data source.">資料來源的內容類型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.">提供功能，對未指定資料型別的特定資料來源評估查詢。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary vsli:raw="Gets the type of the element(s) that are returned when the expression tree associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; is executed.">取得與這個 <see cref="T:System.Linq.IQueryable" /> 執行個體關聯的運算式樹狀架構執行時，所傳回項目的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.">
        <see cref="T:System.Type" />，表示與這個物件關聯的運算式樹狀架構執行時，所傳回項目的型別。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary vsli:raw="Gets the expression tree that is associated with the instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">取得與 <see cref="T:System.Linq.IQueryable" /> 之執行個體關聯的運算式樹狀架構。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">與這個 <see cref="T:System.Linq.Expressions.Expression" /> 之執行個體相關聯的 <see cref="T:System.Linq.IQueryable" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary vsli:raw="Gets the query provider that is associated with this data source.">取得與這個資料來源關聯的查詢提供者。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryProvider&quot; /&gt; that is associated with this data source.">與這個資料來源關聯的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.">提供功能，對已知資料型別的特定資料來源評估查詢。</summary>
      <typeparam name="T" vsli:raw="The type of the data in the data source.">資料來源中的資料型別。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary vsli:raw="Defines methods to create and execute queries that are described by an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object.">定義方法來建立並執行 <see cref="T:System.Linq.IQueryable" /> 物件所描述的查詢。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">建構 <see cref="T:System.Linq.IQueryable" /> 物件，這個物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">代表 LINQ 查詢的運算式樹狀架構。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that can evaluate the query represented by the specified expression tree.">
        <see cref="T:System.Linq.IQueryable" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">建構 <see cref="T:System.Linq.IQueryable`1" /> 物件，這個物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of the &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that is returned.">所傳回 <see cref="T:System.Linq.IQueryable`1" /> 之項目的型別。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that can evaluate the query represented by the specified expression tree.">
        <see cref="T:System.Linq.IQueryable`1" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the query represented by a specified expression tree.">執行指定之運算式樹狀架構所代表的查詢。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">代表 LINQ 查詢的運算式樹狀架構。</param>
      <returns vsli:raw="The value that results from executing the specified query.">執行指定的查詢所產生的值。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the strongly-typed query represented by a specified expression tree.">執行由指定之運算式樹狀架構所代表的強型別查詢。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TResult" vsli:raw="The type of the value that results from executing the query.">執行查詢所產生值的型別。</typeparam>
      <returns vsli:raw="The value that results from executing the specified query.">執行指定的查詢所產生的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary vsli:raw="A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.">動態呼叫站台的基底類別。 這個型別是做為動態站台目標的參數型別使用。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary vsli:raw="Class responsible for binding dynamic operations on the dynamic site.">負責在動態站台上執行繫結動態作業的類別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; object responsible for binding dynamic operations.">負責執行繫結動態作業的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates a call site with the given delegate type and binder.">使用指定的委派型別和繫結器，建立呼叫站台。</summary>
      <param name="delegateType" vsli:raw="The call site delegate type.">呼叫站台的委派型別。</param>
      <param name="binder" vsli:raw="The call site binder.">呼叫站台繫結器。</param>
      <returns vsli:raw="The new call site.">新的呼叫站台。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary vsli:raw="Dynamic site type.">動態站台類型。</summary>
      <typeparam name="T" vsli:raw="The delegate type.">委派類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.">建立動態呼叫站台的執行個體，並以負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器來初始化。</summary>
      <param name="binder" vsli:raw="The binder responsible for the runtime binding of the dynamic operations at this call site.">負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器。</param>
      <returns vsli:raw="The new instance of dynamic call site.">動態呼叫站台的新執行個體。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary vsli:raw="The Level 0 cache - a delegate specialized based on the site history.">層級 0 快取：根據站台記錄的特殊化委派。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary vsli:raw="The update delegate. Called when the dynamic site experiences cache miss.">更新委派。 當動態站台發生快取遺漏時呼叫。</summary>
      <returns vsli:raw="The update delegate.">更新委派。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary vsli:raw="Class responsible for runtime binding of the dynamic operations on the dynamic call site.">負責在動態呼叫位置上執行動態作業之執行階段繫結的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">在一組引數上執行動態作業的執行階段繫結。</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">動態作業的引數陣列。</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">LabelTarget，用來傳回動態繫結的結果。</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。 如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary vsli:raw="Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.">提供低階執行階段繫結支援。 類別可以將它覆寫，並為規則實作提供直接委派。 如此可將規則儲存至磁碟、在執行階段使用特殊化規則，或提供不同的快取原則。</summary>
      <param name="site" vsli:raw="The CallSite the bind is being performed for.">正在為其執行繫結的 CallSite。</param>
      <param name="args" vsli:raw="The arguments for the binder.">繫結器的引數。</param>
      <typeparam name="T" vsli:raw="The target type of the CallSite.">CallSite 的目標型別。</typeparam>
      <returns vsli:raw="A new delegate which replaces the CallSite Target.">取代 CallSite 目標的新委派。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary vsli:raw="Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.">將目標加入至已知目標的快取。 在呼叫 BindDelegate 產生新規則之前，會先掃描快取的目標。</summary>
      <param name="target" vsli:raw="The target delegate to be added to the cache.">要加入至快取的目標委派。</param>
      <typeparam name="T" vsli:raw="The type of target being added.">要加入的目標型別。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary vsli:raw="Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">取得可導致繫結更新的標籤。 它表示運算式的繫結不再是有效。 這通常用於在動態物件的「版本」已變更時。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing a label that can be used to trigger the binding update.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示可用來觸發繫結更新的標籤。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary vsli:raw="Class that contains helper methods for DLR CallSites.">包含 DLR CallSites 之 Helper 方法的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary vsli:raw="Checks if a &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack.">檢查 <see cref="T:System.Reflection.MethodBase" /> 是否供 DLR 內部使用，而且不應在語言程式碼堆疊上顯示。</summary>
      <param name="mb" vsli:raw="The input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt;.">輸入的 <see cref="T:System.Reflection.MethodBase" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack. Otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果輸入的 <see cref="T:System.Reflection.MethodBase" /> 是供 DLR 內部使用，而且不應在語言程式碼堆疊上顯示，則為 true， 否則為 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary vsli:raw="Generates debug information for lambda expressions in an expression tree.">為運算式樹狀架構中的 Lambda 運算式產生偵錯資訊。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DebugInfoGenerator&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary vsli:raw="Creates a program database (PDB) symbol generator.">建立程式資料庫 (PDB) 符號產生器。</summary>
      <returns vsli:raw="A PDB symbol generator.">PDB 符號產生器。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Marks a sequence point in Microsoft intermediate language (MSIL) code.">標記 Microsoft Intermediate Language (MSIL) 程式碼中的序列點。</summary>
      <param name="method" vsli:raw="The lambda expression that is generated.">產生的 Lambda 運算式。</param>
      <param name="ilOffset" vsli:raw="The offset within MSIL code at which to mark the sequence point.">MSIL 程式碼中要標記序列點的位移。</param>
      <param name="sequencePoint" vsli:raw="Debug information that corresponds to the sequence point.">對應於序列點的偵錯資訊。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary vsli:raw="Indicates that the use of &lt;see cref=&quot;T:System.Object&quot; /&gt; on a member is meant to be treated as a dynamically dispatched type.">表示成員上 <see cref="T:System.Object" /> 的使用將視為動態分派型別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
      <param name="transformFlags" vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</summary>
      <returns vsli:raw="The list of &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences that are meant to be treated as a dynamically dispatched type.">將視為動態分派型別 <see cref="T:System.Object" /> 相符項目清單。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary vsli:raw="Represents the values of run-time variables.">表示執行階段變數的值。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary vsli:raw="Gets a count of the run-time variables.">取得執行階段變數的計數。</summary>
      <returns vsli:raw="The number of run-time variables.">執行階段變數的數目。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary vsli:raw="Gets the value of the run-time variable at the specified index.">取得指定之索引處的執行階段變數值。</summary>
      <param name="index" vsli:raw="The zero-based index of the run-time variable whose value is to be returned.">執行階段變數 (要傳回其值) 的以零起始的索引。</param>
      <returns vsli:raw="The value of the run-time variable.">執行階段變數的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary vsli:raw="The builder for read only collection.">唯讀集合的產生器。</summary>
      <typeparam name="T" vsli:raw="The type of the collection element.">集合項目的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, copying the contents of the given collection.">建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />，並複製指定集合的內容。</summary>
      <param name="collection" vsli:raw="Collection to copy elements from.">要複製項目的來源集合。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.">使用指定的初始容量，建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。 需要任何重新配置之前，內容是空白，但產生器有保留空間供指定數目的項目使用。</summary>
      <param name="capacity" vsli:raw="Initial capacity.">初始容量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">將項目加入至 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">要加入至 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary vsli:raw="Gets or sets the capacity of this &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">取得或設定此 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的容量。</summary>
      <returns vsli:raw="The capacity of this &lt;c&gt;ReadOnlyCollectionBuilder.&lt;/c&gt;">此 ReadOnlyCollectionBuilder 的容量<c>。</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除所有項目。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; contains a specific value.">判斷 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 是否包含特定值。</summary>
      <param name="item" vsli:raw="the object to locate in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">要在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中尋找的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中找到項目，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">從特定的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 複製過來之項目的目的端。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">陣列中以零起始的索引，即複製的起始處。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">取得 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的項目數目。</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的項目數。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">可以用來逐一查看集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in the builder.">傳回產生器中第一次出現指定值的索引。</summary>
      <param name="item" vsli:raw="An item to search for.">要搜尋的項目。</param>
      <returns vsli:raw="The index of the first occurrence of an item.">第一個符合項目的索引。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; at the specified index.">將項目插入位於指定索引的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <param name="index" vsli:raw="The zero-based index at which item should be inserted.">應該插入 item 之以零起始的索引。</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">要插入 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">在指定的索引位置上取得或設定項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要取得或設定之以零為起始的項目索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">要從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 移除的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, false. This method also returns false if item is not found in the original &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">如果從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 成功移除項目則為 true，否則為 false。 如果在原始的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中找不到該項目，這個方法也會傳回 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; item at the specified index.">移除在指定索引處的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">反轉整個 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中項目的順序。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">反向指定範圍中項目的順序。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">要反向範圍中的項目數。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的項目複製到陣列。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">一維陣列，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之項目的目的端。 陣列必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">插入新項目的位置。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="value" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要插入 <see cref="T:System.Collections.IList" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">在指定的索引位置上取得或設定項目。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">要取得或設定之以零為起始的項目索引。</param>
      <returns vsli:raw="The element at the specified index.">在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to a new array.">將 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的項目複製到新的陣列。</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">陣列，包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的項目複本。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; containing all of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, avoiding copying the elements to the new array if possible. Resets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; after the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; has been created.">建立 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，其中包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的所有項目，可能的話避免將項目複製到新陣列。 建立 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 之後，重設 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的新執行個體。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary vsli:raw="Represents a cache of runtime binding rules.">表示執行階段繫結規則的快取。</summary>
      <typeparam name="T" vsli:raw="The delegate type.">委派類型。</typeparam>
    </member>
  </members>
</doc>
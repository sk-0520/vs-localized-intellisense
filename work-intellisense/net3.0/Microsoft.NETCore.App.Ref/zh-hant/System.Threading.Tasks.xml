<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>在取消執行緒執行的作業之後，在執行緒中擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>使用系統提供的錯誤訊息，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>使用指定的錯誤訊息、造成這個例外狀況原因的內部例外狀況參考和取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>使用指定的錯誤訊息和取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>使用取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>取得與已取消之作業相關聯的語彙基元。</summary>
      <returns>與已取消之作業相關聯的語彙基元，或是預設語彙基元。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>表示非同步迭代器的產生器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>將反覆項目標示為完成，無論成功與否。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" /> 結構的執行個體。</summary>
      <returns>初始化的執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>叫用狀態機器上的 <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" />，同時防護 <see cref="T:System.Threading.ExecutionContext" />。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>表示非同步方法產生器，會傳回工作。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。 可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> 類別的執行個體。</summary>
      <returns>產生器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>將工作標示為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">工作已完成。  
 -或-  
 產生器未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>將工作標記為已成功完成。</summary>
      <exception cref="T:System.InvalidOperationException">工作已完成。  
 -或-  
 產生器未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>將產生器與指定的狀態機器產生關聯。</summary>
      <param name="stateMachine">要和產生器產生關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">狀態電腦先前已經設定。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>開始執行具有相關聯狀態機器的產生器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>取得此產生器的工作。</summary>
      <returns>此產生器的工作。</returns>
      <exception cref="T:System.InvalidOperationException">產生器未初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>表示非同步方法的產生器，會傳回一項工作並提供結果參數。</summary>
      <typeparam name="TResult">要用來完成工作的結果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。 可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> 類別的執行個體。</summary>
      <returns>產生器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>將工作標示為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">工作已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>將工作標記為已成功完成。</summary>
      <param name="result">要用來完成工作的結果。</param>
      <exception cref="T:System.InvalidOperationException">工作已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>將產生器與指定的狀態機器產生關聯。</summary>
      <param name="stateMachine">要和產生器產生關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">狀態電腦先前已經設定。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>開始執行具有相關聯狀態機器的產生器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>取得此產生器的工作。</summary>
      <returns>此產生器的工作。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>表示非同步方法產生器，不會傳回值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。 可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> 類別的執行個體。</summary>
      <returns>產生器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>將例外狀況繫結至方法建立幫手。</summary>
      <param name="exception">要繫結的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">產生器未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>將方法產生器標記為成功完成。</summary>
      <exception cref="T:System.InvalidOperationException">產生器未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>將產生器與指定的狀態機器產生關聯。</summary>
      <param name="stateMachine">要和產生器產生關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">狀態電腦先前已經設定。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>開始執行具有相關聯狀態機器的產生器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>提供可用來設定 <see cref="T:System.IAsyncDisposable" /> 上 await 執行方式的型別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>以非同步方式釋放 <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" /> 使用的不受控資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>提供 awaitable 非同步列舉項目，啟用可取消反覆項目和已設定的 await。</summary>
      <typeparam name="T">要列舉的數值型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>設定如何執行從非同步反覆項目傳回的工作 await。</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> 則擷取和封送處理回到目前的內容，否則為 <see langword="false" />。</param>
      <returns>已設定的列舉項目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>提供 awaitable 非同步列舉程式，啟用可取消反覆項目和已設定的 await。</summary>
      <typeparam name="T">要列舉的數值型別。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>非同步執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之由應用程式定義的工作。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>以非同步方式讓列舉程式前進至集合的下個元素。</summary>
      <returns>如果列舉程式成功前進至下個元素，則為使用 <see langword="true" /> 結果完成的 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />；如果列舉程式已超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>傳回列舉程式，此列舉程式會以非同步方式逐一查看可取消反覆項目集合且已設定等候的集合。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" /> 類別的列舉程式。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>設定要在逐一查看時傳遞給 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要使用的取消權杖。</param>
      <returns>已設定的列舉項目。</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>向 <see cref="T:System.Threading.CancellationToken" /> 發出訊號，表示應該將它取消。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 類別的新執行個體，這個執行個體將會在指定的延遲 (以毫秒為單位) 之後被取消。</summary>
      <param name="millisecondsDelay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等候的時間間隔 (毫秒)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 小於 -1。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 類別的新執行個體，這個執行個體將會在指定的時間範圍之後被取消。</summary>
      <param name="delay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等候的時間間隔 (毫秒)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> 小於 -1 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>傳遞取消要求。</summary>
      <exception cref="T:System.ObjectDisposedException">已經處置這個 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.AggregateException">包含所有由相關聯的 <see cref="T:System.Threading.CancellationToken" /> 上已註冊的回呼所擲回例外狀況的彙總例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>傳遞取消要求，並指定如果發生例外狀況時，是否應處理其餘回呼和可取消的作業。</summary>
      <param name="throwOnFirstException">如果應該立即散佈例外狀況則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置這個 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.AggregateException">包含所有由相關聯的 <see cref="T:System.Threading.CancellationToken" /> 上已註冊的回呼所擲回例外狀況的彙總例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>在這個 <see cref="T:System.Threading.CancellationTokenSource" /> 上，將取消作業排程於指定的毫秒數後。</summary>
      <param name="millisecondsDelay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 之前所要等待的時間範圍。</param>
      <exception cref="T:System.ObjectDisposedException">當這個<see cref="T:System.Threading.CancellationTokenSource" />已經過處置後，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="millisecondsDelay" /> 小於 -1 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>在這個 <see cref="T:System.Threading.CancellationTokenSource" /> 上，將取消作業排程於指定的時間範圍後。</summary>
      <param name="delay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 之前所要等待的時間範圍。</param>
      <exception cref="T:System.ObjectDisposedException">當這個<see cref="T:System.Threading.CancellationTokenSource" />已經過處置後，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">當<paramref name="delay" />小於 -1 或大於 Int32.MaxValue 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>建立 <see cref="T:System.Threading.CancellationTokenSource" />，且設定只要有任何來源語彙基元處於已取消狀態，它就會處於已取消狀態。</summary>
      <param name="token1">要觀察的第一個取消語彙基元。</param>
      <param name="token2">要觀察的第二個取消語彙基元。</param>
      <returns>已連結至來源語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置 <see cref="T:System.Threading.CancellationTokenSource" /> 與其中一個來源語彙基元 (Token) 的關聯。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>建立 <see cref="T:System.Threading.CancellationTokenSource" />，且設定只要指定的陣列中有任何來源語彙基元處於已取消狀態，它就會處於已取消狀態。</summary>
      <param name="tokens">包含要觀察之取消語彙基元執行個體的陣列。</param>
      <returns>已連結至來源語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置 <see cref="T:System.Threading.CancellationTokenSource" /> 與其中一個來源語彙基元 (Token) 的關聯。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> 是空的。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>釋放 <see cref="T:System.Threading.CancellationTokenSource" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.CancellationTokenSource" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>取得是否已要求取消這個 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>如果已為這個 <see cref="T:System.Threading.CancellationTokenSource" /> 要求取消，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>取得與這個 <see cref="T:System.Threading.CancellationToken" /> 關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>與這個 <see cref="T:System.Threading.CancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置語彙基元來源。</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>提供工作排程器，以協調執行工作，並確保並行工作可以同時執行，而獨佔式工作永遠不可能。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，這個執行個體會以指定的排程器為目標。</summary>
      <param name="taskScheduler">應該執行這一組的目標排程器。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，這個執行個體以具有最大並行層級的指定排程器為目標。</summary>
      <param name="taskScheduler">應該執行這一組的目標排程器。</param>
      <param name="maxConcurrencyLevel">要同時執行的工作的最大數目。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，這個執行個體以指定的排程器為目標，其具有最大並行層級與可當做一個單位來進行處理的排定工作最大數目。</summary>
      <param name="taskScheduler">應該執行這一組的目標排程器。</param>
      <param name="maxConcurrencyLevel">要同時執行的工作的最大數目。</param>
      <param name="maxItemsPerTask">要針對此配對所使用的每個基礎排定工作進行處理的工作的最大數目。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>通知排程器配對，它不應該接受任何更多的工作。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" />，當排程器已完成處理時，它就會完成。</summary>
      <returns>排程器完成處理時將完成的非同步作業。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>取得 <see cref="T:System.Threading.Tasks.TaskScheduler" />，這個物件可以用來排程工作至此組，而這些工作可能會與其他工作同時在此組上執行。</summary>
      <returns>可用來同時排程工作的物件。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>取得 <see cref="T:System.Threading.Tasks.TaskScheduler" />，這個物件可以用來排程工作至此組，相對於其他工作，這些工作必須以獨佔方式在此組上執行。</summary>
      <returns>可用來排定無法與其他工作同時執行之工作的物件。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>提供一組靜態方法來設定非同步可列舉項目和可處置項目的工作相關行為。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>設定如何執行從非同步可處置項目傳回的工作 await。</summary>
      <param name="source">來源非同步可處置項目。</param>
      <param name="continueOnCapturedContext">若為 <see langword="true" />，則會擷取並封送回目前的內容；否則為 <see langword="false" />。</param>
      <returns>已設定的非同步可處置項目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>設定如何執行從非同步反覆項目傳回的工作 await。</summary>
      <param name="source">要逐一查看的來源可列舉項目。</param>
      <param name="continueOnCapturedContext">若為 <see langword="true" />，則會擷取並封送回目前的內容；否則為 <see langword="false" />。</param>
      <typeparam name="T">要反復查看的物件類型。</typeparam>
      <returns>已設定的列舉項目。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>設定要在逐一查看時傳遞給 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="source">要逐一查看的來源可列舉項目。</param>
      <param name="cancellationToken">要使用的取消權杖。</param>
      <typeparam name="T">要反復查看的物件類型。</typeparam>
      <returns>已設定的列舉項目。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>表示用來傳達工作取消的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>使用指定的錯誤訊息、造成此例外狀況的內部例外狀況參考，以及觸發取消的 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 來初始化 <see cref="T:System.Threading.CancellationToken" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
      <param name="token">觸發取消的取消權杖。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>使用已取消之 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 的參考，初始化 <see cref="T:System.Threading.Tasks.Task" /> 類別的新執行個體。</summary>
      <param name="task">已取消的工作。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>取得與這個例外狀況相關聯的工作。</summary>
      <returns>與這個例外狀況相關聯之 <see cref="T:System.Threading.Tasks.Task" /> 的參考。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>代表未與委派繫結之 <see cref="T:System.Threading.Tasks.Task`1" /> 的生產者端，可提供透過 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 屬性對消費者端的存取。</summary>
      <typeparam name="TResult">與這個<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />相關聯之結果值的類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>使用指定的狀態，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要當成基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 之 AsyncState 的狀態。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的狀態和選項，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要當成基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 之 AsyncState 的狀態。</param>
      <param name="creationOptions">建立基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 時要使用的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 代表搭配 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 使用的選項無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的選項，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="creationOptions">建立基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 時要使用的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 代表搭配 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 使用的選項無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 狀態。</summary>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 已處於三個最終狀態的其中一種：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，或是已經處置基礎 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>將基礎的 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換到 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態，並將它與例外狀況物件集合繫結。</summary>
      <param name="exceptions">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的例外狀況集合。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一或多個 Null 項目。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 已經為下列三種最終狀態之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>嘗試將基礎的 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換到 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態，並將其與指定的例外狀況繫結。</summary>
      <param name="exception">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的例外狀況。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 已經為下列三種最終狀態之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 狀態。</summary>
      <param name="result">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果值。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 已經為下列三種最終狀態之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所建立的 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所建立的 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 狀態。</summary>
      <returns>如果作業成功則為 true，如果作業未成功或物件已處置則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 狀態，並使取消語彙基元儲存於已取消的工作。</summary>
      <param name="cancellationToken">取消語彙基元。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>嘗試將基礎的 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換到 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態，並將其與例外狀況物件集合繫結。</summary>
      <param name="exceptions">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的例外狀況集合。</param>
      <returns>如果作業成功則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一或多個 Null 項目。  
-或- 
<paramref name="exceptions" /> 集合是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>嘗試將基礎的 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換到 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態，並將它與指定的例外狀況繫結。</summary>
      <param name="exception">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的例外狀況。</param>
      <returns>如果作業成功則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task`1" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 狀態。</summary>
      <param name="result">要繫結至這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果值。</param>
      <returns>如果作業成功則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供一組 static (Visual Basic 中是 Shared) 方法，以處理特定類型的 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>建立 Proxy <see cref="T:System.Threading.Tasks.Task" />，表示 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> 的非同步作業。</summary>
      <param name="task">要解除包裝的 <see langword="Task&lt;Task&gt;" /> (C#) 或 <see langword="Task (Of Task)" /> (Visual Basic)。</param>
      <returns>工作，表示提供之 <see langword="System.Threading.Tasks.Task(Of Task)" /> 的非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="task" /> 引數為 Null 時，所會擲回例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>建立 Proxy <see cref="T:System.Threading.Tasks.Task" />，表示 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或 <see langword="Task (Of Task(Of T))" /> (Visual Basic) 的非同步作業。</summary>
      <param name="task">要解除包裝的 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或 <see langword="Task (Of Task(Of T))" /> (Visual Basic)。</param>
      <typeparam name="TResult">工作結果的型別。</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />，表示提供之 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或 <see langword="Task (Of Task(Of T))" /> (Visual Basic) 的非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="task" /> 引數為 Null 時，所會擲回例外狀況。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>表示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 用來傳達無效作業的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>使用預設錯誤訊息和造成這個例外狀況的內部例外狀況參考，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
  </members>
</doc>
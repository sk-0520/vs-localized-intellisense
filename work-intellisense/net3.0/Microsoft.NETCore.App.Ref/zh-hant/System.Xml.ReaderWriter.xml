<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>指定 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Xml.XmlWriter" /> 物件所執行的輸入或輸出檢查數量。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 物件會自動偵測是否應執行文件或片段檢查，並進行適當的檢查。 如果您包裝其他 <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 物件，則外部物件不會執行任何其他的一致性檢查。 必須由基礎物件來進行一致性檢查。  
請參閱 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> 和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> 屬性，以取得如何判定合規性層級的詳細資料。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>XML 資料使用語式正確的 XML 1.0 文件規則編譯，如 W3C 所定義。 此檢查層級可確保任何處理器都可使用讀寫的資料流作為 XML 1.0 文件。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>XML 資料是語式正確的 XML 片段，如 W3C 所定義。  此一致性層級表示 XML 文件可能沒有根項目，但卻是語式正確。 此檢查層級可確保任何處理器都可使用讀寫的資料流作為 XML 1.0 外部剖析實體]。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>指定處理 DTD 的選項。 <see cref="T:System.Xml.DtdProcessing" /> 列舉型別是由 <see cref="T:System.Xml.XmlReaderSettings" /> 類別所使用。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>導致 DOCTYPE 項目受到忽略。 未發生 DTD 處理，且輸出遺失 DTD/DOCTYPE。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>用於剖析 DTD。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>指定在遇到 DTD 時擲回 <see cref="T:System.Xml.XmlException" /> 並顯示訊息，說明禁止使用 DTD。 這是預設行為。</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>指定 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 如何處理實體 (Entity)。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>展開字元實體，並傳回一般實體做為 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 節點。 
您必須呼叫 <see cref="Overload:System.Xml.XmlReader.ResolveEntity" /> 才能查看一般實體展開後的內容。 這可讓您最佳化第一次使用時只展開實體的實體。  
當設定為 <see langword="ExpandCharEntities" /> 時，讀取器呼叫 <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> 方法會展開所有實體 (一般和字元實體)。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>展開所有實體，並傳回已展開的節點。
不會傳回 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 節點。 展開實體文字取代實體參考。</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>指定 <see cref="T:System.Xml.XmlTextWriter" /> 的格式選項。</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>使子項目根據 <see cref="P:System.Xml.XmlTextWriter.Indentation" /> 和 <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> 設定縮排。
此選項僅縮排項目內容，混合內容不受影響。 如需這些字詞的 XML 1.0 定義，請參閱全球資訊網協會 (W3C) 文件Element Content (項目內容) 和 Mixed Content (混合內容)。</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>不套用特殊的格式。 這是預設值。</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary>表示應用程式資源資料流解析程式。</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary>從指定的 URI 傳回應用程式資源資料流。</summary>
      <param name="relativeUri">相對 URI。</param>
      <returns>應用程式資源資料流。</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>讓類別從目前的內容或位置傳回 <see cref="T:System.Xml.XmlNode" />。</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>傳回目前位置的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>目前位置的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>提供讓類別能夠傳回行和位置資訊的介面。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns>如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> 和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>取得目前的行號。</summary>
      <returns>目前的行號，如果沒有可用的行資訊 (例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 傳回 <see langword="false" />)，則為 0。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>取得目前的行位置。</summary>
      <returns>目前的行位置，如果沒有可用的行資訊 (例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 傳回 <see langword="false" />)，則為 0。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>提供對一組前置詞和命名空間 (Namespace) 對應的唯讀存取。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>取得定義之前置詞/命名空間對應的集合，目前位於範圍中。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，包含目前範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>取得命名空間 URI，對應至指定的前置詞。</summary>
      <param name="prefix">您要尋找其命名空間 URI 的前置詞。</param>
      <returns>對應至前置詞的命名空間 URI，如果前置詞未對應至命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>取得前置詞，對應至指定的命名空間 URI。</summary>
      <param name="namespaceName">您要尋找其前置詞的命名空間 URI。</param>
      <returns>對應至命名空間 URI 的前置詞，如果命名空間 URI 未對應至前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>指定是否要移除 <see cref="T:System.Xml.XmlWriter" /> 中的重複命名空間宣告。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>指定不要移除重複的命名空間宣告。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>指定要移除重複的命名空間宣告。 若要移除重複的命名空間，前置詞和命名空間必須相符。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>實作單一執行緒的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>初始化 <see langword="NameTable" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>將指定的字串原子化，並將其加入至 <see langword="NameTable" />。</summary>
      <param name="key">包含要加入之字串的字元陣列。</param>
      <param name="start">陣列中以零起始的索引，指定字串的第一個字元。</param>
      <param name="len">字串中的字元數。</param>
      <returns>原子化後的字串，如果已經存在於 <see langword="NameTable" /> 中，則為現有的字串。 如果 <paramref name="len" /> 為零，則會傳回 String.Empty。</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
-或- 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
-或- 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0。</exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>將指定的字串原子化，並將其加入至 <see langword="NameTable" />。</summary>
      <param name="key">要加入的字串。</param>
      <returns>原子化後的字串，如果已經存在於 <see langword="NameTable" /> 中，則為現有的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>取得包含與指定陣列中指定字元範圍內的字元相同的字串。</summary>
      <param name="key">包含要尋找之名稱的字元陣列。</param>
      <param name="start">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="len">名稱中字元的數目。</param>
      <returns>原子化字串，如果字串尚未原子化，則為 <see langword="null" />。 如果 <paramref name="len" /> 為零，則會傳回 String.Empty。</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
-或- 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
-或- 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0。</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>取得具有指定值的原子化字串。</summary>
      <param name="value">要尋找的名稱。</param>
      <returns>原子化字串物件；如果字串尚未原子化，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>指定如何處理分行符號。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>實體化換行字元。 當正規化 <see cref="T:System.Xml.XmlReader" /> 來讀取輸出時，這個設定會保留所有字元。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>換行字元未變更。 輸出與輸入相同。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>取代換行字元，使其與 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 屬性中指定的字元相符。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>指定讀取器 (Reader) 的狀態。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>已經呼叫 <see cref="M:System.Xml.XmlReader.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>已經順利到達檔案結尾。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>發生錯誤，造成讀取作業無法繼續。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>尚未呼叫 <see langword="Read" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>已經呼叫 <see langword="Read" /> 方法。 讀取器可能呼叫其他方法。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 列舉是由 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 使用，並且會定義 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 可辨識哪些已知的 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識所有目前支援的 DTD。 這是預設行為。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 不會辨識任何預先定義的 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識以 RSS 0.91 定義的 DTD 和實體。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識以 XHTML 1.0 定義的 DTD 和實體。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>表示類別，用來將 DTD 或 XML 資料流預先填入快取區。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>使用指定預先載入的已知 DTD，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="preloadedDtds">應預先填入快取區的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>使用指定的後援解析程式，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>使用指定的後援解析程式和預先載入的已知 DTD，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
      <param name="preloadedDtds">應預先填入快取區的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>使用指定的後援解析程式、預先載入的已知 DTD 和 URI 相等比較子，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
      <param name="preloadedDtds">應預先填入快取區的已知 DTD。</param>
      <param name="uriComparer">比較 URI 時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>將位元組陣列加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value">位元組陣列，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value">位元組陣列，其資料對應至提供的 URI。</param>
      <param name="offset">提供的位元組陣列中資料開始的位移。</param>
      <param name="count">要從位元組陣列中讀取的位元組數，起始於提供的位移。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0。  
-或- 
<paramref name="value" /> 大於 <paramref name="offset" /> 減去 <paramref name="count." /> 之後的長度。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>將 <see cref="T:System.IO.Stream" /> 加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value">
        <see cref="T:System.IO.Stream" />，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>將具有預先載入資料的字串加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value">
        <see langword="String" />，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>設定用來驗證基礎 <see cref="T:System.Net.WebRequest" /> 的認證。</summary>
      <returns>用來驗證基礎 Web 要求的認證。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前的 .NET Framework for Silverlight 版本在解析 URI 時不使用這個參數。 提供這個參數的目的是要供未來擴充使用。 例如，這個參數可對應至 xlink:role 並在其他情節中當做實作專屬的引數使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 針對以 <see langword="String" /> 形式加入的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支援 <see cref="T:System.IO.Stream" /> 物件和 <see cref="T:System.IO.TextReader" /> 物件。 如果解析程式不支援要求的型別，則會擲回例外狀況。 請使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，判斷此解析程式是否支援特定 <see langword="Type" />。</param>
      <returns>對應於實際來源的 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException">無法解析 <paramref name="absoluteUri" /> 中傳遞的 URI。  
-或- 
 <paramref name="ofObjectToReturn" /> 不是支援的型別。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>以非同步的方式將 URI 對應至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前的 .NET Framework for Silverlight 版本在解析 URI 時不使用這個參數。 提供這個參數的目的是要供未來擴充使用。 例如，這個參數可對應至 xlink:role 並在其他情節中當做實作專屬的引數使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 針對以 <see langword="String" /> 形式加入的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支援 <see cref="T:System.IO.Stream" /> 物件和 <see cref="T:System.IO.TextReader" /> 物件。 如果解析程式不支援要求的型別，則會擲回例外狀況。 請使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，判斷此解析程式是否支援特定 <see langword="Type" />。</param>
      <returns>對應於實際來源的 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>取得預先載入 URI 的集合。</summary>
      <returns>預先載入的 URI 集合。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>從 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 移除 URI 的對應資料。</summary>
      <param name="uri">應該從 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區移除之資料的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>從基底和相對 URI 解析絕對 URI。</summary>
      <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <returns>
        <see cref="T:System.Uri" />，表示絕對 URI；如果不能解析相對 URI，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>判斷解析程式除了 <see cref="T:System.Type" /> 之外是否還支援其他 <see cref="T:System.IO.Stream" />。</summary>
      <param name="absoluteUri">要檢查的絕對 URI。</param>
      <param name="type">要傳回的 <see cref="T:System.Type" />。</param>
      <returns>如果支援 <see cref="T:System.Type" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>定義已驗證之 XML 節點的後結構描述驗證資訊集。</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>取得值，指出 XML 結構描述定義語言 (XSD) 結構描述驗證期間，是否將這個已驗證的 XML 節點設為套用之預設值的結果。</summary>
      <returns>如果這個已驗證的 XML 節點是因在結構描述驗證期間套用預設值而設定則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>取得值，指出這個已驗證之 XML 節點的值是否為 nil。</summary>
      <returns>如果這個已驗證 XML 節點的值為 nil 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>取得這個已驗證之 XML 節點的動態結構描述型別。</summary>
      <returns>表示這個已驗證 XML 節點之動態結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>取得已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />，其會對應至這個已驗證的 XML 節點。</summary>
      <returns>對應於這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>取得已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，其會對應至這個已驗證的 XML 節點。</summary>
      <returns>對應於這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>取得這個已驗證之 XML 節點的靜態 XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
      <returns>這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>取得這個已驗證之 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns>這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>傳回與 <see langword="ValidationEventHandler" /> 相關的詳細資訊。</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>取得與驗證事件關聯的 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</summary>
      <returns>與驗證事件關聯的 <see langword="XmlSchemaException" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>取得對應至驗證事件的文字描述。</summary>
      <returns>文字描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>取得驗證事件的嚴重性。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSeverityType" />，表示驗證事件嚴重性。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>表示將處理 XML 結構描述驗證事件和 <see cref="T:System.Xml.Schema.ValidationEventArgs" /> 的回呼方法。</summary>
      <param name="sender">事件的來源。  
 附註：在程式碼中使用之前，判斷傳送者的類型。 您不能假設傳送者是特定類型的執行個體。 傳送者也不是一定都不會是 null。 請一律使用失敗處理邏輯來包住轉型。</param>
      <param name="e">事件資料。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>表示已驗證之 XML 項目或屬性的具型別值。 無法繼承 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 類別 (Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>傳回這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的複本。</summary>
      <returns>這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件複本。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>取得值，指出已驗證的 XML 項目或屬性是 XPath 節點還是原子值。</summary>
      <returns>如果已驗證的 XML 項目或屬性是 XPath 節點，則為 <see langword="true" />；如果已驗證的 XML 項目或屬性是原子值，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />。</summary>
      <returns>這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的複本。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>取得已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</summary>
      <returns>已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>取得目前已驗證的 XML 項目或屬性，做為最適當 Microsoft .NET Framework 型別的 Boxed 物件 (根據其結構描述型別)。</summary>
      <returns>目前已驗證的 XML 項目或屬性，做為最適當 .NET Framework 型別的 Boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>取得已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</summary>
      <returns>已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>使用為解析命名空間前置詞而指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，以指定的型別形式傳回已驗證之 XML 項目或屬性的值。</summary>
      <param name="type">傳回已驗證之 XML 項目或屬性值所使用的型別。</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <returns>型別所要求之已驗證 XML 項目或屬性的值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是目標型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>取得 <see cref="T:System.Boolean" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 形式之已驗證的 XML 項目或屬性值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Boolean" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 形式之已驗證的 XML 項目或屬性值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.DateTime" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>取得 <see cref="T:System.Double" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <returns>
        <see cref="T:System.Double" /> 形式之已驗證的 XML 項目或屬性值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Double" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>取得 <see cref="T:System.Int32" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <returns>
        <see cref="T:System.Int32" /> 形式之已驗證的 XML 項目或屬性值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Int32" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>取得 <see cref="T:System.Int64" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 形式之已驗證的 XML 項目或屬性值。</returns>
      <exception cref="T:System.FormatException">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Int64" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>取得已驗證之 XML 項目或屬性的 Microsoft .NET Framework 型別。</summary>
      <returns>已驗證之 XML 項目或屬性的 .NET Framework 型別。 預設值為 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>取得已驗證之 XML 項目或屬性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns>已驗證之 XML 項目或屬性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>XML 結構描述的記憶體內部表示，其依據為全球資訊網協會 (W3C) XML Schema Part 1:Structures (XML 結構描述第 1 部分：結構) 及 XML Schema Part 2:Datatypes (XML 結構描述第 2 部分：資料類型)]。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchema" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>取得或設定在結構描述目標命名空間中宣告的屬性 (Attribute) 格式。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，表示目標命名空間中的屬性是否必須以命名空間前置詞限定。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>取得結構描述中所有全域屬性群組的後結構描述編譯值。</summary>
      <returns>結構描述中所有全域屬性群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>取得結構描述中所有屬性的後結構描述編譯值。</summary>
      <returns>結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>取得或設定 <see langword="blockDefault" /> 屬性，該屬性設定結構描述之 <see langword="block" /> 中項目和複雜型別上 <see langword="targetNamespace" /> 屬性的預設值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示防止衍生的各種方法。 預設值為 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>將 XML 結構描述物件模型 (SOM) 編譯成驗證用的結構描述資訊。 用於檢查以程式方式建置的 SOM 的語法和語意結構。 語意驗證檢查是在編譯階段執行。</summary>
      <param name="validationEventHandler">驗證事件處理常式，接收 XML 結構描述驗證錯誤的相關資訊。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>將 XML 結構描述物件模型 (SOM) 編譯成驗證用的結構描述資訊。 用於檢查以程式方式建置的 SOM 的語法和語意結構。 語意驗證檢查是在編譯階段執行。</summary>
      <param name="validationEventHandler">接收 XML 結構描述驗證錯誤相關資訊的驗證事件處理常式。</param>
      <param name="resolver">
        <see langword="XmlResolver" />，用來解析 <see langword="include" /> 和 <see langword="import" /> 項目中參考的命名空間。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>取得或設定在結構描述目標命名空間中宣告的元素格式。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，表示目標命名空間中的項目是否必須以命名空間前置詞限定。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>取得結構描述中所有元素的後結構描述編譯值。</summary>
      <returns>結構描述中所有項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>取得或設定 <see langword="finalDefault" /> 屬性，該屬性設定結構描述之目標命名空間中項目和複雜型別上 <see langword="final" /> 屬性的預設值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示防止衍生的各種方法。 預設值為 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>取得結構描述中所有群組的後結構描述編譯值。</summary>
      <returns>結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>取得或設定字串 ID。</summary>
      <returns>字串的 ID。 預設值為 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>取得包含和匯入結構描述的集合。</summary>
      <returns>已包含和匯入之結構描述的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>XML 結構描述執行個體命名空間。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>指出結構描述是否已編譯。</summary>
      <returns>如果結構描述已編譯，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>取得結構描述中結構描述項目的集合，並用於在 <see langword="schema" /> 項目層級加入新項目型別。</summary>
      <returns>結構描述中結構描述項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>XML 結構描述命名空間。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>取得結構描述中所有標記法的後結構描述編譯值。</summary>
      <returns>結構描述中所有標記法的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>從提供的資料流讀取 XML 結構描述。</summary>
      <param name="stream">提供的資料流。</param>
      <param name="validationEventHandler">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <returns>表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>從提供的 <see cref="T:System.IO.TextReader" /> 讀取 XML 結構描述。</summary>
      <param name="reader">包含要讀取 XML 結構描述的 <see langword="TextReader" />。</param>
      <param name="validationEventHandler">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <returns>表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>從提供的 <see cref="T:System.Xml.XmlReader" /> 讀取 XML 結構描述。</summary>
      <param name="reader">包含要讀取 XML 結構描述的 <see langword="XmlReader" />。</param>
      <param name="validationEventHandler">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <returns>表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>取得結構描述中所有結構描述類型的後結構描述編譯值。</summary>
      <returns>結構描述中所有結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>取得或設定結構描述目標命名空間的統一資源識別元 (URI)。</summary>
      <returns>結構描述目標命名空間。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>取得或設定不屬於結構描述目標命名空間的限定屬性。</summary>
      <returns>不屬於結構描述目標命名空間之限定 <see cref="T:System.Xml.XmlAttribute" /> 物件的陣列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>取得或設定結構描述的版本。</summary>
      <returns>結構描述的版本。 預設值為 <see langword="String.Empty" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>將 XML 結構描述寫入提供的資料流。</summary>
      <param name="stream">提供的資料流。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>使用指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <param name="stream">提供的資料流。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>將 XML 結構描述寫入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>將 XML 結構描述寫入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="all" /> 項目 (複合項)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>取得 <see langword="XmlSchemaElement" /> 複合項中包含之 <see langword="all" /> 項目的集合。</summary>
      <returns>
        <see langword="XmlSchemaAll" /> 中包含的項目集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>可以包含附註項目的任何項目之基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />，表示 <see langword="annotation" /> 屬性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>取得或設定字串 ID。</summary>
      <returns>字串識別碼。預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>取得或設定不屬於目前結構描述之目標命名空間的限定屬性 (Attribute)。</summary>
      <returns>不屬於結構描述的之目標命名空間的限定 <see cref="T:System.Xml.XmlAttribute" /> 物件陣列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="annotation" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>取得或設定字串 ID。</summary>
      <returns>字串識別碼。預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>取得用於存放 <see langword="Items" /> 和 <see langword="appinfo" /> 子項目的 <see langword="documentation" /> 集合。</summary>
      <returns>
        <see langword="appinfo" /> 和 <see langword="documentation" /> 子項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>取得或設定不屬於結構描述目標命名空間的限定屬性 (Attribute)。</summary>
      <returns>
        <see cref="T:System.Xml.XmlAttribute" /> 物件的陣列，不屬於結構描述的目標命名空間。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="any" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>取得或設定包含可以使用之項目的命名空間。</summary>
      <returns>可以使用之項目的命名空間。 預設為 <see langword="##any" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>取得或設定應用程式或 XML 處理器應如何處理驗證 <see langword="any" /> 項目指定之項目的 XML 文件的相關資訊。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值。 如果未指定 <see langword="processContents" /> 屬性，會預設值為 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="anyAttribute" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>取得或設定包含可以使用之屬性的命名空間。</summary>
      <returns>可以使用之屬性的命名空間。 預設為 <see langword="##any" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>取得或設定應用程式或 XML 處理器應如何處理驗證 <see langword="anyAttribute" /> 項目指定之屬性的 XML 文件的相關資訊。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值。 如果未指定 <see langword="processContents" /> 屬性，會預設值為 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="appinfo" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>取得或設定 <see cref="T:System.Xml.XmlNode" /> 物件的陣列，表示 <see langword="appinfo" /> 子節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 物件的陣列，表示 <see langword="appinfo" /> 子節點。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>取得或設定應用程式資訊的來源。</summary>
      <returns>統一資源識別元 (URI) 參考。 預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>將來自 XML 結構描述的 <see langword="attribute" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 屬性會提供其他文件項目的額外資訊。 屬性標記會以巢狀方式置於結構描述的文件項目標記之間。 XML 文件會在項目 (Element) 的開頭標記中，將屬性顯示成一個具名的項目 (Item)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>依照屬性的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" />，取得表示屬性型別的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 物件。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>根據包含 <see langword="AttributeType" /> 屬性編譯後值之屬性的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />，取得 Common Language Runtime (CLR) 物件。</summary>
      <returns>Common Runtime Library (CRL) 物件，包含 <see langword="AttributeType" /> 屬性之編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>取得或設定屬性的預設值。</summary>
      <returns>屬性的預設值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>取得或設定屬性的固定值。</summary>
      <returns>屬性的固定值。 預設為 null。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>取得或設定屬性的格式。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設值是包含屬性的結構描述項目的 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> 的值。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>取得或設定屬性的名稱。</summary>
      <returns>屬性的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>取得屬性的限定名稱 (Qualified Name)。</summary>
      <returns>
        <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中宣告的屬性名稱。</summary>
      <returns>宣告的屬性的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>取得或設定屬性型別為簡單型別。</summary>
      <returns>結構描述中定義的簡單型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義的簡單型別的名稱。</summary>
      <returns>簡單型別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>取得或設定如何使用屬性的相關資訊。</summary>
      <returns>下列其中一個值：None、Prohibited、Optional 或 Required。 預設值為 Optional。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>將來自 XML 結構描述的 <see langword="attributeGroup" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 AttributesGroups 提供群組一組屬性宣告的機制，使其能當成一個群組加入複雜型別定義中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>取得或設定屬性群組的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns>全球資訊網協會 (W3C) 的 <see langword="anyAttribute" /> 項目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>取得屬性群組的屬性集合。 包含 <see langword="XmlSchemaAttribute" /> 和 <see langword="XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns>屬性群組的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>取得或設定屬性群組的名稱。</summary>
      <returns>屬性群組的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>取得屬性群組的限定名稱 (Qualified Name)。</summary>
      <returns>屬性群組的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>從 XML 結構描述中取得重新定義的屬性 (Attribute) 群組屬性 (Property)。</summary>
      <returns>重新定義的屬性 (Attribute) 群組屬性 (Property)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>將來自 XML 結構描述之具有 <see langword="ref" /> 屬性的 <see langword="attributeGroup" /> 元素，依全球資訊網協會 (W3C) (英文) 規定表示。 AttributesGroupRef 是 attributeGroup 的參考，name 屬性包含所參考的屬性群組。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>取得或設定參考 <see langword="attributeGroup" /> 項目的名稱。</summary>
      <returns>參考屬性群組的名稱。 值必須是 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>將來自 XML 結構描述的 <see langword="choice" /> 元素 (複合項)，依全球資訊網協會 (W3C) 的規定表示。 <see langword="choice" /> 可讓一個執行個體中只允許其子系之一出現。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>取得以複合項 (<see langword="choice" />)：<see langword="XmlSchemaElement" />、<see langword="XmlSchemaGroupRef" />、<see langword="XmlSchemaChoice" />、<see langword="XmlSchemaSequence" /> 或 <see langword="XmlSchemaAny" /> 來包含的項目集合。</summary>
      <returns>
        <see langword="XmlSchemaChoice" /> 中包含的項目集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>包含 XML 結構描述定義語言 (XSD) 和 XML-Data Reduced (XDR) 結構描述的快取。 <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> 類別已經過時。 請改用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>初始化 <see langword="XmlSchemaCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see langword="XmlSchemaCollection" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。 載入結構描述時會使用 <see langword="XmlNameTable" />。</summary>
      <param name="nametable">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>將指定的 URL 找到的結構描述加入結構描述集合中。</summary>
      <param name="ns">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="uri">指定要載入之結構描述的 URL。</param>
      <returns>加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">結構描述不是有效的結構描述。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>加入包含在 <see cref="T:System.Xml.XmlReader" /> 中的結構描述至結構描述集合。</summary>
      <param name="ns">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="reader">包含要加入之結構描述的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">結構描述不是有效的結構描述。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>加入包含在 <see cref="T:System.Xml.XmlReader" /> 中的結構描述至結構描述集合。 指定的 <see cref="T:System.Xml.XmlResolver" />，用來解析任何的外部資源。</summary>
      <param name="ns">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="reader">包含要加入之結構描述的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />，用來解析在 <see langword="include" /> 和 <see langword="import" /> 項目或 <see langword="x-schema" /> 屬性 (XDR 結構描述) 中參考的命名空間。 如果這個值是 <see langword="null" />，就不會解析外部參考。</param>
      <returns>加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">結構描述不是有效的結構描述。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>將 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入至集合中。</summary>
      <param name="schema">要加入至集合的 <see langword="XmlSchema" />。</param>
      <returns>
        <see langword="XmlSchema" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>將 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入至集合中。 指定的 <see cref="T:System.Xml.XmlResolver" />，用來解析任何的外部參考。</summary>
      <param name="schema">要加入至集合的 <see langword="XmlSchema" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />，用來解析 <see langword="include" /> 和 <see langword="import" /> 項目中參考的命名空間。 如果這個值是 <see langword="null" />，就不會解析外部參考。</param>
      <returns>要加入至結構描述集合中的 <see langword="XmlSchema" />。</returns>
      <exception cref="T:System.Xml.XmlException">結構描述不是有效的結構描述。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>將指定的集合中定義的所有命名空間 (包含其相關的結構描述) 加入這個集合。</summary>
      <param name="schema">您要加入至這個集合的 <see langword="XmlSchemaCollection" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>取得值，表示具有指定命名空間的結構描述是否在集合中。</summary>
      <param name="ns">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是目標命名空間。</param>
      <returns>如果具有指定命名空間的結構描述是在集合中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>取得值，表示指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 的 <see langword="targetNamespace" /> 是否在集合中。</summary>
      <param name="schema">
        <see langword="XmlSchema" /> 物件。</param>
      <returns>如果集合中有具有相同 <see langword="true" /> 的結構描述，則為 <see langword="targetNamespace" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>將這個集合中所有的 <see langword="XmlSchema" /> 物件複製到從指定索引開始的指定陣列中。</summary>
      <param name="array">將物件複製到其中的陣列。</param>
      <param name="index">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>取得這個集合中定義的命名空間數目。</summary>
      <returns>這個集合中定義的命名空間數目。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>提供以「各自獨立」方式逐一查看結構描述集合的支援。</summary>
      <returns>列舉程式，用來逐一查看目前集合中的所有結構描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>取得與指定的命名空間 URI 關聯的 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <param name="ns">與您要傳回的結構描述相關聯的命名空間 URI。 這通常是結構描述的 <see langword="targetNamespace" />。</param>
      <returns>與命名空間 URI 相關聯的 <see langword="XmlSchema" />，如果載入的結構描述與指定的命名空間無關聯，或者命名空間與 XDR 結構描述相關聯，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>取得載入新結構描述時 <see langword="XmlNameTable" /> 使用的預設 <see langword="XmlSchemaCollection" />。</summary>
      <returns>
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />。</summary>
      <param name="array">將物件複製到其中的陣列。</param>
      <param name="index">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />。</summary>
      <returns>集合中的專案計數。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns>如果集合已同步處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns>
        <see cref="P:System.Collections.ICollection.SyncRoot" />物件, 可以用來同步處理對集合的存取。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />。</summary>
      <returns>用於集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>設定事件處理常式，接收關於 XDR 和 XML 結構描述驗證錯誤的資訊。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>支援集合上的簡單重複。 這個類別無法被繼承。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>取得集合中目前的 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <returns>集合中目前的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>使列舉程式前進至集合中下一個結構描述。</summary>
      <returns>如果移動成功，則為 <see langword="true" />；如果列舉程式已通過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />。</summary>
      <returns>目前節點。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />。</summary>
      <returns>下一個節點。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>提供 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的結構描述編譯選項。這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 是否應該檢查 Unique Particle Attribution (UPA) 違規。</summary>
      <returns>如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 應該檢查 Unique Particle Attribution (UPA) 違規，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>將來自 XML 結構描述的 <see langword="complexContent" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 表示複雜型別的複雜內容模型。 它包含只具有項目或混合內容之複雜型別的擴充或限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>取得或設定內容。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 類別之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>取得或設定資訊，決定型別是否具有混合內容模型。</summary>
      <returns>如果屬性為 <see langword="true" />，複雜型別 (混合內容模型) 的子項目之間允許出現字元資料。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>將來自 XML 結構描述的 <see langword="extension" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有由擴充衍生之複雜內容模型的複雜型別。 它會藉由加入屬性 (Attribute) 或項目以擴充複雜型別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>取得或設定複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns>複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>取得複雜內容的屬性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns>複雜內容的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>取得或設定利用擴充衍生這個類型的來源複雜類型名稱。</summary>
      <returns>利用擴充衍生這個類型的來源複雜類型名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>將來自 XML 結構描述的 <see langword="restriction" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有由限制衍生之複雜內容模型的複雜型別。 它會將複雜型別的內容限制為繼承複雜型別的子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>取得或設定複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns>複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>取得複雜型別的屬性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns>複雜型別的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>取得或設定利用限制衍生這個型別的來源複雜型別名稱。</summary>
      <returns>利用限制衍生這個型別的來源複雜型別名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>將來自 XML 結構描述的 <see langword="complexType" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 定義決定項目屬性 (Attribute) 集和內容的複雜型別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>取得或設定複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件之值。</summary>
      <returns>複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>取得複雜型別的屬性集合。</summary>
      <returns>包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 類別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>取得這個複雜型別及其基底型別 (Base Type) 所有遵守之屬性的集合。</summary>
      <returns>這個複雜型別及其基本型別中所有屬性的集合。 <see langword="AttributeUses" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>取得這個複雜型別及其基底型別之 <see langword="anyAttribute" /> 的編譯後值。</summary>
      <returns>
        <see langword="anyAttribute" /> 項目的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>取得或設定 <see langword="block" /> 屬性。</summary>
      <returns>
        <see langword="block" /> 屬性會防止複雜型別用於指定的衍生型別。 預設為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>取得型別編譯為 post-schema-validation 資訊集 (infoset) 之後的值。 這個值指示在執行個體文件中使用 <see langword="xsi:type" /> 時，如何強制型別。</summary>
      <returns>Post-Schema-Validation Infoset 值。 預設值為 <see langword="BlockDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>取得或設定這個複雜型別的編譯後 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" />。</summary>
      <returns>屬於其中一個 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 類別的內容模型型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>取得包含編譯後值之複雜類型的內容模型。</summary>
      <returns>複雜類型之內容模型的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>取得包含 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 物件編譯後值的物件。</summary>
      <returns>內容型別的物件。 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 物件的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>取得或設定資訊，決定是否可在執行個體文件中使用 <see langword="complexType" /> 項目。</summary>
      <returns>如果為 <see langword="true" />，項目不能直接使用這個 <see langword="complexType" /> 項目，必須使用從這個 <see langword="complexType" /> 項目衍生的複雜型別。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>取得或設定資訊，決定複雜型別是否具有混合內容模型 (內容中的標記)。</summary>
      <returns>如果這個複雜型別的子項目之間可以出現字元資料，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>取得或設定複合項型別為其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns>複合項型別。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>結構描述內容的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>指定型別子項目的順序和結構。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>取得或設定型別的內容。</summary>
      <returns>提供型別的內容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>提供 <see langword="any" /> 和 <see langword="anyAttribute" /> 項目取代之驗證模式的相關資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>如果找到相關聯的結構描述，則將會驗證文件項目。 否則不會擲回任何錯誤。
如未驗證此項目，則 XML 處理器會嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端。 如果尚未設定驗證事件處理常式，則產生警告時不會傳回任何資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>未驗證文件項目。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>文件項目必須由語式正確的 XML 構成，並且未經結構描述驗證。
XML 處理器嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端未針對指定項目執行驗證作業。 如果尚未設定驗證事件處理常式，則產生警告時不會傳回任何資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>結構描述處理器必須找到與指示之命名空間相關聯的結構描述，才能驗證文件項目。
如果處理器找不到結構描述，或如果項目未經驗證，則 XML 處理器會嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端。 如果發生驗證錯誤，且未提供驗證事件處理常式，則會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>複雜型別之內容模型的列舉型別 (Enumeration)。 這表示 post-schema-validation 資訊集 (infoset) 中的內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>純項目內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>空白內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>混合內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>純文字內容。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 類別是抽象類別，用於將 XML 結構描述定義語言 (XSD) 型別對應至 Common Language Runtime (CLR) 型別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別。</summary>
      <param name="value">要轉換成指定型別的輸入值。</param>
      <param name="targetType">將輸入值轉換成的目標型別。</param>
      <returns>已轉換的輸入值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別，如果 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 表示 xs:QName 型別或其衍生的型別，則使用 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</summary>
      <param name="value">要轉換成指定型別的輸入值。</param>
      <param name="targetType">將輸入值轉換成的目標型別。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" />，用於解析命名空間前置詞。 這只在 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示 xs:QName 型別或其衍生的型別時使用。</param>
      <returns>已轉換的輸入值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 方法永遠傳回 <see langword="false" />。</summary>
      <param name="datatype">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <returns>一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>在衍生類別中覆寫時，對內建或使用者定義的簡單型別驗證指定的 <see langword="string" />。</summary>
      <param name="s">要對簡單型別驗證的 <see langword="string" />。</param>
      <param name="nameTable">如果這個 <see cref="T:System.Xml.XmlNameTable" /> 物件表示 xs:NCName 型別，則為 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />，用於剖析 <see langword="string" /> 時的原子化。</param>
      <param name="nsmgr">如果這個 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件表示 xs:QName 型別，則為剖析 <see langword="string" /> 時要使用的 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 物件。</param>
      <returns>
        <see cref="T:System.Object" />，可安全地轉換為 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 屬性傳回的型別。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">輸入值不是這個 W3C XML 結構描述型別的有效執行個體。</exception>
      <exception cref="T:System.ArgumentNullException">要剖析的值不能是 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>在衍生類別中覆寫時，取得如在全球資訊網協會 (W3C) XML 1.0 規格中所指定之 <see langword="string" /> 的型別。</summary>
      <returns>
        <see langword="string" /> 的 <see cref="T:System.Xml.XmlTokenizedType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>取得簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</summary>
      <returns>簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>在衍生類別中覆寫時，取得項目的 Common Language Runtime (CLR) 型別。</summary>
      <returns>項目的 Common Language Runtime (CLR) 型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>取得簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</summary>
      <returns>簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>指定 W3C XML 結構描述資料型別的各種型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>W3C XML 結構描述原子型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>W3C XML 結構描述清單型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>W3C XML 結構描述等位型別。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>提供防止衍生的各種方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <see langword="#all" />. 參考所有的衍生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>覆寫預設衍生方法，以允許任何衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>由 <see langword="Extension" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>由 <see langword="List" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>接受預設的衍生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>由 <see langword="Restriction" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>由 <see langword="Substitution" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>由 <see langword="Union" /> 參考衍生。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>將來自 XML 結構描述的 <see langword="documentation" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別會指定要讓使用者在 <see langword="annotation" /> 中讀取或使用的資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>取得或設定 <see langword="xml:lang" /> 屬性。 這當成內容中使用之語言的指示器。</summary>
      <returns>
        <see langword="xml:lang" /> 屬性。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>取得或設定表示文件子節點的 <see langword="XmlNodes" /> 陣列。</summary>
      <returns>表示文件子節點的陣列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>取得或設定資訊的統一資源識別元 (URI) 來源。</summary>
      <returns>URI 參考。 預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>將來自 XML 結構描述的 <see langword="element" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別是所有物件型別的基底類別，並且用於描述 XML 文件中的項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>取得或設定 <see langword="Block" /> 衍生。</summary>
      <returns>用於阻斷型別衍生的屬性 (Attribute)。 預設值為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>取得 <see langword="Block" /> 屬性的編譯後值。</summary>
      <returns>
        <see langword="Block" /> 屬性的編譯後值。 預設值為 <see langword="BlockDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>取得元素上條件約束 (Constraint) 的集合。</summary>
      <returns>條件約束的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>如果項目的內容是簡單型別，或者項目的內容是 <see langword="textOnly" />，則取得項目的預設值。</summary>
      <returns>項目的預設值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>依照項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> 值，取得表示項目型別的 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> 物件。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>根據包含 <see langword="ElementType" /> 屬性編譯後值之項目的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，取得 Common Language Runtime (CLR) 物件。</summary>
      <returns>Common Language Runtime 物件。 <see langword="ElementType" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>取得或設定 <see langword="Final" /> 屬性，表示不允許進一步的衍生。</summary>
      <returns>
        <see langword="Final" /> 屬性。 預設為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>取得 <see langword="Final" /> 屬性的編譯後值。</summary>
      <returns>
        <see langword="Final" /> 屬性的編譯後值。 預設值為 <see langword="FinalDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>取得或設定固定值。</summary>
      <returns>預先決定且不能變更的固定值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>取得或設定項目的格式。</summary>
      <returns>項目的格式。 預設值為 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> 值。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>取得或設定資訊，指出執行個體文件中是否能使用項目。</summary>
      <returns>如果為 <see langword="true" />，則項目不能出現在執行個體文件中。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>取得或設定資訊，指出執行個體資料中是否能出現 <see langword="xsi:nil" />。 指出是否能為項目指定明確的 nil 值。</summary>
      <returns>如果 Nillable 為 <see langword="true" />，可以讓項目執行個體的 <see langword="nil" /> 屬性設定為 <see langword="true" />。 <see langword="nil" /> 屬性定義為執行個體 XML 結構描述命名空間的一部分。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>取得或設定項目的名稱。</summary>
      <returns>項目的名稱。 預設為 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>取得指定項目的實際限定名稱。</summary>
      <returns>項目的限定名稱。 <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>取得或設定在這個結構描述 (或指定的命名空間指示的其他結構描述) 中宣告的項目的參考名稱。</summary>
      <returns>項目的參考名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>取得或設定項目的型別。 可以是複雜型別或簡單型別。</summary>
      <returns>項目的類型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>取得或設定在這個結構描述 (或指定的命名空間指示的其他結構描述) 中定義的內建資料型別的名稱。</summary>
      <returns>內建資料型別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>取得或設定由這個項目取代的項目的名稱。</summary>
      <returns>由這個項目取代之項目的限定名稱。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>將來自 XML 結構描述的 <see langword="enumeration" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 指定 simpleType 項目的有效值清單。 宣告內含於 <see langword="restriction" /> 宣告中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>傳回結構描述例外狀況的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以指定的 <see langword="XmlSchemaException" /> 和 <see langword="SerializationInfo" /> 資訊建構包含 <see langword="StreamingContext" /> 所有屬性的新 <see langword="XmlSchemaException" /> 物件。</summary>
      <param name="info">SerializationInfo。</param>
      <param name="context">StreamingContext。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>使用指定的例外狀況訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>使用例外狀況訊息和導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 物件，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException">導致這個例外狀況的原始 T:System.Exception 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的例外狀況訊息，以及導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 物件、XML 中的行號和行位置，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException">導致這個例外狀況的原始 T:System.Exception 物件。</param>
      <param name="lineNumber">導致這個例外狀況的 XML 行號。</param>
      <param name="linePosition">導致這個例外狀況的 XML 行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將所有 <see langword="XmlSchemaException" /> 屬性資料流至指定之 <see langword="SerializationInfo" /> 的 <see langword="StreamingContext" /> 類別。</summary>
      <param name="info">
        <see langword="SerializationInfo" />。</param>
      <param name="context">
        <see langword="StreamingContext" /> 資訊。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>取得行號，指出發生錯誤的位置。</summary>
      <returns>指示發生錯誤之位置的行號。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>取得行位置，指出發生錯誤的位置。</summary>
      <returns>指示發生錯誤之位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>取得這個例外狀況之錯誤條件的描述。</summary>
      <returns>這個例外狀況之錯誤條件的描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>產生 <see langword="XmlSchemaObject" /> 的 <see langword="XmlSchemaException" />。</summary>
      <returns>表示 XML 結構描述物件模型 (SOM) 中之結構化驗證錯誤的有效物件執行個體。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>取得導致該例外狀況之結構描述的統一資源識別元 (URI) 位置。</summary>
      <returns>導致該例外狀況之結構描述的 URI 位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>抽象類別 (Abstract Class)。 提供包含之結構描述的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>取得或設定字串 ID。</summary>
      <returns>字串識別碼。預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>取得或設定參考結構描述的 <see langword="XmlSchema" />。</summary>
      <returns>參考結構描述的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>取得或設定結構描述的統一資源識別元 (URI) 位置，告知結構描述處理器，結構描述實際存放的位置。</summary>
      <returns>結構描述的 URI 位置。 對於匯入結構描述而言是選擇性的。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>取得或設定不屬於結構描述目標命名空間的限定屬性。</summary>
      <returns>屬於其他目標命名空間的限定屬性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>利用限制衍生簡單型別時使用的所有 Facet 的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>取得或設定資訊，表示這個 Facet 為固定的。</summary>
      <returns>如果值固定，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>取得或設定 Facet 的 <see langword="value" /> 屬性。</summary>
      <returns>數值屬性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>指示屬性 (Attribute) 或項目是否需要以命名空間前置詞限定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>項目和屬性格式未在結構描述中指定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>項目和屬性必須以命名空間前置詞限定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>項目和屬性不需要以命名空間前置詞限定。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>指定 simpleType 項目分數值所能輸入的數字數目限制。 fractionDigits 的值必須是正整數。 表示全球資訊網協會 (W3C) 的 <see langword="fractionDigits" /> Facet。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>將來自 XML 結構描述的 <see langword="group" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別會在 <see langword="schema" /> 層級定義從複雜型別參考而來的群組。 它會群組一組項目宣告，以便當成一個群組加入複雜型別定義中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>取得或設定結構描述群組的名稱。</summary>
      <returns>結構描述群組的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>取得結構描述群組的限定名稱 (Qualified Name)。</summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件，表示結構描述群組的限定名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>這個集合是用於將新項目加入至複合項中。</summary>
      <returns>
        <see langword="XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>將來自 XML 結構描述、具有 <see langword="ref" /> 屬性的 <see langword="group" /> 元素，依全球資訊網協會 (W3C) 規定表示。 這個類別 (Class) 用於複雜型別中，以參考在 <see langword="group" /> 層級定義的 <see langword="schema" />。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>取得包含 <see langword="Particle" /> 屬性之編譯後值的其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns>屬於其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別的 <see langword="Particle" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>取得或設定在這個結構描述 (或指定的命名空間指示的結構描述) 中定義的群組的名稱。</summary>
      <returns>在這個結構描述中定義的群組的名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>識別條件約束的類別：<see langword="key" />、<see langword="keyref" /> 和 <see langword="unique" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>取得當成 XML 路徑語言 (XPath) 運算式選取器之子系套用的欄位集合。</summary>
      <returns>欄位的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>取得或設定識別條件約束的名稱。</summary>
      <returns>識別條件約束的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>取得包含 <see langword="QualifiedName" /> 屬性編譯後值之識別條件約束的限定名稱 (Qualified Name)。</summary>
      <returns>
        <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>取得或設定 XPath 運算式 <see langword="selector" /> 項目。</summary>
      <returns>XPath 運算式 <see langword="selector" /> 項目。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>將來自 XML 結構描述的 <see langword="import" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於從其他結構描述匯入結構描述元件。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaImport" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns>附註。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>取得或設定匯入結構描述當成統一資源識別元 (URI) 參考的目標命名空間。</summary>
      <returns>匯入結構描述當成 URI 參考的目標命名空間。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>將來自 XML 結構描述的 <see langword="include" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於包含來自外部結構描述的宣告和定義。 然後，所包含的宣告和定義可用於包含結構描述中的處理。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns>附註。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>從 XML 文件推斷 XML 結構描述定義語言 (XSD) 結構描述。 無法繼承 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別 (Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>影響由 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別為 XML 文件中的項目和屬性所推斷的符合項目和型別資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>表示應當為特定項目或屬性推斷較少限制性的結構描述宣告。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>表示應當為特定項目或屬性推斷較多限制性的結構描述宣告。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>從指定 <see cref="T:System.Xml.XmlReader" /> 物件中包含的 XML 文件，推斷 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含從其推斷結構描述的 XML 文件。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含推斷的結構描述。</returns>
      <exception cref="T:System.Xml.XmlException">XML 文件的語式不正確。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 物件不位於根節點上或項目上。 結構描述推斷處理序期間發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>從指定 <see cref="T:System.Xml.XmlReader" /> 物件中包含的 XML 文件，推斷 XML 結構描述定義語言 (XSD) 結構描述，並使用以相同目標命名空間指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件中的現有結構描述，修改推斷的結構描述。</summary>
      <param name="instanceDocument">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含從其推斷結構描述的 XML 文件。</param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含用於修改推斷之結構描述的現有結構描述。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含推斷的結構描述。</returns>
      <exception cref="T:System.Xml.XmlException">XML 文件的語式不正確。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 物件不位於根節點上或項目上。 結構描述推斷處理序期間發生錯誤。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，影響從 XML 文件推斷的結構描述符合項目宣告。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，影響從 XML 文件推斷的型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>在從 XML 文件推斷結構描述 (Schema) 時，傳回 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別 (Class) 所遇到之錯誤的相關資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用包含 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 所有屬性之指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致指定之 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" />，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 物件，包含導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始例外狀況。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的錯誤訊息、導致指定之 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" /> 和指定之 XML 文件中錯誤的行號和行位置，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 物件，包含導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始例外狀況。</param>
      <param name="lineNumber">XML 文件中導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的行號。</param>
      <param name="linePosition">XML 文件中導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將所有的 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 物件屬性資料流處理到針對指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所指定的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>表示已驗證之 XML 節點的後結構描述驗證資訊集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 物件，該物件對應至這個已驗證之 XML 節點的內容型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>取得或設定值，指出 XML 結構描述定義語言 (XSD) 結構描述驗證期間，是否要將這個已驗證的 XML 節點設為套用之預設值的結果。</summary>
      <returns>
        <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>取得或設定值，指出這個已驗證之 XML 節點的值是否為 nil。</summary>
      <returns>
        <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>取得或設定這個已驗證之 XML 節點的動態結構描述型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>取得或設定已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件，該物件對應至這個已驗證的 XML 節點。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>取得或設定已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 物件，該物件對應至這個已驗證的 XML 節點。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>取得或設定這個已驗證之 XML 節點的靜態 XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>取得或設定這個已驗證之 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>此類別會將來自 XML 結構描述的 <see langword="key" /> 元素，依全球資訊網協會 (W3C) 的規定表示。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaKey" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>此類別會將來自 XML 結構描述的 <see langword="keyref" /> 元素，依全球資訊網協會 (W3C) 的規定表示。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>取得或設定這個條件約束所參考的其他簡單或複雜型別中的索引鍵之名稱。</summary>
      <returns>這個條件約束參考的索引鍵之 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>將來自 XML 結構描述的 <see langword="length" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 可用於指定資料型別上 <see langword="simpleType" /> 項目的長度限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>將來自 XML 結構描述的 <see langword="maxExclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之最大值的限制。 該項目值必須小於 <see langword="maxExclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>將來自 XML 結構描述的 <see langword="maxInclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之最大值的限制。 項目值必須小於或等於 <see langword="maxInclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>將來自 XML 結構描述的 <see langword="maxLength" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之資料值最大長度的限制。 該長度必須小於 <see langword="maxLength" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>將來自 XML 結構描述的 <see langword="minExclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 <see langword="simpleType" /> 項目之最小值的限制。 該項目值必須大於 <see langword="minExclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>將來自 XML 結構描述的 <see langword="minInclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 simpleType 項目之最小值的限制。 該項目值必須大於或等於 <see langword="minInclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>將來自 XML 結構描述的 <see langword="minLength" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定 <see langword="simpleType" /> 項目之資料值的最小長度限制。 長度必須大於 <see langword="minLength" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>將來自 XML 結構描述的 <see langword="notation" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 XML 結構描述 <see langword="notation" /> 宣告是 <see langword="XML 1.0 NOTATION" /> 宣告的重新建構。 標記法的目的是描述 XML 文件中非 XML 資料的格式。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>取得或設定標記法的名稱。</summary>
      <returns>標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>取得或設定 <see langword="public" /> 識別項。</summary>
      <returns>
        <see langword="public" /> 識別項。 值必須是有效的統一資源識別元 (URI)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>取得或設定 <see langword="system" /> 識別項。</summary>
      <returns>
        <see langword="system" /> 識別項。 值必須是有效的 URI。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>定義 <see langword="numeric" /> Facet 的抽象類別 (Abstract Class)。 這個類別是 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 等數字 Facet 類別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>表示 Xml 結構描述物件模型階層架構的根類別，並且做為 <see cref="T:System.Xml.Schema.XmlSchema" /> 等類別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>取得或設定 <see langword="schema" /> 項目參考之檔案中的行號。</summary>
      <returns>行號。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>取得或設定 <see langword="schema" /> 項目參考之檔案中的行位置。</summary>
      <returns>行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />，以便與這個結構描述物件一起使用。</summary>
      <returns>結構描述物件的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 屬性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>取得或設定這個 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父項。</summary>
      <returns>這個 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>取得或設定載入結構描述之檔案的來源位置。</summary>
      <returns>檔案的來源位置 (URI)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的集合。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>初始化 <see langword="XmlSchemaObjectCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>初始化採用 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 之 <see langword="XmlSchemaObjectCollection" /> 類別的新執行個體。</summary>
      <param name="parent">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>加入 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 至 <see langword="XmlSchemaObjectCollection" /> 中。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>項目加入之處的索引。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <see langword="Count" />。</exception>
      <exception cref="T:System.InvalidCastException">指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不屬於型別 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 或其衍生型別 <see cref="T:System.Xml.Schema.XmlSchemaImport" />、<see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 是否在 <see langword="XmlSchemaObjectCollection" /> 中。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>如果指定的限定名稱是在集合中，則為 <see langword="true" />，否則傳回 <see langword="false" />。 如果提供了 Null，因為沒有具有 Null 名稱的限定名稱，所以會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>將集合中所有的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 複製到指定陣列中，從指定索引處開始。</summary>
      <param name="array">從 <see langword="XmlSchemaObjectCollection" /> 複製的項目之目的地一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index">陣列中以零為起始的索引，而且複製會從該位置開始。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維式。  
-或- 
 <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。  
-或- 
來源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的項目數大於從索引至目的陣列結束間的可用空間。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的型別不能自動轉換為目的陣列的型別。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>傳回可以逐一查看 <see langword="XmlSchemaObjects" /> 中包含之 <see langword="XmlSchemaObjectCollection" /> 的列舉值。</summary>
      <returns>Iterator 傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>取得與指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相關的集合索引。</summary>
      <param name="item">您所要傳回索引的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>與所指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相關的索引。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>將 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 插入 <see langword="XmlSchemaObjectCollection" />。</summary>
      <param name="index">在應插入項目處之以零起始的索引。</param>
      <param name="item">要插入的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <see langword="Count" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>取得指定索引處的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <returns>指定索引處的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>
        <see langword="OnClear" /> 會在標準 <see langword="Clear" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 OnClear 方法。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="OnInsert" /> 會在標準 <see langword="Insert" /> 行為之前叫用。 如需詳細資訊，請參閱 <see langword="OnInsert" /> 方法 <see cref="T:System.Collections.CollectionBase" />。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="OnRemove" /> 會在標準 <see langword="Remove" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 <see langword="OnRemove" /> 方法。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="OnSet" /> 會在標準 <see langword="Set" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 OnSet 方法。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="oldValue">舊值。</param>
      <param name="newValue">新值。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>從 <see langword="XmlSchemaObjectCollection" /> 移除 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="item">要移除的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>代表 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的列舉程式。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>取得集合中目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <returns>目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>移至集合中下一個項目。</summary>
      <returns>集合結尾的 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>將列舉程式重設為集合的起點。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />。</summary>
      <returns>目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />。</summary>
      <returns>下一個 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>提供 <see cref="T:System.Xml.Schema.XmlSchema" /> 類別中所包含項目的集合 (例如，Attributes、AttributeGroups、Elements 等)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>判斷集合中是否存在指定的限定名稱。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果集合中存在指定的限定名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所含的項目數。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所含的項目數。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>傳回可用來逐一查看 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 的列舉值。</summary>
      <returns>可逐一查看 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中限定名稱所指定的項目。</summary>
      <param name="name">要傳回項目 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中限定名稱所指定項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有具名項目的集合。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有具名項目的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有項目之所有值的集合。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有項目之所有值的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>該物件的抽象類別是所有物件型別的基底類別 (例如，<see cref="T:System.Xml.Schema.XmlSchemaAny" />)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>取得或設定物件可以發生的最大次數。</summary>
      <returns>物件可以發生的最大次數。 預設為 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>取得或設定數值為字串值。 物件可以發生的最大次數。</summary>
      <returns>將數字當做是字串值。 <see langword="String.Empty" /> 表示 <see langword="MaxOccurs" /> 等於預設值。 預設值為 Null 參考。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>取得或設定物件可以發生的最小次數。</summary>
      <returns>物件可以發生的最小次數。 預設為 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>取得或設定數值為字串值。 物件可以發生的最小次數。</summary>
      <returns>將數字當做是字串值。 <see langword="String.Empty" /> 表示 <see langword="MinOccurs" /> 等於預設值。 預設值為 Null 參考。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>將來自 XML 結構描述的 <see langword="pattern" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 <see langword="simpleType" /> 項目輸入之值的限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>將來自 XML 結構描述的 <see langword="redefine" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於允許在目前結構描述中，重新定義外部結構描述檔案中的簡單和複雜型別、群組及屬性 (Attribute) 群組。 這個類別還可用於提供結構描述項目的版本控制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>取得結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> (這個表格包含 <see langword="AttributeGroups" /> 屬性的編譯後值)。</summary>
      <returns>結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="AttributeGroups" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>取得結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> (這個表格包含 <see langword="Groups" /> 屬性的編譯後值)。</summary>
      <returns>結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="Groups" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>取得下列類別的集合：<see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />。</summary>
      <returns>重新定義項目中包含的項目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>取得結構描述中所有簡單和複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />，這個表格包含 <see langword="SchemaTypes" /> 屬性的編譯後值。</summary>
      <returns>結構描述中所有結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="SchemaTypes" /> 屬性的編譯後值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>將來自 XML 結構描述的 <see langword="sequence" /> 元素 (複合項)，依全球資訊網協會 (W3C) 的規定表示。 <see langword="sequence" /> 要求群組中的項目在包含項目中以指定的順序出現。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>複合項中包含的項目。 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 的集合。</summary>
      <returns>複合項中包含的項目。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>包含 XML 結構描述定義語言 (XSD) 結構描述的快取。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.XmlNameTable" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>將指定 URL 處的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
      <param name="schemaUri">指定要載入之結構描述的 URL。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 URL 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>將 <see cref="T:System.Xml.XmlReader" /> 中包含的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
      <param name="schemaDocument">
        <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.XmlReader" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>將指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schema">要加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>將指定 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為將 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 屬性設為 <see langword="true" /> 的 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 執行個體。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>將加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD) 結構描述，編譯為一個邏輯結構描述。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">錯誤發生於驗證和編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述時。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>指出具有指定目標命名空間 URI 的 XML 結構描述定義語言 (XSD) 結構描述是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
      <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
      <returns>如果具有指定的目標命名空間 URI 的結構描述位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>指出指定的 XML 結構描述定義語言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 物件是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
      <returns>如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>複製 <see cref="T:System.Xml.Schema.XmlSchema" /> 中的所有 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件至指定陣列，開始於指定的索引處。</summary>
      <param name="schemas">將物件複製到其中的陣列。</param>
      <param name="index">在陣列中開始複製的索引。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯 XML 結構描述定義語言 (XSD) 結構描述數目。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯結構描述數目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域屬性。</summary>
      <returns>全域屬性的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域項目。</summary>
      <returns>全域項目的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域簡單和複雜型別。</summary>
      <returns>全域簡單和複雜型別的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>取得值，指出是否已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <returns>如果上次從 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 加入或移除結構描述之後，已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>當載入新的 XML 結構描述定義語言 (XSD) 結構描述時，取得 <see cref="T:System.Xml.XmlNameTable" /> 所使用的預設 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>原子化字串物件的資料表。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的指定 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schema">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <returns>從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，如果在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中找不到結構描述則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">結構描述不是有效的結構描述。</exception>
      <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中指定的 XML 結構描述定義語言 (XSD) 結構描述及其匯入的所有結構描述。</summary>
      <param name="schemaToRemove">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <returns>如果成功移除 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件及其匯入的所有結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>重新處理已存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schema">要重新處理的結構描述。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述是有效的結構描述)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件不存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中屬於指定命名空間之所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
      <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 之屬於指定命名空間的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>指定事件處理常式，接收 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的資訊。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>設定 <see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>將來自 XML 結構描述的 <see langword="simpleContent" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有簡單內容模型的簡單和複雜型別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>取得其中一個 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />。</summary>
      <returns>
        <see langword="XmlSchemaSimpleContentRestriction" /> 或 <see langword="XmlSchemaSimpleContentExtension" /> 類別中包含的內容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>將來自 XML 結構描述之簡單內容的 <see langword="extension" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 可用於由擴充衍生簡單型別。 這種衍生用於藉由加入屬性 (Attribute) 來擴充項目的簡單型別內容。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>取得或設定要用於屬性值的 <see langword="XmlSchemaAnyAttribute" />。</summary>
      <returns>
        <see langword="XmlSchemaAnyAttribute" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 的集合。</summary>
      <returns>
        <see langword="simpleType" /> 項目的屬性 (Attribute) 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>取得或設定這個類型之擴充來源的內建資料類型或簡單類型的名稱。</summary>
      <returns>基底類型 (Base Type) 名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>將來自 XML 結構描述之簡單內容的 <see langword="restriction" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於透過限制衍生簡單型別。 此類衍生可用於將項目的值範圍限制為在繼承之簡單型別中指定的值子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>取得或設定要用於屬性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。</summary>
      <returns>屬性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>取得簡單類型之屬性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 及 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 集合。</summary>
      <returns>簡單類型的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>取得或設定簡單型別基底數值。</summary>
      <returns>簡單型別基底數值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>取得或設定衍生這個類型之來源的內建資料類型或簡單類型的名稱。</summary>
      <returns>基底類型 (Base Type) 的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>取得或設定 XML 結構描述 facet。</summary>
      <returns>下列其中一個 facet 類別： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>將來自 XML 結構描述之簡單內容的 <see langword="simpleType" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 定義簡單型別。 簡單型別可以指定具有純文字內容之屬性 (Attribute) 或項目值的資訊和條件約束。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 之一。</summary>
      <returns>
        <see langword="XmlSchemaSimpleTypeUnion" />、<see langword="XmlSchemaSimpleTypeList" /> 或 <see langword="XmlSchemaSimpleTypeRestriction" /> 之一。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>簡單型別內容類別的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>將來自 XML 結構描述的 <see langword="list" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於將 <see langword="simpleType" /> 項目定義為指定資料型別的值清單。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>依據簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 值，取得或設定 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" />，表示 <see langword="simpleType" /> 項目 型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示 <see langword="simpleType" /> 項目的型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>取得或設定 <see langword="simpleType" /> 項目，這個項目是從基底數值指定的型別衍生。</summary>
      <returns>簡單型別項目的項目型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義之內建資料型別或 <see langword="simpleType" /> 項目的名稱。</summary>
      <returns>簡單型別清單的型別名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>將來自 XML 結構描述之簡單類型的 <see langword="restriction" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於限制 <see langword="simpleType" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>取得或設定基底型別 (Base Type) 上的資訊。</summary>
      <returns>
        <see langword="simpleType" /> 項目的基底型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>取得或設定限定基底類型的名稱。</summary>
      <returns>簡單類型限制基底類型的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>取得或設定 XML 結構描述 facet。</summary>
      <returns>下列其中一個 facet 類別： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>將來自 XML 結構描述之簡單類型的 <see langword="union" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 <see langword="union" /> 資料型別可以用來指定 <see langword="simpleType" /> 的內容。 <see langword="simpleType" /> 項目的值必須是等位中指定之一組替代資料型別的其中任何一個。 等位型別一定是衍生的類型，並且必須至少由兩個替代資料類型構成。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件的陣列，表示基於簡單型別之 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 值的 <see langword="simpleType" /> 項目型別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件的陣列，表示 <see langword="simpleType" /> 項目的型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>取得基底類型 (Base Type) 的集合。</summary>
      <returns>簡單類型基底數值的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義的內建資料型別或 <see langword="simpleType" /> 項目的成員限定名稱 (Qualified Name) 陣列。</summary>
      <returns>陣列，含有內建資料類型或簡單類型的成員清單。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>將來自 XML 結構描述的 <see langword="totalDigits" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於指定對可以為 <see langword="simpleType" /> 項目值輸入之位數的限制。 該 <see langword="totalDigits" /> 值必須是正整數。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>所有簡單型別和複雜型別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>取得編譯後物件型別或內建 XML 結構描述定義語言 (XSD) 資料型別、simpleType 項目或 complexType 項目。 這是後結構描述編譯資訊集屬性。</summary>
      <returns>內建 XSD 資料型別、simpleType 項目或 complexType 項目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>取得此結構描述型別之基底型別的編譯後值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件，表示這個結構描述型別的基底型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>取得複雜型別之資料型別的編譯後值。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 後結構描述編譯值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>取得有關此項目如何從其基底型別衍生的編譯後資訊。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>取得或設定型別衍生的 final 屬性，指出是否允許進一步衍生。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>取得 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 屬性的編譯後值。</summary>
      <returns>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 屬性的編譯後值。 預設值為 <see langword="finalDefault" /> 項目的 <see langword="schema" /> 屬性值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示指定之複雜型別的內建複雜型別。</summary>
      <param name="typeCode">其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值，表示複雜型別。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示內建複雜型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示完整名稱指定之複雜型別的內建複雜型別。</summary>
      <param name="qualifiedName">複雜型別的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示內建複雜型別。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示指定之簡單型別的內建簡單型別。</summary>
      <param name="typeCode">其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值，表示簡單型別。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示內建簡單型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示限定名稱指定之簡單型別的內建簡單型別。</summary>
      <param name="qualifiedName">簡單型別的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示內建簡單型別。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>傳回值，指出指定的衍生結構描述型別是否衍生自指定的基底結構描述型別。</summary>
      <param name="derivedType">要測試的衍生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="baseType">基底 <see cref="T:System.Xml.Schema.XmlSchemaType" />，要對其測試衍生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="except">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示從測試排除的型別衍生方法。</param>
      <returns>如果衍生型別是衍生自基底型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>取得或設定值，指出這個型別是否具有混合內容模型。 這個屬性只在複雜型別中有效。</summary>
      <returns>如果型別有混合內容模型，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>取得或設定型別的名稱。</summary>
      <returns>型別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>取得從這個型別的 <see langword="Name" /> 屬性 (Attribute) 建置之型別的限定名稱 (Qualified Name)。 這是後結構描述編譯屬性。</summary>
      <returns>型別的 <see cref="T:System.Xml.XmlQualifiedName" />，從這個型別的 <see langword="Name" /> 屬性建置而來。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>取得型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" />。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>將來自 XML 結構描述的 <see langword="unique" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於識別一組項目中唯一的條件約束 (Unique Constraint)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>如何使用屬性的指示器。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>未指定屬性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>屬性是選擇項。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>不能使用屬性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>屬性必須出現一次。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>表示在正在驗證之 XML 文件中遇到 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤和警告時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>使用指定的例外狀況訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>使用例外狀況訊息和導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的例外狀況訊息，以及導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件、XML 中的行號和行位置，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
      <param name="lineNumber">導致這個例外狀況的 XML 行號。</param>
      <param name="linePosition">導致這個例外狀況的 XML 行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 資訊建構包含 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 所有屬性的新 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>設定引起這個錯誤的 XML 節點。</summary>
      <param name="sourceObject">來源物件。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>取得導致這個 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 節點。</summary>
      <returns>導致這個 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 節點。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>指定 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 和 <see cref="T:System.Xml.XmlReader" /> 類別 (Class) 所使用的結構描述驗證選項。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>允許 xml:* 屬性，即使未在結構描述中定義它們也是如此。 對屬性的驗證會依據其資料型別進行。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>請勿處理識別條件約束、內嵌結構描述、結構描述位置提示，或報告結構描述驗證警告。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>處理驗證期間遇到的識別條件約束 (<c>xs:ID</c>、<c>xs:IDREF</c>、<c>xs:key</c>、<c>xs:keyref</c>、<c>xs:unique</c>)。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>處理驗證期間遇到的內嵌結構描述。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>處理驗證期間遇到的結構描述位置提示 (<c>xsi:schemalocation</c>、<c>xsi:noNamespaceSchemaLocation</c>)。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>報告驗證期間遇到的結構描述驗證警告。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>表示 XML 結構描述定義語言 (XSD) 結構描述驗證引擎。 無法繼承 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別 (Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別的新執行個體。</summary>
      <param name="nameTable">
        <see cref="T:System.Xml.XmlNameTable" /> 物件，包含原子化字串形式的項目和屬性名稱。</param>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含用於驗證的 XML 結構描述定義語言 (XSD) 結構描述。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析驗證期間遇到的命名空間。</param>
      <param name="validationFlags">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 值，指定結構描述驗證選項。</param>
      <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">在編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 參數中的結構描述時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>將 XML 結構描述定義語言 (XSD) 結構描述加入一組用於驗證的結構描述。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件，該物件要加入一組用於驗證的結構描述。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 參數的目標命名空間與 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件已經遇到之任何項目或屬性的目標命名空間都相符。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 參數無效。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>結束驗證，並檢查整個 XML 文件的識別條件約束。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在 XML 文件中找到識別條件約束錯誤。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>傳回目前項目內容的預期屬性。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件的陣列；如果沒有預期屬性，則為空白陣列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>傳回目前項目內容中的預期物件。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 物件的陣列；如果沒有預期物件，則為空白陣列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>對預設屬性驗證識別條件約束，並針對先前尚未使用 <see cref="T:System.Collections.ArrayList" /> 方法在項目內容中驗證預設值的任何屬性，以其 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入指定的 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。</summary>
      <param name="defaultAttributes">
        <see cref="T:System.Collections.ArrayList" />，要用驗證期間尚未在項目內容中遇到之任何屬性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的狀態。</summary>
      <exception cref="T:System.InvalidOperationException">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>使用為部分驗證指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />，初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 物件的狀態。</summary>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件，用於初始化部分驗證之 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的驗證內容。</param>
      <exception cref="T:System.InvalidOperationException">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不是 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不可為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>取得或設定正在驗證之 XML 節點的行號資訊。</summary>
      <returns>
        <see cref="T:System.Xml.IXmlLineInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>略過目前項目內容的驗證，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件，以驗證父項目內容 (Context) 中的內容 (Content)。</summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，如果順利略過目前項目內容，則會設定此物件的屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>取得或設定正在驗證之 XML 節點的來源 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 物件，表示正在驗證之 XML 節點的來源 URI；預設值為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>驗證目前項目內容中的屬性名稱、命名空間 URI 和值。</summary>
      <param name="localName">要驗證之屬性的區域名稱。</param>
      <param name="namespaceUri">要驗證之屬性的命名空間 URI。</param>
      <param name="attributeValue">要驗證之屬性的值。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
      <returns>已驗證之屬性的值。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此屬性在目前項目內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>驗證目前項目內容中的屬性名稱、命名空間 URI 和值。</summary>
      <param name="localName">要驗證之屬性的區域名稱。</param>
      <param name="namespaceUri">要驗證之屬性的命名空間 URI。</param>
      <param name="attributeValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將屬性的值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
      <returns>已驗證之屬性的值。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此屬性在目前項目內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>驗證目前內容中的項目。</summary>
      <param name="localName">要驗證之項目的區域名稱。</param>
      <param name="namespaceUri">要驗證之項目的命名空間 (Namespace) URI。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的名稱在目前內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>驗證目前內容中已指定 <c>xsi:Yype</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c> 和 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值的元素。</summary>
      <param name="localName">要驗證之項目的區域名稱。</param>
      <param name="namespaceUri">要驗證之項目的命名空間 (Namespace) URI。</param>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiType">元素的 <c>xsi:Type</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiNil">元素的 <c>xsi:Nil</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiSchemaLocation">元素的 <c>xsi:SchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiNoNamespaceSchemaLocation">元素的 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的名稱在目前內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>對於具有簡單內容的項目，根據項目的資料型別驗證它的文字內容是否有效；對於具有複雜內容的項目，驗證目前項目的內容是否完整。</summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <returns>如果此項目具有簡單內容，則為此項目之已剖析的具型別文字值。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">項目的內容無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>根據指定項目的資料型別，驗證此項目的文字內容是否有效。</summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證此項目的文字內容時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <param name="typedValue">此項目的具型別文字內容。</param>
      <returns>此項目之已剖析的具型別簡單內容。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">此項目的文字內容無效。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法 (例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法)、先前已呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法，或此項目具有複雜內容。</exception>
      <exception cref="T:System.ArgumentNullException">具型別之文字內容參數不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>驗證項目內容中的所有必要屬性是否均已存在，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件以驗證項目的子內容。</summary>
      <param name="schemaInfo">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目內容中的所有必要屬性都已存在時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">找不到目前項目內容中的一或多個必要屬性。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException">一或多個指定的參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>驗證在目前項目內容中是否允許指定的文字 <see langword="string" />，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
      <param name="elementValue">目前項目內容中要驗證的文字 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的文字，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
      <param name="elementValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將文字值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>驗證在目前項目內容中是否允許指定之 <see langword="string" /> 中的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
      <param name="elementValue">要在目前項目內容中驗證的空白區 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許空白區。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
      <param name="elementValue">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將空白字元值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">在目前項目內容中不允許空白區。</exception>
      <exception cref="T:System.InvalidOperationException">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>
        <see cref="T:System.Xml.Schema.ValidationEventHandler" />，可接收結構描述驗證期間遇到的結構描述驗證警告和錯誤。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>取得或設定物件，該物件是以驗證事件的傳送者物件形式傳送。</summary>
      <returns>
        <see cref="T:System.Object" />，預設為這個 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>設定 <see cref="T:System.Xml.XmlResolver" /> 物件，用於解析 <c>xs:import</c> 和 <c>xs:include</c> 元素，以及 <c>xsi:schemaLocation</c> 和 <c>xsi:noNamespaceSchemaLocation</c> 屬性。</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 物件，預設值為 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>表示 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別所驗證之 XML 項目的有效性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>XML 項目無效。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>XML 項目的有效性未知。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>XML 項目有效。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="whiteSpace" /> Facet。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>表示全球資訊網協會 (W3C) 的 <see langword="selector" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>取得或設定 XPath 運算式的屬性。</summary>
      <returns>XPath 運算式的字串屬性值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>表示驗證事件的嚴重性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>指示在驗證執行個體文件時發生驗證錯誤。 這會套用至文件類型定義 (DTD) 和 XML 結構描述定義語言 (XSD) 結構描述。 全球資訊網協會 (W3C) 有效性條件約束 (Constraint) 會被視為錯誤。 如果未建立驗證事件處理常式，錯誤會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>表示發生了驗證事件，但不是錯誤。 通常在沒有可以驗證特定項目或屬性的 DTD 或 XML 結構描述時，會發出警告。 警告與錯誤不同，如果沒有驗證事件處理常式，並不會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>表示 W3C XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>等位的任何原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>W3C XML 結構描述 <see langword="xs:anyURI" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>W3C XML 結構描述 <see langword="xs:base64Binary" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>W3C XML 結構描述 <see langword="xs:boolean" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>W3C XML 結構描述 <see langword="xs:byte" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>W3C XML 結構描述 <see langword="xs:date" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>W3C XML 結構描述 <see langword="xs:dateTime" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>W3C XML 結構描述 <see langword="xs:decimal" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>W3C XML 結構描述 <see langword="xs:double" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>W3C XML 結構描述 <see langword="xs:Duration" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>W3C XML 結構描述 <see langword="xs:ENTITY" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>W3C XML 結構描述 <see langword="xs:float" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>W3C XML 結構描述 <see langword="xs:gDay" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>W3C XML 結構描述 <see langword="xs:gMonth" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>W3C XML 結構描述 <see langword="xs:gMonthDay" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>W3C XML 結構描述 <see langword="xs:gYear" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>W3C XML 結構描述 <see langword="xs:gYearMonth" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>W3C XML 結構描述 <see langword="xs:hexBinary" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>W3C XML 結構描述 <see langword="xs:ID" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>W3C XML 結構描述 <see langword="xs:IDREF" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>W3C XML 結構描述 <see langword="xs:int" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>W3C XML 結構描述 <see langword="xs:integer" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>項目，例如節點或原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>W3C XML 結構描述 <see langword="xs:language" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>W3C XML 結構描述 <see langword="xs:long" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>W3C XML 結構描述 <see langword="xs:Name" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>W3C XML 結構描述 <see langword="xs:NCName" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>W3C XML 結構描述 <see langword="xs:negativeInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>W3C XML 結構描述 <see langword="xs:NMTOKEN" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>沒有型別資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>W3C XML 結構描述 <see langword="xs:nonNegativeInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>W3C XML 結構描述 <see langword="xs:nonPositiveInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>W3C XML 結構描述 <see langword="xs:normalizedString" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>W3C XML 結構描述 <see langword="xs:NOTATION" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>W3C XML 結構描述 <see langword="xs:positiveInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>W3C XML 結構描述 <see langword="xs:QName" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>W3C XML 結構描述 <see langword="xs:short" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>W3C XML 結構描述 <see langword="xs:string" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>W3C XML 結構描述 <see langword="xs:time" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>W3C XML 結構描述 <see langword="xs:token" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>W3C XML 結構描述 <see langword="xs:unsignedByte" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>W3C XML 結構描述 <see langword="xs:unsignedInt" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>W3C XML 結構描述 <see langword="xs:unsignedLong" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>W3C XML 結構描述 <see langword="xs:unsignedShort" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>不具型別的原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>由 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別使用的 <see langword="delegate" />，用來將屬性、文字和泛空白字元值做為與屬性、文字或泛空白字元的 XML 結構描述定義語言 (XSD) 型別相容的 Common Language Runtime (CLR) 型別進行傳遞。</summary>
      <returns>物件，包含屬性、文字或泛空白字元值。 該物件是對應到屬性、文字或空白字元值 XSD 類型的 CLR 類型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>為 XML 序列化和還原序列化提供自訂格式化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>這個方法已保留且不應使用。 實作 <see langword="IXmlSerializable" /> 介面時，您應該從這個方法傳回 <see langword="null" /> (在 Visual Basic 中為 <see langword="Nothing" />)，而且如果需要指定自訂結構描述，請改為將 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 套用至類別。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />，描述物件的 XML 表示，該物件由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法產生，由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法取用。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>從物件的 XML 表示產生該物件。</summary>
      <param name="reader">還原序列化物件的 <see cref="T:System.Xml.XmlReader" /> 資料流。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>將物件轉換成其 XML 表示。</summary>
      <param name="writer">序列化物件的目標 <see cref="T:System.Xml.XmlWriter" /> 資料流。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>指定成員 (傳回 <see cref="T:System.Xml.XmlAttribute" /> 物件陣列的欄位) 可以包含任何 XML 屬性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>建構 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>指定成員 (傳回 <see cref="T:System.Xml.XmlElement" /> 或 <see cref="T:System.Xml.XmlNode" /> 物件陣列的欄位) 包含物件，該物件表示在序列化或還原序列化物件中沒有對應成員的任何 XML 項目。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱及其 XML 命名空間。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 項目名稱。</param>
      <param name="ns">XML 項目的 XML 命名空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>取得或設定 XML 項目名稱。</summary>
      <returns>XML 項目的名稱。</returns>
      <exception cref="T:System.InvalidOperationException">陣列成員的項目名稱與 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> 屬性指定的項目名稱不符。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>取得或設定在 XML 文件中產生的 XML 命名空間。</summary>
      <returns>XML 命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>取得或設定項目序列化或還原序列化的明確順序。</summary>
      <returns>程式碼產生的順序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必須將類別成員序列化為 XML 屬性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體，並指定產生的 XML 屬性的名稱。</summary>
      <param name="attributeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 屬性名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
      <param name="attributeName">產生的 XML 屬性名稱。</param>
      <param name="type">
        <see cref="T:System.Type" />，用於儲存屬性。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，用於儲存屬性。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>取得或設定 XML 屬性的名稱。</summary>
      <returns>XML 屬性的名稱。 預設為成員名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>取得或設定由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生之 XML 屬性的 XSD 資料型別。</summary>
      <returns>XSD (XML 架構檔) 資料類型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 屬性名稱是否為限定的。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設為 <see langword="XmlForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>取得或設定 XML 屬性的 XML 命名空間。</summary>
      <returns>XML 屬性的 XML 命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>取得或設定 XML 屬性的複雜型別。</summary>
      <returns>XML 屬性的型別。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>表示在 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化或還原序列化包含 XML 項目的物件時，公用欄位或屬性表示該項目。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體，並且指定 XML 項目的名稱。</summary>
      <param name="elementName">序列成員的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的新執行個體，並針對套用 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的成員指定 XML 項目名稱和衍生型別。 這個成員型別用於 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化包含它的物件時。</summary>
      <param name="elementName">序列成員的 XML 項目名稱。</param>
      <param name="type">衍生自成員型別的物件 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體，並針對套用 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的成員指定型別。 序列化或還原序列化包含這個型別的物件時，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 會使用該型別。</summary>
      <param name="type">衍生自成員型別的物件 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 所產生 XML 項目的 XML 結構描述定義 (XSD) 資料型別。</summary>
      <returns>XML 架構資料類型。</returns>
      <exception cref="T:System.Exception">您指定的 XML 結構描述資料型別無法對應至 .NET 資料型別。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>取得或設定產生的 XML 項目的名稱。</summary>
      <returns>產生的 XML 項目的名稱。 預設值為成員識別項。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>取得或設定值，指出項目是否為限定的。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必須將設為 <see langword="null" /> 的成員序列化為 <see langword="xsi:nil" /> 屬性設為 <see langword="true" /> 的空標記。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生 <see langword="true" /> 屬性，則為 <see langword="xsi:nil" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>取得或設定指派給類別序列化時所產生之 XML 項目的命名空間。</summary>
      <returns>XML 項目的命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>取得或設定項目序列化或還原序列化的明確順序。</summary>
      <returns>程式碼產生的順序。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>取得或設定用來表示 XML 項目的物件類型。</summary>
      <returns>成員的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別 (Enumeration) 成員的方式。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 類別的新執行個體，並指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 分別在序列化或還原序列化列舉型別時所產生或識別的 XML 值。</summary>
      <param name="name">列舉型別成員的覆寫名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>取得或設定當 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別時，在 XML 文件執行個體所產生的值，或是當它還原序列化列舉型別成員時所識別的值。</summary>
      <returns>當 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別時，在 XML 文件執行個體中所產生的值，或是當它還原序列化列舉型別成員時所識別的值。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>表示 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 方法不要序列化公用欄位或公用讀取/寫入屬性值。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>指定目標屬性、參數、傳回值或類別成員，包含與 XML 文件內使用之命名空間相關聯的前置詞。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>控制做為 XML 根項目之屬性目標的 XML 序列化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 類別的新執行個體，並指定 XML 根項目的名稱。</summary>
      <param name="elementName">XML 根項目的名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>取得或設定 XML 根項目的 XSD 資料類型。</summary>
      <returns>XSD (XML 架構檔) 資料類型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>取得或設定分別由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 和 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 方法所產生和辨識的 XML 項目。</summary>
      <returns>在 XML 文件執行個體中所產生或辨識的 XML 根項目名稱。 預設值為序列類別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必須將設為 <see langword="null" /> 的成員序列化成設為 <see langword="true" /> 的 <see langword="xsi:nil" /> 屬性。</summary>
      <returns>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生 <see langword="true" /> 屬性，則為 <see langword="xsi:nil" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>取得或設定 XML 根項目的命名空間。</summary>
      <returns>XML 根項目的命名空間。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>套用至型別後，儲存傳回 XML 結構描述之型別的靜態方法名稱以及控制型別之序列化 (Serialization) 的 <see cref="T:System.Xml.XmlQualifiedName" /> (或用於匿名型別的 <see cref="T:System.Xml.Schema.XmlSchemaType" />)。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 類別的新執行個體，並採用提供型別之 XML 結構描述的靜態方法名稱。</summary>
      <param name="methodName">要實作之靜態方法的名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>取得或設定值，以便判斷目標類別是否為萬用字元，或者該類別的結構描述是否僅含有 <see langword="xs:any" /> 項目。</summary>
      <returns>如果該類別為萬用字元，或者結構描述僅含有 <see langword="true" /> 項目，則為 <see langword="xs:any" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>取得提供型別之 XML 結構描述的靜態方法名稱以及其 XML 結構描述資料型別的名稱。</summary>
      <returns>由 XML 基礎結構叫用以傳回 XML 結構描述之方法的名稱。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>將 XML 命名空間 (Namespace) 和 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用來產生限定名稱的前置詞包含在 XML 文件執行個體中。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>使用包含前置詞和命名空間配對集合之 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 的指定執行個體，初始化 <see langword="XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
      <param name="namespaces">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 的執行個體，包含命名空間和前置詞配對。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
      <param name="namespaces">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的陣列。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>將前置詞和命名空間配對加入 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 物件。</summary>
      <param name="prefix">與 XML 命名空間相關的前置詞。</param>
      <param name="ns">XML 命名空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>取得集合中前置詞和命名空間配對的數目。</summary>
      <returns>集合中前置詞和命名空間配對數目。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>取得 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 物件中前置詞和命名空間配對的陣列。</summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的陣列，在 XML 文件中用作限定名稱。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>表示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在序列化或還原序列化包含它的類別之後，應該將成員視為 XML 文字。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要序列化之成員的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 所產生之文字的XML 結構描述定義語言 (XSD) 資料型別。</summary>
      <returns>XML 架構 (XSD) 資料類型。</returns>
      <exception cref="T:System.Exception">您指定的 XML 結構描述資料型別無法對應至 .NET 資料型別。</exception>
      <exception cref="T:System.InvalidOperationException">您指定的 XML 結構描述資料型別對於該屬性無效，且無法轉換為成員型別。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>取得或設定成員的型別。</summary>
      <returns>成員的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>指定要執行的驗證類型。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>驗證是否找到 DTD 或結構描述資訊。 
從 .NET Framework 2.0 開始，此欄位已淘汰。 它只適用於淘汰的 <see cref="T:System.Xml.XmlValidatingReader" /> 類別。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>根據 DTD 驗證。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>不執行任何驗證，也不擲回任何驗證錯誤。 這個設定建立 XML 1.0 相容的非驗證剖析器。
呼叫 <see cref="M:System.Xml.XmlReader.ResolveEntity" /> 以報告預設屬性，並解析一般實體。 DOCTYPE 不作為驗證用途。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>根據 XML 結構描述定義語言 (XSD) 結構描述進行驗證，包括內嵌 XML 結構描述。 藉由使用 <see langword="schemaLocation" /> 屬性 (Attribute) 或提供的 <see langword="Schemas" /> 屬性 (Property)，使 XML 結構描述與命名空間 URI 產生關聯。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>根據 XML-Data Reduced (XDR) 結構描述進行驗證，包括內嵌 XML 結構描述。 XDR 結構描述是使用 <see langword="x-schema" /> 命名空間前置詞或 <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> 屬性辨識。
從 .NET Framework 2.0 開始，此欄位已淘汰。 它只適用於淘汰的 <see cref="T:System.Xml.XmlValidatingReader" /> 類別。</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>指定如何處理泛空白字元 (White Space)。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>傳回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 節點。 這是預設值。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>不傳回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 節點。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>只傳回 <see langword="SignificantWhitespace" /> 節點。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>指定 <see cref="T:System.Xml.XmlWriter" /> 的狀態。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>指出正在寫入屬性值。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>指出已呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>指出正在寫入項目內容。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>指出正在寫入項目開始標記。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>已經擲回例外狀況，<see cref="T:System.Xml.XmlWriter" /> 因此處於無效狀態。 您可以呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法，將 <see cref="T:System.Xml.XmlWriter" /> 置於 <see cref="F:System.Xml.WriteState.Closed" /> 狀態下。 任何其他 <see cref="T:System.Xml.XmlWriter" /> 方法呼叫會導致 <see cref="T:System.InvalidOperationException" />。
此欄位已新增在 .NET Framework 2.0 中。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>指出正在寫入初構 (Prolog)。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>指出尚未呼叫 Write 方法。</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>表示屬性 (Attribute)。 屬性的有效和預設值是在文件類型定義 (DTD) 或結構描述中定義。</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlAttribute" /> 類別的新執行個體。</summary>
      <param name="prefix">命名空間前置詞。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">命名空間的統一資源識別元 (URI)。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>將指定的節點加入這個節點之子節點清單的結尾。</summary>
      <param name="newChild">要加入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>所加入的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>取得節點的基底統一資源識別元 (URI)。</summary>
      <returns>節點載入的位置；如果節點沒有基底 URI，則為 String.Empty。 屬性節點的基底 URI 與其擁有人項目的相同。 如果屬性節點沒有擁有人項目，<see langword="BaseURI" /> 會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />，若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>重複的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>設定節點的串連值和其所有的子節點。</summary>
      <returns>節點的串連值和其所有的子節點。 在屬性節點方面，這個屬性的功能與 <see cref="P:System.Xml.XmlAttribute.Value" /> 屬性相同。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>設定屬性值。</summary>
      <returns>屬性值。</returns>
      <exception cref="T:System.Xml.XmlException">未正確設定這個屬性之語式時所指定的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>在指定的參考節點之後，插入指定的節點。</summary>
      <param name="newChild">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" /> 為參考節點。 <paramref name="newChild" /> 會置於 <paramref name="refChild" /> 之後。</param>
      <returns>所插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
<paramref name="refChild" /> 不是這個節點的子節點。  
這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>在指定的參考節點之前，插入指定的節點。</summary>
      <param name="newChild">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">
        <see cref="T:System.Xml.XmlNode" /> 為參考節點。 <paramref name="newChild" /> 會置於這個節點之前。</param>
      <returns>所插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">目前這種型別的節點不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
<paramref name="refChild" /> 不是這個節點的子節點。  
這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>已移除前置詞的屬性節點名稱。 &lt;在下列範例中, bk: 內容類型 = ' novel&gt;', <see langword="LocalName" />屬性的為<see langword="genre" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>屬性節點的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>取得這個節點的命名空間 URI。</summary>
      <returns>這個節點的命名空間 URI。 如果屬性並未明確指定命名空間，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see langword="XmlAttribute" /> 節點的節點型別是 XmlNodeType.Attribute。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>這個節點所屬的 XML 文件。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>取得屬性所屬的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>屬性所屬的 <see langword="XmlElement" />；如果這個屬性不是 <see langword="null" /> 的一部分，則為 <see langword="XmlElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>取得這個節點的父代 (Parent)。 對於 <see langword="XmlAttribute" /> 節點，這個屬性永遠傳回 <see langword="null" />。</summary>
      <returns>對於 <see langword="XmlAttribute" /> 節點，這個屬性永遠傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>取得或設定這個節點的命名空間前置詞。</summary>
      <returns>這個節點的命名空間前置詞。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
      <exception cref="T:System.ArgumentException">這個節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException">指定的前置詞包含無效的字元。  
指定的前置詞格式不正確。  
這個節點的 namespaceURI 為 <see langword="null" />。  
指定的前置詞為 "xml"，且此節點的 namespaceURI 與 "http://www.w3.org/XML/1998/namespace" (英文) 的不同。  
此節點是一個屬性，指定的前置詞是 "xmlns"，且此節點的 namespaceURI 與 "http://www.w3.org/2000/xmlns/" (英文) 的不同。  
這個節點是一個屬性，其 qualifiedName 為 "xmlns" [Namespaces]。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>將指定的節點加入這個節點之子節點清單的開頭。</summary>
      <param name="newChild">要加入的 <see cref="T:System.Xml.XmlNode" />。 如果是 <see cref="T:System.Xml.XmlDocumentFragment" />，則文件片段的整個內容都會移入這個節點的子節點清單中。</param>
      <returns>所加入的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>移除指定的子節點。</summary>
      <param name="oldChild">要移除的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>所移除的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是這個節點的子節點。 或者這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>用指定的新子節點取代指定的子節點。</summary>
      <param name="newChild">新的子 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldChild">要取代的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>所取代的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。  
<paramref name="oldChild" /> 不是這個節點的子節點。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>取得值，表示是否明確設定屬性值。</summary>
      <returns>如果在原始執行個體文件中明確指定了這個屬性的值，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="false" /> 值指示屬性的值是來自 DTD。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 至於 <see langword="XmlAttribute" /> 節點，這個屬性 (Property) 是屬性 (Attribute) 的值。</returns>
      <exception cref="T:System.ArgumentException">節點為唯讀，並會呼叫設定作業。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>表示可用名稱或索引存取的屬性 (Attribute) 集合。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>插入指定的屬性做為集合的最後一個節點。</summary>
      <param name="node">要插入的屬性。</param>
      <returns>
        <see langword="XmlAttribute" />，要附加至集合。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 由不同於建立這個集合的另一個文件所建立。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>從這個集合中複製所有 <see cref="T:System.Xml.XmlAttribute" /> 物件至指定的陣列中。</summary>
      <param name="array">陣列，是從這個集合所複製的物件的目的端。</param>
      <param name="index">在複製開始的所在陣列中的索引。</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>在指定的參考屬性之後，立即插入指定的屬性。</summary>
      <param name="newNode">要插入的屬性。</param>
      <param name="refNode">參考屬性。 <paramref name="newNode" /> 會置於 <paramref name="refNode" /> 之後。</param>
      <returns>要插入至集合的 <see langword="XmlAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 由不同於建立這個集合的另一個文件所建立。 或者 <paramref name="refNode" /> 並非這個集合的成員。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>在指定的參考屬性之前，立即插入指定的屬性。</summary>
      <param name="newNode">要插入的屬性。</param>
      <param name="refNode">參考屬性。 <paramref name="newNode" /> 會置於 <paramref name="refNode" /> 之前。</param>
      <returns>要插入至集合的 <see langword="XmlAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newNode" /> 由不同於建立這個集合的另一個文件所建立。 或者 <paramref name="refNode" /> 並非這個集合的成員。</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>取得具有指定索引的屬性。</summary>
      <param name="i">屬性的索引。</param>
      <returns>位於指定索引處的屬性。</returns>
      <exception cref="T:System.IndexOutOfRangeException">傳入的索引超出範圍。</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>取得具有指定名稱的屬性。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>具有指定名稱的屬性。 如果屬性 (attribute) 不存在，這個屬性 (property) 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>取得指定的區域名稱和命名空間統一資源識別元 (URI) 之屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>具有指定的區功能變數名稱稱和命名空間 URI 的屬性。 如果屬性 (attribute) 不存在，這個屬性 (property) 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>插入指定的屬性做為集合的第一個節點。</summary>
      <param name="node">要插入的屬性。</param>
      <returns>要加入至集合中的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>從集合中移除指定的屬性。</summary>
      <param name="node">要移除的屬性。</param>
      <returns>這個節點將會移除，如果集合中找不到這個節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>從集合移除所有的屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>從集合中移除對應指定索引的屬性。</summary>
      <param name="i">要移除的節點的索引。 第一個節點的索引為 0。</param>
      <returns>如果在指定的索引處並無屬性，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>使用其 <see cref="T:System.Xml.XmlNode" /> 屬性加入 <see cref="P:System.Xml.XmlNode.Name" />。</summary>
      <param name="node">儲存在這個集合中的屬性節點。 這個節點稍後可用節點名稱來存取。 如果集合中已經有這個名稱的節點，它將會被新的節點取代；否則，這個節點就會附加在集合的結尾。</param>
      <returns>如果 <paramref name="node" /> 取代同名的現有節點，則傳回舊節點；否則傳回所加入的節點。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> 由不同於建立這個集合的另一個 <see cref="T:System.Xml.XmlDocument" /> 所建立。  
這個 <see langword="XmlAttributeCollection" /> 是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 是已經成為另一個 <see cref="T:System.Xml.XmlAttribute" /> 物件屬性的 <see cref="T:System.Xml.XmlElement" />。 若要重複使用其他項目中的屬性，您必須複製 (Clone) 想要重複使用的 <see langword="XmlAttribute" /> 物件。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />。</summary>
      <param name="array">陣列，是從這個集合所複製的物件的目的端。</param>
      <param name="index">在複製開始的所在陣列中的索引。</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />。</summary>
      <returns>
        <see langword="int" />包含屬性計數的。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns>
        <see langword="true" />如果集合已同步處理, 則為。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns>, <see cref="T:System.Object" />其為集合的根。</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>表示 CDATA 區段。</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlCDataSection" /> 類別的新執行個體。</summary>
      <param name="data">包含字元資料的 <see cref="T:System.String" />。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 物件</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為 CDATA 節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含資料內容。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 CDATA 節點，其區域名稱為 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 CDATA 節點，其名稱為 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>節點類型。 對於 CDATA 節點，其值為 XmlNodeType.CDATA。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary>取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns>表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary>取得這個節點的前置文字節點。</summary>
      <returns>傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>提供許多類別使用的文字管理方法。</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlCharacterData" /> 類別的新執行個體。</summary>
      <param name="data">字串，包含要加入至文件的字元資料。</param>
      <param name="doc">要包含字元資料的 <see cref="T:System.Xml.XmlDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>將指定的字串附加至節點字元資料的結尾。</summary>
      <param name="strData">要插入現有字串中的字串。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>包含節點的資料。</summary>
      <returns>節點的資料。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>從節點移除字元範圍。</summary>
      <param name="offset">字串中要開始刪除的位置。</param>
      <param name="count">要刪除的字元數。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>取得或設定節點和節點所有子系的串連值。</summary>
      <returns>節點和節點所有子系的串連值。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>在指定的字元位移處插入指定的字串。</summary>
      <param name="offset">字串中要插入提供的字串資料的位置。</param>
      <param name="strData">要插入現有字串中的字串資料。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>取得資料的長度，以字元為單位。</summary>
      <returns>
        <see cref="P:System.Xml.XmlCharacterData.Data" /> 屬性中字串的長度 (以字元為單位)。 長度可能是零，也就是 CharacterData 節點可能是空的。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>從指定的位移處開始，以指定的字串取代指定的字元數。</summary>
      <param name="offset">字串中要開始取代的位置。</param>
      <param name="count">要取代的字元數。</param>
      <param name="strData">取代舊字串資料的新資料。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>從指定的範圍擷取完整字串中的一個子字串。</summary>
      <param name="offset">字串中要開始擷取的位置。 零位移指示起點就在資料的開頭。</param>
      <param name="count">要擷取的字元數。</param>
      <returns>對應至指定範圍的子字串。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>節點的值。</returns>
      <exception cref="T:System.ArgumentException">節點是唯讀的。</exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>表示 XML 註解的內容。</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlComment" /> 類別的新執行個體。</summary>
      <param name="comment">註解項目的內容。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為註解節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含文字內容。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於註解節點，其值為 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於註解節點，其值為 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>對於註解節點，其值為 XmlNodeType.Comment。</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 因為註解節點沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>編碼和解碼 XML 名稱，並且提供在 Common Language Runtime 類型和 XML 結構描述定義語言 (XSD) 類型之間轉換的方法。 轉換資料類型時，傳回的值與地區設定無關。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlConvert" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>將名稱解碼。 這個方法反向執行 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 和 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> 方法。</summary>
      <param name="name">要轉換的名稱。</param>
      <returns>解碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>將名稱轉換為有效的 XML 區域名稱。</summary>
      <param name="name">要編碼的名稱。</param>
      <returns>編碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>將名稱轉換為有效的 XML 名稱。</summary>
      <param name="name">要轉譯的名稱。</param>
      <returns>具有以逸出字元取代之任何無效字元的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>根據 XML 規格驗證確定名稱有效。</summary>
      <param name="name">要編碼的名稱。</param>
      <returns>編碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>檢查傳入的字元是否為有效的非冒號字元型別。</summary>
      <param name="ch">要做為非冒號字元來驗證的字元。</param>
      <returns>如果字元是有效的非冒號字元型別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>如果引數中的字元是有效的公用 ID 字元，則會傳回傳入的字元執行個體，否則傳回 <see langword="null" />。</summary>
      <param name="ch">要驗證的 <see cref="T:System.Char" /> 物件。</param>
      <returns>如果字元是有效的公用 ID 字元，則為傳入的字元；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>檢查傳入的字元是否為有效的開頭名稱字元型別。</summary>
      <param name="ch">要驗證的字元。</param>
      <returns>如果字元是有效的開頭名稱字元型別則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>檢查傳入的字元是否為有效的 XML 空白字元。</summary>
      <param name="ch">要驗證的字元。</param>
      <returns>如果傳入的字元是有效的 XML 空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>檢查傳入的字元是否為有效的 XML 字元。</summary>
      <param name="ch">要驗證的字元。</param>
      <returns>如果傳入的字元是有效的 XML 字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>檢查傳入的字元 Surrogate 字組是否為有效的 XML 字元。</summary>
      <param name="lowChar">要驗證的 Surrogate 字元。</param>
      <param name="highChar">要驗證的 Surrogate 字元。</param>
      <returns>如果傳入的 Surrogate 字元組是有效的 XML 字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Boolean" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>
        <see langword="Boolean" /> 值，為 <see langword="true" /> 或 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示為 <see langword="Boolean" /> 值。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Byte" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Byte" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Char" />。</summary>
      <param name="s">字串，含有要轉換的單一字元。</param>
      <returns>
        <see langword="Char" />，表示單一字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數的值為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 含有一個以上字元。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是空字串或是格式不正確。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要轉換的字串。</param>
      <param name="format">要套用至轉換後 <see langword="DateTime" /> 的格式結構。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。 字串會對照這個格式來驗證。</param>
      <returns>字串的對等 <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是 String.Empty。 
-或- 
 <paramref name="s" /> 不包含對應至 <paramref name="format" /> 的日期和時間。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">要轉換的字串。</param>
      <param name="formats">包含要套用至轉換後 <see langword="DateTime" /> 的格式結構的陣列。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。</param>
      <returns>字串的對等 <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="formats" /> 的項目是 String.Empty。 
-或- 
 <paramref name="s" /> 不包含對應至任何 <paramref name="formats" /> 項目的日期和時間。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />，將 <see cref="T:System.String" /> 轉換為 <see cref="T:System.DateTime" /></summary>
      <param name="s">要進行轉換的 <see cref="T:System.String" /> 值。</param>
      <param name="dateTimeOption">其中一個列舉值，可指定應將日期轉換為當地時間，或保留為國際標準時間 (UTC) (如果它是 UTC 日期)。</param>
      <returns>
        <see cref="T:System.String" /> 的對等 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOption" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是空字串或不是使用有效的格式。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s">要轉換的字串。  
 注意：字串必須符合 XML dateTime 類型的 W3C 建議事項 (W3C Recommendation) 子集。 如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。</param>
      <returns>所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">傳遞至這個方法的引數是在容許值的範圍之外。 如需有關容許值的詳細資訊，請參閱 <see cref="T:System.DateTimeOffset" />。</exception>
      <exception cref="T:System.FormatException">傳遞至這個方法的引數不符合 XML dateTime 型別的 W3C Recommendations 子集。 如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s">要轉換的字串。</param>
      <param name="format">轉換 <paramref name="s" /> 的來源格式。 格式參數可以是 XML dateTime 型別之 W3C Recommendation 的任何子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)字串 <paramref name="s" /> 會針對這個格式進行驗證。</param>
      <returns>所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串或沒有使用指定的格式。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s">要轉換的字串。</param>
      <param name="formats">轉換 <paramref name="s" /> 之來源格式的陣列。 <paramref name="formats" /> 中的每個格式，可以是 XML dateTime 型別的 W3C Recommendation 子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)字串 <paramref name="s" /> 會針對其中一種格式進行驗證。</param>
      <returns>所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Decimal" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Double" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Double" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Guid" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int16" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Int16" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int32" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Int32" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int64" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Int64" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.SByte" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="SByte" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Single" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="Single" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>將 <see cref="T:System.Boolean" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Boolean" /> 的字串表示，也就是 "true" 或 "false"。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>將 <see cref="T:System.Byte" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Byte" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>將 <see cref="T:System.Char" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Char" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>將 <see cref="T:System.DateTime" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="DateTime" /> 的字串表示，格式為 yyyy-MM-ddTHH:mm:ss，其中 'T' 是常值。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>將 <see cref="T:System.DateTime" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <param name="format">定義如何顯示轉換後字串的格式結構。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。</param>
      <returns>
        <see langword="DateTime" /> 的指定格式字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />，將 <see cref="T:System.DateTime" /> 轉換為 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="dateTimeOption">其中一個 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 值，可指定如何處理 <see cref="T:System.DateTime" /> 值。</param>
      <returns>
        <see cref="T:System.DateTime" /> 的對等 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 值不是有效的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="dateTimeOption" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>將提供的 <see cref="T:System.DateTimeOffset" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <returns>所提供之 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.String" /> 表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>將提供的 <see cref="T:System.DateTimeOffset" /> 轉換成指定格式的 <see cref="T:System.String" />。</summary>
      <param name="value">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format">
        <paramref name="s" /> 所要轉換成的格式。 格式參數可以是 XML dateTime 型別之 W3C Recommendation 的任何子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)</param>
      <returns>以所提供之 <see cref="T:System.DateTimeOffset" /> 指定格式的 <see cref="T:System.String" /> 表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Decimal" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>將 <see cref="T:System.Double" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Double" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>將 <see cref="T:System.Guid" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Guid" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>將 <see cref="T:System.Int16" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Int16" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>將 <see cref="T:System.Int32" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Int32" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>將 <see cref="T:System.Int64" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Int64" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>將 <see cref="T:System.SByte" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="SByte" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>將 <see cref="T:System.Single" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="Single" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>將 <see cref="T:System.TimeSpan" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="TimeSpan" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>將 <see cref="T:System.UInt16" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="UInt16" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>將 <see cref="T:System.UInt32" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="UInt32" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>將 <see cref="T:System.UInt64" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>
        <see langword="UInt64" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="s">要轉換的字串。 字串格式必須符合＜W3C XML 結構描述第 2 部分：對持續期間的資料型別建議事件＞(英文) 定義的規則。</param>
      <returns>字串的對等 <see langword="TimeSpan" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是以不正確的格式表示 <see langword="TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt16" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="UInt16" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt32" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="UInt32" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt64" />。</summary>
      <param name="s">要轉換的字串。</param>
      <returns>字串的對等 <see langword="UInt64" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>根據 W3C Extended Markup Language Recommendation，驗證確定名稱是有效的名稱。</summary>
      <param name="name">要驗證的名稱。</param>
      <returns>名稱 (如果它是有效的 XML 名稱)。</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> 不是有效的 XML 名稱。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" /> 或是 String.Empty。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>根據 W3C Extended Markup Language Recommendation，驗證確定名稱是有效的 <see langword="NCName" />。 <see langword="NCName" /> 是不能包含冒號的名稱。</summary>
      <param name="name">要驗證的名稱。</param>
      <returns>名稱 (如果它是有效的 NCName)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" /> 或是 <c>String.Empty</c>。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> 不是有效的無冒號名稱。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>根據＜W3C XML 結構描述第 2 部分：資料型別＞(英文) 建議，驗證字串是否為有效的 NMTOKEN。</summary>
      <param name="name">您要驗證的字串。</param>
      <returns>名稱語彙基元 (如果它是有效的 NMTOKEN)。</returns>
      <exception cref="T:System.Xml.XmlException">字串不是有效的名稱語彙基元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>如果字串引數中的所有字元都是有效的公用 ID 字元，則會傳回傳入的字串執行個體。</summary>
      <param name="publicId">包含要驗證之 ID 的 <see cref="T:System.String" />。</param>
      <returns>如果引數中的所有字元都是有效的公用 ID 字元，則為傳入的字串。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>根據＜W3C XML 結構描述第 2 部分：資料型別建議事項＞(英文) 驗證字串是否為有效的權杖。</summary>
      <param name="token">您要驗證的字串值。</param>
      <returns>語彙基元 (如果它是有效的語彙基元)。</returns>
      <exception cref="T:System.Xml.XmlException">此字串值不是有效的語彙基元。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>如果字串引數中的所有字元都是有效的空白字元，則會傳回傳入的字串執行個體。</summary>
      <param name="content">要驗證的 <see cref="T:System.String" />。</param>
      <returns>如果字串引數中的所有字元都是有效的空白字元，則為傳入的字串執行個體；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>如果字串引數中的所有字元及 Surrogate 字組字元都是有效的 XML 字元，則傳回傳入的字串，否則擲回 <see langword="XmlException" />，並提供遇到的第一個無效字元的相關資訊。</summary>
      <param name="content">包含要驗證之字元的 <see cref="T:System.String" />。</param>
      <returns>如果字串引數中的所有字元及 Surrogate 字組字元都是有效的 XML 字元，則為傳入的字串；否則擲回 <see langword="XmlException" />，並提供遇到的第一個無效字元的相關資訊。</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>指定在字串和 <see cref="T:System.DateTime" /> 之間轉換時如何處理時間值。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>當做當地時間。 如果 <see cref="T:System.DateTime" /> 物件表示 Coordinated Universal Time (UTC)，則將它轉換成當地時間。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>時區資訊應在轉換時保存。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>如果要將 <see cref="T:System.DateTime" /> 轉換成字串，則當做當地時間。 字串若要轉換成 <see cref="T:System.DateTime" />，若有指定時區，請轉換成當地時間。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>當做 UTC。 如果 <see cref="T:System.DateTime" /> 物件表示當地時間，則將它轉換成 UTC。</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>代表 XML 宣告節點 &lt;?xml version='1.0'...?&gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDeclaration" /> 類別的新執行個體。</summary>
      <param name="version">XML 版本；請參閱 <see cref="P:System.Xml.XmlDeclaration.Version" /> 屬性。</param>
      <param name="encoding">編碼配置；請參閱 <see cref="P:System.Xml.XmlDeclaration.Encoding" /> 屬性。</param>
      <param name="standalone">表示 XML 文件是否取決於外部 DTD；請參閱 <see cref="P:System.Xml.XmlDeclaration.Standalone" /> 屬性。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為 <see langword="XmlDeclaration" /> 節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含資料值。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>取得或設定 XML 文件的編碼方式層級。</summary>
      <returns>有效的字元編碼名稱。 最常支援的 XML 字元編碼名稱如下：  
  分類  

  編碼名稱  

  Unicode  

  UTF-8、UTF-16  

  ISO 10646  

  ISO-10646-UCS-2, ISO-10646-UCS-4  

  ISO 8859  

  ISO-8859-n (其中 "n" 可以是 1 到 9 的數字)  

  JIS X-0208-1997  

  ISO-2022-JP, Shift_JIS, EUC-JP  

   

 這是選擇性的值。 如果沒有設定值，這個屬性會傳回 String.Empty。  
如果未包含編碼方式屬性，在文件被寫入或儲存時會假設為 UTF-8 編碼方式。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>取得或設定 <see langword="XmlDeclaration" /> 的串聯值。</summary>
      <returns>串連的值<see langword="XmlDeclaration" />(也就是一切之間<c>&lt;？ xml</c>並<c>？&gt;</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlDeclaration" /> 節點，其區域名稱為 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 <see langword="XmlDeclaration" /> 節點，其名稱為 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>如果是 <see langword="XmlDeclaration" /> 節點，則這個值會是 XmlNodeType.XmlDeclaration。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>取得或設定獨立屬性的值。</summary>
      <returns>如果 XML 文件所需的所有實體宣告都包含在文件中，其有效值為 <see langword="yes" />；如果需要外部文件類型定義 (DTD)，則有效值為 <see langword="no" />。 如果在 XML 宣告中沒有獨立屬性，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>取得或設定 <see langword="XmlDeclaration" /> 的值。</summary>
      <returns>內容<see langword="XmlDeclaration" />(也就是一切之間<c>&lt;？ xml</c>並<c>？&gt;</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>取得文件的 XML 版本。</summary>
      <returns>這個值一定是 <see langword="1.0" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 因為 <see langword="XmlDeclaration" /> 節點並沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>表示 XML 文件。 您可以於文件中使用這個類別來載入、驗證、編輯、加入和置放 XML。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlDocument" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlImplementation" /> 類別的新執行個體。</summary>
      <param name="imp">要使用的 <see langword="XmlImplementation" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>取得目前節點的基底 (Base) URI。</summary>
      <returns>節點載入的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>複製的 <see langword="XmlDocument" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>建立具有指定 <see cref="P:System.Xml.XmlDocument.Name" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映第一個冒號之前的名稱部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映第一個冒號之後的名稱部分。 除非前置詞能夠辨認為內建前置詞 (例如 xmlns)，否則 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 會保持空白。 在此情況下，<see langword="NamespaceURI" /> 的值為 <c></c>。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>建立具有指定限定名稱和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="qualifiedName">屬性的限定名稱 (Qualified Name)。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號前面的名稱部分，而  <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號後面的名稱部分。</param>
      <param name="namespaceURI">屬性的命名空間 URI。 如果限定名稱包含 xmlns 前置詞，則此參數必須是 <c></c>。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>建立具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="prefix">屬性的前置詞 (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI (如有此項)。 String.Empty 與 <see langword="null" /> 相等。 如果 <paramref name="prefix" /> 是 xmlns，則這個參數必須是 <c></c>；否則會擲回例外狀況。</param>
      <returns>新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>建立包含指定資料的 <see cref="T:System.Xml.XmlCDataSection" />。</summary>
      <param name="data">新 <see langword="XmlCDataSection" /> 的內容。</param>
      <returns>新的 <see langword="XmlCDataSection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>建立包含指定資料的 <see cref="T:System.Xml.XmlComment" />。</summary>
      <param name="data">新 <see langword="XmlComment" /> 的內容。</param>
      <returns>新的 <see langword="XmlComment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>建立具有指定前置詞、區域名稱和命名空間 URI 的預設屬性。</summary>
      <param name="prefix">屬性的前置詞 (如有此項)。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI (如有此項)。</param>
      <returns>新的 <see cref="T:System.Xml.XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>建立 <see cref="T:System.Xml.XmlDocumentFragment" />。</summary>
      <returns>新的 <see langword="XmlDocumentFragment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>傳回新的 <see cref="T:System.Xml.XmlDocumentType" /> 物件。</summary>
      <param name="name">文件類型的名稱。</param>
      <param name="publicId">文件類型的公用識別項或 <see langword="null" />。 您可以指定公用 URI 及系統識別項，以識別外部 DTD 子集的位置。</param>
      <param name="systemId">文件類型的系統識別項或 <see langword="null" />。 指定外部 DTD 子集之檔案位置的 URL。</param>
      <param name="internalSubset">文件類型的 DTD 內部子集或 <see langword="null" />。</param>
      <returns>新的 <see langword="XmlDocumentType" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>建立具有指定名稱的項目。</summary>
      <param name="name">項目的限定名稱。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號之前的名稱部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號之後的名稱部分。 限定名稱不能包含 'xmlns' 前置詞。</param>
      <returns>新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>建立具有限定名稱和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="qualifiedName">項目的限定名稱。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號前面的名稱部分，而  <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號後面的名稱部分。 限定名稱不能包含 'xmlns' 前置詞。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>建立具有指定之 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。</summary>
      <param name="prefix">新項目的前置詞 (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <param name="localName">新項目的本機名稱。</param>
      <param name="namespaceURI">新項目的命名空間 URI (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <returns>新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>建立具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name">實體參考的名稱。</param>
      <returns>新的 <see langword="XmlEntityReference" />。</returns>
      <exception cref="T:System.ArgumentException">不正確的名稱 (例如以 '#' 開頭的名稱無效)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>建立巡覽這份文件的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，用於巡覽位於指定之 <see cref="T:System.Xml.XmlNode" /> 上的這個文件。</summary>
      <param name="node">您希望巡覽器一開始定位所在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>建立具有指定節點類型、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="nodeTypeString">新節點的 <see cref="T:System.Xml.XmlNodeType" /> 的字串版本。 這個參數必須是下表中所列的其中一個值。</param>
      <param name="name">新節點的限定名稱。 如果名稱包含冒號，將會剖析為 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 元件。</param>
      <param name="namespaceURI">新節點的命名空間 URI。</param>
      <returns>新的 <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱；或者 <paramref name="nodeTypeString" /> 不是下列字串之一。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>建立具有指定的 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type">新節點的 <see langword="XmlNodeType" />。</param>
      <param name="name">新節點的限定名稱。 如果名稱包含冒號，將會剖析為 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 元件。</param>
      <param name="namespaceURI">新節點的命名空間 URI。</param>
      <returns>新的 <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>建立具有指定之 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type">新節點的 <see langword="XmlNodeType" />。</param>
      <param name="prefix">新節點的前置詞。</param>
      <param name="name">新節點的區域名稱。</param>
      <param name="namespaceURI">新節點的命名空間 URI。</param>
      <returns>新的 <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>建立具有指定名稱和資料的 <see cref="T:System.Xml.XmlProcessingInstruction" />。</summary>
      <param name="target">處理指示的名稱。</param>
      <param name="data">處理指示的資料。</param>
      <returns>新的 <see langword="XmlProcessingInstruction" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>建立 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 節點。</summary>
      <param name="text">字串必須只包含下列字元：&amp;#20; &amp;#10; &amp;#13; 和 &amp;#9;</param>
      <returns>新的 <see langword="XmlSignificantWhitespace" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>建立具有指定文字的 <see cref="T:System.Xml.XmlText" />。</summary>
      <param name="text">Text 節點的文字。</param>
      <returns>新的  <see langword="XmlText" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>建立 <see cref="T:System.Xml.XmlWhitespace" /> 節點。</summary>
      <param name="text">字串必須只包含下列字元：&amp;#20; &amp;#10; &amp;#13; 和 &amp;#9;</param>
      <returns>新的 <see langword="XmlWhitespace" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>建立具有指定值的 <see cref="T:System.Xml.XmlDeclaration" /> 節點。</summary>
      <param name="version">版本必須是 "1.0"。</param>
      <param name="encoding">編碼屬性的值。 這是在您將 <see cref="T:System.Xml.XmlDocument" /> 儲存至檔案或資料流時使用的編碼方式，因此，必須設定為 <see cref="T:System.Text.Encoding" /> 類別支援的字串，否則 <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> 會失敗。 如果這是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不會在 XML 宣告上寫入編碼屬性，因此會使用預設編碼方式 UTF-8。  
注意：如果 <see langword="XmlDocument" /> 儲存為 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlTextWriter" />，則捨棄此編碼。 改用 <see langword="TextWriter" /> 或 <see langword="XmlTextWriter" /> 的編碼方式。 這可以確保寫出的 XML 可以使用正碼的編碼方式讀回。</param>
      <param name="standalone">值必須為「是」或「否」。 如果這是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不會在 XML 宣告上寫入獨立屬性。</param>
      <returns>新的  <see langword="XmlDeclaration" /> 節點。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 或 <paramref name="standalone" /> 的值非上述指定的值。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>取得文件的根 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns>表示 XML 文件樹狀之根的 <see langword="XmlElement" />。 如果有根，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>取得包含 DOCTYPE 宣告的節點。</summary>
      <returns>包含 DocumentType (DOCTYPE 宣告) 的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>取得具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="elementId">要比對的屬性 ID。</param>
      <returns>具有相符 ID 的 <see langword="XmlElement" />；如果找不到相符的項目，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlDocument.Name" /> 之所有子代 (Descendant) 項目的清單。</summary>
      <param name="name">要相符的限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。 特殊值 "*" 與所有標記相符。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有節點符合 <paramref name="name" />，就會傳回空的集合。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定之 <see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的所有子代元素的清單。</summary>
      <param name="localName">要相符的 LocalName。 特殊值 "*" 與所有標記相符。</param>
      <param name="namespaceURI">要比對的 NamespaceURI。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有節點符合指定的 <paramref name="localName" /> 及 <paramref name="namespaceURI" />，就會傳回空的集合。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>取得目前文件的 <see cref="T:System.Xml.XmlImplementation" /> 物件。</summary>
      <returns>目前文件的 <see langword="XmlImplementation" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>從其他文件匯入節點至目前的文件。</summary>
      <param name="node">匯入的節點。</param>
      <param name="deep">
        <see langword="true" /> 以執行深層複製；否則為 <see langword="false" />。</param>
      <returns>匯入的 <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException">在無法匯入的節點類型上呼叫這個方法。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>在所有情況下都擲回 <see cref="T:System.InvalidOperationException" />。</summary>
      <returns>節點和其所有子節點的值。</returns>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>取得或設定表示目前節點子系的標記。</summary>
      <returns>目前節點子系的標記。</returns>
      <exception cref="T:System.Xml.XmlException">未正確設定這個屬性之語式時所指定的 XML。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>取得值，指示目前節點是否為唯讀。</summary>
      <returns>如果目前節點為唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlDocument" /> 節點永遠傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>從指定的資料流載入 XML 文件。</summary>
      <param name="inStream">包含要載入之 XML 文件的資料流。</param>
      <exception cref="T:System.Xml.XmlException">XML 中發生載入或剖析錯誤。 在這種情況下，會引發 <see cref="T:System.IO.FileNotFoundException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>從指定的 <see cref="T:System.IO.TextReader" /> 載入 XML 文件。</summary>
      <param name="txtReader">用於將 XML 資料送入文件中的 <see langword="TextReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>從指定的 URL 載入 XML 文件。</summary>
      <param name="filename">包含要載入之 XML 文件的檔案的 URL。 這個 URL 可以是本機檔案，也可以是 HTTP URL (網址)。</param>
      <exception cref="T:System.Xml.XmlException">XML 中發生載入或剖析錯誤。 在這種情況下，會引發 <see cref="T:System.IO.FileNotFoundException" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> 為零長度字串，只包含空格，或包含一或多個如 <see cref="F:System.IO.Path.InvalidPathChars" /> 所定義的無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.IOException">開啟檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> 指定了唯讀的檔案。  
-或- 
這個作業在目前平台不受支援。  
-或- 
 <paramref name="filename" /> 指定了目錄。  
-或- 
呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="filename" /> 指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> 格式無效。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>從指定的 <see cref="T:System.Xml.XmlReader" /> 載入 XML 文件。</summary>
      <param name="reader">用於將 XML 資料送入文件中的 <see langword="XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>從指定的字串載入 XML 文件。</summary>
      <param name="xml">包含要載入之 XML 文件的字串。</param>
      <exception cref="T:System.Xml.XmlException">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlDocument" /> 節點，區域名稱為 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於  <see langword="XmlDocument" /> 節點，名稱為 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，可讓您取得文件中字串之擷取版本。</returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>發生於屬於這份文件之節點的 <see cref="P:System.Xml.XmlNode.Value" /> 變更時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>發生於屬於這份文件之節點的 <see cref="P:System.Xml.XmlNode.Value" /> 即將變更時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>發生於屬於這份文件的節點插入另一個節點時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>發生於屬於這份文件的節點將要插入另一個節點時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>發生於屬於這份文件的節點從其父代 (Parent) 移除時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>發生於屬於這份文件的節點即將從文件中移除時。</summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>節點類型。 對於 <see langword="XmlDocument" /> 節點，此值為 XmlNodeType.Document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>取得目前節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>對於 <see langword="XmlDocument" /> 節點 (<see cref="P:System.Xml.XmlDocument.NodeType" /> 等於 XmlNodeType.Document)，此屬性一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>取得這個節點的父節點 (針對可以具有父代的節點而言)。</summary>
      <returns>一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>取得或設定值，指出是否要保留項目內容中的空白字元。</summary>
      <returns>若要保留空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>根據 <see cref="T:System.Xml.XmlReader" /> 中的資訊建立一個 <see cref="T:System.Xml.XmlNode" /> 物件。 讀取器必須定位在節點或屬性上。</summary>
      <param name="reader">XML 來源。</param>
      <returns>新的 <see langword="XmlNode" />；如果沒有其他節點，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NullReferenceException">此讀取器置於節點類型上，該類型不會轉譯為有效的 DOM 節點 (例如 EndElement 或 EndEntity)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>將 XML 文件儲存至指定的資料流。</summary>
      <param name="outStream">要在其中儲存的資料流。</param>
      <exception cref="T:System.Xml.XmlException">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>將 XML 文件儲存至指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer">要儲存的目標 <see langword="TextWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>將 XML 文件儲存至指定的檔案。 如果指定的檔案存在，則這個方法會覆寫該檔案。</summary>
      <param name="filename">您要儲存文件的目標檔案位置。</param>
      <exception cref="T:System.Xml.XmlException">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>將 XML 文件儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>傳回節點的後結構描述驗證資訊集 (PSVI)。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，表示節點的 PSVI。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>取得或設定與這個 <see cref="T:System.Xml.XmlDocument" /> 相關聯的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含與這個 <see cref="T:System.Xml.XmlDocument" /> 相關聯的 XML 結構描述定義語言 (XSD) 結構描述；否則為空白的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>根據 <see cref="P:System.Xml.XmlDocument.Schemas" /> 屬性中包含的 XML 結構描述定義語言 (XSD) 結構描述，驗證 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <param name="validationEventHandler">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件，可接收有關結構描述驗證警告和錯誤的資訊。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">發生結構描述驗證事件且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>根據 <see cref="P:System.Xml.XmlDocument.Schemas" /> 屬性中包含的 XML 結構描述定義語言 (XSD) 結構描述，驗證指定的 <see cref="T:System.Xml.XmlNode" /> 物件。</summary>
      <param name="validationEventHandler">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件，可接收有關結構描述驗證警告和錯誤的資訊。</param>
      <param name="nodeToValidate">從要驗證的 <see cref="T:System.Xml.XmlDocument" /> 所建立的 <see cref="T:System.Xml.XmlNode" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlNode" /> 物件參數不是從 <see cref="T:System.Xml.XmlDocument" /> 所建立。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlNode" /> 物件參數不是項目、屬性、文件片段或根節點。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">發生結構描述驗證事件且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將 <see langword="XmlDocument" /> 節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="xw">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>將 <see langword="XmlDocument" /> 節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>設定用於解析外部資源的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>要使用的 <see langword="XmlResolver" />。  
在 .NET Framework 1.1 中，必須完全信任呼叫端，才能指定 <see langword="XmlResolver" />。</returns>
      <exception cref="T:System.Xml.XmlException">這個屬性設定為 <see langword="null" /> 且遇到外部 DTD 或實體。</exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>代表適用於樹狀插入作業的輕量型物件。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDocumentFragment" /> 類別的新執行個體。</summary>
      <param name="ownerDocument">片段來源的 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>取得或設定表示這個節點的子節點的標記。</summary>
      <returns>此節點子系的標記。</returns>
      <exception cref="T:System.Xml.XmlException">未正確設定這個屬性之語式時所指定的 XML。</exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlDocumentFragment" /> 節點，其區域名稱為 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 <see langword="XmlDocumentFragment" />，其名稱為 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>對於 <see langword="XmlDocumentFragment" /> 節點，其值為 XmlNodeType.DocumentFragment。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>這個節點所屬的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns>這個節點的父代。  
對於 <see langword="XmlDocumentFragment" /> 節點，這個屬性必定為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>表示文件類型宣告。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlDocumentType" /> 類別的新執行個體。</summary>
      <param name="name">限定名稱；請參閱 <see cref="P:System.Xml.XmlDocumentType.Name" /> 屬性。</param>
      <param name="publicId">公用識別項；請參閱 <see cref="P:System.Xml.XmlDocumentType.PublicId" /> 屬性。</param>
      <param name="systemId">系統識別項；請參閱 <see cref="P:System.Xml.XmlDocumentType.SystemId" /> 屬性。</param>
      <param name="internalSubset">DTD 內部子集；請參閱 <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> 屬性。</param>
      <param name="doc">父代文件。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於文件類型節點，不論參數設定為何，複製的節點永遠包含子樹狀結構。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>取得在文件類型宣告中宣告之 <see cref="T:System.Xml.XmlEntity" /> 節點的集合。</summary>
      <returns>包含 <see langword="XmlEntity" /> 節點的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 傳回的 <see langword="XmlNamedNodeMap" /> 是唯讀的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>取得在 DOCTYPE 宣告上的文件類型定義 (DTD) 內部子集的值。</summary>
      <returns>DOCTYPE 上的 DTD 內部子集。 如果沒有 DTD 內部子集，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>取得值，表示節點是否為唯讀。</summary>
      <returns>
        <see langword="true" />如果節點是唯讀的, 則為,否則為<see langword="false" />。  
由於 DocumentType 節點是唯讀，因此這個屬性一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 DocumentType 節點，這個屬性會傳回文件類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 DocumentType 節點，這個屬性會傳回文件類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>如果是 DocumentType 節點，則這個值為 XmlNodeType.DocumentType。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>取得在文件類型宣告中出現之 <see cref="T:System.Xml.XmlNotation" /> 節點的集合。</summary>
      <returns>包含 <see langword="XmlNotation" /> 節點的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 傳回的 <see langword="XmlNamedNodeMap" /> 是唯讀的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>取得 DOCTYPE 宣告上的公用識別項的值。</summary>
      <returns>DOCTYPE 上的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>取得 DOCTYPE 宣告上的系統識別項 (System Identifier) 的值。</summary>
      <returns>DOCTYPE 上的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlDocumentType" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>表示項目。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlElement" /> 類別的新執行個體。</summary>
      <param name="prefix">命名空間前置字元；請參閱 <see cref="P:System.Xml.XmlElement.Prefix" /> 屬性。</param>
      <param name="localName">本機名稱；請參閱 <see cref="P:System.Xml.XmlElement.LocalName" /> 屬性。</param>
      <param name="namespaceURI">命名空間 URI；請參閱 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 屬性。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>取得包含這個節點之屬性清單的 <see cref="T:System.Xml.XmlAttributeCollection" />。</summary>
      <returns>包含這個節點之屬性清單的 <see cref="T:System.Xml.XmlAttributeCollection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身 (如果節點是 <see langword="XmlElement" /> 則還有其屬性)，則為 <see langword="false" />。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>傳回具有指定名稱之屬性的值。</summary>
      <param name="name">要擷取之屬性的名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns>指定的屬性值。 如果找不到相符的屬性，或者屬性沒有指定的或預設的值，會傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>傳回具有指定區域名稱和命名空間 URI 之屬性的值。</summary>
      <param name="localName">要擷取的屬性的區域名稱。</param>
      <param name="namespaceURI">要擷取的屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到相符的屬性，或者屬性沒有指定的或預設的值，會傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>傳回具有指定名稱的 <see langword="XmlAttribute" />。</summary>
      <param name="name">要擷取之屬性的名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns>指定的 <see langword="XmlAttribute" />；如果找不到相符的屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>傳回具有指定區域名稱和命名空間 URI 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的 <see langword="XmlAttribute" />；如果找不到相符的屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlElement.Name" /> 之所有子代 (Descendant) 項目的清單。</summary>
      <param name="name">要相符的名稱標記。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。 星號 (*) 是與所有標記相符的特殊值。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有相符的節點，則清單為空白。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定之 <see cref="P:System.Xml.XmlElement.LocalName" /> 和 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 的所有子代元素的清單。</summary>
      <param name="localName">要相符的區域名稱。 星號 (*) 是與所有標記相符的特殊值。</param>
      <param name="namespaceURI">要相符的命名空間 URI。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有相符的節點，則清單為空白。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>判斷目前的節點是否具有指定名稱的屬性。</summary>
      <param name="name">要尋找的屬性名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns>如果目前節點有指定的屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>判斷目前的節點是否有具有指定區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName">要尋找的屬性的區域名稱。</param>
      <param name="namespaceURI">要尋找的屬性的命名空間 URI。</param>
      <returns>如果目前節點有指定的屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>取得 <see langword="boolean" /> 值，表示目前節點是否有屬性。</summary>
      <returns>如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>取得或設定節點的串連值和其所有的子節點。</summary>
      <returns>節點的串連值和其所有的子節點。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>取得或設定標記，表示這個節點的子節點。</summary>
      <returns>此節點子系的標記。</returns>
      <exception cref="T:System.Xml.XmlException">未正確設定這個屬性之語式時所指定的 XML。</exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>取得或設定項目的標記格式。</summary>
      <returns>
        <see langword="true" />如果要以簡短標記格式 "&lt;item/&gt;" 序列化元素, 則為,<see langword="false" /> 「&lt;專案/item」的長格式&gt;。 &lt; &gt;  
設定這個屬性時，如果設定為 <see langword="true" />，會移除項目的子系，並且以短標記格式序列化項目。 如果設定為 <see langword="false" />，會變更屬性的值 (不論項目是否有內容)；如果項目是空的，將會以長格式序列化。  
這個屬性是文件物件模型的 Microsoft 擴充功能。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>取得目前節點的區域名稱。</summary>
      <returns>目前節點名稱的前置詞被移除。 例如, <see langword="LocalName" />是元素&lt;bk: book&gt;的 book。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>節點的限定名稱。 對於 <see langword="XmlElement" /> 節點，這是項目的標記名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>取得這個節點的命名空間 URI。</summary>
      <returns>這個節點的命名空間 URI。 如果沒有命名空間 URI，則這個屬性傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>取得緊接在這個項目之後的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>緊接在這個項目之後的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>節點類型。 對於 <see langword="XmlElement" /> 節點，這個值為 XmlNodeType.Element。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>這個項目所屬的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary>取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns>表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>取得或設定這個節點的命名空間前置詞。</summary>
      <returns>這個節點的命名空間前置詞。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
      <exception cref="T:System.ArgumentException">這個節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException">指定的前置詞包含無效的字元。  
指定的前置詞格式不正確。  
這個節點的 namespaceURI 為 <see langword="null" />。  
指定的前置詞為 "xml"，且此節點的 namespaceURI 與 http://www.w3.org/XML/1998/namespace (英文) 的不同。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>移除目前節點所有指定的屬性和子系。 預設屬性不會移除。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>移除項目中所有指定的屬性。 預設屬性不會移除。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>依照名稱移除屬性。</summary>
      <param name="name">所要移除屬性 (Attribute) 的名稱。這是一個限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <exception cref="T:System.ArgumentException">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>移除具有指定區域名稱和命名空間 URI 的屬性 (如果移除的屬性具有預設值，會立即被取代)。</summary>
      <param name="localName">要移除的屬性的區域名稱。</param>
      <param name="namespaceURI">要移除的屬性的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>移除項目中具有指定索引的屬性節點 (如果移除的屬性具有預設值，會立即被取代)。</summary>
      <param name="i">要移除的節點的索引。 第一個節點的索引為 0。</param>
      <returns>移除的屬性節點；如果指定的索引中沒有節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>移除區域名稱和命名空間 URI 指定的 <see cref="T:System.Xml.XmlAttribute" /> (如果移除的屬性具有預設值，會立即被取代)。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>移除的 <see langword="XmlAttribute" />；如果 <see langword="null" /> 沒有相符的屬性節點，則為 <see langword="XmlElement" />。</returns>
      <exception cref="T:System.ArgumentException">這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>移除指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="oldAttr">要移除的 <see langword="XmlAttribute" /> 節點。 如果移除的屬性具預設值，會立即被取代。</param>
      <returns>移除的 <see langword="XmlAttribute" />；如果 <paramref name="oldAttr" /> 不是 <see langword="null" /> 的屬性節點，則為 <see langword="XmlElement" />。</returns>
      <exception cref="T:System.ArgumentException">這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>設定具有指定名稱之屬性的值。</summary>
      <param name="name">要建立或變更的屬性的名稱。 這是限定名稱。 如果名稱包含冒號，將會剖析為前置詞和區域名稱元件。</param>
      <param name="value">要為屬性設定的值。</param>
      <exception cref="T:System.Xml.XmlException">指定的名稱包含無效的字元。</exception>
      <exception cref="T:System.ArgumentException">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>設定具有指定區域名稱和命名空間 URI 之屬性的值。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <param name="value">要為屬性設定的值。</param>
      <returns>屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>加入指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>要加入的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>加入指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="newAttr">要加入這個項目屬性集合中的 <see langword="XmlAttribute" /> 節點。</param>
      <returns>如果這個屬性取代相同名稱的現有屬性，會傳回舊的 <see langword="XmlAttribute" />；否則會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="newAttr" /> 由不同於建立這個節點的另一份文件所建立。 或者這個節點是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newAttr" /> 已經是其他 <see langword="XmlElement" /> 物件的屬性。 您必須明確複製 <see langword="XmlAttribute" /> 節點，以便在其他 <see langword="XmlElement" /> 物件中重複使用這些節點。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>將目前的節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>代表實體宣告，例如 &lt;!ENTITY... &gt;。</summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>取得目前節點的基底統一資源識別元 (URI)。</summary>
      <returns>節點載入的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。 無法複製 Entity 節點。 在 <see cref="T:System.Xml.XmlEntity" /> 物件上呼叫這個方法會擲回例外狀況。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>方法呼叫來源 <see cref="T:System.Xml.XmlNode" /> 的複本。</returns>
      <exception cref="T:System.InvalidOperationException">無法複製 Entity 節點。 在 <see cref="T:System.Xml.XmlEntity" /> 物件上呼叫這個方法會擲回例外狀況。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>取得實體節點的串連值和其所有的子節點。</summary>
      <returns>節點的串連值和其所有的子節點。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試設定這個屬性。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>取得表示這個節點子系的標記。</summary>
      <returns>對於 <see langword="XmlEntity" /> 節點，會傳回 String.Empty。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試設定這個屬性。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>取得值，表示節點是否為唯讀。</summary>
      <returns>
        <see langword="true" />如果節點是唯讀的, 則為,否則為<see langword="false" />。  
因為 <see langword="XmlEntity" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>取得節點的名稱而無命名空間前置詞。</summary>
      <returns>對於 <see langword="XmlEntity" /> 節點，這個屬性會傳回實體的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>取得節點的名稱。</summary>
      <returns>實體的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>取得節點的類型。</summary>
      <returns>節點類型。 對於 <see langword="XmlEntity" /> 節點，其值為 XmlNodeType.Entity。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>取得實體宣告上選擇性的 NDATA 屬性的名稱。</summary>
      <returns>NDATA 屬性的名稱。 如果沒有 NDATA，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>取得表示這個節點及其所有子系的標記。</summary>
      <returns>對於 <see langword="XmlEntity" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>取得實體宣告的公用識別項的值。</summary>
      <returns>實體的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>取得實體宣告的系統識別項 (System Identifier) 的值。</summary>
      <returns>實體的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlEntity" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlEntity" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>表示實體 (Entity) 參考節點。</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlEntityReference" /> 類別的新執行個體。</summary>
      <param name="name">實體參考的名稱；請參閱 <see cref="P:System.Xml.XmlEntityReference.Name" /> 屬性。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>取得目前節點的基底統一資源識別元 (URI)。</summary>
      <returns>節點載入的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於 <see langword="XmlEntityReference" /> 節點，這個方法一定傳回沒有子節點的實體參考節點。 當節點插入父代時，就會設定替代文字。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>取得值，表示節點是否為唯讀。</summary>
      <returns>如果節點是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。  
因為 <see langword="XmlEntityReference" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlEntityReference" /> 節點，這個屬性會傳回所參考的實體名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>取得節點的名稱。</summary>
      <returns>所參考的實體名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>取得節點的類型。</summary>
      <returns>節點類型。 如果是 <see langword="XmlEntityReference" /> 節點，則這個值會是 XmlNodeType.EntityReference。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>節點的值。 對於 <see langword="XmlEntityReference" /> 節點，這個屬性傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">節點是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException">設定屬性。</exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>傳回有關上次例外狀況的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XmlException" /> 所有的屬性。</param>
      <param name="context">包含內容資訊的 <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤描述。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤條件的描述。</param>
      <param name="innerException">擲回 <see cref="T:System.Exception" /> 的 <see langword="XmlException" /> (如果有的話)。 這個值可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>使用指定的訊息、內部例外狀況、行號和行位置，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤描述。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 這個值可以是 <see langword="null" />。</param>
      <param name="lineNumber">指示發生錯誤之位置的行號。</param>
      <param name="linePosition">指示發生錯誤之位置的行位置。</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將所有 <see langword="XmlException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>取得行號，指出發生錯誤的位置。</summary>
      <returns>指示發生錯誤之位置的行號。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>取得行位置，指出發生錯誤的位置。</summary>
      <returns>指示發生錯誤之位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>取得描述目前例外狀況的訊息。</summary>
      <returns>解釋例外狀況原因的錯誤訊息。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>取得 XML 檔案的位置。</summary>
      <returns>XML 資料的來源 URI。 如果沒有來源 URI，這個屬性會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>定義一組 <see cref="T:System.Xml.XmlDocument" /> 物件的內容。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlImplementation" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlImplementation" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>建立新的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>新的 <see langword="XmlDocument" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>測試文件物件模型 (DOM) 實作是否實作指定的功能。</summary>
      <param name="strFeature">要測試的功能套件 (Package) 名稱。 這個名稱並不區分大小寫。</param>
      <param name="strVersion">這是要測試的套件名稱的版本編號。 如果尚未指定版本 (<see langword="null" />)，則支援這個功能的任何版本都會讓這個方法傳回 <see langword="true" />。</param>
      <returns>如果在指定的版本實作這個功能，則為 <see langword="true" />，否則為 <see langword="false" />。  
下表顯示會使 <see langword="HasFeature" /> 傳回 <see langword="true" /> 的組合。  
  strFeature 
  strVersion 
  XML 
  1.0 
  XML 
  2.0</returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>取得這個節點的前置或後置節點。</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>取得這個節點的後置節點。</summary>
      <returns>這個節點的後置 <see cref="T:System.Xml.XmlNode" />，如果這個節點不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>取得這個節點的前置節點。</summary>
      <returns>前置的 <see cref="T:System.Xml.XmlNode" />，如果這個節點不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>表示可用名稱或索引存取的節點集合。</summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>取得 <see langword="XmlNamedNodeMap" /> 中的節點數目。</summary>
      <returns>節點的數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>提供 <see langword="XmlNamedNodeMap" /> 中節點集合上「foreach」樣式重複的支援。</summary>
      <returns>列舉程式物件。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>依指定名稱來擷取 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="name">要擷取的節點的限定名稱 (Qualified Name)。 它會與符合節點的 <see cref="P:System.Xml.XmlNode.Name" /> 屬性比對。</param>
      <returns>具有指定名稱的 <see langword="XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>擷取具有符合的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的節點。</summary>
      <param name="localName">要擷取的節點的區域名稱。</param>
      <param name="namespaceURI">取得要擷取之節點的命名空間統一資源識別元 (URI)。</param>
      <returns>具有符合的區域名稱與命名空間 (Namespace) URI 的 <see cref="T:System.Xml.XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>擷取 <see langword="XmlNamedNodeMap" /> 中位於指定索引的節點。</summary>
      <param name="index">從 <see langword="XmlNamedNodeMap" /> 擷取的節點的索引位置。 索引是以零起始的；因此第一個節點的索引為 0，最後一個節點的索引為 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1。</param>
      <returns>指定索引處的 <see cref="T:System.Xml.XmlNode" />。 如果 <paramref name="index" /> 小於 0 或大於等於 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> 屬性，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>從 <see langword="XmlNamedNodeMap" /> 移除節點。</summary>
      <param name="name">要移除的節點的限定名稱。 它會與符合節點的 <see cref="P:System.Xml.XmlNode.Name" /> 屬性相符。</param>
      <returns>從這個 <see langword="XmlNode" /> 移除 <see langword="XmlNamedNodeMap" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>移除具有符合的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的節點。</summary>
      <param name="localName">要移除的節點的區域名稱。</param>
      <param name="namespaceURI">要移除的節點的命名空間 URI。</param>
      <returns>移除 <see cref="T:System.Xml.XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>使用其 <see cref="T:System.Xml.XmlNode" /> 屬性加入 <see cref="P:System.Xml.XmlNode.Name" />。</summary>
      <param name="node">儲存在 <see langword="XmlNode" /> 中的 <see langword="XmlNamedNodeMap" />。 如果具有該名稱的節點已經在對應中，就會以新節點取代。</param>
      <returns>如果 <paramref name="node" /> 取代同名的現有節點，則傳回舊節點；否則傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">從不同於建立 <see langword="XmlNamedNodeMap" /> 的 <see cref="T:System.Xml.XmlDocument" /> 來建立 <paramref name="node" />；否則 <see langword="XmlNamedNodeMap" /> 為唯讀。</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>解析、加入並移除集合的命名空間，並且為這些命名空間提供範圍管理。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <see langword="null" /> 被傳送至建構函式。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>將指定的命名空間加入至集合中。</summary>
      <param name="prefix">與要加入的命名空間關聯的前置詞。 使用 String.Empty 來加入預設命名空間。  
 附註：如果 <see cref="T:System.Xml.XmlNamespaceManager" /> 將用於解析 XML 路徑語言 (XPath) 運算式中的命名空間，則必須指定前置詞。 如果 XPath 運算式不包括前置詞，則會假設命名空間「統一資源識別元 (URI)」為空命名空間。 如需有關 XPath 運算式以及 <see cref="T:System.Xml.XmlNamespaceManager" /> 的詳細資訊，請參考 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> 和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> 方法。</param>
      <param name="uri">要加入的命名空間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> 的值為 "xml" 或 "xmlns"。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>取得預設命名空間的命名空間 URI。</summary>
      <returns>預設命名空間的命名空間 URI, 如果沒有預設命名空間, 則為空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>傳回用於逐一查看 <see cref="T:System.Xml.XmlNamespaceManager" /> 中命名空間的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，包含 <see cref="T:System.Xml.XmlNamespaceManager" /> 儲存的前置詞。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>取得命名空間名稱集合，會根據前置詞索引，可用於列舉目前在範圍中的命名空間。</summary>
      <param name="scope">列舉值，指定要傳回之命名空間節點的類型。</param>
      <returns>目前在範圍中的命名空間和前置詞配對集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>取得值，表示提供的前置詞是否具有針對目前推入的範圍中定義的命名空間。</summary>
      <param name="prefix">您要尋找的命名空間的前置詞。</param>
      <returns>如果已經定義命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>取得指定前置詞的命名空間 URI。</summary>
      <param name="prefix">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送 String.Empty。</param>
      <returns>如果沒有對應的命名空間，則這會是 <paramref name="prefix" /> 或 <see langword="null" /> 的命名空間 URI。 傳回的字串已原子化。  
如需原子化字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" /> 類別。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>尋找為指定命名空間 URI 宣告的前置詞。</summary>
      <param name="uri">用來解析前置詞的命名空間。</param>
      <returns>符合的前置詞。 如果沒有對應的前置詞，此方法會傳回 String.Empty。 如果提供了 null 值，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>取得與這個物件相關的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" />，由這個物件所使用。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>將命名空間範圍自堆疊取出。</summary>
      <returns>如果堆疊上留有命名空間範圍，則為 <see langword="true" />，若未取出其他命名空間，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>將命名空間範圍推入至堆疊。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>移除指定前置詞的指定命名空間。</summary>
      <param name="prefix">命名空間的前置詞</param>
      <param name="uri">指定的前置詞中要移除的命名空間。 命名空間由目前的命名空間範圍移除。 忽略目前範圍以外的命名空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>定義命名空間範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>在目前節點範圍中定義的所有命名空間， 包括一律以隱含方式宣告的 xmlns:xml 命名空間。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>目前節點範圍中定義的所有命名空間，但是 xmlns:xml 命名空間 (一律以隱含方式宣告) 除外。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>在目前節點上本機定義的所有命名空間。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>原子化字串物件的資料表。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，原子化指定的字串，並將它加入至 <see langword="XmlNameTable" />。</summary>
      <param name="array">字元陣列，包含要加入的名稱。</param>
      <param name="offset">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="length">名稱中字元的數目。</param>
      <returns>新的原子化字串或已經存在的現有原子化字串。 如果長度為零，則傳回 String.Empty。</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
-或- 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
-或- 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>在衍生類別中覆寫時，原子化指定的字串，並將它加入至 <see langword="XmlNameTable" />。</summary>
      <param name="array">要加入的名稱。</param>
      <returns>新的原子化字串或已經存在的現有原子化字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，取得包含相同字元的原子化字串做為指定陣列中的指定字元範圍。</summary>
      <param name="array">字元陣列，包含要查詢的名稱。</param>
      <param name="offset">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="length">名稱中字元的數目。</param>
      <returns>原子化字串，如果字串尚未原子化，則為 <see langword="null" />。 如果 <paramref name="length" /> 為零，則會傳回 String.Empty。</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
-或- 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
-或- 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>在衍生類別中覆寫時，取得包含相同值的原子化字串做為指定的字串。</summary>
      <param name="array">要查詢的名稱。</param>
      <returns>原子化字串，如果字串尚未原子化，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>表示 XML 文件中的單一節點。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>將指定的節點加入這個節點之子節點清單的結尾。</summary>
      <param name="newChild">要加入的節點。 要加入之節點的所有內容會移入指定的位置。</param>
      <returns>已加入的節點。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>取得包含這個節點屬性 (Attribute) 的 <see cref="T:System.Xml.XmlAttributeCollection" />。</summary>
      <returns>
        <see langword="XmlAttributeCollection" />，包含這個節點的屬性。  
如果這個節點的類型為 XmlNodeType.Element，則傳回這個節點的屬性。 否則，這個函式會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>取得目前節點的基底 (Base) URI。</summary>
      <returns>節點載入的位置；如果節點沒有基底 URI，則為 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>取得節點的所有子節點。</summary>
      <returns>物件，包含節點的所有子節點。  
如果沒有子節點，這個屬性傳回空的 <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>建立這個節點的複本。</summary>
      <returns>複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>在衍生類別中覆寫時，建立節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>複製的節點。</returns>
      <exception cref="T:System.InvalidOperationException">在無法複製的節點型別上，呼叫這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 以瀏覽這個物件。</summary>
      <returns>用來巡覽節點的 <see langword="XPathNavigator" /> 物件。 <see langword="XPathNavigator" /> 位於這個節點上，在此節點呼叫此方法。 它並非位於文件的根。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>取得節點的第一個子節點。</summary>
      <returns>節點的第一個子節點。 如果沒有這種節點，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>取得逐一查看目前節點中子節點的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用來逐一查看目前節點中的子節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>查閱目前節點範圍內最接近指定前置詞的 xmlns 宣告，並傳回宣告中的命名空間 URI。</summary>
      <param name="prefix">您要尋找其命名空間 URI 的前置詞。</param>
      <returns>指定前置詞的命名空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>查閱目前節點範圍內最接近指定命名空間 URI 的 xmlns 宣告，並傳回宣告中所定義的前置詞。</summary>
      <param name="namespaceURI">您要尋找其前置詞的命名空間 URI。</param>
      <returns>指定命名空間 URI 的前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>取得值，指出這個節點是否有子節點。</summary>
      <returns>如果該節點有子節點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>取得或設定節點和其所有子節點的串連值。</summary>
      <returns>節點和其所有子節點的串連值。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>取得或設定只表示這個節點之子節點的標記。</summary>
      <returns>這個節點之子節點的標記。  
 <see langword="InnerXml" /> 不會傳回預設的屬性。</returns>
      <exception cref="T:System.InvalidOperationException">在不能有子節點的節點上，設定這個屬性。</exception>
      <exception cref="T:System.Xml.XmlException">未正確設定這個屬性之語式時所指定的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>在指定的參考節點之後，插入指定的節點。</summary>
      <param name="newChild">要插入的節點。</param>
      <param name="refChild">參考節點。 <paramref name="newChild" /> 會置於 <paramref name="refChild" /> 之後。</param>
      <returns>要插入的節點。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
<paramref name="refChild" /> 不是這個節點的子節點。  
這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>在指定的參考節點之前，插入指定的節點。</summary>
      <param name="newChild">要插入的節點。</param>
      <param name="refChild">參考節點。 <paramref name="newChild" /> 會置於這個節點之前。</param>
      <returns>要插入的節點。</returns>
      <exception cref="T:System.InvalidOperationException">目前這種型別的節點不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
<paramref name="refChild" /> 不是這個節點的子節點。  
這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>取得值，表示節點是否為唯讀。</summary>
      <returns>
        <see langword="true" />如果節點是唯讀的, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>取得具有指定的 <see cref="P:System.Xml.XmlNode.Name" /> 的第一個子項目。</summary>
      <param name="name">要擷取的項目的限定名稱 (Qualified Name)。</param>
      <returns>符合指定名稱的第一個 <see cref="T:System.Xml.XmlElement" />。 如果沒有相符項目，則傳回 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>取得具有指定的 <see cref="P:System.Xml.XmlNode.LocalName" /> 與 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的第一個子項目。</summary>
      <param name="localname">項目的本機名稱。</param>
      <param name="ns">項目的命名空間 URI。</param>
      <returns>具有符合的 <paramref name="localname" /> 與 <paramref name="ns" /> 的第一個 <see cref="T:System.Xml.XmlElement" />。 執行個體時提供 SQL Server 登入。 如果沒有相符項目，則傳回 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>取得節點的最後一個子節點。</summary>
      <returns>節點的最後一個子節點。 如果沒有這種節點，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>在衍生類別中覆寫時，取得節點的區域名稱。</summary>
      <returns>移除前置詞的節點名稱。 例如, <see langword="LocalName" />是元素&lt;bk: book&gt;的 book。  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 
  類型 
  名稱 
  屬性 
  屬性的本機名稱。  
  CDATA 
  #cdata-section 
  註解 
  #comment 
  文件 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  文件類型名稱。  
  元素 
  項目的本機名稱。  
  實體 
  實體的名稱。  
  EntityReference 
  所參考的實體名稱。  
  Notation 
  標記法名稱。  
  ProcessingInstruction 
  處理指示的目標。  
  Text 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>在衍生類別中覆寫時，取得節點的限定名稱。</summary>
      <returns>節點的限定名稱。 傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 
  類型 
  名稱 
  屬性 
  屬性的限定名稱 (Qualified Name)。  
  CDATA 
  #cdata-section 
  註解 
  #comment 
  文件 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  文件類型名稱。  
  元素 
  項目的限定名稱。  
  實體 
  實體的名稱。  
  EntityReference 
  所參考的實體名稱。  
  Notation 
  標記法名稱。  
  ProcessingInstruction 
  處理指示的目標。  
  Text 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>取得這個節點的命名空間 URI。</summary>
      <returns>這個節點的命名空間 URI。 如果沒有命名空間 URI，則這個屬性傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>取得這個節點的後置節點。</summary>
      <returns>下一個 <see langword="XmlNode" />。 如果沒有前置節點，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>在衍生類別中覆寫時，取得目前節點的類型。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlNodeType" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>使這個 XmlNode 之下子樹狀結構的整個深度中所有 XmlText 節點成為「一般」形式，其中只用標記 (Markup) (亦即標記 (Tag)、註解、處理指示、CDATA 區段與實體參考) 來分隔 XmlText 節點，也就是說，沒有相鄰的 XmlText 節點。</summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>取得包含這個節點和其所有子節點的標記。</summary>
      <returns>包含這個節點和其所有子節點的標記。  
 <see langword="OuterXml" /> 不會傳回預設的屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns>這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。  
如果這個節點是 <see cref="T:System.Xml.XmlDocument" /> (NodeType 等於 XmlNodeType.Document)，則這個屬性傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns>表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。  
  NodeType 
  ParentNode 的傳回值 
  Attribute、Document、DocumentFragment、Entity、Notation 
  傳回 <see langword="null" />；這些節點沒有父代。  

  CDATA 
  傳回包含 CDATA 區段的項目或實體參考。  

  註解 
  傳回項目、實體參考、文件類型或包含註解的文件。  

  DocumentType 
  傳回文件節點。  

  元素 
  傳回項目的父代節點。 如果此項目是樹狀結構的根節點，則父代是文件節點。  

  EntityReference 
  傳回項目、屬性或包含實體參考的實體參考。  

  ProcessingInstruction 
  傳回文件、項目、文件類型或包含處理指示的實體參考。  

  Text 
  傳回父項目、屬性或包含文字節點的實體參考。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>取得或設定這個節點的命名空間前置詞。</summary>
      <returns>這個節點的命名空間前置詞。 例如, <see langword="Prefix" />是 bk: book&gt;元素&lt;的 bk。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
      <exception cref="T:System.ArgumentException">這個節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException">指定的前置詞包含無效的字元。  
 指定的前置詞格式不正確。  
 指定的前置詞為 "xml"，且此節點的 namespaceURI 與 "http://www.w3.org/XML/1998/namespace" (英文) 的不同。  
 此節點是一個屬性，且指定的前置詞是 "xmlns"，而且此節點的 namespaceURI 與 http://www.w3.org/2000/xmlns/ (英文) 的不同。  
 這個節點是屬性，這個節點的 qualifiedName 是「xmlns」。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>將指定的節點加入這個節點之子節點清單的開頭。</summary>
      <param name="newChild">要加入的節點。 要加入之節點的所有內容會移入指定的位置。</param>
      <returns>已加入的節點。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>取得這個節點的前置節點。</summary>
      <returns>前置的 <see langword="XmlNode" />。 如果沒有前置節點，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary>取得這個節點的前置文字節點。</summary>
      <returns>傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>移除目前節點的所有子節點和/或屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>移除指定的子節點。</summary>
      <param name="oldChild">正在移除的節點。</param>
      <returns>移除的節點。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> 不是這個節點的子節點。 或者這個節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>將子節點 <paramref name="oldChild" /> 用 <paramref name="newChild" /> 節點取代。</summary>
      <param name="newChild">要放入子節點清單中的新節點。</param>
      <param name="oldChild">清單中要被取代的節點。</param>
      <returns>被取代的節點。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
這個節點是唯讀的。  
<paramref name="oldChild" /> 不是這個節點的子節點。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>選取符合 XPath 運算式的節點清單。</summary>
      <param name="xpath">XPath 運算式。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含符合 XPath 查詢的節點集合。</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式包含前置詞。 請參閱 XPath 範例。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>選取符合 XPath 運算式的節點清單。 使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 解析 XPath 運算式中找到的任何前置詞。</summary>
      <param name="xpath">XPath 運算式。 請參閱 XPath 範例。</param>
      <param name="nsmgr">
        <see cref="T:System.Xml.XmlNamespaceManager" />，用來解析 XPath 運算式中前置詞的命名空間。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeList" />，包含符合 XPath 查詢的節點集合。</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式包含未定義於 <see langword="XmlNamespaceManager" /> 中的前置詞。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>選取符合 XPath 運算式的第一個 <see langword="XmlNode" />。</summary>
      <param name="xpath">XPath 運算式。 請參閱 XPath 範例。</param>
      <returns>符合 XPath 查詢的第一個 <see langword="XmlNode" />，如果找不到符合的節點，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式包含前置詞。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>選取符合 XPath 運算式的第一個 <see langword="XmlNode" />。 使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 解析 XPath 運算式中找到的任何前置詞。</summary>
      <param name="xpath">XPath 運算式。 請參閱 XPath 範例。</param>
      <param name="nsmgr">
        <see cref="T:System.Xml.XmlNamespaceManager" />，用來解析 XPath 運算式中前置詞的命名空間。</param>
      <returns>符合 XPath 查詢的第一個 <see langword="XmlNode" />，如果找不到符合的節點，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式包含未定義於 <see langword="XmlNamespaceManager" /> 中的前置詞。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>測試 DOM 實作 (Implementation) 是否實作特定功能。</summary>
      <param name="feature">要測試的功能套件 (Package) 名稱。 這個名稱並不區分大小寫。</param>
      <param name="version">要測試的封裝名稱版本編號。 如果沒有指定版本 (null)，則支援任何版本的功能，將使這個方法傳回 true。</param>
      <returns>如果在指定的版本實作這個功能，則為 <see langword="true" />，否則為 <see langword="false" />。 下表說明傳回 <see langword="true" /> 的組合。  
  功能 
  版本 
  XML 
  1.0 
  XML 
  2.0</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlNode.GetEnumerator" />。</summary>
      <returns>集合的列舉值。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlNode.Clone" />。</summary>
      <returns>呼叫來源節點的複本。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定： 
  類型 
  值 
  屬性 
  屬性的值。  
  CDATASection 
  CDATA 區段的內容。  
  註解 
  註解的內容。  
  文件 
 <see langword="null" />.  
  DocumentFragment 
 <see langword="null" />.  
  DocumentType 
 <see langword="null" />.  
  元素 
 <see langword="null" />. 您可以使用 <see cref="P:System.Xml.XmlElement.InnerText" /> 或 <see cref="P:System.Xml.XmlElement.InnerXml" /> 屬性，存取項目節點的值。  
  實體 
 <see langword="null" />.  
  EntityReference 
 <see langword="null" />.  
  Notation 
 <see langword="null" />.  
  ProcessingInstruction 
  除了目標之外的完整內容。  
  Text 
  文字節點的內容。  
  SignificantWhitespace 
  空白字元。 空白字元可以包含一或多個空字元、歸位字元、換行字元或定位字元。  
  Whitespace 
  空白字元。 空白字元可以包含一或多個空字元、歸位字元、換行字元或定位字元。  
  XmlDeclaration 
  宣告的內容 (也就是？ xml 與？ &lt; &gt;之間的所有專案)。</returns>
      <exception cref="T:System.ArgumentException">設定唯讀節點的值。</exception>
      <exception cref="T:System.InvalidOperationException">設定不應該有值的節點值 (例如，Element 節點)。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>在衍生類別中覆寫時，將節點的所有子節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>在衍生類別中覆寫時，將目前節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>指定節點變更的型別。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>要變更的節點值。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>要插入樹狀結構中的節點。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>要從樹狀結構移除的節點。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>提供 <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>初始化 <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="node">產生事件的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldParent">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的舊父代 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="newParent">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的新父代 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldValue">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的舊值。</param>
      <param name="newValue">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的新值。</param>
      <param name="action">
        <see cref="T:System.Xml.XmlNodeChangedAction" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>取得指出發生哪種類型之節點變更事件的值。</summary>
      <returns>其中一個列舉值, 描述節點變更事件。 <see langword="Action" /> 值在發生事件期間 (之前或之後) 沒有差異。 您可以建立個別事件處理常式以處理這兩個執行個體。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>取得作業完成之後 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns>完成作業之後的 <see langword="ParentNode" /> 值。 若是要移除的節點，這個屬性傳回 <see langword="null" />。  
   
 對於屬性節點，這個屬性傳回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>取得節點的新值。</summary>
      <returns>節點的新值。 如果節點既不是屬性也不是文字節點，或正在移除節點，則這個屬性會傳回 <see langword="null" />。  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中呼叫屬性，則在順利變更時，<see langword="NewValue" /> 會傳回節點的值。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中呼叫屬性，<see langword="NewValue" /> 會傳回節點目前的值。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>取得要新增、移除或變更的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns>要加入、移除或變更的 <see langword="XmlNode" />，這個屬性絕不會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>取得作業開始之前 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns>作業開始之前的 <see langword="ParentNode" /> 值。 如果節點沒有父代，這個屬性傳回 <see langword="null" />。  
   
 對於屬性節點，這個屬性傳回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>取得節點的原始值。</summary>
      <returns>節點的原始值。 如果節點既不是屬性也不是文字節點，或正在插入節點，則這個屬性會傳回 <see langword="null" />。  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中呼叫屬性，則在順利變更時，<see langword="OldValue" /> 會傳回節點目前的值 (將取代成新值)。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中呼叫屬性，<see langword="OldValue" /> 會傳回節點變更前的值。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>表示處理 <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Xml.XmlNodeChangedEventArgs" />，包含事件資料。</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>表示排序的節點集合。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlNodeList" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>取得 <see langword="XmlNodeList" /> 中的節點數目。</summary>
      <returns>
        <see langword="XmlNodeList" /> 中的節點數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>取得逐一查看節點集合的列舉值。</summary>
      <returns>用來逐一查看節點集合的列舉值。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>擷取指定索引的節點。</summary>
      <param name="index">在節點清單中以零起始的索引。</param>
      <returns>在集合中具有指定的索引的 <see cref="T:System.Xml.XmlNode" />。 如果 <paramref name="index" /> 大於或等於清單中的節點數目，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>取得指定之索引位置的節點。</summary>
      <param name="i">在節點清單中以零起始的索引。</param>
      <returns>在集合中具有指定的索引的 <see cref="T:System.Xml.XmlNode" />。 如果索引大於或等於清單中節點的數目，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary>私下處置節點清單中的資源。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.Xml.XmlNodeList" /> 類別所使用的所有資源。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>說明節點相較於第二個節點的文件順序。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>這個巡覽器的目前節點位於提供之巡覽器的目前節點之後。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>這個巡覽器的目前節點位於提供之巡覽器的目前節點之前。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>兩個巡覽器位於相同的節點上。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>無法決定節點位置的文件順序 (兩個位置相互關聯)。 如果兩個節點位於不同的樹狀結構中，就會發生這種情況。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>表示讀取器，其提供對 <see cref="T:System.Xml.XmlNode" /> 中 XML 資料的快速且非快取順向存取。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNode" /> 來建立 <see langword="XmlNodeReader" /> 類別的執行個體。</summary>
      <param name="node">您要讀取的 <see langword="XmlNode" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>取得目前節點的屬性數目。</summary>
      <returns>目前節點的屬性數目。 這個數目包括預設屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>取得目前節點的基底 (Base) URI。</summary>
      <returns>目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>取得值，這個值表示 <see cref="T:System.Xml.XmlNodeReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns>如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlNodeReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns>如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlNodeReader" /> 永遠傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>將 <see cref="P:System.Xml.XmlNodeReader.ReadState" /> 變更為 <see langword="Closed" />。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>取得 XML 文件中目前節點的深度。</summary>
      <returns>XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns>如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>取得具有指定索引的屬性值。</summary>
      <param name="attributeIndex">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <returns>指定的屬性值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>取得具有指定名稱的屬性值。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="name">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>取得值，表示目前節點是否具有任何屬性。</summary>
      <returns>如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>取得值，表示目前節點是否具有 <see cref="P:System.Xml.XmlNodeReader.Value" />。</summary>
      <returns>如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>取得值，表示目前的節點是否為文件類型定義 (DTD)，或結構描述中定義之預設值所產生的屬性。</summary>
      <returns>如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns>
        <see langword="true" />如果目前節點是元素<see cref="P:System.Xml.XmlNodeReader.NodeType" /> (等於<see langword="XmlNodeType.Element" /><c>/ &gt;</c>) 且結尾為, 則為, <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>取得目前節點的區域名稱。</summary>
      <returns>目前節點名稱的前置詞被移除。 例如, <see langword="LocalName" /><see langword="book" />適用于元素<c>&lt;bk: book&gt;</c>。  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。 不必擷取這個字串。</param>
      <returns>前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>移至具有指定索引的屬性。</summary>
      <param name="attributeIndex">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>移至具有指定名稱的屬性。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>移至具有指定的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="name">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>移至包含目前屬性節點的項目。</summary>
      <returns>如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>移至第一個屬性。</summary>
      <returns>如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>移至下一個屬性。</summary>
      <returns>如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns>目前節點的限定名稱。 例如, <see langword="Name" /><see langword="bk:book" />適用于元素<c>&lt;bk: book&gt;</c>。  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNodeReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  節點類型 
  名稱 
 <see langword="Attribute" /> 屬性的名稱。  

 <see langword="DocumentType" /> 文件類型名稱。  

 <see langword="Element" /> 標記名稱。  

 <see langword="EntityReference" /> 所參考的實體名稱。  

 <see langword="ProcessingInstruction" /> 處理指示的目標。  

 <see langword="XmlDeclaration" /><see langword="xml" /> 常值 (Literal) 字串。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <returns>目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns>與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>從資料流讀取下一個節點。</summary>
      <returns>如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns>如果傳回的是節點，則為 <see langword="true" />。  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
空白的屬性 (例如 <c>misc=""</c>) 會對含有 String.Empty 值的單一節點傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 BinHex 已解碼的二進位資料。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 BinHex 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>取得讀取器的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>將項目或文字節點的內容當做字串讀取。</summary>
      <returns>項目或類似文字的節點內容 (其中包括 CDATA、文字節點等)。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
 <see langword="Note:" /> 文字節點可為項目或屬性文字節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
      <exception cref="T:System.InvalidOperationException">讀取器不在 <see langword="EntityReference" /> 節點上。</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>取得已指派給目前節點的結構描述資訊。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>略過目前節點的子節點。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 物件</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 物件，包含範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">包含命名空間前置詞的 <see cref="T:System.String" />。</param>
      <returns>包含命名空間名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">識別命名空間的 <see cref="T:System.String" /> 物件。</param>
      <returns>包含命名空間前置詞的 <see cref="T:System.String" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>取得目前節點的文字值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlNodeReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 其他所有節點類型都會傳回 String.Empty。  
  節點類型 
  值 
 <see langword="Attribute" /> 屬性的值。  

 <see langword="CDATA" /> CDATA 區段的內容。  

 <see langword="Comment" /> 註解的內容。  

 <see langword="DocumentType" /> 內部子集。  

 <see langword="ProcessingInstruction" /> 全部內容 (目標除外)。  

 <see langword="SignificantWhitespace" /> 在混合內容模型中標記間的泛空白字元。  

 <see langword="Text" /> 文字節點的內容。  

 <see langword="Whitespace" /> 標記之間的泛空白字元。  

 <see langword="XmlDeclaration" /> 宣告的內容。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>指定節點的類型。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>屬性 (例如 <c>id='123'</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>CDATA 區段 (例如 <c>&lt;![CDATA[my escaped text]]&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>註解 (例如 <c>&lt;!-- my comment --&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>文件物件 (作為文件樹狀結構的根) 可存取整個 XML 文件。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>文件片段。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>文件類型宣告，以下列標記指示 (例如 <c>&lt;!DOCTYPE...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>項目 (例如 <c>&lt;item&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>結尾項目標記 (例如 <c>&lt;/item&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>在 <see langword="XmlReader" /> 到達實體取代的結尾 (由於呼叫 <see cref="M:System.Xml.XmlReader.ResolveEntity" /> 所致) 時傳回。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>實體宣告 (例如 <c>&lt;!ENTITY...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>實體參考 (例如 <c>&amp;num;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>如果尚未呼叫 <see langword="Read" /> 方法，則由 <see cref="T:System.Xml.XmlReader" /> 傳回此項目。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>文件類型宣告中的標記法 (例如 <c>&lt;!NOTATION...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>處理指示 (例如 <c>&lt;?pi test?&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>混合內容模型中標記之間的空白字元，或 <c>xml:space="preserve"</c> 範圍中的空白字元。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>節點的文字內容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>標記之間的空白字元。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>XML 宣告 (例如 <c>&lt;?xml version='1.0'?&gt;</c> )。</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>代表標記法宣告，例如 &lt;!NOTATION... &gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。 標記法節點無法複製。 在 <see cref="T:System.Xml.XmlNotation" /> 物件上呼叫這個方法會擲回例外狀況。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>方法呼叫來源節點的 <see cref="T:System.Xml.XmlNode" /> 複本。</returns>
      <exception cref="T:System.InvalidOperationException">標記法節點無法複製。 在 <see cref="T:System.Xml.XmlNotation" /> 物件上呼叫這個方法會擲回例外狀況。</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>取得表示這個節點子系的標記。</summary>
      <returns>對於 <see langword="XmlNotation" /> 節點，會傳回 String.Empty。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試設定這個屬性。</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>取得值，表示節點是否為唯讀。</summary>
      <returns>
        <see langword="true" />如果節點是唯讀的, 則為,否則為<see langword="false" />。  
因為 <see langword="XmlNotation" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>取得現行節點的名稱而無命名空間前置詞。</summary>
      <returns>如果是 <see langword="XmlNotation" /> 節點，這個屬性會傳回標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>取得目前節點的名稱。</summary>
      <returns>標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>節點類型。 如果是 <see langword="XmlNotation" /> 節點，則這個值會是 XmlNodeType.Notation。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>取得表示這個節點及其所有子系的標記。</summary>
      <returns>對於 <see langword="XmlNotation" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>取得標記法宣告的公用識別項的值。</summary>
      <returns>標記法的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>取得標記法宣告的系統識別項的值。</summary>
      <returns>標記法的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 在 <see langword="XmlNotation" /> 節點上這個方法不會有任何作用。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 在 <see langword="XmlNotation" /> 節點上這個方法不會有任何作用。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>指定用於序列化 <see cref="T:System.Xml.XmlWriter" /> 輸出的方法。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>於執行階段使用 XSLT 規則，在 <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 和 <see cref="F:System.Xml.XmlOutputMethod.Html" /> 輸出方法之間進行選擇。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>根據 XSLT 指定的 HTML 規則進行序列化。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>只序列化文字區塊。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>根據 XML 1.0 規則進行序列化。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>提供 <see cref="T:System.Xml.XmlReader" /> 所需的所有內容資訊以剖析 XML 片段。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基底 URI、<see langword="xml:lang" />、<see langword="xml:space" /> 和文件類型的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="docTypeName">文件類型宣告的名稱。</param>
      <param name="pubId">公用識別碼。</param>
      <param name="sysId">系統識別碼。</param>
      <param name="internalSubset">內部 DTD 子集。 DTD 子集是用於實體解析，而非用於文件驗證。</param>
      <param name="baseURI">XML 片段的基底 URI (載入片段的來源位置)。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基底 URI、<see langword="xml:lang" />、<see langword="xml:space" />、編碼方式和文件類型的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="docTypeName">文件類型宣告的名稱。</param>
      <param name="pubId">公用識別碼。</param>
      <param name="sysId">系統識別碼。</param>
      <param name="internalSubset">內部 DTD 子集。 DTD 用於實體解析，而非用於文件驗證。</param>
      <param name="baseURI">XML 片段的基底 URI (載入片段的來源位置)。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <param name="enc">指出編碼設定的 <see cref="T:System.Text.Encoding" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" /> 和 <see langword="xml:space" /> 的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" />、<see langword="xml:space" /> 和編碼方式，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <param name="enc">指出編碼設定的 <see cref="T:System.Text.Encoding" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>取得或設定基底 URI。</summary>
      <returns>用來解析 DTD 檔案的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>取得或設定文件類型宣告的名稱。</summary>
      <returns>文件類型宣告的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>取得或設定編碼類型。</summary>
      <returns>指示編碼類型的 <see cref="T:System.Text.Encoding" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>取得或設定內部 DTD 子集。</summary>
      <returns>內部 DTD 子集。 例如, 這個屬性會傳回方括弧<c>&lt;之間的所有內容!DOCTYPE 檔 [...]&gt;</c>.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>取得或設定 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <returns>
        <see langword="XmlNamespaceManager" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>取得用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>取得或設定公用識別碼。</summary>
      <returns>公用識別碼。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>取得或設定系統識別碼。</summary>
      <returns>系統識別碼。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>取得或設定目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。 如果範圍內沒有 <see langword="xml:lang" />，則會傳回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>取得或設定目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>表示處理指示，其中 XML 定義將處理器特定資訊保存在文件的文字中。</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlProcessingInstruction" /> 類別的新執行個體。</summary>
      <param name="target">處理指示的目標；請參閱 <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> 屬性。</param>
      <param name="data">指示的內容；請參閱 <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> 屬性。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>重複的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>取得或設定處理指示的內容，目標除外。</summary>
      <returns>處理指示的內容，目標除外。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>取得或設定節點的串連值和其所有的子節點。</summary>
      <returns>節點的串連值和其所有的子節點。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於處理指示程式碼，這個屬性傳回處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於處理指示程式碼，這個屬性傳回處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>對於 <see langword="XmlProcessingInstruction" /> 節點，這個值是 XmlNodeType.ProcessingInstruction。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>處理指示的目標。</summary>
      <returns>處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>處理指示的完整內容，目標除外。</returns>
      <exception cref="T:System.ArgumentException">節點是唯讀的。</exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 因為 ProcessingInstruction 節點並沒有子節點，所以這個方法不會有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>表示 XML 限定名稱 (Qualified Name)。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>使用指定的名稱，初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
      <param name="name">要作為 <see cref="T:System.Xml.XmlQualifiedName" /> 物件名稱的區域名稱。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>使用指定的名稱和命名空間，來初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
      <param name="name">要作為 <see cref="T:System.Xml.XmlQualifiedName" /> 物件名稱的區域名稱。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的命名空間。</param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>提供空白的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Xml.XmlQualifiedName" /> 物件是否等於目前的 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="other">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果這兩個是相同的執行個體物件，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的雜湊程式碼。</summary>
      <returns>這個物件的雜湊碼。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>取得值，指出 <see cref="T:System.Xml.XmlQualifiedName" /> 是否為空的。</summary>
      <returns>如果名稱和命名空間為空白字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>取得 <see cref="T:System.Xml.XmlQualifiedName" /> 限定名稱的字串表示。</summary>
      <returns>限定名稱的字串表示，如果物件並未定義名稱，則為 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>取得 <see cref="T:System.Xml.XmlQualifiedName" /> 命名空間的字串表示。</summary>
      <returns>命名空間的字串表示，如果物件並未定義命名空間，則為 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>比較兩個 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="a">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果這兩個物件具有相同的名稱和命名空間值，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>比較兩個 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="a">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>如果這兩個物件的名稱和命名空間值不同，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值。</summary>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值，其格式為 <see langword="namespace:localname" />。 如果這個物件尚未定義命名空間，則此方法只會傳回區域名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值。</summary>
      <param name="name">物件的名稱。</param>
      <param name="ns">物件的命名空間。</param>
      <returns>
        <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值，其格式為 <see langword="namespace:localname" />。 如果這個物件尚未定義命名空間，則此方法只會傳回區域名稱。</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>表示提供快速、非快取、順向 (Forward-only) 存取 XML 資料的讀取器 (Reader)。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>初始化 <see langword="XmlReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>在衍生類別中覆寫時，取得目前節點上的屬性數目。</summary>
      <returns>目前節點的屬性數目。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>在衍生類別中覆寫時，取得目前節點的基底 URI。</summary>
      <returns>目前節點的基底 URI。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>取得值，這個值表示 <see cref="T:System.Xml.XmlReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns>如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>取得值，表示 <see cref="T:System.Xml.XmlReader" /> 是否會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlReader" /> 會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns>如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>在衍生類別中覆寫時，將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 <see cref="F:System.Xml.ReadState.Closed" />。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>使用指定的資料流，以預設設定建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">包含 XML 資料的資料流。  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>使用指定的資料流及設定，建立新的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">包含 XML 資料的資料流。  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>使用指定的資料流、基底 URI 和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">包含 XML 資料的資料流。  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="baseUri">所讀取之實體或文件的基底 URI。 這個值可以是 <see langword="null" />。  
 安全性提示：系統會使用基底 URI 來解析 XML 文件的相對 URI。 請不要使用來自不受信任來源的基底 URI。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用剖析用的指定資料流、設定和內容資訊，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">包含 XML 資料的資料流。  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>使用指定的文字讀取器，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>使用指定的文字讀取器及設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <param name="settings">新的 <see cref="T:System.Xml.XmlReader" /> 的設定。 這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>使用指定的文字讀取器、設定和基底 URI，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 <see cref="T:System.Xml.XmlReader" /> 不會使用 XML 宣告中所指定的編碼方式將資料流解碼。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="baseUri">所讀取之實體或文件的基底 URI。 這個值可以是 <see langword="null" />。  
 安全性提示：系統會使用基底 URI 來解析 XML 文件的相對 URI。 請不要使用來自不受信任來源的基底 URI。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用指定的文字讀取器、設定和內容資訊進行剖析，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 屬性都包含值。 (只能設定並使用其中一個 <see langword="NameTable" /> 屬性)。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>使用指定的 URI，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlUrlResolver" /> 類別可用來將路徑轉換成正式的資料代表。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI 所識別的檔案不存在。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。  


            

 URI 格式不正確。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>使用指定的 URI 和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 物件上的 <see cref="T:System.Xml.XmlResolver" /> 物件是用於將路徑轉換成標準資料表示。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 為 <see langword="null" />，則會使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到由 URI 指定的檔案。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。  


            

 URI 格式不正確。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>使用剖析用的指定 URI、設定和內容資訊，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 物件上的 <see cref="T:System.Xml.XmlResolver" /> 物件是用於將路徑轉換成標準資料表示。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 為 <see langword="null" />，則會使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
這個值可以是 <see langword="null" />。</param>
      <returns>用以在資料流中讀取 XML 資料的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 屬性都包含值。 (只能設定並使用其中一個 <see langword="NameTable" /> 屬性)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到由 URI 指定的檔案。</exception>
      <exception cref="T:System.UriFormatException">URI 格式不正確。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>使用指定的 XML 讀取器和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="reader">您想要當做底層 XML 讀取器使用的物件。</param>
      <param name="settings">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。  
<see cref="T:System.Xml.XmlReaderSettings" /> 物件的一致性層級必須符合基礎讀取器的一致性層級，或是必須設定為 <see cref="F:System.Xml.ConformanceLevel.Auto" />。</param>
      <returns>包裝在指定 <see cref="T:System.Xml.XmlReader" /> 物件周圍的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="T:System.Xml.XmlReaderSettings" /> 物件所指定的一致性層級與基礎讀取器的一致性層級不一致。  
-或- 
基礎 <see cref="T:System.Xml.XmlReader" /> 處於 <see cref="F:System.Xml.ReadState.Error" /> 或 <see cref="F:System.Xml.ReadState.Closed" /> 狀態。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>在衍生類別中覆寫時，取得 XML 文件中目前節點的深度。</summary>
      <returns>XML 文件中目前節點的深度。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>釋放 <see cref="T:System.Xml.XmlReader" /> 類別目前的執行個體所使用的全部資源。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xml.XmlReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示會同時釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>在衍生類別中覆寫時，取得指出讀取器是否在資料流結尾的值。</summary>
      <returns>如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>在衍生類別中覆寫時，取得具有指定索引的屬性值。</summary>
      <param name="i">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <returns>指定的屬性值。 這個方法不會移動讀取器。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 超出範圍。 它必須是非負值，而且小於屬性集合的大小。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性值。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>指定的屬性值。 如果找不到該屬性或其值為 <see langword="String.Empty" />，則傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性值。</summary>
      <param name="name">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到該屬性或其值為 <see langword="String.Empty" />，則傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>非同步取得目前節點的值。</summary>
      <returns>目前節點的值。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，即會擲回 <see cref="T:System.InvalidOperationException" /> 和「非同步作業已在進行中」訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>取得值，表示目前節點是否具有任何屬性。</summary>
      <returns>如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>在衍生類別中覆寫時，取得指出目前節點是否具有 <see cref="P:System.Xml.XmlReader.Value" /> 的值。</summary>
      <returns>如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則節點的值為 <see langword="String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>在衍生類別中覆寫時，取得值，指出目前節點是否為從 DTD 或結構描述中定義的預設值產生的屬性。</summary>
      <returns>如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>在衍生類別中覆寫時，取得指出目前節點是否為空項目的值 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns>
        <see langword="true" /> 如果目前節點是項目 (<see cref="P:System.Xml.XmlReader.NodeType" />等於<see langword="XmlNodeType.Element" />) 結尾<c>/ &gt;</c>否則<see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>傳回值，指出字串引數是否為有效的 XML 名稱。</summary>
      <param name="str">要驗證的名稱。</param>
      <returns>如果名稱有效，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>傳回值，指出字串引數是否為有效的 XML 名稱語彙基元。</summary>
      <param name="str">要驗證的名稱語彙基元。</param>
      <returns>如果它是有效的名稱語彙基元，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記。</summary>
      <returns>如果 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 找到開頭標記或空白項目標記，即為 <see langword="true" />；如果找到的節點類型並非 <see langword="false" />，則為 <see langword="XmlNodeType.Element" />。</returns>
      <exception cref="T:System.Xml.XmlException">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記，以及所找到項目的 <see cref="P:System.Xml.XmlReader.Name" /> 屬性是否符合指定的引數。</summary>
      <param name="name">字串符合所找到項目的 <see langword="Name" /> 屬性。</param>
      <returns>如果產生的節點是項目，並且 <see langword="true" /> 屬性符合指定的字串，即為 <see langword="Name" />。 如果找到的節點類型並非 <see langword="XmlNodeType.Element" />，或項目 <see langword="Name" /> 屬性不符合指定字串，即為 <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記，以及所找到項目的 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 屬性是否符合指定的字串。</summary>
      <param name="localname">要符合所找到項目之 <see langword="LocalName" /> 屬性的字串。</param>
      <param name="ns">要符合所找到項目之 <see langword="NamespaceURI" /> 屬性的字串。</param>
      <returns>
        <see langword="true" />如果產生的節點是項目。 如果找到的節點類型並非 <see langword="XmlNodeType.Element" />，或項目的 <see langword="LocalName" /> 和 <see langword="NamespaceURI" /> 屬性不符合指定字串，即為 <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>在衍生類別中覆寫時，取得具有指定索引的屬性值。</summary>
      <param name="i">屬性的索引。</param>
      <returns>指定的屬性值。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性值。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性值。</summary>
      <param name="name">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>在衍生類別中覆寫時，取得目前節點的區域名稱。</summary>
      <returns>目前節點名稱的前置詞被移除。 例如，<see langword="LocalName" />已<see langword="book" />項目的<c>&lt;bk: book&amp;gt&gt;</c>。  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 <see langword="String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>在衍生類別中覆寫時，解析目前項目範圍內的命名空間前置詞。</summary>
      <param name="prefix">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。</param>
      <returns>前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>在衍生類別中覆寫時，移至具有指定索引的屬性。</summary>
      <param name="i">屬性的索引。</param>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">參數的值是負數。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>在衍生類別中覆寫時，移至具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">參數為空字串。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>在衍生類別中覆寫時，移至具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性。</summary>
      <param name="name">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException">這兩個參數值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>檢查目前節點是否為內容 (非空白字元文字、<see langword="CDATA" />、<see langword="Element" />、<see langword="EndElement" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" />) 節點。 如果節點並非內容節點，讀取器會先跳至下一個內容節點或檔案結尾。 它會略過下列型別的節點：<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" /> 或 <see langword="SignificantWhitespace" />。</summary>
      <returns>這個方法所找到的目前節點的 <see cref="P:System.Xml.XmlReader.NodeType" />，如果讀取器已經到達輸入資料流的結尾，則為 <see langword="XmlNodeType.None" />。</returns>
      <exception cref="T:System.Xml.XmlException">在輸入資料流中發現不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>非同步檢查目前節點是否為內容節點。 如果節點並非內容節點，讀取器會先跳至下一個內容節點或檔案結尾。</summary>
      <returns>這個方法所找到的目前節點的 <see cref="P:System.Xml.XmlReader.NodeType" />，如果讀取器已經到達輸入資料流的結尾，則為 <see langword="XmlNodeType.None" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>在衍生類別中覆寫時，移至包含目前屬性節點的項目上。</summary>
      <returns>如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>在衍生類別中覆寫時，移至第一個屬性。</summary>
      <returns>如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>在衍生類別中覆寫時，移至下一個屬性。</summary>
      <returns>如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>在衍生類別中覆寫時，取得目前節點的限定名稱。</summary>
      <returns>目前節點的限定名稱。 例如，<see langword="Name" />已<see langword="bk:book" />項目的<c>&lt;bk: book&amp;gt&gt;</c>。  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  節點類型 
  名稱 
 <see langword="Attribute" /> 屬性的名稱。  

 <see langword="DocumentType" /> 文件類型名稱。  

 <see langword="Element" /> 標記名稱。  

 <see langword="EntityReference" /> 所參考的實體名稱。  

 <see langword="ProcessingInstruction" /> 處理指示的目標。  

 <see langword="XmlDeclaration" /><see langword="xml" /> 常值 (Literal) 字串。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>在衍生類別中覆寫時，取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <returns>目前節點的命名空間 URI，否則為空字串。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>在衍生類別中覆寫時，取得與這個實作相關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>在衍生類別中覆寫時，取得目前節點的型別。</summary>
      <returns>其中一個列舉值，指定目前節點的類型。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>在衍生類別中覆寫時，取得與目前節點相關的命名空間前置詞。</summary>
      <returns>與目前節點相關聯的命名空間前置詞。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>在衍生類別中覆寫時，取得用來括住屬性節點值的引號字元。</summary>
      <returns>用來括住屬性節點值的引號字元 (" 或 ')。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>在衍生類別中覆寫時，從資料流讀取下一個節點。</summary>
      <returns>如果順利讀取下一個節點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>非同步讀取資料流中的下一個節點。</summary>
      <returns>如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>在衍生類別中覆寫時，將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns>如果傳回的是節點，則為 <see langword="true" />。  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
針對含有 <see langword="String.Empty" /> 值的單一節點，空白的屬性 (例如 <c>misc=""</c>) 會傳回 <see langword="true" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>以指定型别的物件形式讀取內容。</summary>
      <param name="returnType">要傳回的值型别。  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。 例如，將 <see cref="T:System.Xml.XmlQualifiedName" /> 物件轉換為 <c>xs:string</c> 時，可以使用它。  
這個值可以是 <see langword="null" />。</param>
      <returns>轉換為要求型別的串連文字內容或屬性值。</returns>
      <exception cref="T:System.FormatException">此內容的目標類型格式不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前節點不是受支援的節點型別。 如需詳細資訊，請參閱下表。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.OverflowException">讀取 <see langword="Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>以非同步的方式讀取做為指定型别之物件的內容。</summary>
      <param name="returnType">要傳回的值型别。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <returns>轉換為要求型別的串連文字內容或屬性值。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 <see langword="BinHex" /> 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式讀取內容，並傳回 <see langword="BinHex" /> 的解碼二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>以 <see langword="Boolean" /> 的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>以 <see cref="T:System.DateTimeOffset" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 物件形式的目前位置文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>以雙精確度浮點數的形式讀取目前位置的文字內容。</summary>
      <returns>雙精確度浮點數形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>以單精確度浮點數的形式讀取目前位置的文字內容。</summary>
      <returns>單精確度浮點數形式之目前位置的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>以 32 位元帶正負號之整數的形式讀取目前位置的文字內容。</summary>
      <returns>32 位元帶正負號之整數形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>以 64 位元帶正負號之整數的形式讀取目前位置的文字內容。</summary>
      <returns>64 位元帶正負號之整數形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>以 <see cref="T:System.Object" /> 的形式，讀取目前位置的文字內容。</summary>
      <returns>最合適之 Common Language Runtime (CLR) 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>以非同步方式與 <see cref="T:System.Object" /> 的形式，讀取目前位置的文字內容。</summary>
      <returns>最合適之 Common Language Runtime (CLR) 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>以 <see cref="T:System.String" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.String" /> 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>以非同步方式與 <see cref="T:System.String" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <returns>
        <see cref="T:System.String" /> 物件形式的文字內容。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>以要求之型別的形式讀取項目內容。</summary>
      <param name="returnType">要傳回的值型别。  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <returns>轉換為要求之型別物件的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.OverflowException">讀取 <see langword="Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以要求之型別的形式讀取項目內容。</summary>
      <param name="returnType">要傳回的值型别。  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>轉換為要求之型別物件的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <exception cref="T:System.OverflowException">讀取 <see langword="Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>以要求之型別的形式，非同步讀取項目內容。</summary>
      <param name="returnType">要傳回的值型别。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <returns>轉換為要求之型別物件的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 <see langword="Base64" /> 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式讀取項目，並將 <see langword="Base64" /> 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>以 <see cref="T:System.Boolean" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.Boolean" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Boolean" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>
        <see cref="T:System.Boolean" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.DateTime" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>
        <see cref="T:System.Decimal" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>以雙精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <returns>雙精確度浮點數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換為雙精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以雙精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>雙精確度浮點數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>以單精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <returns>單精確度浮點數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換為單精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以單精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>單精確度浮點數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換為單精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>以 32 位元帶正負號之整數的形式，讀取目前的項目並傳回內容。</summary>
      <returns>32 位元帶正負號之整數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容不能轉換為 32 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 32 位元帶正負號之整數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>32 位元帶正負號之整數形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容不能轉換為 32 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>以 64 位元帶正負號之整數的形式讀取目前的元素並傳回內容。</summary>
      <returns>64 位元帶正負號之整數形式的元素內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容不能轉換為 64 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 64 位元帶正負號之整數的形式讀取目前的元素並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>64 位元帶正負號之整數形式的元素內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容不能轉換為 64 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>以 <see cref="T:System.Object" /> 的形式，讀取目前項目並傳回內容。</summary>
      <returns>最合適型別的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的型別是清單型別，則這個方法會傳回適當型別之 Boxed 物件的陣列。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Object" /> 的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>最合適型別的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的型別是清單型別，則這個方法會傳回適當型別之 Boxed 物件的陣列。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
 -或-  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>以非同步方式與 <see cref="T:System.Object" /> 的形式，讀取目前項目並傳回內容。</summary>
      <returns>最合適型別的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的型別是清單型別，則這個方法會傳回適當型別之 Boxed 物件的陣列。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>以 <see cref="T:System.String" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <returns>
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.String" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.String" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException">目前的項目包含子項目。  
-或- 
項目內容不能轉換為 <see cref="T:System.String" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>以非同步方式與 <see cref="T:System.String" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <returns>
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
      <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>讀取純文字項目。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <returns>讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
      <exception cref="T:System.Xml.XmlException">下一個內容節點不是開始標記。或找到的項目未包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>檢查<see cref="P:System.Xml.XmlReader.Name" />屬性找到的項目之前讀取純文字的項目符合指定的字串。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <param name="name">要進行檢查的名稱。</param>
      <returns>讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
      <exception cref="T:System.Xml.XmlException">如果下一個內容節點不是開始標記。如果項目<see langword="Name" />不符合指定的引數; 或如果找到的項目不包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>檢查<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />項目的屬性找到符合的指定的字串之前讀取純文字的項目。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <param name="localname">要進行檢查的區域名稱。</param>
      <param name="ns">要進行檢查的命名空間 URI。</param>
      <returns>讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
      <exception cref="T:System.Xml.XmlException">如果下一個內容節點不是開始標記。如果項目<see langword="LocalName" />或<see langword="NamespaceURI" />不符合指定的引數; 或如果找到的項目不包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>檢查目前節點為結尾標記，並使讀取器前進至下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException">目前的節點不是結束標記，或如果輸入資料流中遇到不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>在衍生類別中覆寫時，將所有的內容當做字串讀取，包括標記。</summary>
      <returns>目前節點中所有的 XML 內容，包括標記。 如果目前節點沒有子節點，則傳回空字串。  
 如果目前節點既不是項目也不是屬性，則傳回空字串。</returns>
      <exception cref="T:System.Xml.XmlException">XML 不是語式正確，或剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>以字串形式非同步讀取所有內容，包括標記。</summary>
      <returns>目前節點中所有的 XML 內容，包括標記。 如果目前節點沒有子節點，則傳回空字串。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>在衍生類別中覆寫時，讀取代表這個節點及其所有子節點的內容，包括標記。</summary>
      <returns>如果讀取器位於項目或屬性節點上，這個方法會傳回目前節點及其所有子節點的所有 XML 內容，包括標記；否則傳回空字串。</returns>
      <exception cref="T:System.Xml.XmlException">XML 不是語式正確，或剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>非同步讀取表示這個節點及其所有子系的內容，包括標記。</summary>
      <returns>如果讀取器位於項目或屬性節點上，這個方法會傳回目前節點及其所有子節點的所有 XML 內容，包括標記；否則傳回空字串。</returns>
      <exception cref="T:System.InvalidOperationException">在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>檢查目前節點為項目，並使讀取器前進至下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException">輸入資料流中遇到不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>檢查目前的內容節點是否具有的項目指定<see cref="P:System.Xml.XmlReader.Name" />並使讀取器前進至下一個節點。</summary>
      <param name="name">項目的限定名稱。</param>
      <exception cref="T:System.Xml.XmlException">輸入資料流中遇到不正確的 XML。  
-或- 
<see cref="P:System.Xml.XmlReader.Name" />的項目不符合給定<paramref name="name" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>檢查目前的內容節點是否具有的項目指定<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />並使讀取器前進至下一個節點。</summary>
      <param name="localname">項目的本機名稱。</param>
      <param name="ns">項目的命名空間 URI。</param>
      <exception cref="T:System.Xml.XmlException">輸入資料流中遇到不正確的 XML。  
-或- 
<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />屬性找到的項目不符合指定的引數。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>在衍生類別中覆寫時，取得讀取器的狀態。</summary>
      <returns>其中一個列舉值，這個值指定讀取器的狀態。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>在衍生類別中覆寫時，將項目或文字節點的內容當做字串讀取。 不過，我們建議您改用<see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <returns>項目的內容或空字串。</returns>
      <exception cref="T:System.Xml.XmlException">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>傳回新<see langword="XmlReader" />可以用來讀取目前的節點及其所有子系的執行個體。</summary>
      <returns>新的 XML 讀取器執行個體設定為<see cref="F:System.Xml.ReadState.Initial" />。 呼叫<see cref="M:System.Xml.XmlReader.Read" />方法前呼叫的節點上放置新讀取器<see cref="M:System.Xml.XmlReader.ReadSubtree" />方法。</returns>
      <exception cref="T:System.InvalidOperationException">呼叫這個方法時，XML 讀取器未位於項目上。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>往前推進<see cref="T:System.Xml.XmlReader" />下一個子系的項目，具有指定限定名稱。</summary>
      <param name="name">您要移至之項目的限定名稱。</param>
      <returns>
        <see langword="true" />如果找到相符的子系項目否則<see langword="false" />。 如果找不到相符的子元素，<see cref="T:System.Xml.XmlReader" />位於結束標記 (<see cref="P:System.Xml.XmlReader.NodeType" />是<see langword="XmlNodeType.EndElement" />) 的項目。  
如果<see cref="T:System.Xml.XmlReader" />不位於項目上時<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />呼叫，這個方法會傳回<see langword="false" />和位置<see cref="T:System.Xml.XmlReader" />則不會變更。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">參數為空字串。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>往前推進<see cref="T:System.Xml.XmlReader" />下一個子系的項目，使用指定的區域名稱和命名空間 URI。</summary>
      <param name="localName">您要移至之項目的區域名稱。</param>
      <param name="namespaceURI">您要移至之項目的命名空間 URI。</param>
      <returns>
        <see langword="true" />如果找到相符的子系項目否則<see langword="false" />。 如果找不到相符的子元素，<see cref="T:System.Xml.XmlReader" />位於結束標記 (<see cref="P:System.Xml.XmlReader.NodeType" />是<see langword="XmlNodeType.EndElement" />) 的項目。  
如果<see cref="T:System.Xml.XmlReader" />不位於項目上時<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />呼叫，這個方法會傳回<see langword="false" />和位置<see cref="T:System.Xml.XmlReader" />則不會變更。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException">這兩個參數值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>在找到具有指定限定名稱的項目之前讀取。</summary>
      <param name="name">項目的限定名稱。</param>
      <returns>
        <see langword="true" />如果找到相符的項目否則<see langword="false" />和<see cref="T:System.Xml.XmlReader" />是在檔案結尾的狀態。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">參數為空字串。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>在找到具有指定區域名稱和命名空間 URI 的項目之前讀取。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>
        <see langword="true" />如果找到相符的項目否則<see langword="false" />和<see cref="T:System.Xml.XmlReader" />是在檔案結尾的狀態。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException">這兩個參數值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>往前推進<see langword="XmlReader" />指定限定名稱的下一個同層級項目。</summary>
      <param name="name">您要移至之同層級項目的限定名稱。</param>
      <returns>
        <see langword="true" />如果找到相符的同層級項目否則<see langword="false" />。 如果找不到相符的同層級項目，則 <see langword="XmlReader" /> 會置於父項目的結束標記上 (<see cref="P:System.Xml.XmlReader.NodeType" /> 為 <see langword="XmlNodeType.EndElement" />)。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">參數為空字串。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>將 <see langword="XmlReader" /> 前移到下一個具有指定區域名稱和命名空間 URI 的同層級項目。</summary>
      <param name="localName">您要移至之同層級項目的本機名稱。</param>
      <param name="namespaceURI">您要移至之同層級項目的命名空間 URI。</param>
      <returns>如果找到相符的同層級項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果找不到相符的同層級項目，則 <see langword="XmlReader" /> 會置於父項目的結束標記上 (<see cref="P:System.Xml.XmlReader.NodeType" /> 為 <see langword="XmlNodeType.EndElement" />)。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException">這兩個參數值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>讀取 XML 文件中內嵌之大量文字資料流。</summary>
      <param name="buffer">做為寫入文字內容之緩衝區的字元陣列。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區位移位置<see cref="T:System.Xml.XmlReader" />可以開始複製結果。</param>
      <param name="count">要複製至緩衝區中的最大字元數目。 從這個方法傳回所複製的實際字元數目。</param>
      <returns>讀入緩衝區的字元數目。 當不再有文字內容時，會傳回零的值。</returns>
      <exception cref="T:System.InvalidOperationException">目前的節點沒有值 (<see cref="P:System.Xml.XmlReader.HasValue" /> 為 <see langword="false" />)。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區索引或索引 + count 大於配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">XML 資料格式不正確。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步的方式讀取 XML 文件中內嵌之大量文字資料流。</summary>
      <param name="buffer">做為寫入文字內容之緩衝區的字元陣列。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區位移位置<see cref="T:System.Xml.XmlReader" />可以開始複製結果。</param>
      <param name="count">要複製至緩衝區中的最大字元數目。 從這個方法傳回所複製的實際字元數目。</param>
      <returns>讀入緩衝區的字元數目。 當不再有文字內容時，會傳回零的值。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>當在衍生類別中覆寫時，會解析實體參考<see langword="EntityReference" />節點。</summary>
      <exception cref="T:System.InvalidOperationException">讀取器並非位於 <see langword="EntityReference" /> 節點上；這個讀取器實作無法解析實體 (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> 傳回 <see langword="false" />)。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>取得在結構描述驗證之後已指派給目前節點的結構描述資訊。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。 可以在項目、屬性或具有非 null <see cref="P:System.Xml.XmlReader.ValueType" /> (具型別值) 之文字節點上設定結構描述資訊。  
如果目前節點不屬於上述其中一個節點型別，或 <see langword="XmlReader" /> 執行個體不會報告結構描述資訊，則這個屬性會傳回 <see langword="null" />。  
如果這個屬性是從 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 物件呼叫的，則這個屬性一定會傳回 <see langword="null" />。 這些 <see langword="XmlReader" /> 實作不會透過 <see langword="SchemaInfo" /> 屬性公開結構描述資訊。  
   
 如果您需要取得項目的後結構描述驗證資訊集 (PSVI)，請將讀取器置於項目的結束標記，而非開始標記。 您可以透過讀取器的 <see langword="SchemaInfo" /> 屬性取得 PSVI。 如果驗證讀取器是透過將 <see cref="Overload:System.Xml.XmlReader.Create" /> 並將 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 屬性設定為 <see cref="F:System.Xml.ValidationType.Schema" /> 所建立，則該讀取器必須置於項目的結束標記，才會具有項目的完整 PSVI。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>取得 <see cref="T:System.Xml.XmlReaderSettings" /> 物件，用於建立這個 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReaderSettings" /> 物件，用於建立這個讀取器執行個體。 如果未使用 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法建立這個讀取器，則這個屬性會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>略過目前節點的子節點。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>以非同步的方式略過目前節點的子節點。</summary>
      <returns>目前節點。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>在衍生類別中覆寫時，取得目前節點的文字值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 有其他節點類型都會傳回 <see langword="String.Empty" />。  
  節點類型 
  值 
 <see langword="Attribute" /> 屬性的值。  

 <see langword="CDATA" /> CDATA 區段的內容。  

 <see langword="Comment" /> 註解的內容。  

 <see langword="DocumentType" /> 內部子集。  

 <see langword="ProcessingInstruction" /> 全部內容 (目標除外)。  

 <see langword="SignificantWhitespace" /> 在混合內容模型中標記間的泛空白字元。  

 <see langword="Text" /> 文字節點的內容。  

 <see langword="Whitespace" /> 標記之間的泛空白字元。  

 <see langword="XmlDeclaration" /> 宣告的內容。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>取得目前節點的 Common Language Runtime (CLR) 型別。</summary>
      <returns>CLR 型別，其對應至節點的具型別值。 預設為 <see langword="System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>當在衍生類別中覆寫時，取得目前<see langword="xml:lang" />範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>當在衍生類別中覆寫時，取得目前<see langword="xml:space" />範圍。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>指定要在由 <see cref="T:System.Xml.XmlReader" /> 方法建立的 <see cref="Overload:System.Xml.XmlReader.Create" /> 物件上支援的一組功能。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>取得或設定非同步 <see cref="T:System.Xml.XmlReader" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <returns>如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>取得或設定值，綁表示是否要執行字元檢查。</summary>
      <returns>
        <see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設為 <see langword="true" />。  
   
 如果 <see cref="T:System.Xml.XmlReader" /> 正在處理文字資料，則它會始終檢查 XML 名稱和文字內容是否有效，而不論屬性設定。 將 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> 設為 <see langword="false" /> 會關閉字元實體參考的字元檢查。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>建立 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體的複本。</summary>
      <returns>複製的 <see cref="T:System.Xml.XmlReaderSettings" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>取得或設定值，指出是否應該在關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />。</summary>
      <returns>
        <see langword="true" /> 表示關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 要遵循的一致性層級。</summary>
      <returns>其中一個列舉值，指定 XML 讀取器將強制執行的一致性層級。 預設為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>取得或設定決定 DTD 處理的值。</summary>
      <returns>其中一個列舉值，決定 DTD 處理方式。 預設為 <see cref="F:System.Xml.DtdProcessing.Prohibit" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>取得或設定值，指出是否忽略註解。</summary>
      <returns>
        <see langword="true" /> 表示忽略註解，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>取得或設定值，指出是否忽略處理指示。</summary>
      <returns>
        <see langword="true" /> 表示忽略處理指示，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>取得或設定值，指出是否忽略不重要的空白字元。</summary>
      <returns>
        <see langword="true" /> 表示忽略泛空白字元，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行號位移。</summary>
      <returns>行號位移。 預設值為 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行位置位移。</summary>
      <returns>行位置位移。 預設值為 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>取得或設定值，指出文件中產生自展開實體的最大可允許字元數。</summary>
      <returns>來自展開實體的最大可允許字元數。 預設值為 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>取得或設定值，指出 XML 文件中最大可允許字元數。 零 (0) 的值表示對 XML 文件大小沒有限制。 非零值指定大小上限，以字元為單位。</summary>
      <returns>XML 文件的最大可允許字元數。 預設值為 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>取得或設定用來比較已擷取字串的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" />，儲存使用這個 <see cref="T:System.Xml.XmlReader" /> 物件建立之所有 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體所使用的所有原子化字串。  
預設為 <see langword="null" />。 如果這個值為 <see langword="null" />，則建立的 <see cref="T:System.Xml.XmlReader" /> 執行個體會使用新的空 <see cref="T:System.Xml.NameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>取得或設定值，表示是否禁止物件類型定義 (DTD) 處理。 這個屬性已經過時。 請改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns>
        <see langword="true" /> 表示禁止 DTD 處理，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>將設定類別的成員重設為其預設值。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>取得或設定要在執行結構描述驗證時使用的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns>執行結構描述驗證時使用的<see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為空的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>發生於讀取器遇到驗證錯誤時。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>取得或設定值，表示結構描述驗證設定。 這個設定會套用至可驗證結構描述的 <see cref="T:System.Xml.XmlReader" /> 物件 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 屬性設為 <see langword="ValidationType.Schema" />)。</summary>
      <returns>列舉值的位元組合, 指定驗證選項。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> 預設為啟用。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> 預設為停用。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.XmlReader" /> 是否會在讀取時執行驗證或類型指派。</summary>
      <returns>其中一個 <see cref="T:System.Xml.ValidationType" /> 值，指出 XmlReader 在讀取時是否執行驗證或型別指派。 預設為 <see langword="ValidationType.None" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>設定用來存取外部文件的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" />，用於存取外部文件。 如果設為 <see langword="null" />，則在 <see cref="T:System.Xml.XmlException" /> 嘗試存取外部資源時會擲回 <see cref="T:System.Xml.XmlReader" />。 預設為沒有認證的新 <see cref="T:System.Xml.XmlUrlResolver" />。  從 .NET Framework 4.5.2 開始, 此設定的預設值<see langword="null" />為。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>解析由統一資源識別元 (URI) 所命名的外部 XML 資源。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>在衍生類別中覆寫時，設定用來驗證 Web 要求的認證資訊。</summary>
      <returns>用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>在衍生類別中覆寫時，對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 System.IO.Stream 物件。</param>
      <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 不是 <see langword="Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>以非同步的方式將 URI 對應至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>在衍生類別中覆寫時，從基底 (Base) 和相對 URI 來解析絕對 URI。</summary>
      <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <returns>絕對 URI，如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>讓解析程式傳回 <see cref="T:System.IO.Stream" /> 以外的類型。</summary>
      <param name="absoluteUri">URI。</param>
      <param name="type">要傳回的類型。</param>
      <returns>如果支援 <paramref name="type" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>以包裝 <see cref="T:System.Xml.XmlResolver" /> 物件，並限制基礎 <see cref="T:System.Xml.XmlResolver" /> 所能存取的資源，來協助保護其他 <see cref="T:System.Xml.XmlResolver" /> 實作的安全性。</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>使用提供的 <see cref="T:System.Xml.XmlSecureResolver" /> 和 URL，初始化 <see cref="T:System.Xml.XmlResolver" /> 類別的新執行個體。</summary>
      <param name="resolver">
        <see cref="T:System.Xml.XmlSecureResolver" /> 所包裝的 XML 解析程式。</param>
      <param name="securityUrl">用來建立 <see cref="T:System.Security.PermissionSet" /> 的 URL，將會套用至基礎 <see cref="T:System.Xml.XmlResolver" />。 <see cref="T:System.Xml.XmlSecureResolver" /> 會先呼叫已建立 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 上的 <see cref="T:System.Security.PermissionSet" />，然後才呼叫基礎 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> 上的 <see cref="T:System.Xml.XmlResolver" />。</param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>設定用以驗證 Web 要求的認證資訊。</summary>
      <returns>用以驗證 Web 要求的認證。 <see cref="T:System.Xml.XmlSecureResolver" /> 會在基礎 <see cref="T:System.Xml.XmlResolver" /> 上設定指定的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see cref="T:System.Xml.XmlSecureResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>對應 URI 至包含實際資源的物件。 這個方法藉由在呼叫基礎 <see cref="T:System.Security.PermissionSet" /> 上的 <see langword="GetEntity" /> 之前，先呼叫 <see cref="M:System.Security.PermissionSet.PermitOnly" />，暫時設定建立在建構函式 (Constructor) 中的 <see cref="T:System.Xml.XmlResolver" /> 以開啟資源。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" /> 來傳回的資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>以非同步的方式將 URI 對應至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" /> 來傳回的資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>藉由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" />，從基底和相對 URI 中解析絕對 URI。</summary>
      <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <returns>如果不能解析相對 URI (透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" /> 傳回)，則為絕對 URI 或 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>表示混合內容節點中標記間的空白區，或 xml:space= 'preserve' 範圍內的空白區。 這個也可以稱為顯著的空白。</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 類別的新執行個體。</summary>
      <param name="strData">節點的空白字元。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於顯著的空白節點，不論參數設定為何，複製的節點永遠會包含資料值。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlSignificantWhitespace" /> 節點，這個屬性傳回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 <see langword="XmlSignificantWhitespace" /> 節點，這個屬性傳回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>對於 <see langword="XmlSignificantWhitespace" /> 節點，這個值為 XmlNodeType.SignificantWhitespace。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>取得目前節點的父節點。</summary>
      <returns>目前節點的 <see cref="T:System.Xml.XmlNode" /> 父節點。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary>取得這個節點的前置文字節點。</summary>
      <returns>傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>節點中找到的空白字元。</returns>
      <exception cref="T:System.ArgumentException">將 <see langword="Value" /> 設定為無效的空白字元。</exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>取得目前的 <see langword="xml:space" /> 範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <see langword="xml:space" /> 範圍等於 <see langword="default" />。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>無 <see langword="xml:space" /> 範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <see langword="xml:space" /> 範圍等於 <see langword="preserve" />。</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>表示項目或屬性的文字內容。</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlText" /> 類別的新執行個體。</summary>
      <param name="strData">節點的內容；請參閱 <see cref="P:System.Xml.XmlText.Value" /> 屬性。</param>
      <param name="doc">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於文字節點，這個屬性傳回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於文字節點，這個屬性傳回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>對於文字節點，這個值為 XmlNodeType.Text。</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary>取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns>表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary>取得這個節點的前置文字節點。</summary>
      <returns>傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>在指定的位移將這個節點分隔成兩個節點，使這兩個節點在樹狀中都保持同層級 (Sibling)。</summary>
      <param name="offset">分隔節點的位移。</param>
      <returns>新節點。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>文字節點的內容。</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 <see langword="XmlText" /> 節點沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>表示提供快速、非快取、順向 (Forward-only) 存取 XML 資料的讀取器 (Reader)。  
從 .NET Framework 2.0 開始，建議您改用 <see cref="T:System.Xml.XmlReader" /> 類別。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>初始化 <see langword="XmlTextReader" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>使用指定的資料流初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="input">包含要讀取之 XML 資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>使用指定的資料流和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="input">包含要讀取之 XML 資料的資料流。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>使用指定的資料流、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment">包含要剖析之 XML 片段的資料流。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也會決定片段可包含的內容。 (請參閱下表。)</param>
      <param name="context">要剖析的 <paramref name="xmlFragment" /> 所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是 Element、Attribute 或 Document <see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="input">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="input">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>使用指定的檔案，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url">包含 XML 資料之檔案的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <exception cref="T:System.IO.FileNotFoundException">找不到指定的檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到部分檔名或目錄。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 為空字串。</exception>
      <exception cref="T:System.Net.WebException">無法解析遠端檔名。  
 -或-  
 處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>使用指定的 URL 和資料流，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <param name="input">包含要讀取之 XML 資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>使用指定的 URL、資料流和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。 如果 <paramref name="url" /> 為 <see langword="null" />，則會將 <see langword="BaseURI" /> 設為 <see langword="String.Empty" />。</param>
      <param name="input">包含要讀取之 XML 資料的資料流。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 或 <paramref name="nt" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>使用指定的 URL 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <param name="input">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>使用指定的 URL、<see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="url">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。 如果 <paramref name="url" /> 為 <see langword="null" />，則會將 <see langword="BaseURI" /> 設為 <see langword="String.Empty" />。</param>
      <param name="input">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>使用指定的檔案和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url">包含要讀取之 XML 資料的檔案的 URL。</param>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到指定的檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到部分檔名或目錄。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> 為空字串。</exception>
      <exception cref="T:System.Net.WebException">無法解析遠端檔名。  
 -或-  
 處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>使用指定的字串、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment">包含要剖析之 XML 片段的字串。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也會決定片段字串可包含的內容。 (請參閱下表。)</param>
      <param name="context">要剖析的 <paramref name="xmlFragment" /> 所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是 <see langword="Element" />、<see langword="Attribute" /> 或 <see langword="Document" /><see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>取得目前節點的屬性數目。</summary>
      <returns>目前節點的屬性數目。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>取得目前節點的基底 (Base) URI。</summary>
      <returns>目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>取得值，這個值表示 <see cref="T:System.Xml.XmlTextReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns>如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>取得值，表示 <see cref="T:System.Xml.XmlTextReader" /> 是否會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <returns>如果 <see cref="T:System.Xml.XmlTextReader" /> 會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 類別一律會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns>如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlTextReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 <see langword="Closed" />。</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>取得 XML 文件中目前節點的深度。</summary>
      <returns>XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>取得或設定 <see cref="T:System.Xml.DtdProcessing" /> 列舉。</summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 列舉。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>取得文件的編碼方式。</summary>
      <returns>編碼值。 如果編碼屬性不存在，而且沒有位元組順序標記，則此值預設為 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>取得或設定值，表示讀取器如何處理實體。</summary>
      <returns>其中一個 <see cref="T:System.Xml.EntityHandling" /> 值。 如果未指定 <see langword="EntityHandling" />，則會預設為 <see langword="EntityHandling.ExpandCharEntities" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns>如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>取得具有指定索引的屬性值。</summary>
      <param name="i">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <returns>指定的屬性值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>取得具有指定名稱的屬性值。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>取得集合，包含目前範圍內的所有命名空間。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 物件，包含目前範圍內的所有命名空間。 如果讀取器不位於項目上，則會傳回空的字典 (沒有命名空間)。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>取得已緩衝之 XML 的其他部分。</summary>
      <returns>包含已緩衝的 XML 的其他部分的 <see cref="T:System.IO.TextReader" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns>如果類別可以傳回行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>取得值，表示目前的節點是否可以具有 <see langword="String.Empty" /> 之外的其他 <see cref="P:System.Xml.XmlTextReader.Value" />。</summary>
      <returns>如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>取得值，表示目前節點是否是產生自 DTD 或結構描述中定義之預設值的屬性。</summary>
      <returns>這個屬性永遠會傳回 <see langword="false" />。 (<see cref="T:System.Xml.XmlTextReader" /> 不會展開預設屬性)。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns>
        <see langword="true" />如果目前<see cref="P:System.Xml.XmlTextReader.NodeType" />節點是以結尾<see langword="XmlNodeType.Element" /><c>/的元素 (等於),則為,否則為&gt;</c><see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>取得目前的行號。</summary>
      <returns>目前的行號。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>取得目前的行位置。</summary>
      <returns>目前的行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>取得目前節點的區域名稱。</summary>
      <returns>目前節點名稱的前置詞被移除。 例如, <see langword="LocalName" /><see langword="book" />適用于元素<c>&lt;bk: book&gt;</c>。  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。 不必擷取這個字串。</param>
      <returns>前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> 屬性是設定為 <see langword="true" />，而且 <paramref name="prefix" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>移至具有指定索引的屬性。</summary>
      <param name="i">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>移至具有指定名稱的屬性。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>移至具有指定的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>移至包含目前屬性節點的項目。</summary>
      <returns>如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>移至第一個屬性。</summary>
      <returns>如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>移至下一個屬性。</summary>
      <returns>如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns>目前節點的限定名稱。 例如, <see langword="Name" /><see langword="bk:book" />適用于元素<c>&lt;bk: book&gt;</c>。  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlTextReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  節點類型 
  名稱 
 <see langword="Attribute" /> 屬性的名稱。  

 <see langword="DocumentType" /> 文件類型名稱。  

 <see langword="Element" /> 標記名稱。  

 <see langword="EntityReference" /> 所參考的實體名稱。  

 <see langword="ProcessingInstruction" /> 處理指示的目標。  

 <see langword="XmlDeclaration" /><see langword="xml" /> 常值 (Literal) 字串。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>取得或設定值，指出是否支援命名空間。</summary>
      <returns>如果支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
      <exception cref="T:System.InvalidOperationException">在已發生讀取作業之後設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 不是 <see langword="ReadState.Initial" />)。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <returns>目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>取得或設定值，指示是否將空白字元與屬性值正常化。</summary>
      <returns>若要正常化，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">在讀取器關閉時設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 為 <see langword="ReadState.Closed" />)。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns>與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>取得或設定值，指出是否允許 DTD 處理。 這個屬性已經過時。 請改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns>
        <see langword="true" /> 表示不允許 DTD 處理，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>取得用來括住屬性節點值的引號字元。</summary>
      <returns>用來括住屬性節點值的引號字元 (" 或 ')。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>從資料流讀取下一個節點。</summary>
      <returns>如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException">剖析 XML 時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns>如果傳回的是節點，則為 <see langword="true" />。  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
針對含有 <see langword="String.Empty" /> 值的單一節點，空白的屬性 (例如 <c>misc=""</c>) 會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>解碼 Base64 並傳回已解碼的二進位位元組。</summary>
      <param name="array">做為寫入文字內容之緩衝區的字元陣列。</param>
      <param name="offset">對這個陣列進行以零為起始的索引，這個陣列指定這個方法可由何處開始寫入緩衝區。</param>
      <param name="len">要寫入緩衝區的位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.Xml.XmlException">Base64 序列無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />&lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>解碼 <see langword="BinHex" /> 並傳回已解碼的二進位位元組。</summary>
      <param name="array">位元組陣列，做為寫入已解碼之二進位位元組的緩衝區。</param>
      <param name="offset">對這個陣列進行以零為起始的索引，這個陣列指定這個方法可由何處開始寫入緩衝區。</param>
      <param name="len">要寫入緩衝區的位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.Xml.XmlException">
        <see langword="BinHex" /> 序列無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 的值是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />&lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>將項目的文字內容讀入字元緩衝區中。 這個方法設計可藉由連續呼叫來讀取內嵌文字的大量資料流。</summary>
      <param name="buffer">做為寫入文字內容之緩衝區的字元陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中這個方法可以開始寫入文字內容的位置。</param>
      <param name="count">要寫入 <paramref name="buffer" /> 的字元數。</param>
      <returns>已讀取的字元數。 如果讀取器不在項目上，或者目前內容中沒有其他可傳回的文字內容，則這個數目可為 <see langword="0" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 大於 <paramref name="buffer" /> 中指定的空間 (緩衝區大小 - <paramref name="index" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />
        <see langword="&lt; 0" /> 或 <paramref name="count" /><see langword="&lt; 0" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 <see langword="Base64" /> 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 <see langword="BinHex" /> 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 實作不支援這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>取得讀取器的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>將項目或文字節點的內容當做字串讀取。</summary>
      <returns>項目或文字節點的內容。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
 <see langword="Note:" /> 文字節點可為項目或屬性文字節點。</returns>
      <exception cref="T:System.Xml.XmlException">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">嘗試了無效的作業。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>將讀取器的狀態重設為 ReadState.Initial。</summary>
      <exception cref="T:System.InvalidOperationException">如果使用 <see cref="T:System.Xml.XmlParserContext" /> 來建構讀取器，則呼叫 <see langword="ResetState" />。</exception>
      <exception cref="T:System.Xml.XmlException">單一資料流中的文件不會共用同一種編碼方式。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>略過目前節點的子節點。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，包含目前範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">您要尋找其命名空間 URI 的前置詞。</param>
      <returns>對應至前置詞的命名空間 URI，如果前置詞未對應至命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">您要尋找其前置詞的命名空間 URI。</param>
      <returns>對應至命名空間 URI 的前置詞，如果命名空間 URI 未對應至前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>取得目前節點的文字值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlTextReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 有其他節點類型都會傳回 <see langword="String.Empty" />。  
  節點類型 
  值 
 <see langword="Attribute" /> 屬性的值。  

 <see langword="CDATA" /> CDATA 區段的內容。  

 <see langword="Comment" /> 註解的內容。  

 <see langword="DocumentType" /> 內部子集。  

 <see langword="ProcessingInstruction" /> 全部內容 (目標除外)。  

 <see langword="SignificantWhitespace" /><see langword="xml:space" />= 'preserve' 範圍內的空白字元。  

 <see langword="Text" /> 文字節點的內容。  

 <see langword="Whitespace" /> 標記之間的泛空白字元。  

 <see langword="XmlDeclaration" /> 宣告的內容。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>取得或設定值，指定如何處理空白字元。</summary>
      <returns>其中一個 <see cref="T:System.Xml.WhitespaceHandling" /> 值。 預設值為 <see langword="WhitespaceHandling.All" /> (傳回 <see langword="Whitespace" /> 與 <see langword="SignificantWhitespace" /> 節點)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值無效。</exception>
      <exception cref="T:System.InvalidOperationException">在讀取器關閉時設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 為 <see langword="ReadState.Closed" />)。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>設定用來解析 DTD 參考的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns>要使用的 <see langword="XmlResolver" />。 如果設定為 <see langword="null" />，就不會解析外部資源。  
在 .NET Framework 的 1.1 版中，必須完全信任呼叫端才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>表示提供產生資料流或檔案的快速、非快取、順向方法的寫入器，這些資料流或檔案中包含符合 W3C Extensible Markup Language (XML) 1.0 與 XML Recommendation 中命名空間的 XML 資料。  
從 .NET Framework 2.0 開始，建議您改用 <see cref="T:System.Xml.XmlWriter" /> 類別。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的資料流和編碼方式，建立 <see langword="XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="w">要寫入其中的資料流。</param>
      <param name="encoding">要產生的編碼方式。 如果編碼方式為 <see langword="null" />，它會以 UTF-8 格式寫出資料流，並忽略來自 <see langword="ProcessingInstruction" /> 的編碼方式屬性。</param>
      <exception cref="T:System.ArgumentException">不支援該編碼方式，或無法寫入至資料流。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.IO.TextWriter" /> 來建立 <see langword="XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="w">要寫入的目標 <see langword="TextWriter" />。 它假設已將 <see langword="TextWriter" /> 設定為正確的編碼方式。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>使用指定的檔案建立 <see cref="T:System.Xml.XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="filename">要寫入至的檔名。 如果這個檔案存在，就會將它截斷並以新內容將其覆寫。</param>
      <param name="encoding">要產生的編碼方式。 如果編碼方式為 <see langword="null" />，它會以 UTF-8 格式寫出檔案，並忽略來自 <see langword="ProcessingInstruction" /> 的編碼方式屬性。</param>
      <exception cref="T:System.ArgumentException">編碼方式不受支援、檔案名稱是空的、只含有泛空白字元 (White Space)，或含有一個或多個無效字元。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存取被拒絕。</exception>
      <exception cref="T:System.ArgumentNullException">檔案名稱為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到要寫入的目錄。</exception>
      <exception cref="T:System.IO.IOException">檔案名稱包含關於檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>取得基礎資料流物件。</summary>
      <returns>
        <see langword="XmlTextWriter" /> 正在寫入的資料流，如果使用不是從 <see cref="T:System.IO.TextWriter" /> 的 <see cref="T:System.IO.StreamWriter" /> 類別來建構 <see langword="null" />，則為 <see langword="XmlTextWriter" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>關閉這個資料流與基礎資料流。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>表示格式化輸出的方式。</summary>
      <returns>其中一個 <see cref="T:System.Xml.Formatting" /> 值。 預設值為 <see langword="Formatting.None" /> (無特殊格式)。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>取得或設定當 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 設定為 <see langword="Formatting.Indented" /> 時，每一層級要寫入多少縮排字元。</summary>
      <returns>每一層級的 <see langword="IndentChars" /> 數目。 預設值為 2。</returns>
      <exception cref="T:System.ArgumentException">設定這個屬性為負數值。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>取得或設定當 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 設為 <see langword="Formatting.Indented" /> 時用於縮排的字元。</summary>
      <returns>用來縮排的字元。 預設值是空白。  
   
 <see langword="XmlTextWriter" /> 可讓您將這個屬性設定為任何字元。 若要確保有效的 XML，您必須指定有效的空白字元、0x9、0x10、0x13 或 0x20。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</summary>
      <param name="ns">想要尋找其前置詞的命名空間 URI。</param>
      <returns>符合的前置詞。 如果在目前範圍中找不到符合的命名空間 URI，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>取得或設定值，指出是否支援命名空間。</summary>
      <returns>若要支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。  
預設為 <see langword="true" />。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see langword="WriteState.Start" /> 狀態時才能變更這個屬性。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>取得或設定用來括住屬性值的字元。</summary>
      <returns>用來括住屬性值的字元。 這必須是單引號 (&amp;#39;)或雙引號 (&amp;#34;)。 預設為雙引號。</returns>
      <exception cref="T:System.ArgumentException">設定這個屬性為單引號或雙引號以外的值。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>以 base64 編碼指定的二進位位元組並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置，指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>以 Binhex 編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已經關閉。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text">要放在 CDATA 區塊中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>強制產生指定的 Unicode 字元值的字元實體。</summary>
      <param name="ch">要產生字元實體的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentException">字元是位在 Surrogate 字組字元範圍 <see langword="0xd800" /> - <see langword="0xdfff" /> 中；否則文字會產生非正確格式的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>一次將文字寫入一個緩衝區。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已經關閉。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text">要放入註解中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 是 null，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <exception cref="T:System.InvalidOperationException">從初構的外部 (在根項目之後) 呼叫這個方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />  
-或- 
<paramref name="name" /> 的值將導致無效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>關閉先前的 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼叫。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <exception cref="T:System.ArgumentException">XML 文件無效。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>關閉一個項目並快顯對應的命名空間範圍。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>寫出如 <see langword="&amp;name;" /> 的實體參考。</summary>
      <param name="name">實體參考的名稱。</param>
      <exception cref="T:System.ArgumentException">此文字將產生非語式正確的 XML 文件，或是 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>關閉一個項目並快顯對應的命名空間範圍。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議的有效名稱。</summary>
      <param name="name">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名稱，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議的有效 <see langword="NmToken" />。</summary>
      <param name="name">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 <see langword="NmToken" />，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">處理指示的名稱。</param>
      <param name="text">要包含在處理指示中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。  
 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
在呼叫 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> 之後，使用這個方法來建立 XML 宣告。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName">要寫入的區域名稱。</param>
      <param name="ns">與這個名稱關聯的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
 根據 W3C 命名空間規格，<paramref name="localName" /> 不是有效的名稱。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data">包含要寫入之文字的字串。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>寫入屬性的開頭。</summary>
      <param name="prefix">屬性的 <see langword="Namespace" /> 前置詞。</param>
      <param name="localName">屬性的 <see langword="LocalName" />。</param>
      <param name="ns">屬性的 <see langword="NamespaceURI" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>使用版本「1.0」寫入 XML 宣告。</summary>
      <exception cref="T:System.InvalidOperationException">這不是在建構函式之後呼叫的第一個寫入方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>使用版本「1.0」寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <exception cref="T:System.InvalidOperationException">這不是在建構函式之後呼叫的第一個寫入方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>寫入指定的開頭標記，並使它與指定的命名空間及前置詞產生關聯。</summary>
      <param name="prefix">項目的命名空間前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">與項目相關聯的命名空間 URI。 如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入該前置詞。</param>
      <exception cref="T:System.InvalidOperationException">寫入器已關閉。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>取得寫入器的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Xml.WriteState" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>寫入指定的文字內容。</summary>
      <param name="text">要寫入的文字。</param>
      <exception cref="T:System.ArgumentException">文字字串包含無效的 Surrogate 字組。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar">低 Surrogate。 這必須是一個介於 <see langword="0xDC00" /> 和 <see langword="0xDFFF" /> 之間的值。</param>
      <param name="highChar">高 Surrogate。 這必須是一個介於 <see langword="0xD800" /> 和 <see langword="0xDBFF" /> 之間的值。</param>
      <exception cref="T:System.Exception">傳送無效的 Surrogate 字元字組。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>寫出指定的空白字元。</summary>
      <param name="ws">空白字元的字串。</param>
      <exception cref="T:System.ArgumentException">字串包含非泛空白字元。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns>目前的 <see langword="xml:lang" />；如果目前的範圍中沒有 <see langword="null" /> 則為 <see langword="xml:lang" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>取得 <see cref="T:System.Xml.XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns>
        <see langword="XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。  
  值 
  意義 
  無 
  如果 <see langword="xml:space" /> 範圍不存在，這是預設值。  

  預設 
  目前的範圍為 <see langword="xml:space" />="default"。  

  Preserve 
  目前的範圍為 <see langword="xml:space" />="preserve"。</returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>表示字串的 XML 型別。 這可允許將字串當做特殊 XML 型別來讀取，例如 CDATA 區段型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>No 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName 型別。</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>解析由統一資源識別元 (URI) 所命名的外部 XML 資源。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的快取原則。</summary>
      <returns>基礎 Web 要求的快取原則。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>設定用以驗證 Web 要求的認證資訊。</summary>
      <returns>用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlUrlResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>以非同步的方式將 URI 對應至包含實際資源的物件。</summary>
      <param name="absoluteUri">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role">目前未使用。</param>
      <param name="ofObjectToReturn">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的網路 Proxy。</summary>
      <returns>要用來存取網際網路資源的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>從基底和相對 URI 解析絕對 URI。</summary>
      <param name="baseUri">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <returns>絕對 URI；如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 是 <see langword="null" />，或 <paramref name="relativeUri" /> 是 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>表示讀取器，其提供文件類型定義 (DTD)、XML-Data Reduced (XDR) 結構描述，以及 XML 結構描述定義語言 (XSD) 驗證。  
這個類別已經過時。 從 .NET Framework 2.0 開始，我們建議使用 <see cref="T:System.Xml.XmlReaderSettings" /> 類別及 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法，來建立驗證 XML 讀取器。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>使用指定的值，初始化 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment">包含要剖析之 XML 片段的資料流。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這可以決定 XML 片段會包含哪些內容 (請參閱下表)。</param>
      <param name="context">要剖析的 XML 片段位置所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <see langword="xml:lang" /> 和 <see langword="xml:space" /> 範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表所列的其中一個節點型別。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>使用指定的值，初始化 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment">包含要剖析之 XML 片段的字串。</param>
      <param name="fragType">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也可以決定 XML 片段字串將會包含哪些內容 (請參閱下表)。</param>
      <param name="context">要剖析的 XML 片段位置所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.NameTable" />、編碼方式、命名空間範圍、目前的 xml:lang 和 xml:space 範圍。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> 不是下表所列的其中一個節點型別。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>初始化驗證從指定的 <see cref="T:System.Xml.XmlReader" /> 傳回之內容的 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="reader">在驗證時要自其讀取的 <see langword="XmlReader" />。 目前的實作只支援 <see cref="T:System.Xml.XmlTextReader" />。</param>
      <exception cref="T:System.ArgumentException">指定的讀取器不是 <see langword="XmlTextReader" />。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>取得目前節點的屬性數目。</summary>
      <returns>目前節點的屬性數目。 這個數目包括預設屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>取得目前節點的基底 (Base) URI。</summary>
      <returns>目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>取得值，這個值表示 <see cref="T:System.Xml.XmlValidatingReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns>如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> 類別會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns>如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlValidatingReader" /> 永遠傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 Closed。</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>取得 XML 文件中目前節點的深度。</summary>
      <returns>XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>取得文件的編碼屬性。</summary>
      <returns>編碼值。 如果編碼屬性不存在，而且沒有位元組順序標記，則會預設為 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>取得或設定值，表示讀取器如何處理實體。</summary>
      <returns>其中一個 <see cref="T:System.Xml.EntityHandling" /> 值。 若未指定 <see langword="EntityHandling" />，則會預設為 EntityHandling.ExpandEntities。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定無效的值。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns>如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>取得具有指定索引的屬性值。</summary>
      <param name="i">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <returns>指定的屬性值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>取得具有指定名稱的屬性值。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>針對具有指定的區域名稱和命名空間「統一資源識別元 (URI)」的屬性，取得其值。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns>如果類別可以傳回行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>取得值，表示目前的節點是否可以具有 String.Empty 之外的其他 <see cref="P:System.Xml.XmlValidatingReader.Value" />。</summary>
      <returns>如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>取得值，表示目前的節點是否為文件類型定義 (DTD)，或結構描述中定義之預設值所產生的屬性。</summary>
      <returns>如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns>
        <see langword="true" />如果目前<see cref="P:System.Xml.XmlValidatingReader.NodeType" />節點是以結尾<see langword="XmlNodeType.Element" /><c>/的元素 (等於),則為,否則為&gt;</c><see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>取得目前的行號。</summary>
      <returns>目前的行號。 這個屬性的起始值為 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>取得目前的行位置。</summary>
      <returns>目前的行位置。 這個屬性的起始值為 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>取得目前節點的區域名稱。</summary>
      <returns>目前節點名稱的前置詞被移除。 例如, <see langword="LocalName" /><see langword="book" />適用于元素<c>&lt;bk: book&gt;</c>。  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix">前置詞，您要解析其命名空間「統一資源識別元 (URI)」。 若要符合預設命名空間，請傳送空字串。</param>
      <returns>前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>移至具有指定索引的屬性。</summary>
      <param name="i">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>移至具有指定名稱的屬性。</summary>
      <param name="name">屬性的限定名稱 (Qualified Name)。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>移至具有指定區域名稱和命名空間「統一資源識別元 (URI)」的屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>移至包含目前屬性節點的項目。</summary>
      <returns>如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>移至第一個屬性。</summary>
      <returns>如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>移至下一個屬性。</summary>
      <returns>如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns>目前節點的限定名稱。 例如, <see langword="Name" /><see langword="bk:book" />適用于元素<c>&lt;bk: book&gt;</c>。  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  節點類型 
  名稱 
 <see langword="Attribute" /> 屬性的名稱。  

 <see langword="DocumentType" /> 文件類型名稱。  

 <see langword="Element" /> 標記名稱。  

 <see langword="EntityReference" /> 所參考的實體名稱。  

 <see langword="ProcessingInstruction" /> 處理指示的目標。  

 <see langword="XmlDeclaration" /><see langword="xml" /> 常值 (Literal) 字串。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>取得或設定值，指出是否支援命名空間。</summary>
      <returns>如果支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>取得讀取器所在之節點的命名空間「統一資源識別元 (URI)」(如全球資訊網協會 (W3C) 命名空間規格所定義)。</summary>
      <returns>目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns>
        <see langword="XmlNameTable" />，可讓您取得節點內字串的擷取版本。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>取得目前節點的類型。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns>與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>取得用來括住屬性節點值的引號字元。</summary>
      <returns>用來括住屬性節點值的引號字元 (" 或 ')。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>從資料流讀取下一個節點。</summary>
      <returns>如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns>如果傳回的是節點，則為 <see langword="true" />。  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
空白的屬性 (例如 <c>misc=""</c>) 會對含有 String.Empty 值的單一節點傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取內容，並傳回 BinHex 已解碼的二進位資料。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不支援 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>讀取項目，並將 BinHex 內容解碼。</summary>
      <param name="buffer">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index">緩衝區中開始複製結果的位移。</param>
      <param name="count">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <returns>寫入緩衝區的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException">內容無法轉換成要求的類型。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>取得用來建構這個 <see langword="XmlValidatingReader" /> 的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns>建構函式中指定的 <see langword="XmlReader" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>取得讀取器的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>將項目或文字節點的內容當做字串讀取。</summary>
      <returns>項目或文字節點的內容。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
   
 文字節點可為項目或屬性文字節點。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>取得指定的 XML 結構描述定義語言 (XSD) 類型的 Common Language Runtime 類型。</summary>
      <returns>指定 XML 結構描述類型的 Common Language Runtime 類型。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
      <exception cref="T:System.InvalidOperationException">讀取器不在 <see langword="EntityReference" /> 節點上。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>取得用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />。</summary>
      <returns>用來驗證的 <see langword="XmlSchemaCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>取得結構描述類型物件。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，視節點值為內建的 XML 結構描述定義語言 (XSD) 類型或使用者自訂的 simpleType 或 complexType 而定，如果目前節點沒有結構描述類型，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope">識別讀取器之範圍的 <see cref="T:System.Xml.XmlNamespaceScope" /> 物件。</param>
      <returns>識別範圍內之命名空間的 T:System.Collections.IDictionary 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix">命名空間前置詞。</param>
      <returns>字串值，包含與前置詞相關聯的命名空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName">與前置詞相關聯的命名空間。</param>
      <returns>字串值，包含與 <paramref name="namespaceName" /> 相關聯的命名空間前置詞。</returns>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>設定事件處理常式，用於接收文件類型定義 (DTD)、XML-Data Reduced (XDR) 結構描述和 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的相關資訊。</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>取得或設定數值，表示要執行的驗證類型。</summary>
      <returns>其中一個 <see cref="T:System.Xml.ValidationType" /> 值。 若未設定這個屬性，則預設為 ValidationType.Auto。</returns>
      <exception cref="T:System.InvalidOperationException">在呼叫 Read 之後設定這個屬性。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>取得目前節點的文字值。</summary>
      <returns>傳回值需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 其他所有節點類型都會傳回 String.Empty。  
  節點類型 
  值 
 <see langword="Attribute" /> 屬性的值。  

 <see langword="CDATA" /> CDATA 區段的內容。  

 <see langword="Comment" /> 註解的內容。  

 <see langword="DocumentType" /> 內部子集。  

 <see langword="ProcessingInstruction" /> 全部內容 (目標除外)。  

 <see langword="SignificantWhitespace" /> 在混合內容模型中標記間的泛空白字元。  

 <see langword="Text" /> 文字節點的內容。  

 <see langword="Whitespace" /> 標記之間的泛空白字元。  

 <see langword="XmlDeclaration" /> 宣告的內容。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>設定 <see cref="T:System.Xml.XmlResolver" />，用於解析外部文件類型定義 (DTD) 和結構描述位置參考。 <see langword="XmlResolver" /> 也可用來處理在 XML 結構描述定義語言 (XSD) 結構描述中找到的任何 Import 或 Include 項目。</summary>
      <returns>要使用的 <see langword="XmlResolver" />。 如果設定為 <see langword="null" />，就不會解析外部資源。  
在 .NET Framework 的 1.1 版中，必須完全信任呼叫端才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>表示項目內容中的空白。</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>初始化 <see cref="T:System.Xml.XmlWhitespace" /> 類別的新執行個體。</summary>
      <param name="strData">節點的空白字元。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>建立這個節點的複本。</summary>
      <param name="deep">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於空白節點，不論參數設定為何，複製的節點永遠會包含資料值。</param>
      <returns>複製的節點。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>取得節點的區域名稱。</summary>
      <returns>對於 <see langword="XmlWhitespace" /> 節點，這個屬性傳回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>取得節點的限定名稱。</summary>
      <returns>對於 <see langword="XmlWhitespace" /> 節點，這個屬性傳回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>取得節點的類型。</summary>
      <returns>對於 <see langword="XmlWhitespace" /> 節點，值為 <see cref="F:System.Xml.XmlNodeType.Whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>取得目前節點的父節點。</summary>
      <returns>目前節點的 <see cref="T:System.Xml.XmlNode" /> 父節點。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary>取得這個節點的前置文字節點。</summary>
      <returns>傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>取得或設定節點的值。</summary>
      <returns>節點中找到的空白字元。</returns>
      <exception cref="T:System.ArgumentException">將 <see cref="P:System.Xml.XmlWhitespace.Value" /> 設定為無效的空白字元。</exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w">要儲存的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>表示寫入器，其可提供快速、非快取的順向方法來產生含有 XML 資料之資料流或檔案。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>在衍生類別中覆寫時，關閉這個資料流和基礎資料流。</summary>
      <exception cref="T:System.InvalidOperationException">在呼叫 <see langword="Close" /> 之後再進行呼叫以寫入更多輸出，或者這次呼叫的結果是無效的 XML 文件。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>使用指定的資料流，建立新的 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="output">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>使用資料流和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
      <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.IO.TextWriter" /> 執行個體。</summary>
      <param name="output">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.IO.TextWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>使用指定的檔名，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="outputFileName">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <paramref name="outputFileName" /> 必須是檔案系統路徑。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>使用檔名和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="outputFileName">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <paramref name="outputFileName" /> 必須是檔案系統路徑。</param>
      <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.Text.StringBuilder" /> 執行個體。</summary>
      <param name="output">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Text.StringBuilder" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="output">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
      <param name="settings">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>釋放 <see cref="T:System.Xml.XmlWriter" /> 類別目前的執行個體所使用的全部資源。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Xml.XmlWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>在衍生類別中覆寫時，將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>以非同步的方式將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
      <returns>表示非同步 <see langword="Flush" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>在衍生類別中覆寫時，傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</summary>
      <param name="ns">您要尋找其前置詞的命名空間 URI。</param>
      <returns>命名空間前置詞；如果在目前範圍中找不到符合的命名空間 URI，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，用於建立這個 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <returns>用於建立這個寫入器執行個體的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如果未使用 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法建立這個寫入器，則這個屬性會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>在衍生類別中覆寫時，寫出在 <see cref="T:System.Xml.XmlReader" /> 的目前位置找到的所有屬性。</summary>
      <param name="reader">要複製屬性的 <see langword="XmlReader" />。</param>
      <param name="defattr">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException">讀取器不在 <see langword="element" />、<see langword="attribute" /> 或 <see langword="XmlDeclaration" /> 節點上。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>非同步寫出在 <see cref="T:System.Xml.XmlReader" /> 中的目前位置找到的所有屬性。</summary>
      <param name="reader">要複製屬性的 <see langword="XmlReader" />。</param>
      <param name="defattr">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <returns>表示非同步 <see langword="WriteAttributes" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫出具有指定的區域名稱與數值的屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="value">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫入具有指定區域名稱、命名空間 URI 和值的屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">與屬性相關聯的命名空間 URI。</param>
      <param name="value">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫出具有指定的前置詞、區域名稱、命名空間 URI 及其值的屬性。</summary>
      <param name="prefix">屬性的命名空間前置詞。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <param name="value">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。
-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> 或 <paramref name="ns" /> 為 <see langword="null" /></exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>以非同步的方式寫出具有指定之前置詞、區域名稱、命名空間 URI 和值的屬性。</summary>
      <param name="prefix">屬性的命名空間前置詞。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <param name="value">屬性的值。</param>
      <returns>表示非同步 <see langword="WriteAttributeString" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或- 
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，以 Base64 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式將指定的二進位位元組編碼為 base64 並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <returns>表示非同步 <see langword="WriteBase64" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，以 <see langword="BinHex" /> 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">寫入器的狀態為關閉或錯誤。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式將指定的二進位位元組編碼為 <see langword="BinHex" /> 並寫出產生的文字。</summary>
      <param name="buffer">要編碼的位元組陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count">要寫入的位元組數。</param>
      <returns>表示非同步 <see langword="WriteBinHex" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>在衍生類別中覆寫時，寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text">要放在 CDATA 區塊中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>以非同步的方式寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text">要放在 CDATA 區塊中的文字。</param>
      <returns>表示非同步 <see langword="WriteCData" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>在衍生類別中覆寫時，強制產生指定之 Unicode 字元值的字元實體。</summary>
      <param name="ch">要產生字元實體的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentException">字元位在 Surrogate 字組字元範圍 <see langword="0xd800" /> - <see langword="0xdfff" /> 中。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>以非同步的方式強制產生指定的 Unicode 字元值的字元實體。</summary>
      <param name="ch">要產生字元實體的 Unicode 字元。</param>
      <returns>表示非同步 <see langword="WriteCharEntity" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，一次將文字寫入一個緩衝區。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 參數值無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步的方式一次將文字寫入一個緩衝區。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count">要寫入的字元數。</param>
      <returns>表示非同步 <see langword="WriteChars" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>在衍生類別中覆寫時，寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text">要放入註解中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>以非同步的方式寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text">要放入註解中的文字。</param>
      <returns>表示非同步 <see langword="WriteComment" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 是 <see langword="null" />，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <exception cref="T:System.InvalidOperationException">從初構的外部 (在根項目之後) 呼叫這個方法。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的值將導致無效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>以非同步的方式寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid">如果 <paramref name="pubid" /> 是 <see langword="null" />，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <returns>表示非同步 <see langword="WriteDocType" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>寫入具有指定之區域名稱和值的項目。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="value">項目的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>寫入具有指定之區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">與項目相關聯的命名空間 URI。</param>
      <param name="value">項目的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>寫入具有指定的前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="prefix">項目的前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">項目的命名空間 URI。</param>
      <param name="value">項目的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>以非同步的方式寫入具有指定之前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="prefix">項目的前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">項目的命名空間 URI。</param>
      <param name="value">項目的值。</param>
      <returns>表示非同步 <see langword="WriteElementString" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>在衍生類別中覆寫時，會關閉先前的 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>非同步關閉上一個 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
      <returns>表示非同步 <see langword="WriteEndAttribute" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>在衍生類別中覆寫時，關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <exception cref="T:System.ArgumentException">XML 文件無效。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>以非同步的方式關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <returns>表示非同步 <see langword="WriteEndDocument" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException">這會導致無效的 XML 文件。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
      <returns>表示非同步 <see langword="WriteEndElement" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>在衍生類別中覆寫時，寫出如 <see langword="&amp;name;" /> 的實體參考。</summary>
      <param name="name">實體參考的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>以非同步的方式將實體參考寫出為 <see langword="&amp;name;" />。</summary>
      <param name="name">實體參考的名稱。</param>
      <returns>表示非同步 <see langword="WriteEntityRef" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
      <returns>表示非同步 <see langword="WriteFullEndElement" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) (英文) 的有效名稱。</summary>
      <param name="name">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 XML 名稱，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) (英文) 的有效名稱。</summary>
      <param name="name">要寫入的名稱。</param>
      <returns>表示非同步 <see langword="WriteName" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) (英文) 的有效 NmToken。</summary>
      <param name="name">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的 NmToken，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) (英文) 的有效 NmToken。</summary>
      <param name="name">要寫入的名稱。</param>
      <returns>表示非同步 <see langword="WriteNmToken" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>在衍生類別中覆寫時，從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
      <param name="reader">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> 包含無效的字元。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的所有項目複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
      <param name="navigator">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">
        <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>以非同步的方式從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
      <param name="reader">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <returns>表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>以非同步方式將所有項目從 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
      <param name="navigator">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">
        <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
      <returns>表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">處理指示的名稱。</param>
      <param name="text">要包含在處理指示中的文字。</param>
      <exception cref="T:System.ArgumentException">此文字會導致非語式正確的 XML 文件。  
 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
在呼叫 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> 之後，使用這個方法來建立 XML 宣告。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>以非同步方式寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name">處理指示的名稱。</param>
      <param name="text">要包含在處理指示中的文字。</param>
      <returns>表示非同步 <see langword="WriteProcessingInstruction" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName">要寫入的區域名稱。</param>
      <param name="ns">這個名稱的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
 <paramref name="localName" /> 不是有效的名稱。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>以非同步的方式寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName">要寫入的區域名稱。</param>
      <param name="ns">這個名稱的命名空間 URI。</param>
      <returns>表示非同步 <see langword="WriteQualifiedName" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>在衍生類別中覆寫時，從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data">包含要寫入之文字的字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步的方式從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer">包含要寫入之文字的字元陣列。</param>
      <param name="index">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count">要寫入的字元數。</param>
      <returns>表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>以非同步的方式從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data">包含要寫入之文字的字串。</param>
      <returns>表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>寫入具有指定之區域名稱的屬性開頭。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <exception cref="T:System.InvalidOperationException">寫入器已關閉。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>寫入具有指定之區域名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫入具有指定的前置詞、區域名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="prefix">屬性的命名空間前置詞。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>以非同步的方式寫入具有指定之前置詞、本機名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="prefix">屬性的命名空間前置詞。</param>
      <param name="localName">屬性的本機名稱。</param>
      <param name="ns">屬性的命名空間 URI。</param>
      <returns>表示非同步 <see langword="WriteStartAttribute" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告。</summary>
      <exception cref="T:System.InvalidOperationException">這不是在建構函式之後呼叫的第一個寫入方法。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <exception cref="T:System.InvalidOperationException">這不是在建構函式之後呼叫的第一個寫入方法。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>以非同步的方式使用「1.0」版寫入 XML 宣告。</summary>
      <returns>表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>以非同步的方式使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <returns>表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>在衍生類別中覆寫時，寫出具有指定之區域名稱的開頭標記。</summary>
      <param name="localName">項目的本機名稱。</param>
      <exception cref="T:System.InvalidOperationException">寫入器已關閉。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫入指定的開頭標記並與指定的命名空間產生關聯。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">與項目相關聯的命名空間 URI。 如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入前置詞。</param>
      <exception cref="T:System.InvalidOperationException">寫入器已關閉。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>在衍生類別中覆寫時，寫入指定的開頭標記，並與指定的命名空間與前置詞產生關聯。</summary>
      <param name="prefix">項目的命名空間前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">與項目相關聯的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">寫入器已關閉。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>以非同步的方式寫入指定的開頭標記，並將它與指定的命名空間與前置詞產生關聯。</summary>
      <param name="prefix">項目的命名空間前置詞。</param>
      <param name="localName">項目的本機名稱。</param>
      <param name="ns">與項目相關聯的命名空間 URI。</param>
      <returns>表示非同步 <see langword="WriteStartElement" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>在衍生類別中覆寫時，取得寫入器的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Xml.WriteState" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>在衍生類別中覆寫時，寫入指定的文字內容。</summary>
      <param name="text">要寫入的文字。</param>
      <exception cref="T:System.ArgumentException">文字字串包含無效的 Surrogate 字組。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>以非同步的方式寫入指定的文字內容。</summary>
      <param name="text">要寫入的文字。</param>
      <returns>表示非同步 <see langword="WriteString" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>在衍生類別中覆寫時，產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
      <param name="highChar">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
      <exception cref="T:System.ArgumentException">傳送無效的 Surrogate 字元字組。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>以非同步的方式產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
      <param name="highChar">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
      <returns>表示非同步 <see langword="WriteSurrogateCharEntity" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>寫入 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.Boolean" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>寫入 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>寫入 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.DateTimeOffset" /> 值。</param>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>寫入 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>寫入 <see cref="T:System.Double" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.Double" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>寫入 <see cref="T:System.Int32" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.Int32" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>寫入 <see cref="T:System.Int64" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.Int64" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>寫入物件值。</summary>
      <param name="value">要寫入的物件值。  
 附註：使用 .NET Framework 3.5 的版本時，這個方法會接受 <see cref="T:System.DateTimeOffset" /> 作為參數。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">寫入器的狀態為關閉或錯誤。
-或-
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>寫入單精確度浮點數。</summary>
      <param name="value">要寫入的單精確度浮點數。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>寫入 <see cref="T:System.String" /> 值。</summary>
      <param name="value">要寫入的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentException">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>在衍生類別中覆寫時，寫出指定的空白字元。</summary>
      <param name="ws">空白字元的字串。</param>
      <exception cref="T:System.ArgumentException">字串包含非泛空白字元。</exception>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>以非同步的方式寫出指定的空白字元。</summary>
      <param name="ws">空白字元的字串。</param>
      <returns>表示非同步 <see langword="WriteWhitespace" /> 作業的工作。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>當在衍生類別中覆寫時，取得目前<see langword="xml:lang" />範圍。</summary>
      <returns>目前的 <see langword="xml:lang" /> 範圍。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>在衍生類別中覆寫時，取得表示目前 <see langword="xml:space" /> 範圍的 <see cref="T:System.Xml.XmlSpace" />。</summary>
      <returns>
        <see langword="XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。  
  值 
  意義 
 <see langword="None" /> 如果 <see langword="xml:space" /> 範圍不存在，這是預設值。  

 <see langword="Default" /> 目前的範圍為 <see langword="xml:space" />="default"。  

 <see langword="Preserve" /> 目前的範圍為 <see langword="xml:space" />="preserve"。</returns>
      <exception cref="T:System.InvalidOperationException">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>指定要在由 <see cref="T:System.Xml.XmlWriter" /> 方法建立的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 物件上支援的一組功能。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>取得或設定值，指出非同步 <see cref="T:System.Xml.XmlWriter" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <returns>如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>取得或設定值，這個值表示 XML 寫入器是否應該檢查以確定文件中的所有字元都符合 W3C XML 1.0 Recommendation 中的 "2.2 Characters" 一節。</summary>
      <returns>
        <see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>建立 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的複本。</summary>
      <returns>複製的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>取得或設定值，指出呼叫 <see cref="T:System.Xml.XmlWriter" /> 方法時，<see cref="T:System.IO.TextWriter" /> 是否也應該關閉基礎資料流或 <see cref="M:System.Xml.XmlWriter.Close" />。</summary>
      <returns>
        <see langword="true" /> 表示也關閉基礎資料流或 <see cref="T:System.IO.TextWriter" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>取得或設定 XML 寫入器檢查 XML 輸出是否符合的一致性層級。</summary>
      <returns>其中一個指定一致性層級 (文件、片段或自動偵測) 的列舉值。 預設為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary>取得或設定值，這個值會指出 <see cref="T:System.Xml.XmlWriter" /> 是否不會逸出 URI 屬性。</summary>
      <returns>
        <see langword="true" />如果沒有轉義 URI 屬性, 則為, <see langword="false" />否則為。 <see cref="T:System.Xml.XmlWriter" /> 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>取得或設定要使用的文字編碼方式類型。</summary>
      <returns>要使用的文字編碼方式。 預設為 <see langword="Encoding.UTF8" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>取得或設定值，指出是否要縮排項目。</summary>
      <returns>
        <see langword="true" /> 表示在新行和縮排上寫入個別項目，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>取得或設定縮排時使用的字元字串。 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性設為 <see langword="true" /> 時會使用這項設定。</summary>
      <returns>縮排時使用的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值為兩個空格。</returns>
      <exception cref="T:System.ArgumentNullException">指派至 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>取得或設定值，這個值表示 <see cref="T:System.Xml.XmlWriter" /> 是否應該在寫入 XML 內容時移除重複的命名空間宣告。 預設行為是讓寫入器輸出寫入器命名空間解析程式中出現的所有命名空間宣告。</summary>
      <returns>
        <see cref="T:System.Xml.NamespaceHandling" /> 列舉型別，用來指定是否要移除 <see cref="T:System.Xml.XmlWriter" /> 中的重複命名空間宣告。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>取得或設定用於分行符號的字元字串。</summary>
      <returns>用於分行符號的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值為 [ <c>\r\n</c> (換行)]。</returns>
      <exception cref="T:System.ArgumentNullException">指派至 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>取得或設定值，指出是否要將輸出中的分行符號正規化。</summary>
      <returns>其中一個 <see cref="T:System.Xml.NewLineHandling" /> 值。 預設為 <see cref="F:System.Xml.NewLineHandling.Replace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>取得或設定值，指出是否將屬性寫在新行上。</summary>
      <returns>
        <see langword="true" /> 表示將屬性寫在獨立的行上，否則為 <see langword="false" />。 預設為 <see langword="false" />。  
   
 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性值為 <see langword="false" /> 時，這項設定沒有影響。  

  

 當 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 設為 <see langword="true" /> 時，會在每個屬性之前加上新行和一個額外的縮排層級。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>取得或設定值，指出是否省略 XML 宣告。</summary>
      <returns>
        <see langword="true" /> 表示省略 XML 宣告，否則為 <see langword="false" />。 預設值為 <see langword="false" />，表示會寫入 XML 宣告。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>取得用於序列化 <see cref="T:System.Xml.XmlWriter" /> 輸出的方法。</summary>
      <returns>其中一個 <see cref="T:System.Xml.XmlOutputMethod" /> 值。 預設為 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>將設定類別的成員重設為其預設值。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>取得或設定值，指出 <see cref="T:System.Xml.XmlWriter" /> 是否會在呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法時，將結尾標記加入至所有未封閉的項目標記。</summary>
      <returns>如果將關閉所有未封閉的項目標記，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>提供 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別的存取子。</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>傳回新的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>指定大寫和小寫字母的排序順序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>小寫字母排序在大寫字母之前。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>忽略大小寫。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>大寫字母排序在小寫字母之前。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>指定用來判斷排序順序的資料型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>數值是依數字大小來排序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>數值是依字母順序來排序。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>指定排序順序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>節點是依遞增順序來排序。 例如，如果數字 1、2、3 和 4 依遞增順序排序，則它們會顯示為 1,2,3,4。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>節點是依遞減順序來排序。 例如，如果數字 1、2、3 和 4 依遞減順序排序，則它們會顯示為 4,3,2,1。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>提供具型別類別，其表示已編譯的 XPath 運算式。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>在衍生類別中覆寫時，根據指定的 <see cref="T:System.Collections.IComparer" /> 物件，對 XPath 運算式所選取的節點進行排序。</summary>
      <param name="expr">運算式，表示排序鍵。 它可以是節點的 <see langword="string" /> 值，或是具有已編輯 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 物件，提供特定資料型別比較，以比較兩個物件是否等價。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序鍵包括前置詞，且不提供 <see cref="T:System.Xml.XmlNamespaceManager" />，或在提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找不到前置詞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>在衍生類別中覆寫時，根據提供的參數，對 XPath 運算式所選取的節點進行排序。</summary>
      <param name="expr">運算式，表示排序鍵。 它可以是節點的 <see langword="string" /> 值，或是具有已編輯 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <param name="order">
        <see cref="T:System.Xml.XPath.XmlSortOrder" /> 值，表示排序順序。</param>
      <param name="caseOrder">
        <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 值，表示如何排序大小寫字母。</param>
      <param name="lang">比較使用的語言。 使用 <see cref="T:System.Globalization.CultureInfo" /> 類別，該類別可被傳遞至語言類型的 <see cref="Overload:System.String.Compare" /> 方法，例如 "us-en" 代表美式英文。 如果指定空字串，則會使用系統環境決定 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="dataType">
        <see cref="T:System.Xml.XPath.XmlDataType" /> 值，表示資料型別的排序順序。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序鍵包括前置詞，且不提供 <see cref="T:System.Xml.XmlNamespaceManager" />，或在提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找不到前置詞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>在衍生類別中覆寫時，傳回這個 <see cref="T:System.Xml.XPath.XPathExpression" /> 的複製。</summary>
      <returns>新的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>編譯指定的 XPath 運算式，並傳回表示 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath">XPath 運算式。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式參數是無效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>以為命名空間解析指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，編譯指定的 XPath 運算式，並傳回表示 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath">XPath 運算式。</param>
      <param name="nsResolver">物件，實作命名空間解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 介面。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式參數是無效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Xml.XPath.XPathExpression" /> 的 <see langword="string" /> 表示。</summary>
      <returns>
        <see langword="string" /> 的 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>在衍生類別中覆寫時，取得 XPath 運算式的結果型別。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 值，表示 XPath 運算式的結果型別。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>在衍生類別中覆寫時，指定用於命名空間解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件。</summary>
      <param name="nsResolver">物件，實作用於命名空間解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 介面。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件參數不是衍生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>在衍生類別中覆寫時，指定用於命名空間解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 物件。</summary>
      <param name="nsManager">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 物件，用於命名空間解析。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 物件參數不是衍生自 <see cref="T:System.Xml.XmlNamespaceManager" /> 類別。</exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>表示 XQuery 1.0 和 XPath 2.0 資料模型中的項目。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathItem" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>在衍生類別中覆寫時取得值，表示項目是表示 XPath 節點還是原子值。</summary>
      <returns>如果項目表示 XPath 節點，則為 <see langword="true" />，如果項目表示原子值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>在衍生類別中覆寫時，根據其結構描述型別取得目前項目，做為最適當的 .NET Framework 2.0型別之 Boxed 物件。</summary>
      <returns>目前項目，做為最適當的 .NET Framework 型別之 boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>在衍生類別中覆寫時，取得項目的 <see langword="string" /> 值。</summary>
      <returns>項目的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>傳回項目的值，做為指定型別。</summary>
      <param name="returnType">傳回項目值所做為的型別。</param>
      <returns>項目值，做為要求的型別。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>在衍生類別中覆寫時，使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件傳回項目值，做為指定的型別，以解析命名空間前置詞。</summary>
      <param name="returnType">傳回項目值所做為的型別。</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <returns>項目值，做為要求的型別。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Boolean" />。</summary>
      <returns>項目的值，做為 <see cref="T:System.Boolean" />。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於 <see cref="T:System.Boolean" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.DateTime" />。</summary>
      <returns>項目的值，做為 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於 <see cref="T:System.DateTime" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Double" />。</summary>
      <returns>項目的值，做為 <see cref="T:System.Double" />。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於 <see cref="T:System.Double" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Int32" />。</summary>
      <returns>項目的值，做為 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於 <see cref="T:System.Int32" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Int64" />。</summary>
      <returns>項目的值，做為 <see cref="T:System.Int64" />。</returns>
      <exception cref="T:System.FormatException">項目值的格式對於 <see cref="T:System.Int64" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
      <exception cref="T:System.OverflowException">嘗試的轉換導致溢位。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>在衍生類別中覆寫時，取得項目的 .NET Framework 2.0型別。</summary>
      <returns>項目的 .NET Framework 型別。 預設值為 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>在衍生類別中覆寫時，取得項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns>項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>定義命名空間範圍。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>傳回目前節點範圍中定義的所有命名空間。 包括一律以隱含方式宣告的 <c>xmlns:xml</c> 命名空間。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>傳回目前節點範圍中定義的所有命名空間，但不包括 <c>xmlns:xml</c> 命名空間。 <c>xmlns:xml</c> 命名空間永遠隱含宣告。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>傳回目前節點上區域定義的所有命名空間。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>提供游標模型來巡覽及編輯 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前節點的子節點清單結尾建立一或多個新的子節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前節點的子節點清單結尾建立新的子節點。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點，不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>使用指定的 XML 資料字串，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild">新的子節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException">XML 資料字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點，不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">XML 資料字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>使用指定 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild">位於新的子節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點，不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的節點，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的子節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點，不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>使用命名空間前置詞、區域名稱以及有指定值的命名空間 URI，在目前節點的子節點清單結尾建立新的子項目節點。</summary>
      <param name="prefix">新的子項目節點的命名空間前置詞 (如果有的話)。</param>
      <param name="localName">新的子項目節點的區域名稱 (如果有的話)。</param>
      <param name="namespaceURI">新子項目節點的命名空間 URI (如果有)。 <see cref="F:System.String.Empty" /> 等於 <see langword="null" />。</param>
      <param name="value">新的子項目節點的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的項目。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點，不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>在衍生類別中覆寫時，取得目前節點的基底 (Base) URI。</summary>
      <returns>節點載入的來源位置，如果沒有任何值，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>取得值，指出 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否可以編輯底層 XML 資料。</summary>
      <returns>
        <see langword="true" />如果可以編輯基礎 XML 資料, 則為, <see langword="false" />否則為。 <see cref="T:System.Xml.XPath.XPathNavigator" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>請驗證 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料確實有符合所提供的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />，包含用來驗證 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中所含的 XML 資料之結構描述。</param>
      <param name="validationEventHandler">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" />，可接收與結構描述驗證的警告和錯誤有關的資訊。</param>
      <returns>如果未發生任何結構描述驗證錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">已發生結構描述驗證錯誤，而且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 來處理驗證錯誤。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的節點並不是項目、屬性或根節點，或是沒有任何型別資訊可執行驗證。</exception>
      <exception cref="T:System.ArgumentException">當 <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> 不在 XML 資料的根節點上時，使用了 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 參數呼叫 <see cref="T:System.Xml.XPath.XPathNavigator" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>在衍生類別中覆寫時，請在與此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的節點上建立新的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</summary>
      <returns>與此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 位於相同節點的新 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>比較目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置。</summary>
      <param name="nav">要比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlNodeOrder" /> 值，表示兩個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的比較位置。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>編譯表示 XPath 運算式的字串，並傳回 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath">表示 XPath 運算式的字串。</param>
      <returns>表示 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xpath" /> 參數包含無效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>使用命名空間前置詞、區域名稱以及有指定值的命名空間 URI，在目前的項目節點上建立屬性節點。</summary>
      <param name="prefix">新屬性節點的命名空間前置詞 (如果有的話)。</param>
      <param name="localName">不能為 <see cref="F:System.String.Empty" /> 或 <see langword="null" /> 的新屬性節點的區域名稱。</param>
      <param name="namespaceURI">新屬性節點的命名空間 URI (如果有的話)。</param>
      <param name="value">新屬性節點的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的屬性節點。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不是位於項目節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件是用來在目前的項目上建立新的屬性。</summary>
      <returns>用來在目前的項目上建立新屬性的 <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不是位於項目節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>傳回 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的複本。</summary>
      <returns>此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 複本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>刪除從目前節點到指定節點的某範圍之同層級節點。</summary>
      <param name="lastSiblingToDelete">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要刪除的範圍內的最後一個同層級節點上。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.InvalidOperationException">指定為要刪除的最後一個節點不是目前節點的有效同層級節點。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>刪除目前的節點和它的子節點。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 會放置在無法刪除的節點上，例如根節點或命名空間節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>評估指定的 XPath 運算式，並傳回具型別的結果。</summary>
      <param name="xpath">字串，表示能接受評估的 XPath 運算式。</param>
      <returns>運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式的傳回型別為節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>評估指定的 XPath 運算式，並傳回具型別的結果，透過的方式是利用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件來解析 XPath 運算式中的命名空間前置詞。</summary>
      <param name="xpath">字串，表示能接受評估的 XPath 運算式。</param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析 XPath 運算式中的命名空間前置詞。</param>
      <returns>運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式的傳回型別為節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>評估 <see cref="T:System.Xml.XPath.XPathExpression" />，並傳回具型別的結果。</summary>
      <param name="expr">可以接受評估的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <returns>運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式的傳回型別為節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>使用提供的內容來評估 <see cref="T:System.Xml.XPath.XPathExpression" />，並傳回具型別的結果。</summary>
      <param name="expr">可以接受評估的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <param name="context">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，指向要執行評估的選定節點集。</param>
      <returns>運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式的傳回型別為節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="localName">屬性的本機名稱。 <paramref name="localName" /> 會區分大小寫。</param>
      <param name="namespaceURI">屬性的命名空間 URI。</param>
      <returns>
        <see cref="T:System.String" />，包含指定屬性的值；如果找不到符合的屬性，或 <see cref="F:System.String.Empty" /> 不在項目節點上，則為 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>傳回對應至指定區域名稱之命名空間節點的值。</summary>
      <param name="name">命名空間節點的區域名稱。</param>
      <returns>
        <see cref="T:System.String" />，包含命名空間節點的值；如果找不到符合的命名空間節點，或 <see cref="F:System.String.Empty" /> 不在項目節點上，則為 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>傳回目前節點範圍中的命名空間。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回的命名空間。</param>
      <returns>以前置詞當做索引鍵的命名空間名稱之 <see cref="T:System.Collections.Generic.IDictionary`2" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>取得值，指出目前節點是否具有任何屬性。</summary>
      <returns>
        <see langword="true" />如果目前節點具有屬性, 則為,如果目前節點沒有屬性, 則傳回, <see cref="T:System.Xml.XPath.XPathNavigator" />如果不在專案節點上, 則傳回。 <see langword="false" /></returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>取得值，指出目前節點是否具有任何子節點。</summary>
      <returns>如果目前的節點有任何子節點，則為 <see langword="true" />，否則會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>取得或設定表示目前節點之子節點的標記。</summary>
      <returns>
        <see cref="T:System.String" />，包含目前節點的子節點之標記。</returns>
      <exception cref="T:System.InvalidOperationException">無法設定 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> 屬性。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前選取的節點之後建立新的同層級節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前選取的節點之後建立新的同層級節點。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的後面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>使用指定的 XML 字串，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling">新的同層級節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字串參數是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的後面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>使用指定 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling">位於新的同層級節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的後面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的節點，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的同層級節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的後面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前選取的節點之前建立新的同層級節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前選取的節點之前建立新的同層級節點。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的前面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>使用指定的 XML 字串，在目前選取的節點之前建立新的同層級節點。</summary>
      <param name="newSibling">新的同層級節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字串參數是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的前面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>使用指定 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前選取的節點之前建立新的同層級節點。</summary>
      <param name="newSibling">位於新的同層級節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的前面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的節點，在目前選取的節點之前建立新的同層級節點。</summary>
      <param name="newSibling">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的同層級節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的前面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>使用命名空間前置詞、區域名稱以及有指定值的命名空間 URI，在目前的節點之後建立新的同層級項目。</summary>
      <param name="prefix">新的子項目的命名空間前置詞 (如果有的話)。</param>
      <param name="localName">新的子項目的區域名稱 (如果有的話)。</param>
      <param name="namespaceURI">新子項目的命名空間 URI (如果有)。 <see cref="F:System.String.Empty" /> 等於 <see langword="null" />。</param>
      <param name="value">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的項目。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的後面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>使用命名空間前置詞、區域名稱以及有指定值的命名空間 URI，在目前的節點之前建立新的同層級項目。</summary>
      <param name="prefix">新的子項目的命名空間前置詞 (如果有的話)。</param>
      <param name="localName">新的子項目的區域名稱 (如果有的話)。</param>
      <param name="namespaceURI">新子項目的命名空間 URI (如果有)。 <see cref="F:System.String.Empty" /> 等於 <see langword="null" />。</param>
      <param name="value">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的項目。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點的前面插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>判斷指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否為目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代 (Descendant)。</summary>
      <param name="nav">要和此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>如果指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>在衍生類別中覆寫時，取得值，指出目前的節點是否為空元素，且沒有結尾元素標記。</summary>
      <returns>如果目前的節點為空項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>取得值，指出目前的節點是否表示 XPath 節點。</summary>
      <returns>一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>在衍生類別中覆寫時，請判斷目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否和指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 位在相同的位置。</summary>
      <param name="other">要和此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>如果兩個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的位置相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>在衍生類別中覆寫時，取得目前節點的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />，而不含任何命名空間前置詞。</summary>
      <returns>
        <see cref="T:System.String" />，包含目前節點的區域名稱；如果目前節點沒有名稱 (例如文字或註解節點)，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>取得指定前置詞的命名空間 URI。</summary>
      <param name="prefix">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳遞 <see cref="F:System.String.Empty" />。</param>
      <returns>
        <see cref="T:System.String" />，包含指派給指定命名空間前置詞的命名空間 URI；如果沒有命名空間 URI 指派給指定的前置詞，則為 <see langword="null" />。 傳回的 <see cref="T:System.String" /> 已原子化。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>取得為指定命名空間 URI 宣告的前置詞。</summary>
      <param name="namespaceURI">用來解析前置詞的命名空間 URI。</param>
      <returns>
        <see cref="T:System.String" />，包含指派給指定之命名空間 URI 的命名空間前置詞；如果沒有指派前置詞給指定的命名空間 URI，則為 <see cref="F:System.String.Empty" />。 傳回的 <see cref="T:System.String" /> 已原子化。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>判斷目前的節點是否符合指定的 XPath 運算式。</summary>
      <param name="xpath">XPath 運算式。</param>
      <returns>如果目前的節點符合指定的 XPath 運算式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">無法評估 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>判斷目前節點是否符合指定的 <see cref="T:System.Xml.XPath.XPathExpression" />。</summary>
      <param name="expr">包含已編譯 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <returns>如果目前節點符合 <see cref="T:System.Xml.XPath.XPathExpression" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">無法評估 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置上。</summary>
      <param name="other">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要移至的節點上。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移到與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置上，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至具有相符的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName">屬性的本機名稱。</param>
      <param name="namespaceURI">此屬性的命名空間 URI；空的命名空間則為 <see langword="null" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至該屬性，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的子節點。</summary>
      <param name="localName">要移向的子節點之區域名稱。</param>
      <param name="namespaceURI">要移向的子節點之命名空間 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至此子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子節點。</summary>
      <param name="type">要移向的子節點之 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至此子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個同層級節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個同層級節點，則為 <see langword="true" />；如果沒有第一個同層級節點，或是 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 已經在第一個同層級位置，<see cref="T:System.Xml.XPath.XPathNavigator" /> 將會傳回 <see langword="true" />，且不會移動其位置。  
如果因為沒有第一個同層級而使 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> 傳回 <see langword="false" />，或是 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性上，則 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個屬性。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個屬性，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個子節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個命名空間節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至第一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至符合指定 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 的第一個命名空間節點。</summary>
      <param name="namespaceScope">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，說明命名空間的範圍。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至第一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的項目。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到指定界限之區域名稱和指定命名空間 URI 的項目。</summary>
      <param name="localName">項目的本機名稱。</param>
      <param name="namespaceURI">項目的命名空間 URI。</param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件所在的項目界限，目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 在搜尋下列項目時，將不會超出這個界限。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下列指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的項目。</summary>
      <param name="type">項目的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下列指定界限之指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的項目。</summary>
      <param name="type">項目的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <param name="end">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件所在的項目界限，目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 在搜尋下列項目時，將不會超出這個界限。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>在衍生類別中覆寫時，移至具有類型 <c>ID</c> 的屬性之節點 (此類型的值符合指定的 <see cref="T:System.String" />)。</summary>
      <param name="id">
        <see cref="T:System.String" /> 表示要移向之節點的 <c>ID</c> 值。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更巡覽器的位置。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至具有指定命名空間前置詞的命名空間節點。</summary>
      <param name="name">命名空間節點的命名空間前置詞。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至指定的命名空間，則為 <see langword="true" />；如果找不到相符的命名空間節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的下一個同層級節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的下一個同層級節點。</summary>
      <param name="localName">要移向的下一個同層級節點之區域名稱。</param>
      <param name="namespaceURI">要移向的下一個同層級節點之命名空間 URI。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點中符合指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的下一個同層級節點。</summary>
      <param name="type">要移向的同層級節點之 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下一個屬性。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個屬性，則為 <see langword="true" />；如果沒有其他屬性，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下一個命名空間節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至符合指定 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 的下一個命名空間節點。</summary>
      <param name="namespaceScope">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，說明命名空間的範圍。</param>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的父節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的父節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的上一個同層級節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至上一個同層級節點，則為 <see langword="true" />；如果沒有上一個同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點所屬的根節點。</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>在衍生類別中覆寫時，取得目前節點的限定名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含目前節點的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />；如果目前節點沒有名稱 (例如文字或註解節點)，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>在衍生類別中覆寫時，取得目前節點的命名空間 URI。</summary>
      <returns>
        <see cref="T:System.String" />，包含目前節點的命名空間 URI；如果目前節點沒有命名空間 URI，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Xml.XmlNameTable" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNameTable" /> 物件，可讓您取得 XML 文件中的原子化版本的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>取得 <see cref="T:System.Collections.IEqualityComparer" />，用於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的相等比較。</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" />，用於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的相等比較。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>在衍生類別中覆寫時，取得目前節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</summary>
      <returns>表示目前節點的其中一個 <see cref="T:System.Xml.XPath.XPathNodeType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>取得或設定標記，表示目前節點和其子節點的開頭和結尾標記。</summary>
      <returns>包含標記的 <see cref="T:System.String" />，此標記表示目前節點和其子節點的開頭和結尾標記。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>在衍生類別中覆寫時，取得與目前節點相關的命名空間前置詞。</summary>
      <returns>
        <see cref="T:System.String" />，包含與目前節點有關的命名空間前置詞。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前節點的子節點清單開頭建立新的子節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前節點的子節點清單開頭建立新的子節點。</returns>
      <exception cref="T:System.InvalidOperationException">目前放置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的節點不允許預先規劃新子節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>使用指定的 XML 字串，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild">新的子節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字串參數是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前放置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的節點不允許預先規劃新子節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>使用指定 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild">位於新的子節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前放置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的節點不允許預先規劃新子節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>使用指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的節點，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的子節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前放置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的節點不允許預先規劃新子節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>使用命名空間前置詞、區域名稱以及有指定值的命名空間 URI，在目前節點的子節點清單開頭建立新的子項目。</summary>
      <param name="prefix">新的子項目的命名空間前置詞 (如果有的話)。</param>
      <param name="localName">新的子項目的區域名稱 (如果有的話)。</param>
      <param name="namespaceURI">新子項目的命名空間 URI (如果有)。 <see cref="F:System.String.Empty" /> 等於 <see langword="null" />。</param>
      <param name="value">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的項目。</param>
      <exception cref="T:System.InvalidOperationException">目前放置 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的節點不允許預先規劃新子節點。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>傳回 <see cref="T:System.Xml.XmlReader" /> 物件，此物件包含目前的節點和它的子節點。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> 物件，其包含目前的節點和它的子節點。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不是位於項目節點或根節點上。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>取代從目前節點到指定節點的某範圍之同層級節點。</summary>
      <param name="lastSiblingToReplace">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要取代的範圍內的最後一個同層級節點上。</param>
      <returns>用來指定取代範圍的 <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.InvalidOperationException">指定為要取代的最後一個節點不是目前節點的有效同層級節點。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>將目前的節點取代為指定字串的內容。</summary>
      <param name="newNode">新的節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException">XML 字串參數是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>將目前的節點取代為指定 <see cref="T:System.Xml.XmlReader" /> 物件的內容。</summary>
      <param name="newNode">位於新節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>將目前的節點取代為指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的內容。</summary>
      <param name="newNode">位於新節點上的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數的 XML 內容的語式不正確。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>取得在結構描述驗證之後已指派給目前節點的結構描述資訊。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>使用指定的 XPath 運算式來選取節點集。</summary>
      <param name="xpath">表示 XPath 運算式的 <see cref="T:System.String" />。</param>
      <returns>指向選取節點集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式有錯誤，或其傳回型別不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>使用指定的 XPath 運算式並搭配用來解析命名空間前置詞的 <see cref="T:System.Xml.IXmlNamespaceResolver" />，以選取節點集。</summary>
      <param name="xpath">表示 XPath 運算式的 <see cref="T:System.String" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <returns>指向選定節點集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式有錯誤，或其傳回型別不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 來選取節點集。</summary>
      <param name="expr">包含已編譯 XPath 查詢的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <returns>指向選定節點集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException">XPath 運算式有錯誤，或其傳回型別不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 運算式無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>選取目前節點中，所有具有指定區域名稱和命名空間 URI 的祖系節點。</summary>
      <param name="name">祖系節點的區域名稱。</param>
      <param name="namespaceURI">祖系節點的命名空間 URI。</param>
      <param name="matchSelf">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。 傳回的節點是以相反的文件順序排列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" /> 不能以參數形式傳遞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>選取目前節點中，所有具有相符 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的祖系節點。</summary>
      <param name="type">祖系節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。 傳回的節點是以相反的文件順序排列。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>選取目前節點中，所有具有指定區域名稱和命名空間 URI 的子節點。</summary>
      <param name="name">子節點的區域名稱。</param>
      <param name="namespaceURI">子節點的命名空間 URI。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" /> 不能以參數形式傳遞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>選取目前節點中，所有具有相符之 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子節點。</summary>
      <param name="type">子節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>選取目前節點中，所有具有指定區域名稱和命名空間 URI 的子代節點。</summary>
      <param name="name">子代節點的區域名稱。</param>
      <param name="namespaceURI">子代節點的命名空間 URI。</param>
      <param name="matchSelf">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" /> 不能以參數形式傳遞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>選取目前節點中，所有具有相符 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子代節點。</summary>
      <param name="type">子代節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>使用指定的 XPath 查詢，於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中選取單一節點。</summary>
      <param name="xpath">表示 XPath 運算式的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符的節點；如果沒有查詢結果，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">在 XPath 查詢中遇到了錯誤，或是 XPath 運算式的傳回型別不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查詢無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>使用指定的 XPath 查詢並搭配指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，在 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件中選取單一節點，以解析命名空間前置詞。</summary>
      <param name="xpath">表示 XPath 運算式的 <see cref="T:System.String" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析 XPath 查詢中的命名空間前置詞。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符的節點；如果沒有查詢結果，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">在 XPath 查詢中遇到了錯誤，或是 XPath 運算式的傳回型別不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查詢無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，於 <see cref="T:System.Xml.XPath.XPathExpression" /> 中選取單一節點。</summary>
      <param name="expression">包含已編譯 XPath 查詢的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符的節點；如果沒有查詢結果，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">在 XPath 查詢中遇到了錯誤，或是 XPath 運算式的傳回型別不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 查詢無效。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>設定目前節點的型別值。</summary>
      <param name="typedValue">節點的新的型別值。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援指定物件的型別。</exception>
      <exception cref="T:System.ArgumentNullException">指定的值不能是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不是位於項目或屬性節點上。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>設定目前節點的值。</summary>
      <param name="value">節點的新值。</param>
      <exception cref="T:System.ArgumentNullException">實值參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 置於根節點 (命名空間節點)，或指定的值無效。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的新複本。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的新複本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>取得目前節點的文字值。</summary>
      <returns>
        <see langword="string" />，包含目前節點的文字值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>取得目前的節點，當做最適當的 .NET Framework 型別的 Boxed 物件。</summary>
      <returns>目前的節點，當做最適當的 .NET Framework 型別的 Boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>由 <see cref="T:System.Xml.XPath.XPathNavigator" /> 實作所使用，此實作可以提供存放區上的「虛擬化」XML 檢視，或是提供基礎物件的存取。</summary>
      <returns>預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>取得目前節點的值做為指定的 <see cref="T:System.Type" />，透過的方式是使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件來解析命名空間前置詞。</summary>
      <param name="returnType">
        <see cref="T:System.Type" />，將目前節點的值以這個形式傳回。</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <returns>如所要求的 <see cref="T:System.Type" /> 的目前節點的值。</returns>
      <exception cref="T:System.FormatException">目前節點的值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException">嘗試的轉換無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>取得目前的節點值做為 <see cref="T:System.Boolean" />。</summary>
      <returns>目前節點的值，為 <see cref="T:System.Boolean" />。</returns>
      <exception cref="T:System.FormatException">目前節點的字串值不能轉換為 <see cref="T:System.Boolean" />。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>取得目前的節點值做為 <see cref="T:System.DateTime" />。</summary>
      <returns>目前節點的值，為 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.FormatException">目前節點的字串值不能轉換為 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>取得目前的節點值做為 <see cref="T:System.Double" />。</summary>
      <returns>目前節點的值，為 <see cref="T:System.Double" />。</returns>
      <exception cref="T:System.FormatException">目前節點的字串值不能轉換為 <see cref="T:System.Double" />。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>取得目前的節點值做為 <see cref="T:System.Int32" />。</summary>
      <returns>目前節點的值，做為 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.FormatException">目前節點的字串值不能轉換為 <see cref="T:System.Int32" />。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>取得目前的節點值做為 <see cref="T:System.Int64" />。</summary>
      <returns>目前節點的值，做為 <see cref="T:System.Int64" />。</returns>
      <exception cref="T:System.FormatException">目前節點的字串值不能轉換為 <see cref="T:System.Int64" />。</exception>
      <exception cref="T:System.InvalidCastException">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>取得目前節點的 .NET Framework <see cref="T:System.Type" />。</summary>
      <returns>目前節點的 .NET Framework <see cref="T:System.Type" />。 預設值為 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>將目前節點和其子節點的資料流導向指定的 <see cref="T:System.Xml.XmlWriter" /> 物件。</summary>
      <param name="writer">要將資料流導向其中的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>取得目前節點的 <c>xml:lang</c> 範圍。</summary>
      <returns>, <see cref="T:System.String" />其中包含<c>xml: lang</c>範圍的值, 或者, 如果<see cref="F:System.String.Empty" />目前節點沒有要傳回的<c>xml: lang</c>範圍值, 則為。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>取得目前節點的 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 資訊。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件；預設值為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>提供所選取節點集的 Iterator。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>初始化 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>在衍生類別中覆寫時，傳回這個 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件的複製。</summary>
      <returns>這個 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件的新 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件複製。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>取得選取節點集中最後一個節點的索引。</summary>
      <returns>所選取節點集中最後一個節點的索引，如果沒有選取的節點，則為 0。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>在衍生類別中覆寫時，取得此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件，該物件位於目前的內容節點上。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於所選取節點集的內容節點上。 您必須呼叫 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> 方法，將 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 移至所選取節點集的第一個節點上。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>在衍生類別中覆寫時，取得選取節點集中目前位置的索引。</summary>
      <returns>目前位置的索引。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" /> 物件，逐一查看選取的節點集。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，逐一查看選取的節點集。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>在衍生類別中覆寫時，會將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 屬性傳回的 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> 物件移至所選取節點集的下一個節點。</summary>
      <returns>如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件移至下一個節點則為 <see langword="true" />，如果沒有其他選取的節點，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>建立目前執行個體複本的新物件。</summary>
      <returns>這個執行個體複本的新物件。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>定義 XPath 節點型別，該型別可從 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別傳回。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>任何 <see cref="T:System.Xml.XPath.XPathNodeType" /> 節點型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>屬性，例如 <c>id='123'</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>註解，例如 <c>&lt;!-- my comment --&gt;</c></summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>元素，例如 <c>&lt;element&gt;</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>命名空間，例如 <c>xmlns="namespace"</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>處理表示，例如 <c>&lt;?pi test?&gt;</c>。 它不包括 XML 宣告，其對 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別不可見。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>XML 文件或節點樹狀目錄的根節點。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>有空白字元的節點，且節點的 <c>xml:space</c> 設為 <c>preserve</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>節點的文字內容。 文件物件模型 (DOM) 文字和 CDATA 節點型別的相同對應項。 包含至少一個字元。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>只具有泛空白字元，但沒有顯著性泛空白字元的節點。 空白字元為 <c>#x20</c>、<c>#x9</c>、<c>#xD</c> 或 <c>#xA</c>。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>指定 XPath 運算式的傳回型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>任何 XPath 節點型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <see cref="T:System.Boolean" />
        <see langword="true" /> 或 <see langword="false" /> 值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>這個運算式不會判定為正確的 XPath 型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>樹狀結構片段。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>節點集合。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>數值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
        <see cref="T:System.String" /> 值。</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>將介面提供給指定的函式，該函式於 Run Time 時在可延伸樣式表語言轉換 (XSLT) 樣式表中定義。</summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>取得已提供給函式引數清單的 XML 路徑語言 (XPath) 型別。 這個資訊可用來探索函式簽章 (Signature)，讓您辨別多載函式 (Overloaded Function) 間的差異。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" /> 的陣列，表示函式引數清單的型別。</returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>提供以指定內容中的指定引數來叫用函式的方法。</summary>
      <param name="xsltContext">函式呼叫的 XSLT 內容。</param>
      <param name="args">函式呼叫的引數。 每個引數都是陣列中的元素。</param>
      <param name="docContext">函式呼叫的內容節點。</param>
      <returns>
        <see cref="T:System.Object" />，表示函式的傳回值。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>取得函式引數的最大數目。 這能讓使用者辨別多載函式間的差異。</summary>
      <returns>函式引數的最大數目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>取得函式引數的最小數目。 這能讓使用者辨別多載函式間的差異。</summary>
      <returns>函式引數的最小數目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>取得 <see cref="T:System.Xml.XPath.XPathResultType" />，表示由函式傳回的 XPath 型別。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" />，表示由函式傳回的 XPath 型別。</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>將介面提供給指定的變數，該變數於 Run Time 時在樣式表中定義。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>在執行階段評估變數並傳回表示變數值的物件。</summary>
      <param name="xsltContext">
        <see cref="T:System.Xml.Xsl.XsltContext" />，表示變數的執行內容。</param>
      <returns>
        <see cref="T:System.Object" />，表示變數值。 可能的傳回型別包括數字、字串、布林值、文件片段或節點集。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>取得值，表示這個變數是否為區域變數。</summary>
      <returns>如果變數是目前內容中的區域變數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>取得值，表示變數是否為可延伸樣式表語言轉換 (XSLT) 參數。 它可以是樣式表或樣板的參數。</summary>
      <returns>如果變數是 XSLT 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>取得 <see cref="T:System.Xml.XPath.XPathResultType" />，表示變數的 XML 路徑語言 (XPath) 型別。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathResultType" />，表示變數的 XPath 型別。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>使用 XSLT 樣式表轉換 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>使用指定的偵錯設定，初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
      <param name="enableDebug">
        <see langword="true" /> 表示產生偵錯資訊，否則為 <see langword="false" />。 將它設為 <see langword="true" />，可讓您用 Microsoft Visual Studio 偵錯工具對樣式表進行偵錯。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>從使用 <see langword="XSLTC.exe" /> 公用程式編譯的樣式表中載入方法。</summary>
      <param name="executeMethod">
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示已編譯樣式表之編譯器產生的 <c>execute</c> 方法。</param>
      <param name="queryData">
        <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法產生的已編譯樣式表中，<c>staticData</c> 欄位中序列化資料結構的位元組陣列。</param>
      <param name="earlyBoundTypes">類型陣列，儲存在已編譯樣式表之編譯器產生的 <c>ebTypes</c> 欄位中。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>載入並編譯位於指定之 URI 的樣式表。</summary>
      <param name="stylesheetUri">樣式表的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到樣式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="stylesheetUri" /> 值。  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入樣式表時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>載入並編譯 URI 所指定的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheetUri">樣式表的 URI。</param>
      <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析樣式表 URI 和 XSLT <c>import</c> 與 <c>include</c> 元素中參考的任何樣式表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到樣式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="stylesheetUri" /> 值。  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入樣式表時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>載入已編譯的樣式表，此樣式表是使用 XSLT 編譯器 (xsltc.exe)所建立的。</summary>
      <param name="compiledStylesheet">包含已編譯樣式表的類別名稱。  
 這通常是樣式表名稱。 除非另有指定，否則 xsltc.exe 工具會將樣式表名稱使用於類別和組件名稱。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的樣式表。</summary>
      <param name="stylesheet">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheet">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件中的樣式表。</summary>
      <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，其中包含衍生自樣式表之 <c>xsl:output</c> 元素的輸出資訊。</summary>
      <returns>唯讀<see cref="T:System.Xml.XmlWriterSettings" />物件, 包含衍生自樣式表單之<c>xsl: output</c>元素的輸出資訊。 這個值可以是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至檔案。</summary>
      <param name="inputUri">輸入文件的 URI。</param>
      <param name="resultsFile">輸出檔案的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到輸入文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法解析 <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值。  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="inputUri">輸入文件的 URI。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="inputUri">輸入文件的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="inputUri">輸入文件的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="inputUri">輸入文件的 URI。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputtUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 XmlResolver 會解析 XSLT <c>document()</c> 函式。</summary>
      <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <param name="documentResolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 <see cref="T:System.Xml.XmlResolver" /> 會解析 XSLT <see langword="document()" /> 函式。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件指定要轉換的文件。</param>
      <param name="arguments">做為 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的引數清單。</param>
      <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
如果樣式表包含 <see langword="xsl:output" /> 項目，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <param name="documentResolver">
        <see cref="T:System.Xml.XmlResolver" />，用於解析 XSLT <see langword="document()" /> 函式。 如果值為 <see langword="null" />，則不會解析 <see langword="document()" /> 函式。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>包含引數的變數，引數為 XSLT 參數或延伸物件 (Extension Object)。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>實作 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>將新物件加入至 <see cref="T:System.Xml.Xsl.XsltArgumentList" />，並將其與命名空間 URI 相關聯。</summary>
      <param name="namespaceUri">與物件關聯的命名空間 URI。 若要使用預設的命名空間，請指定空字串。</param>
      <param name="extension">要加入至清單的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 為 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform 
<paramref name="namespaceUri" /> 已經有與其相關的擴充物件。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有足夠的使用權限呼叫這個方法。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>將參數加入至 <see cref="T:System.Xml.Xsl.XsltArgumentList" />，並將其與命名空間限定名稱相關聯。</summary>
      <param name="name">與參數關聯的名稱。</param>
      <param name="namespaceUri">與參數關聯的命名空間 URI。 若要使用預設的命名空間，請指定空字串。</param>
      <param name="parameter">要加入至清單的參數值或物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> 為 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform。  
根據 W3C XML 規格，<paramref name="name" /> 不是有效的名稱。  
<paramref name="namespaceUri" /> 已經有與其相關的參數。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除所有的參數和擴充物件。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>取得與指定命名空間關聯的物件。</summary>
      <param name="namespaceUri">物件的命名空間 URI。</param>
      <returns>命名空間 URI 物件；如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>取得與名命空間限定名稱關聯的參數。</summary>
      <param name="name">參數名稱。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不會檢查傳遞的名稱是否為有效的本機名稱，但不能為 <see langword="null" />。</param>
      <param name="namespaceUri">與參數關聯的命名空間 URI。</param>
      <returns>參數物件，如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除有命名空間 URI 的物件。</summary>
      <param name="namespaceUri">命名空間 URI，與要移除的物件相關聯。</param>
      <returns>具有命名空間 URI 的物件；如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除參數。</summary>
      <param name="name">要移除的參數名稱。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不會檢查傳遞的名稱是否為有效的本機名稱，但不能為 <see langword="null" />。</param>
      <param name="namespaceUri">命名空間 URI，屬於要移除的參數。</param>
      <returns>參數物件，如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>發生於 <c>xsl:message</c> 元素在樣式表中指定訊息時。</summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>在 XSLT 樣式表中發現錯誤時，由 Load 方法擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>初始化 <see langword="XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="inner">擲回 <see langword="XsltCompileException" /> 的 <see cref="T:System.Exception" />。</param>
      <param name="sourceUri">樣式表的位置路徑。</param>
      <param name="lineNumber">表示樣式表中發生錯誤的行號。</param>
      <param name="linePosition">表示樣式表中發生錯誤的行位置。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XsltCompileException" /> 所有的屬性。</param>
      <param name="context">包含內容資訊的 <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">導致目前例外狀況發生的例外狀況；如果沒有指定任何的內部例外狀況，則為 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將所有 <see langword="XsltCompileException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>封裝可延伸樣式表語言轉換 (XSLT) 處理器的目前執行內容，可讓 XML 路徑語言 (XPath) 解析函式、參數和 XPath 運算式中的命名空間。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>使用指定的 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.Xml.NameTable" /> 類別的新執行個體。</summary>
      <param name="table">要使用的 <see cref="T:System.Xml.NameTable" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>在衍生類別中覆寫時，根據 XSLT 處理器 (即 <see cref="T:System.Xml.Xsl.XslTransform" /> 類別) 載入兩個文件的順序，比較它們的基底統一資源識別元 (URI)。</summary>
      <param name="baseUri">第一份要比較之文件的基底 URI。</param>
      <param name="nextbaseUri">第二份要比較之文件的基底 URI。</param>
      <returns>整數值，描述兩個基底 URI 的相對順序。如果 <paramref name="baseUri" /> 發生在 <paramref name="nextbaseUri" /> 之前，則為 -1；如果兩個基底 URI 相同，則為 0；如果 <paramref name="baseUri" /> 發生在 <paramref name="nextbaseUri" /> 之後，則為 1。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>在衍生類別中覆寫時，會針對指定的內容來評估是否保留或刪除空白區節點。</summary>
      <param name="node">空白區節點，目前內容中要保留或刪除的。</param>
      <returns>如果要保留空白區，則為 <see langword="true" />；如果要刪除空白區，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>在衍生類別中覆寫時，會解析函式參考並傳回表示函式的 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。 <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 用於在執行時間取得函式的傳回值。</summary>
      <param name="prefix">當出現在 XPath 運算式中時函式的前置詞。</param>
      <param name="name">函式的名稱。</param>
      <param name="ArgTypes">引數類型的陣列，供進行解析的函式使用。 這讓您可選取具有相同名稱的方法 (例如，多載方法)。</param>
      <returns>表示函式的 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>在衍生類別中覆寫時，會解析變數參考並傳回表示變數的 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</summary>
      <param name="prefix">當出現在 XPath 運算式中時變數的前置詞。</param>
      <param name="name">變數的名稱。</param>
      <returns>
        <see cref="T:System.Xml.Xsl.IXsltContextVariable" />，表示在執行階段的變數。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>在衍生類別中覆寫時，取得值，表示是否要在輸出中包含空白區 (White Space) 節點。</summary>
      <returns>
        <see langword="true" />，表示要檢查來源文件中的空白區節點，以包含在輸出中。<see langword="false" />，表示不評估空白區節點。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>在處理 XSLT 轉換時發生錯誤所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XsltException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XsltException" /> 所有的屬性。</param>
      <param name="context">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see langword="XsltException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤條件的描述。</param>
      <param name="innerException">擲回 <see langword="XsltException" /> 的 <see cref="T:System.Exception" /> (如果有的話)。 這個值可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將所有 <see langword="XsltException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>取得表示樣式表中發生錯誤的行號。</summary>
      <returns>表示樣式表中發生錯誤的行號。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>取得表示樣式表中發生錯誤的行位置。</summary>
      <returns>表示樣式表中發生錯誤的行位置。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>取得說明目前例外狀況的格式化錯誤訊息。</summary>
      <returns>說明目前例外狀況的格式化錯誤訊息。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>取得樣式表的位置路徑。</summary>
      <returns>樣式表的位置路徑。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>提供 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>取得 <c>xsl:message</c> 元素的內容。</summary>
      <returns>
        <c>Xsl: message</c>元素的內容。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>代表將處理 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>使用可延伸樣式表語言轉換 (XSLT) 樣式表，轉換 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>載入 URL 指定的 XSLT 樣式表。</summary>
      <param name="url">URL，指定要載入的 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>載入 URL 指定的 XSLT 樣式表。</summary>
      <param name="url">URL，指定要載入的 XSLT 樣式表。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入樣式表和 <c>xsl:import</c> 與 <c>xsl:include</c> 元素中參考的任何樣式表。  
如果值為 <see langword="null" />，則會使用不具有使用者認證的預設 <see cref="T:System.Xml.XmlUrlResolver" />，開啟樣式表。 因為沒有使用預設的 <see cref="T:System.Xml.XmlUrlResolver" /> 解析樣式表中的任何外部資源，所以不會解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
      <param name="inputfile">要轉換之來源文件的 URL。</param>
      <param name="outputfile">輸出檔案的 URL。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
      <param name="inputfile">要轉換之來源文件的 URL。</param>
      <param name="outputfile">輸出檔案的 URL。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">要輸出至的資料流。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">要輸出至的資料流。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">要輸出至的資料流。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">要輸出至的資料流。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
注意:這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>呼叫 <see cref="T:System.Xml.XmlResolver" /> 方法時，設定用來解析外部資源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
      <returns>轉換期間所使用的 <see cref="T:System.Xml.XmlResolver" />。 如果設定為<see langword="null" />, 則不會解析 XSLT <c>document ()</c>函式。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>指定 XSLT 功能，以在執行 XSLT 樣式表期間提供支援。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>使用預設設定，初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>使用指定的設定，初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 類別的新執行個體。</summary>
      <param name="enableDocumentFunction">
        <see langword="true" /> 表示啟用 XSLT <c>document()</c> 函式的支援，否則為 <see langword="false" />。</param>
      <param name="enableScript">
        <see langword="true" /> 表示啟用內嵌指令碼區塊的支援，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>取得具有預設值的 <see cref="T:System.Xml.Xsl.XsltSettings" /> 物件。 XSLT <c>document()</c> 函式和內嵌指令碼區塊的支援已停用。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 屬性設為 <see langword="false" /> 的 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>取得或設定值，指出是否啟用 XSLT <c>document()</c> 函式支援。</summary>
      <returns>
        <see langword="true" />支援 XSLT <c>document ()</c>函式;否則為<see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>取得或設定值，指出是否啟用內嵌指令碼區塊支援。</summary>
      <returns>
        <see langword="true" /> 表示支援 XSLT 樣式表的指令碼區塊，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>取得 <see cref="T:System.Xml.Xsl.XsltSettings" /> 物件，此物件會啟用 XSLT <c>document()</c> 函式和內嵌指令碼區塊的支援。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 屬性設為 <see langword="true" /> 的 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 物件。</returns>
    </member>
  </members>
</doc>
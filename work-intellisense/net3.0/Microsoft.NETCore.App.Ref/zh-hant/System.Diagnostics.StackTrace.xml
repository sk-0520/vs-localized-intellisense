<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">提供 <see cref="T:System.Diagnostics.StackFrame" /> 的相關資訊，代表目前執行緒的呼叫堆疊上的函式呼叫。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">選擇性地擷取來源資訊，以初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體。</summary>
      <param name="fNeedFileInfo">若要擷取堆疊框架的檔名、行號和欄號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別對應於目前堆疊框架上方的框架。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">要略過的堆疊上的框架數。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">選擇性地擷取來源資訊，以初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別對應於目前堆疊框架上方的框架。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">要略過的堆疊上的框架數。</param>
      <param name="fNeedFileInfo">若要擷取堆疊框架的檔名、行號和欄號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別只包含指定的檔名和行號。</summary>
      <param name="fileName" vsli:raw="The file name.">檔案名稱。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定檔案中的行號。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別只包含指定的檔名、行號和欄號。</summary>
      <param name="fileName" vsli:raw="The file name.">檔案名稱。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定檔案中的行號。</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">指定檔案中的欄位數目。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">取得檔案中的欄位數目，含有正在執行的程式碼。 這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">檔案欄號，如果無法確定檔案欄號則為 0 (零)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">取得檔案中的行號，含有正在執行的程式碼。 這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">檔案行號，如果無法確定檔案行號則為 0 (零)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">取得檔案名稱，含有正在執行的程式碼。 這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">檔名，如果無法確定檔名則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">為正在執行的方法取得從 Microsoft intermediate language (MSIL) 程式碼起始的位移。 這項位移可能是大約值，這是根據 Just-In-Time (JIT) 編譯器是否產生偵錯程式碼而定。 由 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 控制產生這個偵錯資訊。</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">從 MSIL 程式碼起始的位移，用於正在執行的方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">取得框架正在執行的所在方法。</summary>
      <returns vsli:raw="The method in which the frame is executing.">框架正在執行的所在方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">為正在執行的方法取得從原生 (Native) Just-In-Time (JIT) 編譯程式碼起始的位移。 由 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別控制產生這個偵錯資訊。</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">從 JIT 編譯程式碼起始的位移，用於正在執行的方法。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">當原生的 (Native) 或 Microsoft Intermediate Language (MSIL) 的位移不明時，定義傳回自 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> 或 <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> 方法的值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">建立堆疊追蹤的可讀取表示。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">堆疊追蹤的可讀取表示。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">提供 <see cref="T:System.Diagnostics.StackFrame" /> 類別的擴充方法，代表目前執行緒呼叫堆疊上的函式呼叫。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">傳回此堆疊框架正在執行的指標，其指向原生映像的基底位址。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">指向原生映像之基底位址的指標，或者 <see cref="F:System.IntPtr.Zero" /> (如果您以 .NET Framework 為目標)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">取得正在執行之方法的原生程式碼開頭的介面指標。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">正在執行之方法的原生程式碼開頭的介面指標，或者 <see cref="F:System.IntPtr.Zero" /> (如果您以 .NET Framework 為目標)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">指出正在執行的方法是否有從 IL 程式碼起始的可用位移。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如有可用的位移，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">指出指定的框架執行所在的方法相關資訊是否可用。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的框架執行所在的方法相關資訊可用，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">指出指定的堆疊框架是否有可用的原生映像。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果原生影像可供此堆疊框架使用，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">指出包含程式碼的檔案是否可用，指定的堆疊框架正在執行此程式碼。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆疊框架。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的堆疊框架正在執行的程式碼可用，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">表示堆疊追蹤，這是一個或多個堆疊框架的已排序集合。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">從呼叫端的框架來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">從呼叫端的框架來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，可以選擇性地擷取來源資訊。</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要擷取檔案名稱、行號和資料行編號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，這個執行個體含有單一框架。</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">
        <see cref="T:System.Diagnostics.StackTrace" /> 物件應該含有的框架。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">使用提供的例外狀況物件初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">例外狀況物件，從其中建構堆疊追蹤。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">使用提供的例外狀況物件，及選擇性地擷取來源資訊，來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
      <param name="exception">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="needFileInfo">若要擷取檔案名稱、行號和資料行編號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">使用所提供的例外狀況物件初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，並跳過指定數量的框架。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">要開始追蹤的堆疊上的框架數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 參數為負。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">使用所提供的例外狀況物件將 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體初始化，並跳過指定數量的框架，亦可選擇性擷取來源資訊。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">要開始追蹤的堆疊上的框架數。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要擷取檔案名稱、行號和資料行編號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 參數為負。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">從呼叫端的框架初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，略過指定的框架數。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">要開始追蹤的堆疊上的框架數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 參數為負。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">使用呼叫端的框架初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，並跳過指定數量的框架，亦可選擇性擷取來源資訊。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">要開始追蹤的堆疊上的框架數。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要擷取檔案名稱、行號和資料行編號，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 參數為負。</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">取得堆疊追蹤中的框架數。</summary>
      <returns vsli:raw="The number of frames in the stack trace.">堆疊追蹤裡的框架數。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">取得指定的堆疊框架。</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">要求的堆疊框架索引。</param>
      <returns vsli:raw="The specified stack frame.">指定的堆疊框架。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">傳回目前堆疊追蹤內的所有堆疊框架的複本。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">
        <see cref="T:System.Diagnostics.StackFrame" /> 型別的陣列，表示堆疊追蹤中的函式呼叫。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">定義要從堆疊追蹤省略的方法數預設值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">建立堆疊追蹤的可讀取表示。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">堆疊追蹤的可讀取表示。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">表示 Managed 程式碼的符號繫結器 (Binder)。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">為目前的檔案取得符號讀取器的介面。</summary>
      <param name="importer" vsli:raw="The metadata import interface.">中繼資料匯入介面。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">讀取器介面所需要的檔案名稱。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">用來搜尋符號檔的搜尋路徑。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">讀取偵錯符號的 <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 介面。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">表示 Managed 程式碼的符號繫結器 (Binder)。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">為目前的檔案取得符號讀取器的介面。</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">
        <see cref="T:System.IntPtr" />，參考中繼資料匯入介面。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">讀取器介面所需要的檔案名稱。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">用來搜尋符號檔的搜尋路徑。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">讀取偵錯符號的 <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 介面。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">代表符號存放區所參考的文件。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">取得總和檢查碼 (Checksum) 演算法識別項。</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">識別總和檢查碼演算法的 GUID。 如果沒有任何總和檢查碼的話，該值會全部為零。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">取得目前文件的類型。</summary>
      <returns vsli:raw="The type of the current document.">目前文件的類型。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">傳回最接近的一行 (也就是序列點)，提供目前文件的某一行 (可能是或可能不是序列點)。</summary>
      <param name="line" vsli:raw="The specified line in the document.">文件中的指定行。</param>
      <returns vsli:raw="The closest line that is a sequence point.">最接近的一行 (也就是序列點)。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">取得總和檢查碼。</summary>
      <returns vsli:raw="The checksum.">總和檢查碼。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">取得指定的範圍的內嵌文件來源。</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">目前文件中的開始行。</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">目前文件中的開始欄。</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">目前文件中的結束行。</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">目前文件中的結束欄。</param>
      <returns vsli:raw="The document source for the specified range.">指定的範圍的文件來源。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">檢查目前文件是否存放在符號存放區中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前文件是存放在符號存放區中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">取得目前文件的語言。</summary>
      <returns vsli:raw="The language of the current document.">目前文件的語言。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">取得目前文件的語言廠商。</summary>
      <returns vsli:raw="The language vendor of the current document.">目前文件的語言廠商。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">取得內嵌來源的長度 (以位元組為單位)。</summary>
      <returns vsli:raw="The source length of the current document.">目前文件的來源長度。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">取得目前文件的 URL。</summary>
      <returns vsli:raw="The URL of the current document.">目前文件的 URL。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">代表符號存放區所參考的文件。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">設定總和檢查碼資訊。</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">表示演算法 ID 的 GUID。</param>
      <param name="checkSum" vsli:raw="The checksum.">總和檢查碼。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">在符號存放區中存放文件的未經處理來源。</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">文件來源，表示為不帶正負號的位元組。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">表示符號存放區 (Store) 內的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">取得其中定義目前方法的命名空間。</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">其中定義目前方法的命名空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">取得 Microsoft Intermediate Language (MSIL) 位移，位於對應到指定位置的方法內。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">要求位移的文件。</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">對應到位移的文件行。</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">對應到位移的文件欄。</param>
      <returns vsli:raw="The offset within the specified document.">位移，位於指定的文件內。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">取得目前方法的參數。</summary>
      <returns vsli:raw="The array of parameters for the current method.">目前方法的參數陣列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">取得開始和結束位移配對的陣列，其對應到 Microsoft intermediate language (MSIL) 的範圍，指定這個方法內所涵蓋的位置。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">要求位移的文件。</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">對應到範圍的文件行。</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">對應到範圍的文件欄。</param>
      <returns vsli:raw="An array of start and end offset pairs.">開始和結束位移配對的陣列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">當指定方法內的位移時，傳回最封入的語彙範圍。</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">位元組位移，位於語彙範圍的方法內。</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">最封入的語彙範圍，用於方法內指定的位元組位移。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">取得目前方法的序列點。</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">位元組位移的陣列，在序列點的方法開頭。</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">序列點所在的文件陣列。</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">序列點所在文件中的行陣列。</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">序列點所在文件中的欄陣列。</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">序列點結束的文件中的行陣列。</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">序列點結束的文件中的欄陣列。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">取得目前方法來源的開始和結束位置。</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">開始和結束的來源文件。</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">在對應來源文件中開始和結束的行。</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">在對應來源文件中開始和結束的欄。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置有被定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">取得目前方法的根語彙範圍。 這個範圍會封入整個方法。</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">封入整個方法的根語彙範圍。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">取得方法中序列點的計數。</summary>
      <returns vsli:raw="The count of the sequence points in the method.">方法中序列點的計數。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">取得 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />，其包含目前方法的中繼資料 (Metadata)。</summary>
      <returns vsli:raw="The metadata token for the current method.">目前方法的中繼資料語彙基元 (Token)。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">表示符號存放區 (Store) 內的命名空間。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">取得目前命名空間的子成員。</summary>
      <returns vsli:raw="The child members of the current namespace.">目前命名空間的子成員。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">取得目前命名空間內定義在全域範圍的所有變數。</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">目前命名空間內定義在全域範圍的變數。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">取得目前的命名空間。</summary>
      <returns vsli:raw="The current namespace.">目前的命名空間。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">表示 Managed 程式碼的符號讀取器 (Reader)。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">取得由語言、廠商和類型指定的文件。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">識別文件的 URL。</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件語言。 您可以指定這個參數為 <see cref="F:System.Guid.Empty" />。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件語言的廠商識別。 您可以指定這個參數為 <see cref="F:System.Guid.Empty" />。</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件的類型。 您可以指定這個參數為 <see cref="F:System.Guid.Empty" />。</param>
      <returns vsli:raw="The specified document.">指定的文件。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">取得定義在符號存放區中所有文件的陣列。</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">定義在符號存放區中所有文件的陣列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">取得模組中所有全域變數。</summary>
      <returns vsli:raw="An array of all variables in the module.">模組中所有變數的陣列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">取得當指定方法識別項時的符號讀取器方法物件。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">方法的中繼資料語彙基元。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定的方法識別項之符號讀取器方法物件。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">取得當指定方法的識別項和其編輯後繼續版本時的符號讀取器方法物件。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">方法的中繼資料語彙基元。</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">方法的編輯後繼續版本。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定的方法識別項之符號讀取器方法物件。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">取得符號讀取器方法物件，包含文件中指定的位置。</summary>
      <param name="document" vsli:raw="The document in which the method is located.">方法所在的文件。</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">文件內的行位置。 行是有編號的，以 1 為開頭。</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">文件內的欄位置。 欄是有編號的，以 1 為開頭。</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">文件中指定的位置之讀取器方法物件。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">取得目前符號存放區內定義在全域範圍中的命名空間。</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">目前符號存放區內定義在全域範圍中的命名空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">取得當指定屬性名稱時的屬性值。</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">屬性要求的物件之中繼資料語彙基元。</param>
      <param name="name" vsli:raw="The attribute name.">屬性名稱。</param>
      <returns vsli:raw="The value of the attribute.">屬性的值。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">當指定父代時，取得不是區域的變數。</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">變數要求的型別之中繼資料語彙基元。</param>
      <returns vsli:raw="An array of variables for the parent.">父代的變數陣列。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">取得方法的中繼資料語彙基元 (Metadata Token)，如果有的話，這個語彙基元會被指定為模組的使用者進入點 (Entry Point)。</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">方法的中繼資料語彙基元，是模組的使用者進入點。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">表示 <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> 內的語彙範圍 (Lexical Scope)，提供範圍的開始和結束位移的存取，以及其子系和父代範圍的存取。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">取得目前語彙範圍的結束位移。</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">目前語彙範圍的結束位移。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">取得目前語彙範圍的子系語彙範圍。</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">目前語彙範圍的子系語彙範圍。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">取得目前語彙範圍內的區域變數。</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">目前語彙範圍內的區域變數。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">取得在目前範圍內使用的命名空間。</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">在目前範圍內使用的命名空間。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">取得包含目前語彙範圍的方法。</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">包含目前語彙範圍的方法。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">取得目前範圍的父代語彙範圍。</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">目前範圍的父代語彙範圍。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">取得目前語彙範圍的開始位移。</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">目前語彙範圍的開始位移。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">表示符號存放區內的變數。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">取得變數的第一個位址。</summary>
      <returns vsli:raw="The first address of the variable.">變數的第一個位址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">取得變數的第二個位址。</summary>
      <returns vsli:raw="The second address of the variable.">變數的第二個位址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">取得變數的第三個位址。</summary>
      <returns vsli:raw="The third address of the variable.">變數的第三個位址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">取得描述位址類型的 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 值。</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">位址的類型。 其中一個 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 值。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">取得變數的屬性。</summary>
      <returns vsli:raw="The variable attributes.">變數屬性。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">取得變數範圍內變數的結束位移。</summary>
      <returns vsli:raw="The end offset of the variable.">變數的結束位移。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">取得變數簽章。</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">當做不透明 Blob 的變數簽章。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">取得變數的名稱。</summary>
      <returns vsli:raw="The name of the variable.">變數的名稱。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">取得變數範圍內變數的開始位移。</summary>
      <returns vsli:raw="The start offset of the variable.">變數的開始位移。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">表示 Managed 程式碼的符號寫入器。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">關閉 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 和認可符號存放區的符號。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">關閉目前的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">關閉最近一次使用的命名空間。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">關閉目前的語彙範圍。</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">範圍中超過最後一個指令的點。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">定義來源文件。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">識別文件的 URL。</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件語言。 這個參數可以是 <see cref="F:System.Guid.Empty" />。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件語言的廠商識別。 這個參數可以是 <see cref="F:System.Guid.Empty" />。</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文件的類型。 這個參數可以是 <see cref="F:System.Guid.Empty" />。</param>
      <returns vsli:raw="The object that represents the document.">表示文件的物件。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">定義型別中的欄位或全域欄位。</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">中繼資料 (Metadata) 類型或方法語彙基元 (Token)。</param>
      <param name="name" vsli:raw="The field name.">欄位名稱。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">欄位屬性 (Attribute) 的位元組合。</param>
      <param name="signature" vsli:raw="The field signature.">欄位簽章。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">
        <paramref name="addr1" /> 和 <paramref name="addr2" /> 的位址類型。</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">欄位規格的第一個位址。</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">欄位規格的第二個位址。</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">欄位規格的第三個位址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">定義單一全域變數。</summary>
      <param name="name" vsli:raw="The global variable name.">全域變數名稱。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">全域變數屬性的位元組合。</param>
      <param name="signature" vsli:raw="The global variable signature.">全域變數簽章。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的位址類型。</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">全域變數規格的第一個位址。</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">全域變數規格的第二個位址。</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">全域變數規格的第三個位址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">在目前的語彙範圍中定義單一變數。</summary>
      <param name="name" vsli:raw="The local variable name.">區域變數名稱。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">區域變數屬性的位元組合。</param>
      <param name="signature" vsli:raw="The local variable signature.">區域變數簽章。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的位址類型。</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">區域變數規格的第一個位址。</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">區域變數規格的第二個位址。</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">區域變數規格的第三個位址。</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">變數的開始位移。 如果這個參數是零，則會忽略它，並定義整個範圍的變數。 如果這個參數不是零，該變數便會落在目前範圍的位移內。</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">變數的結束位移。 如果這個參數是零，則會忽略它，並定義整個範圍的變數。 如果這個參數不是零，該變數便會落在目前範圍的位移內。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">定義目前方法中的單一參數。 每一個參數的型別是從它位於方法簽章內的位置中取出。</summary>
      <param name="name" vsli:raw="The parameter name.">參數名稱。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">參數屬性的位元組合。</param>
      <param name="sequence" vsli:raw="The parameter signature.">參數簽章。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的位址類型。</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">參數規格的第一個位址。</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">參數規格的第二個位址。</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">參數規格的第三個位址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">在目前的方法內定義一組序列點。</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">文件物件，要為其定義序列點。</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">從方法的開頭來測量的序列點位移。</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">序列點的文件行。</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">序列點的文件位置。</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">序列點的文件結束行。</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">序列點的文件結束位置。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">設定要與寫入器產生關聯的中繼資料發出者介面。</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">中繼資料發出器介面。</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">偵錯符號寫入的檔案名稱。 有些寫入器需要檔名，有些則不需要。 如果檔案名稱是指定給不使用檔案名稱的寫入器，則這個參數會被忽略。</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> 表示這是完整重建，而 <see langword="false" /> 則表示這是累加編譯。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">開啟要置入符號資訊的方法。</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">要開啟之方法的中繼資料語彙基元。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">開啟新的命名空間。</summary>
      <param name="name" vsli:raw="The name of the new namespace.">新命名空間名稱。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">開啟目前方法中的新語彙範圍。</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">從方法開頭到語彙範圍中第一個指令的位移 (以位元組為單位)。</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">不透明範圍識別項，稍後可以與 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> 一起使用來定義範圍的開始和結束位移。 在這種情況下，傳遞到 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> 和 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> 的位移會被忽略。 範圍識別項只有在目前方法中才會有效。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">指定原始程式檔內方法的實際開頭和結尾。 使用 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> 來指定方法的範圍，以及存在於方法內的獨立序列點。</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">包含開始位置的文件。</param>
      <param name="startLine" vsli:raw="The starting line number.">開始的行號。</param>
      <param name="startColumn" vsli:raw="The starting column.">開始的欄。</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">包含結束位置的文件。</param>
      <param name="endLine" vsli:raw="The ending line number.">結束的行號。</param>
      <param name="endColumn" vsli:raw="The ending column number.">結束的欄號。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">定義指定語彙範圍的位移範圍。</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">語彙範圍的識別項。</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">語彙範圍開頭的位元組位移。</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">語彙範圍結尾的位元組位移。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">在指定屬性名稱和屬性值時定義屬性。</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">屬性被定義的中繼資料語彙基元。</param>
      <param name="name" vsli:raw="The attribute name.">屬性名稱。</param>
      <param name="data" vsli:raw="The attribute value.">屬性值。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">設定 Managed <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 用來發出符號的基礎 <see langword="ISymUnmanagedWriter" /> (對應的 Unmanaged 介面)。</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">程式碼的指標，該程式碼代表基礎寫入器。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">識別使用者定義的方法做為目前模組的進入點 (Entry Point)。</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">方法的中繼資料語彙基元，為使用者的進入點。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">指定是在開放式語彙範圍內使用特定且完整的命名空間名稱。</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">命名空間的完整名稱。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">指定 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> 介面的方法 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> 和 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 中，區域變數、參數和欄位的位址類型。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">位元欄位 (Bit Field)。 <paramref name="addr1" /> 參數是欄位的開始位置，而 <paramref name="addr2" /> 參數是欄位長度。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">Microsoft Intermediate Language (MSIL) 位移 (Offset)。 <paramref name="addr1" /> 參數是 MSIL 區域變數或參數索引。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">原生位移 (Offset)。 <paramref name="addr1" /> 參數是從父代 (Parent) 開頭的位移 (Offset)。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">原生暫存器位址。 <paramref name="addr1" /> 參數是存放變數的暫存器。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">暫存器的相對位址。 <paramref name="addr1" /> 參數是低序位暫存器，而 <paramref name="addr2" /> 參數是高序位暫存器。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">暫存器的相對位址。 <paramref name="addr1" /> 參數是暫存器，而 <paramref name="addr2" /> 參數是位移。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">暫存器的相對位址。 <paramref name="addr1" /> 參數是低序位暫存器、<paramref name="addr2" /> 參數是堆疊暫存器，而 <paramref name="addr3" /> 參數是從堆疊指標到數值的高序位部分的位移 (Offset)。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">原生相關虛擬位址 (RVA)。 <paramref name="addr1" /> 參數是模組中的 RVA。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">原生區段位移 (Offset)。 <paramref name="addr1" /> 參數是區段，而 <paramref name="addr2" /> 參數是位移 (Offset)。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">暫存器的相對位址。 <paramref name="addr1" /> 參數是堆疊暫存器、<paramref name="addr2" /> 參數是從堆疊指標到數值的低序位部分的位移 (Offset)，而 <paramref name="addr3" /> 參數是高序位暫存器。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構是表示符號資訊之語彙基元 (Token) 的物件表示。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">當有指定的值時，初始化 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構的新執行個體。</summary>
      <param name="val" vsli:raw="The value to be used for the token.">要用於語彙基元的值。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">判斷 <paramref name="obj" /> 是否等於這個執行個體。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">要進行檢查的 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">決定 <paramref name="obj" /> 是否為 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 的執行個體，並且等於這個執行個體。</summary>
      <param name="obj" vsli:raw="The object to check.">要檢查的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 是 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 的執行個體，並且等於這個執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">產生目前語彙基元的雜湊程式碼 (Hash Code)。</summary>
      <returns vsli:raw="The hash code for the current token.">目前語彙基元的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">取得目前語彙基元的值。</summary>
      <returns vsli:raw="The value of the current token.">目前語彙基元的值。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">傳回值，這個值表示兩個 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 物件是否相等。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">傳回值，指出兩個 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 物件是否不相等。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 結構。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">保留要用於符號存放區的文件類型之公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">指定要用於符號存放區的文件類型之 GUID。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">保留要用於符號存放區的語言類型之公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">指定要用於符號存放區的 Basic 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">指定要用於符號存放區的 C 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">指定要用於符號存放區的 Cobol 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">指定要用於符號存放區的 C++ 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">指定要用於符號存放區的 C# 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">指定要用於符號存放區的 ILAssembly 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">指定要用於符號存放區的 Java 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">指定要用於符號存放區的 JScript 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">指定要用於符號存放區的 C++ 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">指定要用於符號存放區的 Pascal 語言類型之 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">指定要用於符號存放區的 SMC 語言類型之 GUID。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">保留要用於符號存放區的語言廠商之公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">指定 Microsoft 語言廠商的 GUID。</summary>
    </member>
  </members>
</doc>
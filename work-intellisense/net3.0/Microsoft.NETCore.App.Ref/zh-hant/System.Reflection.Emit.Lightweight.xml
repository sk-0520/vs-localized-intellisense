<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary vsli:raw="Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.">提供產生動態方法之 Microsoft Intermediate Language (MSIL) 和中繼資料 (Metadata) 的替代方式支援，包括用以建立語彙基元 (Token) 和插入程式碼的方法、例外狀況處理 (Exception Handling) 以及區域變數簽章 Blob (二進位大型物件)。</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary vsli:raw="Gets the dynamic method whose body is generated by the current instance.">取得動態方法，其主體是由目前的執行個體所產生。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt; object representing the dynamic method for which the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object is generating code.">
        <see cref="T:System.Reflection.Emit.DynamicMethod" /> 物件，表示目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件產生程式碼所針對的動態方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing the signature for the associated dynamic method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示關聯動態方法的簽章。</summary>
      <param name="signature" vsli:raw="An array that contains the signature.">包含簽章的陣列。</param>
      <returns vsli:raw="A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.">語彙基元，可嵌入關聯動態方法的中繼資料和 MSIL 資料流中。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a dynamic method to be called from the associated method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的方法呼叫的動態方法。</summary>
      <param name="method" vsli:raw="The dynamic method to call.">要呼叫的動態方法。</param>
      <returns vsli:raw="A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.">語彙基元，可當做 MSIL 指令的目標，嵌入關聯動態方法的 MSIL 資料流中。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位。</summary>
      <param name="field" vsli:raw="The field to be accessed.">要存取的欄位。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位；該欄位是在指定的泛型型別上。</summary>
      <param name="field" vsli:raw="The field to be accessed.">要存取的欄位。</param>
      <param name="contextType" vsli:raw="The generic type the field belongs to.">欄位所屬的泛型型別。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method to be accessed from the associated dynamic method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的方法。</summary>
      <param name="method" vsli:raw="The method to be accessed.">要存取的方法。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 物件的範圍內，當做存取方法 (例如 <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 或 <see cref="T:System.Reflection.Emit.DynamicILInfo" />) 之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a method on a generic type.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示泛型型別的方法。</summary>
      <param name="method" vsli:raw="The method.">方法。</param>
      <param name="contextType" vsli:raw="The generic type the method belongs to.">方法所屬的泛型型別。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that accesses methods, such as &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt; or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Ldtoken&quot; /&gt;, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 物件的範圍內，當做存取方法 (例如 <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 或 <see cref="T:System.Reflection.Emit.DynamicILInfo" />) 之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a type to be used in the associated dynamic method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的型別。</summary>
      <param name="type" vsli:raw="The type to be used.">要使用的型別。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做需要型別之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary vsli:raw="Gets a token, valid in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt;, representing a string literal to be used in the associated dynamic method.">取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的字串常值 (String Literal)。</summary>
      <param name="literal" vsli:raw="The string to be used.">要使用的字串。</param>
      <returns vsli:raw="A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object.">語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做需要字串之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">設定關聯之動態方法的程式碼主體。</summary>
      <param name="code" vsli:raw="A pointer to a byte array containing the MSIL stream.">指標，指向包含 MSIL 資料流的位元組陣列。</param>
      <param name="codeSize" vsli:raw="The number of bytes in the MSIL stream.">在 MSIL 資料流中的位元組數目。</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">執行此方法時，運算元堆疊上的最大項目數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;code&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;codeSize&quot; /&gt; is greater than 0.">
        <paramref name="code" /> 為 <see langword="null" /> 且 <paramref name="codeSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;codeSize&quot; /&gt; is less than 0.">
        <paramref name="codeSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary vsli:raw="Sets the code body of the associated dynamic method.">設定關聯之動態方法的程式碼主體。</summary>
      <param name="code" vsli:raw="An array that contains the MSIL stream.">包含 MSIL 資料流的陣列。</param>
      <param name="maxStackSize" vsli:raw="The maximum number of items on the operand stack when the method is executing.">執行此方法時，運算元堆疊上的最大項目數。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">設定關聯之動態方法的例外狀況中繼資料。</summary>
      <param name="exceptions" vsli:raw="A pointer to a byte array containing the exception metadata.">指標，指向包含例外狀況中繼資料的位元組陣列。</param>
      <param name="exceptionsSize" vsli:raw="The number of bytes of exception metadata.">例外狀況中繼資料的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;exceptionSize&quot; /&gt; is greater than 0.">
        <paramref name="exceptions" /> 為 <see langword="null" /> 且 <paramref name="exceptionSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exceptionSize&quot; /&gt; is less than 0.">
        <paramref name="exceptionSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary vsli:raw="Sets the exception metadata for the associated dynamic method.">設定關聯之動態方法的例外狀況中繼資料。</summary>
      <param name="exceptions" vsli:raw="An array that contains the exception metadata.">包含例外狀況中繼資料的陣列。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">設定區域變數簽章，描述關聯之動態方法的區域變數配置。</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">陣列，其中包含相關 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 之區域變數的配置。</param>
      <param name="signatureSize" vsli:raw="The number of bytes in the signature.">簽章中的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localSignature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;signatureSize&quot; /&gt; is greater than 0.">
        <paramref name="localSignature" /> 為 <see langword="null" /> 且 <paramref name="signatureSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;signatureSize&quot; /&gt; is less than 0.">
        <paramref name="signatureSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary vsli:raw="Sets the local variable signature that describes the layout of local variables for the associated dynamic method.">設定區域變數簽章，描述關聯之動態方法的區域變數配置。</summary>
      <param name="localSignature" vsli:raw="An array that contains the layout of local variables for the associated &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">陣列，其中包含相關 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 之區域變數的配置。</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary vsli:raw="Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.">定義及表示可以編譯、執行和捨棄的動態方法。 捨棄的方法可被記憶體回收。</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">為模組建立全域的動態方法，指定方法名稱、屬性、呼叫慣例、傳回型別、參數型別、模組，以及是否應當略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別與成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，指定動態方法的屬性。 允許的唯一組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">動態方法的呼叫慣例。 必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" /> 。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若為 <see langword="true" />，則略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="m" /> 為模組，會提供動態方法的匿名裝載。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> 為 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 之外的旗標組合。  
-或- 
 <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。  
-或- 
 <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">建立動態方法，指定方法名稱、屬性、呼叫慣例、傳回型別、參數型別、與動態方法在邏輯上相關聯的型別，以及是否應略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別和成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values that specifies the attributes of the dynamic method. The only combination allowed is &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，指定動態方法的屬性。 允許的唯一組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the dynamic method. Must be &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">動態方法的呼叫慣例。 必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" /> 。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" /> 。</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。 動態方法可以存取型別的所有成員。</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若為 <see langword="true" />，則略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="owner" /> 為介面、陣列、開放泛型型別，或泛型型別或方法的型別參數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is a combination of flags other than &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Public&quot; /&gt; and &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;callingConvention&quot; /&gt; is not &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="attributes" /> 為 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 之外的旗標組合。  
-或- 
 <paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。  
-或- 
 <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.">初始化匿名裝載動態方法，指定方法名稱、傳回型別及參數型別。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary vsli:raw="Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">初始化匿名裝載的動態方法，並指定方法名稱、傳回類型、參數類型、以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="restrictedSkipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 則略過對動態方法的 MSIL 所存取之類型和成員的 JIT 可視性檢查，但有此限制：包含這些類型和成員的組件的信任層級，必須等於或小於發出動態方法的呼叫堆疊的信任層級；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.">為模組建立全域的動態方法，指定方法名稱、傳回型別、參數型別和模組。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="m" /> 為模組，會提供動態方法的匿名裝載。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">為模組建立全域的動態方法，指定方法名稱、傳回型別、參數型別、模組，以及是否應當略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別與成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; representing the module with which the dynamic method is to be logically associated.">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.">若為 <see langword="true" />，則略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is a module that provides anonymous hosting for dynamic methods.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="m" /> 為模組，會提供動態方法的匿名裝載。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;m&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.">建立動態方法，指定方法名稱、傳回型別、參數型別和動態方法在邏輯上與其相關聯的型別。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" /> 。</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。 動態方法可以存取型別的所有成員。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="owner" /> 為介面、陣列、開放泛型型別，或泛型型別或方法的型別參數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 是 <see langword="null" />，或是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.">建立動態方法，指定方法名稱、傳回型別、參數型別、與動態方法以邏輯方式相關聯的型別，以及是否應略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別和成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name" vsli:raw="The name of the dynamic method. This can be a zero-length string, but it cannot be &lt;see langword=&quot;null&quot; /&gt;.">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the return type of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no return type.">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects specifying the types of the parameters of the dynamic method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no parameters.">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" /> 。</param>
      <param name="owner" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; with which the dynamic method is logically associated. The dynamic method has access to all members of the type.">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。 動態方法可以存取型別的所有成員。</param>
      <param name="skipVisibility" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若為 <see langword="true" />，則略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;T:System.Void&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is an interface, an array, an open generic type, or a type parameter of a generic type or method.">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。  
-或- 
 <paramref name="owner" /> 為介面、陣列、開放泛型型別，或泛型型別或方法的型別參數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or is a type for which &lt;see cref=&quot;P:System.Type.IsByRef&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="returnType" /> 是 <see langword="null" />，或是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的型別。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary vsli:raw="Gets the attributes specified when the dynamic method was created.">取得建立動態方法時指定的屬性。</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; values representing the attributes for the method.">
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，表示方法的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary vsli:raw="Gets the calling convention specified when the dynamic method was created.">取得建立動態方法時指定的呼叫慣例。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; values that indicates the calling convention of the method.">其中一個 <see cref="T:System.Reflection.CallingConventions" /> 值，表示方法的呼叫慣例。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it.">完成動態方法，並建立可用於執行該動態方法的委派。</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method.">簽章與動態方法相符的委派型別。</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method.">指定型別的委派，可用於執行動態方法。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">動態方法沒有方法主體。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="delegateType" /> 的參數數目錯誤或參數型別錯誤。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary vsli:raw="Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.">完成動態方法，並建立可用於執行該動態方法的委派，同時指定委派型別和委派繫結至的物件。</summary>
      <param name="delegateType" vsli:raw="A delegate type whose signature matches that of the dynamic method, minus the first parameter.">簽章與動態方法相符的委派型別，不包含第一個參數。</param>
      <param name="target" vsli:raw="An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.">委派繫結至的物件。 必須與動態方法的第一個參數型別相同。</param>
      <returns vsli:raw="A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.">指定型別的委派，可用於執行具有指定目標物件的動態方法。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method has no method body.">動態方法沒有方法主體。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is not the same type as the first parameter of the dynamic method, and is not assignable to that type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;delegateType&quot; /&gt; has the wrong number of parameters or the wrong parameter types.">
        <paramref name="target" /> 與動態方法的第一個參數型別不同，無法指派給該型別。  
-或- 
 <paramref name="delegateType" /> 的參數數目錯誤或參數型別錯誤。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary vsli:raw="Gets the type that declares the method, which is always &lt;see langword=&quot;null&quot; /&gt; for dynamic methods.">取得宣告方法的型別，對於動態方法而言一定是 <see langword="null" />。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">一定是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of the dynamic method.">定義動態方法的參數。</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">在參數清單中參數的位置。 參數的索引開頭以數字 1 代表第一個參數。</param>
      <param name="attributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.ParameterAttributes&quot; /&gt; values that specifies the attributes of the parameter.">
        <see cref="T:System.Reflection.ParameterAttributes" /> 值的位元組合，指定參數的屬性。</param>
      <param name="parameterName" vsli:raw="The name of the parameter. The name can be a zero-length string.">參數名稱。 名稱可以是長度為零的字串。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">這個方法沒有參數。  
-或- 
 <paramref name="position" /> 小於 0。  
-或- 
 <paramref name="position" /> 大於方法參數的數目。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary vsli:raw="Returns the base implementation for the method.">傳回方法的基底實作。</summary>
      <returns vsli:raw="The base implementation of the method.">方法的基底實作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for the method.">傳回為方法定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the method.">物件的陣列，表示方法的所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes of the specified type that have been applied to the method.">傳回已套用至方法之指定型別的自訂屬性。</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to return.">
        <see cref="T:System.Type" />，表示要傳回之自訂屬性的型別。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</param>
      <returns vsli:raw="An array of objects representing the attributes of the method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt; or derive from type &lt;paramref name=&quot;attributeType&quot; /&gt;.">物件的陣列，表示型別為 <paramref name="attributeType" /> 或衍生自型別 <paramref name="attributeType" /> 之方法的屬性。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.">傳回 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件，該物件可用於從中繼資料語彙基元 (Metadata Token)、範圍和 Microsoft Intermediate Language (MSIL) 資料流產生方法主體。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.DynamicILInfo&quot; /&gt; object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.">
        <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件，可用於從中繼資料語彙基元、範圍和 MSIL 資料流產生方法主體。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.">傳回這個方法的 Microsoft intermediate language (MSIL) 產生器，且預設 MSIL 資料流大小為 64 個位元組。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method.">方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.">傳回這個方法的 Microsoft intermediate language (MSIL) 產生器，且使用指定的 MSIL 資料流大小。</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">MSIL 緩衝區的大小，以位元組為單位。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for the method, with the specified MSIL stream size.">方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件，具有指定的 MSIL 資料流大小。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">傳回方法的實作旗標。</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; values representing the implementation flags for the method.">
        <see cref="T:System.Reflection.MethodImplAttributes" /> 值的位元組合，表示方法的實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary vsli:raw="Returns the parameters of the dynamic method.">傳回動態方法的參數。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; objects that represent the parameters of the dynamic method.">
        <see cref="T:System.Reflection.ParameterInfo" /> 物件的陣列，表示動態方法的參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary vsli:raw="Gets or sets a value indicating whether the local variables in the method are zero-initialized.">取得或設定值，指出方法中的區域變數是否以零起始。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in the method are zero-initialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果方法中的區域變數以零起始則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.">使用指定的文化特性資訊，在指定繫結器 (Binder) 的條件約束下，以指定的參數叫用動態方法。</summary>
      <param name="obj" vsli:raw="This parameter is ignored for dynamic methods, because they are static. Specify &lt;see langword=&quot;null&quot; /&gt;.">由於這個參數是靜態的 (Static)，因此會動態方法忽略它們。 請指定 <see langword="null" />。</param>
      <param name="invokeAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values.">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="binder" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt; object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects through reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">
        <see cref="T:System.Reflection.Binder" /> 物件，它透過反映啟用繫結、引數型別的強制型轉 (Coercion)、成員的引動過程，和 <see cref="T:System.Reflection.MemberInfo" /> 物件的擷取。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。 如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be &lt;see langword=&quot;null&quot; /&gt;.">引數清單。 這是與要叫用的方法參數具有相同數目、順序和型別的引數陣列。 如果沒有參數，則這個參數應該是 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. For example, this information is needed to correctly convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, because 1000 is represented differently by different cultures.">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 例如，必須有這個資訊，才能將表示 1000 的 <see cref="T:System.String" /> 正確地轉換為 <see cref="T:System.Double" /> 值，因為 1000 在不同文化特性中有不同的表示方式。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the return value of the invoked method.">
        <see cref="T:System.Object" />，包含叫用方法的傳回值。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; calling convention is not supported.">不支援 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼叫慣例。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException" vsli:raw="The number of elements in &lt;paramref name=&quot;parameters&quot; /&gt; does not match the number of parameters in the dynamic method.">
        <paramref name="parameters" /> 中的項目數不符合動態方法中的參數數目。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of one or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; does not match the type of the corresponding parameter of the dynamic method.">
        <paramref name="parameters" /> 之一個或多個項目的型別不符合動態方法的對應參數型別。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="The dynamic method is associated with a module, is not anonymously hosted, and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but the dynamic method accesses members that are not &lt;see langword=&quot;public&quot; /&gt; or &lt;see langword=&quot;internal&quot; /&gt; (&lt;see langword=&quot;Friend&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method is anonymously hosted and was constructed with &lt;paramref name=&quot;skipVisibility&quot; /&gt; set to &lt;see langword=&quot;false&quot; /&gt;, but it accesses members that are not &lt;see langword=&quot;public&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The dynamic method contains unverifiable code. See the &quot;Verification&quot; section in Remarks for &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">動態方法是與模組相關聯，不是匿名裝載，而且建構時 <paramref name="skipVisibility" /> 設為 <see langword="false" />，但是動態方法會存取不是 <see langword="public" /> 或 <see langword="internal" /> (Visual Basic 中為 <see langword="Friend" />) 的成員。  
-或- 
動態方法是匿名裝載，且建構時 <paramref name="skipVisibility" /> 設為 <see langword="false" />，但是它會存取不是 <see langword="public" /> 的成員。  
-或- 
動態方法含有未經驗證的程式碼。 如需了解 <see cref="T:System.Reflection.Emit.DynamicMethod" />，請參閱＜備註＞中的＜驗證＞一節。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether the specified custom attribute type is defined.">指出指定的自訂屬性型別是否已定義。</summary>
      <param name="attributeType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of custom attribute to search for.">
        <see cref="T:System.Type" />，表示要搜尋之自訂屬性的型別。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search the method's inheritance chain to find the custom attributes; &lt;see langword=&quot;false&quot; /&gt; to check only the current method.">
        <see langword="true" /> 表示搜尋方法的繼承鏈結以尋找自訂屬性，<see langword="false" /> 表示只檢查目前的方法。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的自訂屬性型別已定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.">取得值，這個值表示目前動態方法是否為安全性關鍵或安全性安全關鍵，因此是否可以執行重要作業。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current dynamic method is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">如果目前動態方法為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果它是透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.">取得值，這個值表示目前動態方法在目前信任層級上是否為安全性安全關鍵，也就是說，它是否可以執行重要作業並且可供透明程式碼存取。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-safe-critical at the current trust level; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">如果動態方法在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />，如果它是安全性關鍵或透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.">取得值，這個值表示目前動態方法在目前信任層級上是否為透明，因此是否不得執行重要作業。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic method is security-transparent at the current trust level; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果動態方法在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dynamic method doesn't have a method body.">動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary vsli:raw="Not supported for dynamic methods.">不支援動態方法。</summary>
      <returns vsli:raw="Not supported for dynamic methods.">不支援動態方法。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Not allowed for dynamic methods.">不適用於動態方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary vsli:raw="Gets the module with which the dynamic method is logically associated.">取得動態方法在邏輯上與其相關聯的模組。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; with which the current dynamic method is associated.">目前的動態方法與其相關聯的 <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary vsli:raw="Gets the name of the dynamic method.">取得動態方法的名稱。</summary>
      <returns vsli:raw="The simple name of the method.">方法的簡單名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary vsli:raw="Gets the class that was used in reflection to obtain the method.">取得類別，用於反映中以取得方法。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary vsli:raw="Gets the return parameter of the dynamic method.">取得動態方法的傳回參數。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;null&quot; /&gt;.">一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary vsli:raw="Gets the type of return value for the dynamic method.">取得動態方法之傳回值的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of the return value of the current method; &lt;see cref=&quot;T:System.Void&quot; /&gt; if the method has no return type.">表示目前方法之傳回值型別的 <see cref="T:System.Type" />，如果方法沒有任何傳回型別則為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type for the dynamic method.">取得動態方法之傳回型別的自訂屬性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; representing the custom attributes of the return type for the dynamic method.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" />，表示動態方法之傳回型別的自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary vsli:raw="Returns the signature of the method, represented as a string.">傳回方法的簽章，以字串表示。</summary>
      <returns vsli:raw="A string representing the method signature.">表示方法簽章的字串。</returns>
    </member>
  </members>
</doc>
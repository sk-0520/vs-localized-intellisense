<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>表示索引鍵/值組的不可變集合。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>將具有指定之索引鍵和值的項目加入至字典。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
      <returns>新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>將指定的索引鍵/值組加入至字典中。</summary>
      <param name="pairs">要加入的索引鍵/值組。</param>
      <returns>新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>擷取空字典，其具有與字典執行個體相同的順序和索引鍵/值比較規則。</summary>
      <returns>具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷此不可變的字典是否包含指定的索引鍵/值組。</summary>
      <param name="pair">要尋找的索引鍵/值組。</param>
      <returns>如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <returns>移除指定之項目的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將具有指定之索引鍵的項目從不可變的字典移除。</summary>
      <param name="keys">要移除之項目的索引鍵。</param>
      <returns>已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>設定不可變字典中指定的索引鍵和值，可能會覆寫索引鍵的現有值。</summary>
      <param name="key">要加入的項目索引鍵。</param>
      <param name="value">要設定的索引鍵值。</param>
      <returns>新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>設定不可變字典中指定的索引鍵/值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns>新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey">要搜尋的索引鍵。</param>
      <param name="actualKey">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns>如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>代表無法修改之項目的清單。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>複製清單，並將指定的物件加入至複製的清單結尾。</summary>
      <param name="value">要加入至清單的物件。</param>
      <returns>新增物件的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>複製清單，並將指定的物件加入至複製的清單結尾。</summary>
      <param name="items">要加入至清單的物件。</param>
      <returns>新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>建立已移除所有項目，但具有與此清單相同排序及順序語意的清單。</summary>
      <returns>空的清單，這個清單的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer">要用來尋找 <paramref name="item" /> 的相等比較子。</param>
      <returns>在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中從 <paramref name="index" /> 開始且包含 <paramref name="count" /> 個項目的範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index">要插入值之以零起始的索引處。</param>
      <param name="element">要插入的物件。</param>
      <returns>新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index">應插入新項目處的以零為起始的索引。</param>
      <param name="items">要插入的項目。</param>
      <returns>新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 中包含指定個數項目且結尾位於指定索引的範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item">要在清單中尋找的物件 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer">要符合 <paramref name="item" /> 的相等比較子。</param>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個不可變清單中移除第一個出現的指定物件。</summary>
      <param name="value">要從清單中移除的物件。</param>
      <param name="equalityComparer">要用來尋找 <paramref name="value" /> 的相等比較子。</param>
      <returns>已移除指定物件的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>移除不可變清單之指定索引處的項目。</summary>
      <param name="index">要移除的項目索引。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從清單中移除指定的物件。</summary>
      <param name="items">要從清單中移除的物件。</param>
      <param name="equalityComparer">用來判斷 <paramref name="items" /> 是否符合清單中任何物件的相等比較子。</param>
      <returns>如果 <paramref name="items" /> 符合清單中的物件，則為已移除指定之物件的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 移除的項目範圍。</summary>
      <param name="index">要移除之項目範圍內之以零為起始的起始索引。</param>
      <param name="count">要移除的項目數目。</param>
      <returns>已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>傳回新的清單，且其清單中第一個相符的項目已取代為指定的項目。</summary>
      <param name="oldValue">要遭到取代的項目。</param>
      <param name="newValue">要用來取代第一個出現 <paramref name="oldValue" /> 的項目</param>
      <param name="equalityComparer">要用來符合 <paramref name="oldValue" /> 的相等比較子。</param>
      <returns>新的清單，其中包含 <paramref name="newValue" /> (即使 <paramref name="oldvalue" /> 與 <paramref name="newValue" /> 相同，也是如此)。</returns>
      <exception cref="T:System.ArgumentException">清單中沒有 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>使用指定的項目取代清單中指定位置的項目。</summary>
      <param name="index">清單中要取代之元素的位置。</param>
      <param name="value">用來取代舊項目的項目。</param>
      <returns>新的清單，其中包含新的項目 (即使指定位置的項目與新的項目相同，也是如此)。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>表示物件的不可變先進先出集合。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">佇列中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>傳回已移除所有項目的新佇列。</summary>
      <returns>空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>移除不可變佇列中的第一個項目，並傳回新的佇列。</summary>
      <returns>已移除第一個項目的新不可變佇列。 這個值絕不會是 <c>null</c>。</returns>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value">要加入的項目。</param>
      <returns>已加入指定之項目的新不可變佇列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>取得值，這個值表示此不可變佇列是否空白。</summary>
      <returns>如果此佇列為空白，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>傳回不可變佇列開頭的項目，但不要移除。</summary>
      <returns>佇列開頭的元素。</returns>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>代表一組項目，您只能透過為該資料集建立新的執行個體來進行修改。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">儲存於資料集中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="value">要加入的項目。</param>
      <returns>含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>擷取空的不可變資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns>空的資料集，這個資料集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>判斷這個不可變的資料集是否包含指定的項目。</summary>
      <param name="value">要在資料集中尋找的項目。</param>
      <returns>如果資料集包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的不可變資料集中，移除指定之集合內的項目。</summary>
      <param name="other">要從此資料集移除的項目集合。</param>
      <returns>含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中只包含存在於這個資料集和指定資料集中的項目。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> 比較的集合。</param>
      <returns>新的不可變資料集，其中包含同時存在於這兩個資料集中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集是否為指定集合的完全 (嚴格) 子集合。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集為指定之集合的適當子集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集是否為指定集合的完全 (嚴格) 超集合。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定集合的完全超集合，則為 <see langword="true" />，否則為 false。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集是否為指定集合的子集合。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定之集合的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集是否為指定集合的超集合。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定之集合的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集是否與指定的集合重疊。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和指定的集合至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>從這個不可變的資料集中移除指定的項目。</summary>
      <param name="value">要移除的項目。</param>
      <returns>已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變資料集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>判斷資料集是否包含指定值。</summary>
      <param name="equalValue">要搜尋的值。</param>
      <param name="actualValue">如果找到，則為來自集合的相符值；如果沒有相符項目，則為 <c>equalvalue</c>。</param>
      <returns>如果找到相符值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要加入項目的來源集合。</param>
      <returns>已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>表示不可變的後進先出 (LIFO) 集合。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">堆疊中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>從不可變的堆疊移除所有的物件。</summary>
      <returns>空的不可變堆疊。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>取得值，此值表示這個不可變堆疊是否為空的。</summary>
      <returns>如果這個堆疊是空的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>傳回不可變堆疊頂端的項目，但不要移除它。</summary>
      <returns>堆疊頂端的項目。</returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>移除不可變堆疊頂端的項目，並傳回新的堆疊。</summary>
      <returns>新的堆疊；絕不會是 <c>null</c></returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>在不可變堆疊頂端插入項目，並傳回新的堆疊。</summary>
      <param name="value">要推送至堆疊的項目。</param>
      <returns>新的堆疊。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>提供建立不可變陣列的方法；也就是說，一旦建立之後，便無法變更。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>使用預設的比較子搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array">要搜尋的已排序陣列。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array">要搜尋的已排序陣列。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目時要使用的比較子實作，或 null 表示使用預設比較子。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 Null 且 <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>搜尋指定項目已排序的不可變陣列，並在找到時，傳回該項目以零為起始的索引。</summary>
      <param name="array">要搜尋的已排序陣列。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。
-或-
<paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>搜尋指定項目已排序的不可變陣列，並傳回該項目以零為起始的索引。</summary>
      <param name="array">要搜尋的已排序陣列。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目是否相等時要使用的比較子，或 <see langword="null" /> 表示使用預設比較子。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>如果有找到項目，則為陣列中項目之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Collections.Generic.ICollection`1.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 Null 且 <paramref name="value" /> 不實作 <see cref="T:System.IComparable" />，或搜尋遇到不實作 <see cref="T:System.IComparable" /> 的項目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。
-或-
<paramref name="comparer" /> 是 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" /> 項目不相容。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。
-或-
<paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>建立空的不可變陣列。</summary>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>空的不可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item">要在陣列中儲存的物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1">儲存在陣列中的第一個物件。</param>
      <param name="item2">儲存在陣列中的第二個物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1">儲存在陣列中的第一個物件。</param>
      <param name="item2">儲存在陣列中的第二個物件。</param>
      <param name="item3">儲存在陣列中的第三個物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>建立不可變的陣列，其中包含指定的物件。</summary>
      <param name="item1">儲存在陣列中的第一個物件。</param>
      <param name="item2">儲存在陣列中的第二個物件。</param>
      <param name="item3">儲存在陣列中的第三個物件。</param>
      <param name="item4">儲存在陣列中的第四個物件。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>從指定的物件陣列建立不可變的陣列。</summary>
      <param name="items">要填入陣列所使用之物件的陣列。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>使用指定的物件，從另一個陣列建立不可變的陣列。</summary>
      <param name="items">物件的來源陣列。</param>
      <param name="start">要從 <paramref name="items" /> 複製之第一個項目的索引。</param>
      <param name="length">要包含在此不可變陣列中之 <paramref name="items" /> 的項目數。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含來源陣列中指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>使用指定的物件，從某個不可變的陣列建立另一個不可變的陣列。</summary>
      <param name="items">物件的來源陣列。</param>
      <param name="start">要從 <paramref name="items" /> 複製之第一個項目的索引。</param>
      <param name="length">要包含在此不可變陣列中之 <paramref name="items" /> 的項目數。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含來源陣列中指定的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>建立可以轉換成 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可變陣列，但不配置新的記憶體。</summary>
      <typeparam name="T">產生器中儲存之項目的型別。</typeparam>
      <returns>可以有效率地轉換成不可變陣列之指定型別的可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>建立可以轉換成 <see cref="T:System.Collections.Immutable.ImmutableArray" /> 的可變陣列，但不配置新的記憶體。</summary>
      <param name="initialCapacity">產生器的初始容量。</param>
      <typeparam name="T">產生器中儲存之項目的型別。</typeparam>
      <returns>可以有效率地轉換成不可變陣列之指定型別的可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立使用指定之項目填入的新 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。</summary>
      <param name="items">要加入至陣列的項目。</param>
      <typeparam name="T">陣列中儲存之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items">要初始化所產生陣列的來源陣列。</param>
      <param name="selector">要套用至來源陣列中每個項目的函式。</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items">要初始化所產生陣列的來源陣列。</param>
      <param name="start">要包含在所產生陣列中的來源陣列第一個項目的索引。</param>
      <param name="length">要包含在產生之陣列中之來源陣列中的項目數目。</param>
      <param name="selector">產生的陣列會包含要套用至來源陣列中每個項目的函式。</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items">要初始化所產生陣列的來源陣列。</param>
      <param name="selector">要套用至來源陣列中每個項目的函式。</param>
      <param name="arg">要傳遞給選取器對應函式的引數。</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <param name="items">要初始化所產生陣列的來源陣列。</param>
      <param name="start">要包含在所產生陣列中的來源陣列第一個項目的索引。</param>
      <param name="length">要包含在產生之陣列中之來源陣列中的項目數目。</param>
      <param name="selector">產生的陣列會包含要套用至來源陣列中每個項目的函式。</param>
      <param name="arg">要傳遞給選取器對應函式的引數。</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>從指定的集合建立不可變的陣列。</summary>
      <param name="items">要複製至不可變陣列之物件的集合。</param>
      <typeparam name="TSource">
        <paramref name="items" /> 中所包含之項目的型別。</typeparam>
      <returns>不可變的陣列，其中包含指定的物件集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>從產生器陣列目前內容建立不可變的陣列。</summary>
      <param name="builder">產生器，用於建立不可變的陣列。</param>
      <typeparam name="TSource">不可變數組中包含的元素類型。</typeparam>
      <returns>不可變的陣列，其中包含產生器陣列的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>代表不可變的陣列，意即在建立該陣列之後，就無法加以變更。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">陣列所儲存的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>傳回已在結尾處加入指定項目的原始陣列複本。</summary>
      <param name="item">要加入陣列結尾處的項目。</param>
      <returns>已在結尾處加入指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items">要加入至陣列的項目。</param>
      <returns>已加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items">要加入至陣列的項目。</param>
      <returns>已加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>傳回新的不可變陣列，其中包含這個陣列中轉換為不同類型的項目。</summary>
      <typeparam name="TOther">要傳回的陣列項目類型。</typeparam>
      <returns>不可變的陣列，其中包含這個陣列中轉換為不同類型的項目。 如果轉換失敗，就會傳回其 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 <see langword="true" /> 的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>在此不可變陣列上建立新的唯讀記憶體區域。</summary>
      <returns>此不可變陣列的唯讀記憶體表示。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>在此不可變陣列上建立新的唯讀範圍。</summary>
      <returns>此不可變陣列的唯讀範圍表示。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>可寫入的陣列存取子，其可轉換為 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 執行個體而不需配置額外的記憶體。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>將指定的項目加入至陣列。</summary>
      <param name="item">要加入至陣列的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
      <param name="length">要加入的來源陣列項目數目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
      <param name="length">要加入的來源陣列項目數目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>將指定的項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>將衍生自目前陣列中之類型的指定項目加入至陣列尾端。</summary>
      <param name="items">要加入至陣列尾端的項目。</param>
      <typeparam name="TDerived">衍生自項目類型的類型已存在於陣列中。</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>取得或設定間隔陣列的長度。 如果設定的內部陣列不是所指定長度，則它會重新配置為指定的容量。</summary>
      <returns>內部陣列的長度。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>從陣列中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>判斷陣列是否包含特定值。</summary>
      <param name="item">要在陣列中尋找的物件。</param>
      <returns>如果找到物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>將目前的內容複製至指定的陣列。</summary>
      <param name="array">要複製到其中的陣列。</param>
      <param name="index">開始複製作業的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>取得或設定陣列中的項目數目。</summary>
      <returns>陣列中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>取得可用於逐一查看集合的物件。</summary>
      <returns>可用於逐一查看集合的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>判斷陣列中特定項目的索引。</summary>
      <param name="item">要在陣列中尋找的項目。</param>
      <returns>如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>判斷指定項目的索引。</summary>
      <param name="item">要在陣列中尋找的項目。</param>
      <param name="startIndex">搜尋的開始位置。</param>
      <returns>如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>判斷指定項目的索引。</summary>
      <param name="item">要在陣列中尋找的項目。</param>
      <param name="startIndex">搜尋的開始位置。</param>
      <param name="count">要搜尋的項目數目。</param>
      <returns>如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>判斷指定項目的索引。</summary>
      <param name="item">要在陣列中尋找的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="count">搜尋的開始位置。</param>
      <param name="equalityComparer">使用於搜尋中的相等比較子</param>
      <returns>如果在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>將項目插入陣列中指定的索引位置。</summary>
      <param name="index">要插入項目之以零起始的索引位置。</param>
      <param name="item">要插入陣列中的物件。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>取得或設定在指定索引位置的項目。</summary>
      <param name="index">要取得或設定的項目索引。</param>
      <returns>在指定之索引處的項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定的索引不在陣列內。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>取得位於指定索引元素的唯讀參考。</summary>
      <param name="index">項目索引。</param>
      <returns>位於指定索引元素的唯讀參考。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大於或等於陣列計數。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item">要搜尋的項目。</param>
      <returns>找到項目的以 0 起始索引位置；若無法找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">搜尋的開始位置。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">搜尋的開始位置。</param>
      <param name="count">要搜尋的項目數目。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>判斷此陣列中指定項目最後出現的以 0 起始索引。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">搜尋的開始位置。</param>
      <param name="count">要搜尋的項目數目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>擷取內部陣列當成 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，並以零長度陣列取代它。</summary>
      <exception cref="T:System.InvalidOperationException">當 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> 不等於 <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> 時。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>將指定的項目移除。</summary>
      <param name="element">要移除的項目。</param>
      <returns>如果找到並移除 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>從陣列中移除指定索引位置的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>反轉整個集合中項目的順序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>為陣列的內容排序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>為陣列的內容排序。</summary>
      <param name="comparer">用來排序的比較子。 如果比較子是 <see langword="null" />，將使用陣列中項目類型的預設比較子。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 來排序整個陣列中項目。</summary>
      <param name="comparison">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>為陣列的內容排序。</summary>
      <param name="index">排序的起始索引。</param>
      <param name="count">排序中包含的項目數。</param>
      <param name="comparer">用來排序的比較子。 如果比較子是 <see langword="null" />，將使用陣列中項目類型的預設比較子。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回可逐一查看陣列的列舉程式。</summary>
      <returns>逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可逐一查看陣列的列舉程式。</summary>
      <returns>逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>建立含有此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的新陣列。</summary>
      <returns>含有此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 內容的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>傳回包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的不可變陣列。</summary>
      <returns>包含此 <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> 目前內容的不可變陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>將基礎陣列轉換成 <paramref name="TOther" /> 型別的陣列，以初始化 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構的新執行個體。</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">如果轉換不合法會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>根據現有執行個體的內容初始化新的 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 結構執行個體，允許 Covariant 靜態轉換成有效率地重複使用現有陣列。成</summary>
      <param name="items">要初始化陣列所使用的陣列。 不會進行複製。</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>傳回已移除所有項目的陣列。</summary>
      <returns>已移除所有項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>判斷指定的項目是否存在於陣列中。</summary>
      <param name="item">要搜尋的項目。</param>
      <returns>如果在陣列中找到指定的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>將這個陣列的內容複製到指定的陣列。</summary>
      <param name="destination">要複製到其中的陣列。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>從指定之目的索引開始，將這個陣列的內容複製到指定的陣列。</summary>
      <param name="destination">要複製到其中的陣列。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>從指定的開始索引開始，將這個陣列中的指定項目複製到指定的陣列。</summary>
      <param name="sourceIndex">這個陣列的索引，此為開始複製的位置。</param>
      <param name="destination">要複製到其中的陣列。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 中開始複製處的索引。</param>
      <param name="length">要複製到這個陣列的項目數。</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>取得空的不可變陣列。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>陣列列舉程式。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>取得目前的項目。</summary>
      <returns>目前的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>往前移至陣列中的下一個值。</summary>
      <returns>如果陣列中存在另一個項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>表示指定的物件是否等於這個陣列。</summary>
      <param name="other">要與此物件進行比較的物件。</param>
      <returns>如果 <paramref name="other" /> 等於這個陣列，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>判斷這個陣列是否等於指定的物件。</summary>
      <param name="obj">要和這個陣列進行比較的 <see cref="T:System.Object" />。</param>
      <returns>如果這個陣列等於 <paramref name="obj" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>傳回可逐一查看陣列內容的列舉程式。</summary>
      <returns>列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <returns>如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <returns>如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="count">要搜尋的項目數目。</param>
      <returns>如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="count">要搜尋的項目數目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>如果找到，則為項目以零為起始的索引位置，如未找到，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>傳回已在指定位置插入指定值的新陣列。</summary>
      <param name="index">陣列中以零為起始的索引，此為應加入新項目的位置。</param>
      <param name="item">要插入陣列開始處的項目。</param>
      <returns>新陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>在指定的索引處插入指定的值。</summary>
      <param name="index">要插入值的索引。</param>
      <param name="items">要插入的項目。</param>
      <returns>新的不可變陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>在指定的索引處插入指定的值。</summary>
      <param name="index">要插入值的索引。</param>
      <param name="items">要插入的項目。</param>
      <returns>新的不可變陣列，其中包含已插入指定索引處的項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>取得值，指出這個陣列已宣告但未初始化。</summary>
      <returns>如果 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是 <see langword="null" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>取得值，指出這個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否為空的，或者尚未初始化。</summary>
      <returns>
        <see langword="true" />
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" />如果為<see langword="null" />或<see langword="false" />,則為,否則為。<see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /></returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>取得值，指出這個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 是否為空的。</summary>
      <returns>如果 <see langword="true" /> 是空的，則為 <see cref="T:System.Collections.Immutable.ImmutableArray`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>取得不可變陣列中指定索引處的項目。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>不可變陣列中指定索引處的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>取得唯讀清單中在指定 <paramref name="index" /> 處元素的唯讀參考。</summary>
      <param name="index">要取得參考之以零為起始的元素索引。</param>
      <returns>唯讀清單中在指定 <paramref name="index" /> 處元素的唯讀參考。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="count">要搜尋的項目數目。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從陣列結尾開始，在陣列中搜尋指定的項目。</summary>
      <param name="item">要搜尋的項目。</param>
      <param name="startIndex">要開始搜尋的索引。</param>
      <param name="count">要搜尋的項目數目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>找到項目之陣列中以零為起始的索引，如果找不到項目，則為 -1。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>取得陣列中的項目數。</summary>
      <returns>陣列中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>篩選這個陣列的項目，以取得可指派為指定類型的項目。</summary>
      <typeparam name="TResult">用來做為序列項目之篩選依據的類型。</typeparam>
      <returns>
        <see cref="T:System.Collections.IEnumerable" />，其中包含輸入序列中 <paramref name="TResult" /> 類型的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>傳回值，這個值指出兩個陣列是否相等。</summary>
      <param name="left">位於運算子左邊的陣列。</param>
      <param name="right">位於運算子右邊的陣列。</param>
      <returns>如果陣列相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>傳回值，這個值指出兩個陣列是否相等。</summary>
      <param name="left">位於運算子左邊的陣列。</param>
      <param name="right">位於運算子右邊的陣列。</param>
      <returns>如果陣列相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>傳回值，這個值指出兩個陣列是否不相等。</summary>
      <param name="left">位於運算子左邊的陣列。</param>
      <param name="right">位於運算子右邊的陣列。</param>
      <returns>如果陣列不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>檢查兩個陣列間的不相等。</summary>
      <param name="left">位於運算子左邊的物件。</param>
      <param name="right">位於運算子右邊的物件。</param>
      <returns>如果兩個陣列不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>傳回已從陣列中移除第一個出現之指定項目的陣列。 如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="item">要移除的項目。</param>
      <returns>已移除項目的新佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>傳回已從陣列中移除第一個出現之指定項目的陣列。  
 如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="item">要移除的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>從陣列中移除符合指定條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已移除符合指定條件之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index">要從傳回的陣列中移除之項目以零為起始的索引。</param>
      <returns>已移除指定索引處之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>從這個陣列中移除指定的項目。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <returns>已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個陣列中移除指定的項目。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>從這個清單中移除指定的值。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個清單中移除指定的項目。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index">要從陣列中移除之開始項目以零為起始的索引。</param>
      <param name="length">要從陣列中移除的項目數。</param>
      <returns>已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue">要在陣列中尋找並取代的值。</param>
      <param name="newValue">用來取代 <c>oldvalue</c> 的值。</param>
      <returns>即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue">要在陣列中尋找並取代的值。</param>
      <param name="newValue">用來取代 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer">用來比較值的相等比較子。</param>
      <returns>即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index">要取代的項目索引。</param>
      <param name="item">要加入清單的項目。</param>
      <returns>新陣列，會在指定索引處包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>使用預設的比較子，來排序不可變陣列中的項目。</summary>
      <returns>新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子，來排序不可變陣列中的項目。</summary>
      <param name="comparer">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設比較子</param>
      <returns>新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 來排序整個 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 中的項目。</summary>
      <param name="comparison">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <returns>已排序的清單。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子，來排序不可變陣列中指定的項目。</summary>
      <param name="index">要排序的第一個項目索引。</param>
      <param name="count">排序中包含的項目數。</param>
      <param name="comparer">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設比較子</param>
      <returns>新的不可變陣列，在這個陣列中會以排序的順序來包含項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要加入陣列結尾處的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>取得集合的陣列數目。</summary>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，這個值指出這個執行個體是否為唯讀。</summary>
      <returns>如果這個實例是唯讀的, 則<c>為 true</c> ;否則<c>為 false</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要從陣列中移除的物件。</param>
      <returns>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回可逐一查看陣列的列舉程式。</summary>
      <returns>可用來逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入項目的位置索引。</param>
      <param name="item">要插入的項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得或設定唯讀清單中指定索引處的項目。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>唯讀清單中指定索引處的項目。</returns>
      <exception cref="T:System.NotSupportedException">一律從 setter 擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>取得集合的陣列數目。</summary>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">索引。</param>
      <returns>元素。</returns>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的索引處開始，將這個陣列複製到其他陣列。</summary>
      <param name="array">要複製這個陣列的目標陣列。</param>
      <param name="index">目的陣列中開始複製作業的索引。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>取得陣列的大小。</summary>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>取得同步處理根項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可逐一查看不可變陣列的列舉程式。</summary>
      <returns>可逐一查看不可變陣列的列舉程式。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性會傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要加入陣列的值。</param>
      <returns>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要檢查的值。</param>
      <returns>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>取得指定索引處的值。</summary>
      <param name="value">要傳回索引的值。</param>
      <returns>位於指定索引處的項目值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">索引，表示插入項目的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出此執行個體是否有固定的大小。</summary>
      <returns>如果這個實例是固定大小, 則為<c>true</c> ;否則<c>為 false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，這個值指出這個執行個體是否為唯讀。</summary>
      <returns>如果這個實例是唯讀的, 則<c>為 true</c> ;否則<c>為 false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <exception cref="T:System.NotSupportedException">一律從 setter 擲回。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> 屬性傳回 true 則擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從陣列中移除的值。</param>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的索引。</param>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>傳回已在結尾處加入指定項目的原始陣列複本。</summary>
      <param name="value">要加入陣列結尾處的值。</param>
      <returns>已在結尾處加入指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>傳回已在陣列結尾處加入指定項目的原始陣列複本。</summary>
      <param name="items">要加入陣列結尾處的項目。</param>
      <returns>已在結尾處加入項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>傳回已移除所有項目的陣列。</summary>
      <returns>已移除所有項目的陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>傳回已在指定位置插入指定值的新陣列。</summary>
      <param name="index">陣列中以零為起始的索引，此為應加入新項目的位置。</param>
      <param name="element">要插入陣列開始處的項目。</param>
      <returns>已插入之指定值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>在指定的索引處插入指定的值。</summary>
      <param name="index">要插入值的索引。</param>
      <param name="items">要插入的項目。</param>
      <returns>已插入指定值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>傳回已從陣列中移除第一個出現之指定項目的陣列，如果找不到相符項目，則會傳回目前的陣列。</summary>
      <param name="value">要從陣列中移除的值。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除值的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>從陣列中移除符合指定條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已移除符合指定條件之項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index">要從傳回的陣列中移除之項目以零為起始的索引。</param>
      <returns>已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個陣列中移除指定的項目。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>傳回已移除指定位置處之項目的陣列。</summary>
      <param name="index">要從陣列中移除之開始項目以零為起始的索引。</param>
      <param name="count">要從陣列中移除的項目數。</param>
      <returns>已移除指定項目的新陣列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>尋找陣列中第一個等於指定值的項目，並使用指定的新值來取代該值。</summary>
      <param name="oldValue">要在陣列中尋找並取代的值。</param>
      <param name="newValue">用來取代 <c>oldvalue</c> 的值。</param>
      <param name="equalityComparer">用來比較值的相等比較子。</param>
      <returns>即使新值和舊值一樣，也會包含 <paramref name="newValue" /> 的新陣列。</returns>
      <exception cref="T:System.ArgumentException">陣列中找不到 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index">要取代的項目索引。</param>
      <param name="value">要加入清單的值。</param>
      <returns>新陣列，會在指定索引處包含 <paramref name="item" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合項目在排序次序中位於另一個項目之前、相同位置或之後。</summary>
      <param name="other">要與目前執行個體比較的項目。</param>
      <param name="comparer">此物件可用來比較目前的陣列成員與另一個陣列的對應成員。</param>
      <returns>整數，指出目前的項目是位於另一個項目之前、相同位置或之後。</returns>
      <exception cref="T:System.ArgumentException">陣列長度不相同。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷這個陣列在結構上是否等於指定的陣列。</summary>
      <param name="other">要與目前執行個體比較的陣列。</param>
      <param name="comparer">物件，判斷目前的執行個體與其他執行個體在結構上是否相等。</param>
      <returns>如果這兩個陣列在結構上相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <param name="comparer">物件，會計算目前物件的雜湊碼。</param>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>建立可變動的陣列，其具有與此陣列相同的內容，而且能夠使用標準變動介面，有效率地跨多個作業進行變動。</summary>
      <returns>新的產生器，含有與這個陣列相同的內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>判斷指定的不可變字典是否包含指定的索引鍵/值組。</summary>
      <param name="map">要搜尋的不可變字典。</param>
      <param name="key">要在不可變字典中尋找的索引鍵。</param>
      <param name="value">如果找到索引鍵，則為要在指定索引鍵上尋找的值。</param>
      <typeparam name="TKey">不可變字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">不可變字典中的值類型。</typeparam>
      <returns>如果這個對應包含指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>建立空的不可變字典。</summary>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>建立空的不可變字典，該字典會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">用於判斷字典中索引鍵等式的實作。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>建立空的不可變字典，該字典會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer">用於判斷字典中索引鍵等式的實作。</param>
      <param name="valueComparer">用於判斷字典中的值是否相等的實作。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白不可變字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>建立新的不可變字典產生器。</summary>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>建立新的不可變字典產生器。</summary>
      <param name="keyComparer">索引鍵比較子。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>建立新的不可變字典產生器。</summary>
      <param name="keyComparer">索引鍵比較子。</param>
      <param name="valueComparer">值比較子。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>新的產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>建立新的不可變字典，其中包含指定的項目。</summary>
      <param name="items">在字典成為不可變之前，用來填入該字典的項目。</param>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
      <returns>新的不可變字典，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>建立新的不可變字典，其中包含指定的項目，並使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">用於比較索引鍵是否相等的比較子實作。</param>
      <param name="items">在字典成為不可變之前，新增至字典的項目。</param>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
      <returns>新的不可變字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>建立新的不可變字典，其中包含指定的項目，並使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">用於比較索引鍵是否相等的比較子實作。</param>
      <param name="valueComparer">用於比較值是否相等的比較子實作。</param>
      <param name="items">在字典成為不可變之前，新增至字典的項目。</param>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
      <returns>新的不可變字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="dictionary">要從中擷取值的字典。</param>
      <param name="key">要搜尋的索引鍵。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TValue">值的類型。</typeparam>
      <returns>索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="dictionary">要從中擷取值的字典。</param>
      <param name="key">要搜尋的索引鍵。</param>
      <param name="defaultValue">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TValue">值的類型。</typeparam>
      <returns>索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>從現有的項目集合建構不可變的字典，將轉換函式套用至來源索引鍵。</summary>
      <param name="source">用來產生不可變字典的來源集合。</param>
      <param name="keySelector">用來轉換不可變字典之索引鍵的函式。</param>
      <typeparam name="TSource">來源集合中的項目類型。</typeparam>
      <typeparam name="TKey">所產生的不可變字典中的索引鍵類型。</typeparam>
      <returns>不可變的字典，其中包含來自 <paramref name="source" /> 的項目，以及藉由套用 <paramref name="keySelector" /> 來轉換的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據序列的某些轉換來建構不可變的字典。</summary>
      <param name="source">用來產生不可變字典的來源集合。</param>
      <param name="keySelector">用來轉換不可變字典之索引鍵的函式。</param>
      <param name="keyComparer">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource">來源集合中的項目類型。</typeparam>
      <typeparam name="TKey">所產生的不可變字典中的索引鍵類型。</typeparam>
      <returns>不可變的字典，其中包含來自 <paramref name="source" /> 的項目，以及藉由套用 <paramref name="keySelector" /> 來轉換的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>列舉索引鍵/值組的序列，並產生其內容的不可變字典。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>列舉索引鍵/值組的序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer">建立不可變字典時使用的索引鍵比較子。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>列舉索引鍵/值組的序列，並使用指定的索引鍵與值比較子產生其內容的不可變字典。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer">建立不可變字典時使用的索引鍵比較子。</param>
      <param name="valueComparer">不可變字典所使用的值比較子。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列中的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>從產生器字典目前內容建立不可變的字典。</summary>
      <param name="builder">產生器，用於建立不可變的字典。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含產生器字典的目前內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>列舉及轉換序列，並產生其內容的不可變字典。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>列舉及轉換序列，並使用指定的索引鍵比較子產生其內容的不可變字典。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>列舉及轉換序列，並使用指定的索引鍵與值比較子產生其內容的不可變字典。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer">字典使用的索引鍵比較子。</param>
      <param name="valueComparer">字典使用的值比較子。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>表示不可變、未排序之索引鍵和值的集合。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>將具有指定索引鍵和值的項目加入不可變字典。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
      <returns>新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>將指定的機碼值組加入不可變字典。</summary>
      <param name="pairs">要加入的索引鍵/值組。</param>
      <returns>新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>代表有少量或沒有記憶體配置變動的雜湊對應，此雜湊對應可以非常有效率的方式產生或建置於不可變的雜湊對應執行個體上。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>將具有指定索引鍵和值的項目加入不可變的字典。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">字典中存在具有相同索引鍵的項目。</exception>
      <exception cref="T:System.NotSupportedException">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>將指定的項目加入不可變的字典。</summary>
      <param name="item">要加入字典的物件。</param>
      <exception cref="T:System.NotSupportedException">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>將一連串的值加入這個集合。</summary>
      <param name="items">要加入這個集合的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>從不可變的字典中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷不可變的字典是否包含特定值。</summary>
      <param name="item">要在字典中尋找的物件。</param>
      <returns>如果在字典中找到 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>判斷不可變的字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要在字典中尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>判斷不可變的字典是否包含具有指定值的項目。</summary>
      <param name="value">要在不可變字典中尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>取得不可變字典中所包含的項目數。</summary>
      <returns>不可變字典中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>傳回逐一查看不可變字典的列舉程式。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="key">要搜尋的索引鍵。</param>
      <returns>索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值。</summary>
      <param name="key">要搜尋的索引鍵。</param>
      <param name="defaultValue">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <returns>索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">要取得或設定的項目。</param>
      <returns>具有指定索引鍵的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">正在擷取屬性，且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">正在設定屬性，且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 為唯讀。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>取得或設定索引鍵比較子。</summary>
      <returns>索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>取得集合，其中包含不可變字典的索引鍵。</summary>
      <returns>集合，其中包含實作不可變字典之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <returns>如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。  如果在字典中找不到 <paramref name="key" />，這個方法也會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>從不可變字典中移除第一個出現的特定物件。</summary>
      <param name="item">要從字典中移除的物件。</param>
      <returns>如果已成功從字典中移除 <paramref name="item" />，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在字典中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <exception cref="T:System.NotSupportedException">字典是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>從不可變的字典中，移除索引鍵與可在指定順序中找到之索引鍵相符的任何項目。</summary>
      <param name="keys">要從字典中移除的項目索引鍵。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將字典的項目複製到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 類型的陣列。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 類型的一維陣列，這是從字典複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.IDictionary" /> 物件的大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從字典中移除具有指定索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>根據這個執行個體的內容來建立不可變的字典。</summary>
      <returns>不可變的字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey">要搜尋的索引鍵。</param>
      <param name="actualKey">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns>如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>傳回與指定索引鍵相關聯的值。</summary>
      <param name="key">將擷取其值的索引鍵。</param>
      <param name="value">當這個方法傳回時，如果找到索引鍵，則會包含與指定索引鍵相關聯的值，否則為 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果實作不可變字典的物件包含具有指定索引鍵的項目，則為  <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>取得或設定值比較子。</summary>
      <returns>值比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>取得集合，其中包含不可變字典的值。</summary>
      <returns>集合，其中包含實作字典的物件值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>擷取空白不可變字典，其具有與此字典執行個體相同的順序和機碼值比較規則。</summary>
      <returns>具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷此不可變字典是否包含指定的機碼值組。</summary>
      <param name="pair">要尋找的索引鍵/值組。</param>
      <returns>如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>判斷不可變字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>如果不可變字典包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>判斷不可變字典是否包含具有指定值的項目。</summary>
      <param name="value">要尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>取得不可變字典中機碼值組的數目。</summary>
      <returns>字典中機碼值組的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>取得空白不可變字典</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>列舉不可變字典內容且不配置記憶體。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置之字典中的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>將 <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>將列舉程式前移至不可變字典中的下一個元素。</summary>
      <returns>如果列舉程式成功前移至下一個元素，則為 <see langword="true" />；如果列舉程式超過字典的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，字典已修改。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>設定列舉程式至它的初始位置，這是在字典中第一個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，字典已修改。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>傳回逐一查看不可變字典的列舉程式。</summary>
      <returns>可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>取得值，這個值表示此不可變字典的執行個體是否為空白。</summary>
      <returns>如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>取得與指定索引鍵相關聯的 <paramref name="TValue" />。</summary>
      <param name="key">索引鍵的類型。</param>
      <returns>與指定之索引鍵關聯的值。 如果找不到結果，此作業會擲回例外狀況。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>取得不可變字典的索引鍵比較子。</summary>
      <returns>索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>取得不可變字典中的索引鍵。</summary>
      <returns>不可變字典中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>從不可變的字典中移除具有指定之索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <returns>移除指定之項目的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將具有指定之索引鍵的項目從不可變的字典移除。</summary>
      <param name="keys">要移除之項目的索引鍵。</param>
      <returns>已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>設定不可變字典中指定的索引鍵和值，可能會覆寫索引鍵的現有值。</summary>
      <param name="key">要加入的項目索引鍵。</param>
      <param name="value">要設定的索引鍵值。</param>
      <returns>新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>設定不可變字典中指定的索引鍵/值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns>新的不可變字典，其中包含指定的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將字典的項目複製到陣列。</summary>
      <param name="array">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將具有提供之索引鍵和值的項目加入不可變字典物件。</summary>
      <param name="key">做為要加入項目之索引鍵的物件。</param>
      <param name="value">做為要加入項目之值的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>清除此執行個體。</summary>
      <exception cref="T:System.NotSupportedException">字典物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷不可變字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要在字典物件中尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回不可變字典物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>字典物件的列舉程式物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從不可變字典物件中移除具有指定索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>建立與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的不可變字典。</summary>
      <returns>與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey">要搜尋的索引鍵。</param>
      <param name="actualKey">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns>如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <param name="key">將擷取其值的索引鍵。</param>
      <param name="value">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果實作字典的物件包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>取得用來判斷值是否相等的值比較子。</summary>
      <returns>用來判斷值是否相等的值比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>取得不可變字典中的值。</summary>
      <returns>不可變字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>取得不可變字典的執行個體，該執行個體會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">要使用的索引鍵比較子。</param>
      <returns>不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>取得不可變字典的執行個體，該執行個體會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer">要使用的索引鍵比較子。</param>
      <param name="valueComparer">要使用的值比較子。</param>
      <returns>不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>建立空白不可變雜湊集。</summary>
      <typeparam name="T">要在不可變雜湊集中儲存之項目的類型。</typeparam>
      <returns>空白不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>建立新的不可變雜湊集，其中包含指定的項目。</summary>
      <param name="item">要預先填入雜湊集的項目。</param>
      <typeparam name="T">不可變雜湊集中之項目的類型。</typeparam>
      <returns>包含指定項目的新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>建立新的不可變雜湊集，其中包含指定的項目陣列。</summary>
      <param name="items">其中包含要填入雜湊集之項目的陣列。</param>
      <typeparam name="T">不可變雜湊集中之項目的類型。</typeparam>
      <returns>新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>建立空白不可變雜湊集，其使用指定之相等比較子</summary>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <typeparam name="T">不可變雜湊集中之項目的類型。</typeparam>
      <returns>空白不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>建立新的不可變雜湊集，其中包含指定項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <param name="item">要預先填入雜湊集的項目。</param>
      <typeparam name="T">不可變雜湊集中之項目的類型。</typeparam>
      <returns>包含指定項目的新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>建立新的不可變雜湊集，其中包含指定集合中的項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <param name="items">其中包含要填入雜湊集之項目的陣列。</param>
      <typeparam name="T">不可變雜湊集中儲存之項目的類型。</typeparam>
      <returns>新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>建立新的不可變雜湊集產生器。</summary>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>不可變雜湊集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>建立新的不可變雜湊集產生器。</summary>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>新的不可變雜湊集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變雜湊集，其中已預先填入指定項目。</summary>
      <param name="items">要加入至雜湊集的項目。</param>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>新的不可變雜湊集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變雜湊集，其中包含指定項目，且針對集合類型使用指定的相等比較子。</summary>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <param name="items">在套用不變性之前加入集合的項目。</param>
      <typeparam name="T">集合中儲存之項目的類型。</typeparam>
      <returns>新的不可變雜湊集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>列舉序列，並產生其內容之不可變雜湊集。</summary>
      <param name="source">要列舉的序列。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <returns>不可變雜湊集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>列舉序列、產生其內容之不可變雜湊集，且針對集合類型使用指定的相等比較子。</summary>
      <param name="source">要列舉的序列。</param>
      <param name="equalityComparer">比較集合中物件相等所使用的物件。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <returns>不可變雜湊集，其中包含指定序列中的項目，且使用指定的相等比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>從產生器集合目前內容建立不可變的雜湊集。</summary>
      <param name="builder">產生器，用於建立不可變的雜湊集。</param>
      <typeparam name="TSource">雜湊集中元素的類型。</typeparam>
      <returns>不可變的雜湊集，其中包含產生器集合中的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>代表不可變、未排序的雜湊集。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">雜湊集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>將指定的項目加入至雜湊集。</summary>
      <param name="item">要加入至集合的項目。</param>
      <returns>包含新增的值及 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> 物件先前保留之任何值的雜湊集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>代表有少數或沒有記憶體配置變動的雜湊集，此雜湊集可以非常有效率的方式產生或建置於不可變的雜湊集執行個體上。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>將指定的項目加入至不可變的雜湊集。</summary>
      <param name="item">要新增的項目。</param>
      <returns>如果項目還未屬於集合，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>從不可變的雜湊集中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">雜湊集是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>判斷不可變的雜湊集是否包含特定值。</summary>
      <param name="item">要在雜湊集中尋找的物件。</param>
      <returns>如果在雜湊集中找到 <paramref name="item" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>取得不可變雜湊集中所包含之項目的數目。</summary>
      <returns>不可變雜湊集中所包含之項目的數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的雜湊集中，移除指定之集合內的所有項目。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>傳回可逐一查看不可變雜湊集的列舉值。</summary>
      <returns>可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>取得或設定索引鍵比較子。</summary>
      <returns>索引鍵比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否與指定的集合重疊。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>從不可變的雜湊集中移除第一個出現的特定物件。</summary>
      <param name="item">要從資料集移除的物件。</param>
      <returns>如果 <paramref name="item" /> 已成功從資料集中移除，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在原始資料集中找不到 <paramref name="item" />，則這個方法也會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集等於 <paramref name="other" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至雜湊集中。</summary>
      <param name="item">要加入至資料集的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從特定的陣列索引開始，將雜湊集的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從雜湊集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>根據這個執行個體的內容，建立不可變的雜湊集。</summary>
      <returns>不可變的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集和指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>擷取空白不可變雜湊集，這個雜湊集的排序及順序語意與這個執行個體相同。</summary>
      <returns>空白雜湊集，這個雜湊集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>判斷此不可變雜湊集是否包含指定的項目。</summary>
      <param name="item">要在不可變雜湊集中尋找的物件。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>取得不可變雜湊集中的項目數目。</summary>
      <returns>雜湊集中的項目數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>取得此類型的不可變雜湊集，此不可變雜湊集使用預設的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>列舉不可變雜湊集的內容而不配置任何記憶體。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>將 <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>將列舉程式前移至不可變雜湊集的下一個項目。</summary>
      <returns>如果列舉程式成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過雜湊集的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，雜湊集已修改。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>將列舉程式設定至它的初始位置，就在雜湊集中的第一個項目之前。</summary>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，雜湊集已修改。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的不可變雜湊集，移除指定集合中的項目。</summary>
      <param name="other">要從此資料集移除的項目集合。</param>
      <returns>含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變雜湊集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>取得值，這個值指出目前的不可變雜湊集是否為空白。</summary>
      <returns>如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集為指定之集合的適當子集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定之集合的適當超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集是否為指定之集合的子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定之集合的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集為指定之集合的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>取得物件，此物件用來取得索引鍵的雜湊程式碼，並檢查不可變雜湊集中的值是否相等。</summary>
      <returns>用來取得索引鍵的雜湊程式碼，並檢查是否相等的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集是否與指定的集合重疊。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和指定的集合至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>從這個不可變雜湊集中移除指定的項目。</summary>
      <param name="item">要移除的項目。</param>
      <returns>已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變雜湊集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變雜湊集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至資料集。</summary>
      <param name="item">要加入至資料集的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>將所有項目從這個資料集移除。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從特定的索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>請參閱 <see cref="T:System.Collections.Generic.ICollection`1" /> 介面。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從資料集中移除第一個出現的特定物件。</summary>
      <param name="item">要從資料集移除的物件。</param>
      <returns>如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>將項目加入至目前的資料集，並傳回指出是否成功加入項目的值。</summary>
      <param name="item">要新增至集合中的項目。</param>
      <returns>如果項目加入至資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other">要移除之項目的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前的集合比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看資料集的列舉程式。</summary>
      <returns>可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="item">要加入的項目。</param>
      <returns>含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>擷取空白資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns>空白資料集，這個資料集的排序或順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的項目。</summary>
      <param name="other">要從此資料集移除的項目集合。</param>
      <returns>含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>從這個不可變的資料集中移除指定的項目。</summary>
      <param name="item">要移除的項目。</param>
      <returns>已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要加入項目的來源集合。</param>
      <returns>已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>建立與此資料集 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的不可變雜湊集。</summary>
      <returns>與此資料集 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>搜尋指定值的資料集，並傳回所找到的相等值 (如果有的話)。</summary>
      <param name="equalValue">要搜尋的值。</param>
      <param name="actualValue">搜尋找到的資料集中的值，如果搜尋找不到相符項目，則為原始的值。</param>
      <returns>指出搜尋是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立新的不可變雜湊集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要加入項目的來源集合。</param>
      <returns>已加入項目的新不可變雜湊集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>取得不可變雜湊集的執行個體，此不可變雜湊集為其搜尋方法使用指定的相等比較子。</summary>
      <param name="equalityComparer">要使用的相等比較子。</param>
      <returns>此不可變雜湊集的執行個體，會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>包含不可變集合之連鎖交換機制。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>在新增值或更新現有項目之後，從字典取得該值。</summary>
      <param name="location">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key">要加入或更新之值的索引鍵。</param>
      <param name="addValue">當沒有先前的值存在時所使用的值。</param>
      <param name="updateValueFactory">此函式會接收索引鍵和先前的值，並傳回要用來更新字典的新值。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的數值型別。</typeparam>
      <returns>已加入或已更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>在新增值或更新現有項目之後，從字典取得該值。</summary>
      <param name="location">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key">要加入或更新之值的索引鍵。</param>
      <param name="addValueFactory">此函式會接收索引鍵，當先前沒有值存在時，此函式會傳回新值以加入字典。</param>
      <param name="updateValueFactory">此函式會接收索引鍵和先前的值，並傳回要用來更新字典的新值。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的數值型別。</typeparam>
      <returns>已加入或已更新的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>自動將元素加入佇列的結尾。</summary>
      <param name="location">要自動更新的變數或欄位。</param>
      <param name="value">要加入佇列的值。</param>
      <typeparam name="T">集合中所包含之項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location">如果字典中沒有指定的索引鍵，該變數或欄位會自動更新。</param>
      <param name="key">要取得或加入之值的索引鍵。</param>
      <param name="value">如果找不到索引鍵，會將該值加入字典。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <returns>指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location">如果字典中沒有指定的變數或欄位，該變數或欄位會自動更新。</param>
      <param name="key">要擷取或新增之值的索引鍵。</param>
      <param name="valueFactory">如果找不到索引鍵，則會執行該函式以取得要插入字典的值。 不會叫用此委派一次以上。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <returns>指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>從該字典取得指定索引鍵的值，或若找不到該索引鍵，則將新值加入字典。</summary>
      <param name="location">如果字典中沒有指定的變數或欄位，該變數或欄位會更新。</param>
      <param name="key">要擷取或新增之值的索引鍵。</param>
      <param name="valueFactory">如果找不到索引鍵，則會執行該函式以取得要插入字典的值。</param>
      <param name="factoryArgument">要傳遞給值 Factory 的引數。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <typeparam name="TArg">提供給值 factory 的引數類型。</typeparam>
      <returns>指定之索引鍵的值或 <paramref name="valueFactory" /> (如果找不到索引鍵)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>比較兩個不可變陣列是否相等；如果相等，則取代其中一陣列。</summary>
      <param name="location">目的端，其值會與 <paramref name="comparand" /> 進行比較且可能會被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location" /> 的值比較的值。</param>
      <typeparam name="T">陣列所儲存的項目類型。</typeparam>
      <returns>
        <paramref name="location" /> 中的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>將陣列設為指定的陣列，並傳回原始陣列的參考，做為不可部份完成的作業。</summary>
      <param name="location">要設定為特定值的陣列。</param>
      <param name="value">
        <paramref name="location" /> 參數要設定的值。</param>
      <typeparam name="T">陣列所儲存的項目類型。</typeparam>
      <returns>
        <paramref name="location" /> 的原始值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>如果陣列尚未初始化，則將陣列設為指定的陣列。</summary>
      <param name="location">要設定為特定值的陣列。</param>
      <param name="value">將 <paramref name="location" /> 參數設為該值 (如果參數尚未初始化)。</param>
      <typeparam name="T">陣列所儲存的項目類型。</typeparam>
      <returns>如果陣列已經指派指定的值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>將新的元素推入堆疊。</summary>
      <param name="location">要更新的堆疊。</param>
      <param name="value">要推入堆疊的值。</param>
      <typeparam name="T">堆疊中的項目類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>如果字典中沒有指定的索引鍵，會將指定的索引鍵和值加入字典。</summary>
      <param name="location">要以指定的索引鍵和值更新的字典。</param>
      <param name="key">要加入的索引鍵 (如果字典中尚未定義)。</param>
      <param name="value">要加入的值。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <returns>如果字典中沒有該索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>自動移除或傳回佇列開頭的指定元素 (如果佇列不是空的)。</summary>
      <param name="location">要自動更新的變數或欄位。</param>
      <param name="value">從佇列的開頭設定為該值 (如果佇列不是空的)。</param>
      <typeparam name="T">佇列中項目的類型。</typeparam>
      <returns>如果佇列不是空的，且已經移除開頭的元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>從堆疊的最上方移除元素 (如果有元素可移除)。</summary>
      <param name="location">要更新的堆疊。</param>
      <param name="value">接收從堆疊移除的值 (如果堆疊不是空的)。</param>
      <typeparam name="T">堆疊中的項目類型。</typeparam>
      <returns>如果元素已經從堆疊移除則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>將有指定索引鍵的元素移除 (如果索引鍵存在)。</summary>
      <param name="location">要更新的字典。</param>
      <param name="key">要移除的索引鍵。</param>
      <param name="value">接收移除之項目的值 (如果字典不是空的)。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <returns>如果已找到並移除索引鍵則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>如果指定的索引鍵已設定為指定的值，則將指定的索引鍵設定為指定的值。</summary>
      <param name="location">要更新的字典。</param>
      <param name="key">要更新的索引鍵。</param>
      <param name="newValue">要設定的新值。</param>
      <param name="comparisonValue">
        <paramref name="key" /> 目前的值，以便讓更新成功。</param>
      <typeparam name="TKey">集合中所包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">集合中所包含之值的類型。</typeparam>
      <returns>如果字典中有 <paramref name="key" /> 和 <paramref name="comparisonValue" /> 且比較更新至則 <paramref name="newValue" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>透過指定的轉換函式，以開放式鎖定的交易語意就地改變值。             為贏得開放式鎖定競爭，轉換沒有重試次數限制。</summary>
      <param name="location">待變更的變數或欄位，可能會有多個執行緒存取。</param>
      <param name="transformer">會改變此值的函式。 此函式應該沒有副作用，因為與其他執行緒發生競爭情況時，它可以多次執行。</param>
      <typeparam name="T">資料的類型。</typeparam>
      <returns>若套用 <paramref name="transformer" /> 函式的結果之後，位置的值變更時為 <see langword="true" />；若因為上次叫用 <paramref name="transformer" /> 傳回現有的值，所以位置的值保持不變時則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>透過指定的轉換函式，以開放式鎖定的交易語意就地改變值。             為贏得開放式鎖定競爭，轉換沒有重試次數限制。</summary>
      <param name="location">待變更的變數或欄位，可能會有多個執行緒存取。</param>
      <param name="transformer">會改變此值的函式。 此函式應該沒有副作用，因為與其他執行緒發生競爭情況時，它可以多次執行。</param>
      <param name="transformerArgument">要傳遞至 <paramref name="transformer" /> 的引數。</param>
      <typeparam name="T">資料的類型。</typeparam>
      <typeparam name="TArg">傳遞至<paramref name="transformer" />的引數類型。</typeparam>
      <returns>若套用 <paramref name="transformer" /> 函式的結果之後，位置的值變更時為 <see langword="true" />；若因為上次叫用 <paramref name="transformer" /> 傳回現有的值，所以位置的值保持不變時則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>建立空的不可變清單。</summary>
      <typeparam name="T">儲存於其中的項目類型。</typeparam>
      <returns>空的固定清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>建立新的不可變清單，其中包含指定的項目。</summary>
      <param name="item">要預先填入清單的項目。</param>
      <typeparam name="T">其中的項目類型。</typeparam>
      <returns>包含指定項目的新項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>建立新的不可變清單，其中包含指定的項目陣列。</summary>
      <param name="items">陣列，其中包含要預先填入清單的項目。</param>
      <typeparam name="T">其中的項目類型。</typeparam>
      <returns>新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>建立新的不可變清單產生器。</summary>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變清單，其中包含指定的項目。</summary>
      <param name="items">要加入清單的項目。</param>
      <typeparam name="T">其中的項目類型。</typeparam>
      <returns>包含指定項目的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>搜尋指定的物件，並傳回清單中第一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在清單中尋找的物件 參考類型的值可以是 Null。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>在清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>搜尋指定的物件，並傳回清單中第一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>在固定清單中從索引到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>整個固定清單中最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>整個固定清單中最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>固定清單中從第一個項目到索引的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="item">要在不可變清單中尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>固定清單中從第一個項目到索引的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>從這個清單中移除指定的值。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="value">要移除的值。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>已移除項目的新不可變清單，或者，如果項目不存在於這個清單中，則為這個清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>從這個清單中移除指定的值。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>使用指定的項目，來取代清單中第一個相等的項目。</summary>
      <param name="list">要搜尋的清單。</param>
      <param name="oldValue">要取代的項目。</param>
      <param name="newValue">用來取代舊項目的項目。</param>
      <typeparam name="T">清單中的項目類型。</typeparam>
      <returns>新清單，即使要取代的值與該位置的新值相等也一樣。</returns>
      <exception cref="T:System.ArgumentException">會在清單中沒有舊值時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>列舉序列，並產生其內容的不可變清單。</summary>
      <param name="source">要列舉的序列。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <returns>不可變的清單，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>從產生器集合目前內容建立不可變的清單。</summary>
      <param name="builder">用於建立不可變清單的產生器。</param>
      <typeparam name="TSource">清單中元素的類型。</typeparam>
      <returns>不可變的清單，其中包含產生器集合的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>表示一個可以依照索引存取強式型別物件的不可變清單。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>將指定的物件加入不可變清單的尾端。</summary>
      <param name="value">要加入的物件。</param>
      <returns>已新增物件的不可變新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將指定集合的元素加入至不可變清單的尾端。</summary>
      <param name="items">元素將加入至清單尾端的集合。</param>
      <returns>已新增項目的不可變新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>使用預設的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單的某個元素。</summary>
      <param name="item">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子並傳回元素以零為起始的索引，來搜尋整個已排序的清單中的某個元素。</summary>
      <param name="item">要尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="comparer">比較元素時要使用的比較子實作，或 null 表示使用預設比較子。</param>
      <returns>如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <see cref="P:System.Collections.ICollection.Count" /> 的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">比較子是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子在已排序之清單內搜尋某範圍的元素，並傳回該元素以零為起始的索引。</summary>
      <param name="index">要搜尋範圍內之以零為起始的起始索引。</param>
      <param name="count">搜尋範圍的長度。</param>
      <param name="item">要尋找的物件。 參考類型的值可以是 Null。</param>
      <param name="comparer">比較元素時要使用的比較子實作，或 <see langword="null" /> 表示使用預設比較子。</param>
      <returns>如果有找到，則為已排序的清單中元素之以零為起始的索引，否則便為負數，此負數為大於元素的下一個元素索引之位元補數，或者，如果沒有更大的元素，則為 <paramref name="count" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">索引小於 0 或 <paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">索引和 <paramref name="count" /> 不代表清單中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 是 <see langword="null" />，而且預設比較子找不到類型 T 的比較子實作。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>代表有少量或沒有記憶體配置變動的清單，這個清單可以非常有效率的方式產生或建置於不可變的清單執行個體上。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>將項目加入不可變的清單中。</summary>
      <param name="item">要加入清單的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將一連串項目加入至這個清單的結尾。</summary>
      <param name="items">要加入清單結尾的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>使用預設的比較子來搜尋項目的整個 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />，並傳回項目以零為起始的索引。</summary>
      <param name="item">要尋找的物件。 參考類型的值可以是 Null。</param>
      <returns>如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子並傳回項目以零為起始的索引，來搜尋項目的整個 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />。</summary>
      <param name="item">要尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="comparer">比較項目時要使用的實作，或適用於預設比較子的 <see langword="null" />。</param>
      <returns>如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子來搜尋項目之指定範圍的 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />，並傳回項目以零為起始的索引。</summary>
      <param name="index">要搜尋範圍內之以零為起始的起始索引。</param>
      <param name="count">搜尋範圍的長度。</param>
      <param name="item">要尋找的物件。 這個參考類型的值可以是 Null。</param>
      <param name="comparer">比較項目時要使用的實作，或適用於預設比較子的 <see langword="null" />。</param>
      <returns>如果找到項目，則為 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中項目以零為起始的索引，否則為負數，此負數是大於 <paramref name="item" /> 之下一個項目索引的位元補數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。
-或-
<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 不代表 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面實作或類型 T 的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>從不可變的清單中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>判斷不可變的清單是否包含特定值。</summary>
      <param name="item">要在清單中尋找的物件</param>
      <returns>如果在清單中找到項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>使用轉換器函式，從這個產生器所代表的清單中建立新的不可變清單。</summary>
      <param name="converter">轉換器函式。</param>
      <typeparam name="TOutput">委派轉換器函式的輸出類型。</typeparam>
      <returns>新的不可變清單，來自這個產生器所代表的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>從目標陣列的開頭開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">陣列中以零起始的索引，即複製的起始處。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="index">來源的不可變清單中以零為起始的索引，其為複製開始處。</param>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <param name="count">要複製的項目數目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>取得這個不可變清單中的項目數。</summary>
      <returns>這個清單中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>判斷不可變的清單是否包含符合指定述詞所定義之條件的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>如果不可變的清單包含一或多個符合指定述詞所定義之條件的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>如果找到，則為不可變的清單，其中包含符合指定述詞所定義之條件的所有項目，否則為空的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現項目之以零為起始的索引。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>如果找到，則為符合指定述詞所定義之條件的最後一個項目，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，包含指定項目數且結束於指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現項目以零為起始的索引。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>在清單的每一個項目上執行指定動作。</summary>
      <param name="action">要在清單的每一個項目上執行的委派。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>為來源不可變清單中的項目範圍建立淺層複本。</summary>
      <param name="index">以零為起始的索引，此為範圍起始處。</param>
      <param name="count">範圍中的項目數。</param>
      <returns>來源不可變清單中項目範圍的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回不可變清單中的項目範圍內第一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>固定清單中的項目範圍內，第一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <returns>在固定清單中從 <paramref name="index" /> 到最後一個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在 <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 中從指定索引開始且包含指定個數項目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">要搜尋的項目數目。</param>
      <param name="equalityComparer">要用來比較項目是否相等的值比較子。</param>
      <returns>在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>將項目插入不可變清單的指定索引處。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入不可變清單的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>將集合的項目插入不可變清單的指定索引處。</summary>
      <param name="index">應插入新項目處的以零為起始的索引。</param>
      <param name="items">應將其項目插入不可變清單的集合。 集合本身不能是 <see langword="null" />，但若類型 <c>T</c> 是參考類型，則可包含 Null 的項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>取得或設定清單中指定索引的值。</summary>
      <param name="index">要取得或設定的項目索引。</param>
      <returns>位於指定索引處的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>取得清單中指定 <paramref name="index" /> 值的唯讀參考。</summary>
      <param name="index">所需項目的索引。</param>
      <returns>位於所指定 <paramref name="index" /> 值的唯讀參考。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個不可變的清單中最後一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>整個固定清單中最後一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <returns>在固定清單中從第一個項目到 <paramref name="index" /> 的項目範圍內，最後一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回不可變的清單中，包含指定項目數且結尾位於指定索引處的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>在固定清單中包含 <paramref name="count" /> 個項目且結束於 <paramref name="index" /> 的項目範圍內，最後一次出現 <paramref name="item" /> 之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>搜尋指定的物件，並傳回不可變的清單中，包含指定項目數且結尾位於指定索引處的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="item">要位於不可變清單中的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">要搜尋的項目數目。</param>
      <param name="equalityComparer">要用來比較項目是否相等的值比較子。</param>
      <returns>在固定清單中從 <paramref name="index" /> 處開始且包含 <paramref name="count" /> 個項目的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="item">要從清單中移除的物件。</param>
      <returns>如果已從清單中成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在清單中找不到項目，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已從不可變的清單中移除的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>移除位於不可變清單之指定索引處的項目。</summary>
      <param name="index">要從清單中移除之項目以零起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>反轉整個不可變清單中項目的順序。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>反轉不可變清單之指定範圍中項目的順序。</summary>
      <param name="index">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count">要反向範圍中的項目數。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>使用預設的比較子，來排序整個不可變清單中的項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子，來排序整個不可變清單中的項目。</summary>
      <param name="comparer">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>使用指定的比較物件，來排序整個不可變清單中的項目。</summary>
      <param name="comparison">比較項目時所使用的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子，來排序不可變清單之項目範圍內的項目。</summary>
      <param name="index">要排序範圍內之以零為起始的起始索引。</param>
      <param name="count">要排序的範圍長度。</param>
      <param name="comparer">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，這個值表示此執行個體是否為唯讀。</summary>
      <returns>一律<c>為 false</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將清單的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入清單。</summary>
      <param name="value">要加入至清單的物件。</param>
      <returns>插入新項目的位置，或是 -1，表示此項目沒有插入集合中。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>從清單中移除所有項目。</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>判斷清單是否包含特定值。</summary>
      <param name="value">要在清單中尋找的物件</param>
      <returns>如果在清單中找到 <see cref="T:System.Object" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷清單中特定項目的索引。</summary>
      <param name="value">要在清單中尋找的物件</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入清單的指定索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入清單的物件。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>從清單中移除第一個出現的特定物件。</summary>
      <param name="value">要從清單中移除的物件。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>根據這個執行個體的內容來建立不可變的清單。</summary>
      <returns>不可變的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>判斷不可變清單中的每一個項目是否符合指定述詞所定義的條件。</summary>
      <param name="match">定義檢查項目所根據之條件的委派。</param>
      <returns>如果不可變清單中的每一個項目都符合指定述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果清單中沒有元素，則傳回值為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>從不可變清單中移除所有元素。</summary>
      <returns>空白清單保留此實體擁有的相同排序或未排序的語意。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>判斷此不可變的清單是否包含指定的值。</summary>
      <param name="value">要尋找的值。</param>
      <returns>如果包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>將目前不可變清單中的元素轉換為另一種型別，並傳回包含已轉換元素的清單。</summary>
      <param name="converter">可將某一型別的每個元素轉換成另一個型別的委派。</param>
      <typeparam name="TOutput">目標陣列項目的類型。</typeparam>
      <returns>目標類型的清單，包含從目前 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> 中已轉換的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>從目標陣列的開頭開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>從目標陣列的指定索引處開始，從不可變清單中複製某範圍的元素到相容的一維陣列。</summary>
      <param name="index">來源的不可變清單中以零為起始的索引，其為複製開始處。</param>
      <param name="array">一維陣列，該陣列是從不可變清單複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">陣列中以零起始的索引，即複製的起始處。</param>
      <param name="count">要複製的項目數目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>取得清單中所包含元素的數目。</summary>
      <returns>清單中項目的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>取得含有預設排序比較子的空集合。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>列舉二進位樹狀目錄的內容。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>將 <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>將列舉往前推至不可變清單的下一個項目。</summary>
      <returns>如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過清單的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>將列舉程式設定為它的初始位置，這是在不可變清單中的第一個項目之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>判斷不可變的清單是否包含符合指定述詞所定義之條件的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>如果不可變的清單包含一或多個符合指定述詞所定義之條件的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>不可變的清單其中包含符合指定述詞所定義之條件的所有元素 (如有找到)，否則為空的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始且包含指定項目數的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從指定索引開始到最後一個項目的項目範圍內，第一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內第一個出現項目之以零為起始的索引。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>第一次出現符合比對所定義之條件的元素以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現的項目。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>最後一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，包含指定項目數且結束於指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回不可變的清單中，從第一個項目開始到指定索引的項目範圍內，最後一個出現項目以零為起始的索引。</summary>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>搜尋符合指定述詞所定義之條件的項目，並傳回整個不可變清單內最後一個出現項目以零為起始的索引。</summary>
      <param name="match">定義要搜尋項目之條件的委派。</param>
      <returns>符合 <paramref name="match" /> 所定義之條件且最後一次出現之元素的以零為起始的索引 (如有找到)，如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>在不可變清單的每一個元素上執行指定動作。</summary>
      <param name="action">要在不可變清單的每一個元素上執行的委派。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns>可用於逐一查看不可變清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>為來源不可變清單中的項目範圍建立淺層複本。</summary>
      <param name="index">以零為起始的索引，此為範圍起始處。</param>
      <param name="count">範圍中的項目數。</param>
      <returns>來源不可變清單中項目範圍的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個不可變清單中第一個出現物件之以零為起始的索引。</summary>
      <param name="value">要位於不可變清單中的物件。 參考類型的值可以是 <c>null</c>。</param>
      <returns>整個不可變清單中第一個出現 <paramref name="value" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在清單中從指定索引開始且包含指定元素數目的範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item">在清單中要尋找的物件，參考型別的值可以是 null。</param>
      <param name="index">搜尋之以零為起始的起始索引。 0 (零) 在空白清單中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>在清單中從索引處開始且包含項目數計數的項目範圍內，第一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>將指定的物件插入至不可變清單的指定索引處。</summary>
      <param name="index">要插入物件之以零起始的索引處。</param>
      <param name="item">要插入的物件。</param>
      <returns>插入物件後新的不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>將集合的項目插入不可變清單的指定索引處。</summary>
      <param name="index">要插入元素之以零起始的索引處。</param>
      <param name="items">應插入元素的集合。</param>
      <returns>插入元素後新的不可變清單。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>取得值，這個值指出清單是否為空。</summary>
      <returns>如果該清單為空則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>取得清單中指定索引處的元素。</summary>
      <param name="index">要擷取之項目的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">在 get 作業中，<paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index">傳回集合中的項目零起始索引。</param>
      <returns>位於指定位置項目的唯讀參考。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在清單中包含指定個數元素且結尾位於指定索引的元素範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <param name="item">要在清單中尋找的物件 參考類型的值可以是 Null。</param>
      <param name="index">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>在清單中包含項目數計數且結束於索引處的項目範圍內，最後一次出現項目之以零為起始的索引；如未找到則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>從這個不可變清單中移除指定物件的第一個符合元素。</summary>
      <param name="value">要移除的物件。</param>
      <returns>新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個不可變清單中移除第一個符合指定值的物件。</summary>
      <param name="value">從清單移除之元素的值。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>新的清單已移除物件，或是指定的物件已不存在於此清單則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已移除元素的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>移除指定索引中的項目。</summary>
      <param name="index">移除項目之以零為起始的索引。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>從這個不可變清單移除一個範圍的元素。</summary>
      <param name="items">若在這個清單中找到符合的元素，應被移除元素的集合。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個清單中移除指定的值。</summary>
      <param name="items">如果在這個清單中找到相符項目時要移除的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>從不可變清單中移除某範圍的元素，從指定的索引開始，並且包含指定數目的元素。</summary>
      <param name="index">開始移除的起始索引。</param>
      <param name="count">要移除的項目數目。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>在不可變清單中以新元素取代指定元素。</summary>
      <param name="oldValue">要取代的項目。</param>
      <param name="newValue">要取代 <paramref name="oldValue" /> 的元素。</param>
      <returns>含已取代之元素的新清單，即使該元素等於舊的元素。</returns>
      <exception cref="T:System.ArgumentException">不可變的清單中沒有 <paramref name="oldValue" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>在不可變清單中以新元素取代指定元素。</summary>
      <param name="oldValue">在清單中要取代的元素。</param>
      <param name="newValue">要取代 <paramref name="oldValue" /> 的元素。</param>
      <param name="equalityComparer">用來檢查相等的比較子。</param>
      <returns>新的清單含有已取代的物件，或是這個清單沒有指定的物件則為此清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>反轉整個不可變清單中項目的順序。</summary>
      <returns>反向排列的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>反轉不可變清單之指定範圍中項目的順序。</summary>
      <param name="index">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count">要反向範圍中的項目數。</param>
      <returns>反向排列的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>以指定元素取代不可變清單中指定位置的元素。</summary>
      <param name="index">清單中要取代之元素的位置。</param>
      <param name="value">用來取代舊項目的項目。</param>
      <returns>含已取代之元素的新清單，即使該元素等於位置上舊的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>使用預設的比較子來排序整個不可變清單中的元素。</summary>
      <returns>已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子來排序整個不可變清單中的元素。</summary>
      <param name="comparer">比較元素時要使用的實作，或 <see langword="null" /> 表示使用預設比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns>已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>使用指定的比較子來排序整個不可變清單中的元素。</summary>
      <param name="comparison">比較元素時所要使用的委派。</param>
      <returns>已排序的清單。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子來排序不可變清單某範圍內的元素。</summary>
      <param name="index">要排序範圍內之以零為起始的起始索引。</param>
      <param name="count">要排序的範圍長度。</param>
      <param name="comparer">比較項目時所使用的實作，或 <see langword="null" /> 表示使用預設的比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />)。</param>
      <returns>已排序的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將指定的項目加入至不可變的清單。</summary>
      <param name="item">要新增的項目。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從不可變的清單中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="item">要移除的物件。</param>
      <returns>如果 <paramref name="item" /> 從清單中成功移除，則為 <see langword="true" />；否則為 <see langword="false" />。 若 <paramref name="item" /> 沒有在原本的清單中找到，則這個方法也會回傳 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns>可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將物件插入至不可變清單的指定索引處。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入的物件。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得或設定指定之索引處的值。</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</exception>
      <exception cref="T:System.NotSupportedException">一律從 setter 擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的值。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將整個不可變的清單複製到相容的一維陣列。</summary>
      <param name="array">從不可變清單複製元素的目的地一維陣列。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回可逐一查看不可變清單的列舉程式。</summary>
      <returns>可用來逐一查看清單的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入不可變的清單中。</summary>
      <param name="value">要加入至清單的物件。</param>
      <returns>新元素的插入的位置，或是 -1 表示此元素沒有插入清單中。</returns>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>從不可變的清單中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷不可變的清單是否包含特定值。</summary>
      <param name="value">要在清單中尋找的物件</param>
      <returns>如果在清單中找到此物件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷不可變清單中特定項目的索引。</summary>
      <param name="value">要在清單中尋找的物件</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入至不可變清單的指定索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入清單的物件。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <returns>位於指定索引處的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">當 <paramref name="index" /> 是負數或不小於 <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> 時，從 getter 擲回。</exception>
      <exception cref="T:System.NotSupportedException">一律從 setter 擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>從不可變的清單中移除第一個出現的特定物件。</summary>
      <param name="value">要從清單中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位於不可變清單之指定索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>將指定的值加入至這個不可變清單。</summary>
      <param name="value">要加入的值。</param>
      <returns>已新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將指定的值加入至這個不可變清單。</summary>
      <param name="items">要加入的值。</param>
      <returns>新增項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>擷取空的清單，這個清單的排序及順序語意與這個執行個體相同。</summary>
      <returns>空的清單，這個清單的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index">要插入值的索引。</param>
      <param name="item">要插入的元素。</param>
      <returns>新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>將指定的項目插入至不可變清單中的指定索引處。</summary>
      <param name="index">要插入元素的索引處。</param>
      <param name="items">要插入的項目。</param>
      <returns>新的不可變清單，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從清單中移除具有特定值的元素。</summary>
      <param name="value">從清單移除之元素的值。</param>
      <param name="equalityComparer">用來比較元素相等的比較子。</param>
      <returns>已移除指定項目的新 <see cref="T:System.Collections.Immutable.ImmutableList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
      <param name="match">定義要移除項目之條件的委派。</param>
      <returns>已移除項目的新不可變清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>移除不可變清單之指定索引處的項目。</summary>
      <param name="index">要移除的項目索引。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>從這個符合項目指定的不可變清單移除一個範圍的元素。</summary>
      <param name="items">從清單中要移除項目的範圍 (如有找到)。</param>
      <param name="equalityComparer">用來比較元素的相等比較子。</param>
      <returns>已移除項目的不可變清單。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> 或 <paramref name="equalityComparer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>從這個清單中的指定位置移除指定數目的元素。</summary>
      <param name="index">要移除之元素範圍的起始索引。</param>
      <param name="count">要移除的項目數目。</param>
      <returns>已移除項目的新清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>使用指定的元素取代清單中的元素。</summary>
      <param name="oldValue">要取代的項目。</param>
      <param name="newValue">用來取代舊項目的項目。</param>
      <param name="equalityComparer">搜尋中所使用的相等比較子。</param>
      <returns>新的清單。</returns>
      <exception cref="T:System.ArgumentException">會在清單中沒有舊值時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>使用指定的項目取代清單中指定位置的項目。</summary>
      <param name="index">清單中要取代之元素的位置。</param>
      <param name="value">用來取代舊項目的項目。</param>
      <returns>新的清單。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>建立與此清單 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同之清單。</summary>
      <returns>已建立的清單含有與此清單相同的內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>判斷不可變清單中的每一個項目是否符合指定述詞所定義的條件。</summary>
      <param name="match">定義檢查項目所根據之條件的委派。</param>
      <returns>如果不可變清單中的每一個項目都符合指定述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果清單中沒有元素，則傳回值為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>建立空的不可變佇列。</summary>
      <typeparam name="T">要儲存於不可變佇列中的項目類型。</typeparam>
      <returns>空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>建立新的不可變佇列，其中包含指定的項目。</summary>
      <param name="item">要預先填入佇列的項目。</param>
      <typeparam name="T">不可變佇列中的項目類型。</typeparam>
      <returns>新的不可變佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>建立新的不可變佇列，其中包含指定的項目陣列。</summary>
      <param name="items">陣列，其中包含要預先填入佇列的項目。</param>
      <typeparam name="T">不可變佇列中的項目類型。</typeparam>
      <returns>新的不可變佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變佇列，其中包含指定的項目。</summary>
      <param name="items">在套用不變性之前加入佇列的項目。</param>
      <typeparam name="T">佇列中項目的類型。</typeparam>
      <returns>不可變的佇列，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <param name="queue">要從中移除項目的佇列。</param>
      <param name="value">當這個方法傳回時，會包含來自佇列開頭的項目。</param>
      <typeparam name="T">不可變佇列中的項目類型。</typeparam>
      <returns>已移除項目的新佇列。</returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>代表不可變的佇列。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">佇列中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>從不可變的佇列移除所有的物件。</summary>
      <returns>空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <returns>新的不可變佇列；絕不會是 <c>null</c>。</returns>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <param name="value">此方法傳回時，包含來自佇列開頭的項目。</param>
      <returns>已移除開頭項目的新不可變佇列。</returns>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>取得空的不可變佇列。</summary>
      <returns>空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value">要加入的項目。</param>
      <returns>新的不可變佇列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>列舉不可變佇列的內容而不需配置任何記憶體。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>將列舉程式往前推至不可變佇列的下一個項目。</summary>
      <returns>如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過佇列的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>傳回可逐一查看不可變佇列的列舉值。</summary>
      <returns>可用來逐一查看佇列的列舉值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>取得值，這個值表示此不可變佇列是否空白。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns>如果此佇列為空白，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>傳回不可變佇列開頭的項目，但不要移除。</summary>
      <returns>佇列開頭的元素。</returns>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>取得位於佇列前端項目的唯讀參考。</summary>
      <exception cref="T:System.InvalidOperationException">此佇列是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>從不可變的佇列移除所有項目。</summary>
      <returns>空的不可變佇列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>移除不可變佇列開頭的項目，並傳回新的佇列。</summary>
      <returns>新的不可變佇列；絕不會是 <c>null</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>將項目加入到不可變佇列結尾，並傳回新的佇列。</summary>
      <param name="value">要加入的項目。</param>
      <returns>新的不可變佇列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>建立空白、不可變的排序字典。</summary>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>建立空白、不可變的排序字典，該字典會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">用於判斷字典中索引鍵等式的實作。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>建立空白、不可變的排序字典，該字典會使用指定的索引鍵與值比較子。</summary>
      <param name="keyComparer">用於判斷字典中索引鍵等式的實作。</param>
      <param name="valueComparer">用於判斷字典中的值是否相等的實作。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>空白、不可變的排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>建立新的、不可變的排序字典產生器。</summary>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>建立新的、不可變的排序字典產生器。</summary>
      <param name="keyComparer">索引鍵比較子。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>建立新的、不可變的排序字典產生器。</summary>
      <param name="keyComparer">索引鍵比較子。</param>
      <param name="valueComparer">值比較子。</param>
      <typeparam name="TKey">字典所儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典所儲存的值類型。</typeparam>
      <returns>不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>使用指定的索引鍵比較子，從指定的項目範圍，建立新的、不可變的排序字典。</summary>
      <param name="keyComparer">評估等式與排序索引鍵所使用的比較子實作。</param>
      <param name="items">要新增至排序字典的項目。</param>
      <typeparam name="TKey">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中儲存的值類型。</typeparam>
      <returns>新的、不可變的排序字典，其中包含指定的項目，並使用指定的索引鍵比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>使用指定的索引鍵與值比較子，從指定的項目範圍，建立新的、不可變的排序字典。</summary>
      <param name="keyComparer">比較等式與排序索引鍵所使用的比較子實作。</param>
      <param name="valueComparer">比較等式與排序值所使用的比較子實作。</param>
      <param name="items">在字典成為不可變之前，新增至排序字典的項目。</param>
      <typeparam name="TKey">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中儲存的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定的項目，並使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>建立不可變的排序字典，其中包含指定的項目，並使用預設的比較子。</summary>
      <param name="items">在字典成為不可變之前，新增至排序字典的項目。</param>
      <typeparam name="TKey">字典中儲存的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中儲存的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>列舉索引鍵/值組的序列，並產生不可變的排序字典作為內容。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>列舉索引鍵/值組的序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer">建立不可變字典時使用的索引鍵比較子。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>列舉索引鍵/值組的序列，並使用指定的索引鍵與值比較子產生不可變的排序字典作為內容。</summary>
      <param name="source">要列舉的索引鍵/值組的序列。</param>
      <param name="keyComparer">建立不可變字典時使用的索引鍵比較子。</param>
      <param name="valueComparer">不可變字典所使用的值比較子。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定序列的索引鍵/值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>從產生器字典目前內容建立不可變的已排序字典。</summary>
      <param name="builder">產生器，用於建立不可變的已排序字典。</param>
      <typeparam name="TKey">字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">字典中的值類型。</typeparam>
      <returns>不可變的已排序字典，其中包含產生器字典的目前內容。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>列舉及轉換序列，並產生不可變的排序字典作為內容。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>列舉及轉換序列，並使用指定的索引鍵比較子產生不可變的排序字典作為內容。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer">字典使用的索引鍵比較子。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>列舉及轉換序列，並使用指定的索引鍵與值比較子產生不可變的排序字典作為內容。</summary>
      <param name="source">列舉以產生字典的序列。</param>
      <param name="keySelector">從每個序列項目產生字典的索引鍵的函式。</param>
      <param name="elementSelector">從每個序列項目產生字典的值的函式。</param>
      <param name="keyComparer">字典使用的索引鍵比較子。</param>
      <param name="valueComparer">字典使用的值比較子。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <typeparam name="TKey">所產生字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">所產生字典中的值類型。</typeparam>
      <returns>不可變的排序字典，其中包含指定序列的項目。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>代表不可變排序字典。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey">字典中包含之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中包含之值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>將具有指定索引鍵和值的元素加入不可變排序字典。</summary>
      <param name="key">要加入的項目索引鍵。</param>
      <param name="value">要加入的項目值。</param>
      <returns>新的不可變排序字典，其中包含其他機碼值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的索引鍵，但有不同的值。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>將指定的機碼值組加入不可變排序字典。</summary>
      <param name="items">要加入的索引鍵/值組。</param>
      <returns>新的不可變字典，其中包含其他索引鍵/值組。</returns>
      <exception cref="T:System.ArgumentException">字典中已經存在指定的其中一個索引鍵，但有不同的值。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>代表隨著少數記憶體配置或無記憶體配置而變動的排序字典，此排序字典可以非常有效率地產生或建置於不可變排序字典執行個體上。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>將具有指定索引鍵和值的項目加入至不可變排序字典。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>將指定的項目加入至不可變排序字典。</summary>
      <param name="item">要加入字典的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>將值序列加入至不可變排序字典。</summary>
      <param name="items">要加入至字典的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>從不可變排序字典中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷不可變排序字典是否包含特定值。</summary>
      <param name="item">要在字典中尋找的物件。</param>
      <returns>如果在字典中找到 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>判斷不可變排序字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要在字典中尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>判斷不可變排序字典是否包含具有指定值的項目。</summary>
      <param name="value">要在字典中尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果不可變排序字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>取得這個不可變排序字典中的項目數目。</summary>
      <returns>取得此字典中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>傳回逐一查看不可變排序字典內容的列舉程式。</summary>
      <returns>可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值；否則為預設值。</summary>
      <param name="key">要搜尋的索引鍵。</param>
      <returns>索引鍵的值；如果找不到相符的索引鍵，則為 <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>如果字典中存在相符的索引鍵，就會取得指定索引鍵的值；否則為預設值。</summary>
      <param name="key">要搜尋的索引鍵。</param>
      <param name="defaultValue">如果字典中找不到相符的索引鍵時所傳回的預設值。</param>
      <returns>索引鍵的值，或者，如果找不到相符的索引鍵，則為 <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>取得或設定不可變排序字典中指定索引鍵的值。</summary>
      <param name="key">要擷取其值的索引鍵。</param>
      <returns>與指定索引鍵相關聯的值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>取得或設定索引鍵比較子。</summary>
      <returns>索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>取得項目的強型別、唯讀集合。</summary>
      <returns>項目的強型別、唯讀集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>將具有指定索引鍵的項目從不可變排序字典中移除。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <returns>如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在原始的字典中找不到 <paramref name="key" />，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>從不可變排序字典中移除第一個出現的特定物件。</summary>
      <param name="item">要從字典中移除的物件。</param>
      <returns>如果已成功從字典中移除 <paramref name="item" />，則為 <see langword="true" />，否則為 <see langword="false" />。 如果在字典中找不到 <paramref name="item" />，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>從不可變排序字典中，移除任何索引鍵與可在指定順序中找到之索引鍵相符的項目。</summary>
      <param name="keys">要從字典中移除的項目索引鍵。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將字典的項目複製到陣列。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <param name="array">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (具備安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key">要加入的項目的索引鍵。</param>
      <param name="value">要加入的項目的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>字典的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，這個值會指出 <see cref="T:System.Collections.IDictionary" /> 物件的大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從字典中移除具有指定索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>根據這個執行個體的內容，建立不可變排序字典。</summary>
      <returns>不可變排序字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey">要搜尋的索引鍵。</param>
      <param name="actualKey">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns>如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <param name="key">將擷取其值的索引鍵。</param>
      <param name="value">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果實作字典的物件包含具有指定索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>取得或設定值比較子。</summary>
      <returns>值比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>傳回與所提供 <paramref name="key" />建立關聯值的唯讀參考。</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>取得集合，其中包含不可變排序字典的值。</summary>
      <returns>集合，其中包含實作字典的物件值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>擷取空白不可變排序字典，其具有與字典執行個體相同的順序和機碼值組比較規則。</summary>
      <returns>具有對等順序和索引鍵/值比較規則的空字典。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷此不可變排序字典是否包含指定的機碼值組。</summary>
      <param name="pair">要尋找的索引鍵/值組。</param>
      <returns>如果在字典中找到指定的索引鍵/值組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>判斷此不可變排序對應是否包含指定的索引鍵。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>如果不可變字典包含指定之索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>判斷不可變排序字典是否包含具有指定值的項目。</summary>
      <param name="value">要尋找的值。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果字典中包含具有指定值的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>取得不可變排序字典中機碼值組的數目。</summary>
      <returns>字典中機碼值組的數目。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>取得空白不可變排序字典。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>列舉二進位樹狀目錄的內容。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>將 <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>將列舉程式往前推至不可變排序字典的下一個項目。</summary>
      <returns>如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過排序字典的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>將列舉程式設定為它的初始位置，這是在不可變排序字典中的第一個項目之前。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>傳回逐一查看不可變排序字典內容的列舉程式。</summary>
      <returns>可用來逐一查看字典的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>取得值，這個值表示此不可變排序字典之執行個體是否為空白。</summary>
      <returns>如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>取得與指定索引鍵相關聯的 <paramref name="TValue" />。</summary>
      <param name="key">要擷取其值的索引鍵。</param>
      <returns>與指定之索引鍵關聯的值。 如果找不到結果，此作業會擲回例外狀況。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>取得不可變排序字典之索引鍵比較子。</summary>
      <returns>字典的索引鍵比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>取得不可變排序字典中的索引鍵。</summary>
      <returns>不可變字典中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>將具有指定值的元素從不可變排序字典移除。</summary>
      <param name="value">要移除的元素值。</param>
      <returns>已移除指定元素之新的不可變字典；或者如果字典中找不到指定的值，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將具有指定索引鍵的元素從不可變排序字典移除。</summary>
      <param name="keys">要移除之項目的索引鍵。</param>
      <returns>已移除指定之索引鍵的新不可變字典，如果在字典中找不到指定的索引鍵，則為此執行個體。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>設定不可變排序字典中指定的索引鍵和值，可能會覆寫指定索引鍵的現有值。</summary>
      <param name="key">要加入的項目索引鍵。</param>
      <param name="value">要設定的索引鍵值。</param>
      <returns>新的不可變排序字典，其中包含指定的機碼值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>設定不可變排序字典中指定的機碼值組，可能會覆寫索引鍵的現有值。</summary>
      <param name="items">要在字典中設定的索引鍵/值組。 如果任何索引鍵已經存在字典中，則此方法將會覆寫其先前的值</param>
      <returns>不可變字典，其中包含指定的機碼值組。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將字典的項目複製到陣列。</summary>
      <param name="array">從字典複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果是同步 (安全執行緒) 存取 <see cref="T:System.Collections.ICollection" /> 為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將具有所提供之索引鍵和值的項目加入字典物件。</summary>
      <param name="key">做為要加入項目之索引鍵的物件。</param>
      <param name="value">做為要加入項目之值的物件。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>清除此執行個體。</summary>
      <exception cref="T:System.NotSupportedException">字典物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷不可變字典物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要在字典物件中尋找的索引鍵。</param>
      <returns>如果字典包含具有索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回不可變字典物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>字典物件的列舉程式物件。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從不可變字典物件中移除具有指定索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>建立與此字典 (能夠使用標準變動介面，有效率地跨多個作業進行變動) 內容相同之不可變排序字典。</summary>
      <returns>與此字典具有相同內容的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>判斷此字典是否包含指定的索引鍵。</summary>
      <param name="equalKey">要搜尋的索引鍵。</param>
      <param name="actualKey">如果找到，則為位於字典中相符的索引鍵；如果找不到相符項目，則為 <c>equalkey</c>。</param>
      <returns>如果找到 <paramref name="equalKey" /> 的相符項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <param name="key">將擷取其值的索引鍵。</param>
      <param name="value">如果找到索引鍵，則這個方法傳回時會包含與指定索引鍵相關聯的值，否則會包含 <paramref name="value" /> 參數類型的預設值。</param>
      <returns>如果字典包含具有指定索引鍵的元素，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>取得用來判斷值是否相等的值比較子。</summary>
      <returns>用來判斷值是否相等的值比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>傳回與所提供 <paramref name="key" />建立關聯值的唯讀參考。</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> 不存在。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>取得不可變排序字典中的值。</summary>
      <returns>字典中的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>取得不可變排序字典之執行個體，該執行個體會使用指定的索引鍵比較子。</summary>
      <param name="keyComparer">要使用的索引鍵比較子。</param>
      <returns>不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>取得不可變排序字典之執行個體，該執行個體會使用指定的索引鍵和值比較子。</summary>
      <param name="keyComparer">要使用的索引鍵比較子。</param>
      <param name="valueComparer">要使用的值比較子。</param>
      <returns>不可變字典的執行個體，該執行個體會使用指定的比較子。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>建立空的不可變排序資料集。</summary>
      <typeparam name="T">要儲存於不可變資料集中的項目類型。</typeparam>
      <returns>空的不可變的已排序資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>建立新的不可變排序資料集，其中包含指定的項目。</summary>
      <param name="item">要預先填入資料集的項目。</param>
      <typeparam name="T">不可變資料集中的項目類型。</typeparam>
      <returns>建立新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>建立新的不可變排序資料集，其中包含指定的項目陣列。</summary>
      <param name="items">陣列，其中包含要預先填入資料集的項目。</param>
      <typeparam name="T">不可變資料集中的項目類型。</typeparam>
      <returns>新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>建立空的不可變排序資料集，該資料集會使用指定的比較子。</summary>
      <param name="comparer">比較資料集中的項目時所使用的實作。</param>
      <typeparam name="T">不可變資料集中的項目類型。</typeparam>
      <returns>空的不可變資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>建立新的不可變排序資料集，其中包含指定的項目且使用指定的比較子。</summary>
      <param name="comparer">比較資料集中的項目時所使用的實作。</param>
      <param name="item">要預先填入資料集的項目。</param>
      <typeparam name="T">儲存於不可變資料集中的項目類型。</typeparam>
      <returns>建立新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>建立新的不可變排序資料集，其中包含指定的項目陣列且使用指定的比較子。</summary>
      <param name="comparer">比較資料集中的項目時所使用的實作。</param>
      <param name="items">陣列，其中包含要預先填入資料集的項目。</param>
      <typeparam name="T">不可變資料集中的項目類型。</typeparam>
      <returns>新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>傳回集合，這個集合可用來建置不可變的排序資料集。</summary>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>不可變的集合產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>傳回集合，這個集合可用來建置不可變的排序資料集。</summary>
      <param name="comparer">用來比較資料集中的項目是否相等的比較子。</param>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>不可變的集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變集合，其中包含指定的項目。</summary>
      <param name="comparer">用來比較這個資料集中項目的比較子。</param>
      <param name="items">在資料集成為不可變之前新增至該資料集的項目。</param>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變集合，其中包含指定的項目。</summary>
      <param name="items">在資料集成為不可變之前新增至該資料集的項目。</param>
      <typeparam name="T">由集合所儲存的項目類型。</typeparam>
      <returns>新的不可變資料集，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>列舉序列，並產生其內容的不可變排序資料集。</summary>
      <param name="source">要列舉的序列。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <returns>不可變的排序資料集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>列舉序列、產生其內容的不可變排序資料集，並使用指定的比較子。</summary>
      <param name="source">要列舉的序列。</param>
      <param name="comparer">比較子，可用來初始化成員並將其加入排序資料集。</param>
      <typeparam name="TSource">序列中的項目類型。</typeparam>
      <returns>不可變的排序資料集，其中包含指定序列中的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>從產生器集合目前內容建立不可變的已排序資料集。</summary>
      <param name="builder">產生器，用於建立不可變的已排序資料集。</param>
      <typeparam name="TSource">不可變的已排序資料集中元素的類型。</typeparam>
      <returns>不可變的已排序資料集，其中包含產生器集合中的目前內容。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>代表不可變的已排序資料集實作。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">資料集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>將指定的值加入至這個不可變的已排序資料集。</summary>
      <param name="value">要加入的值。</param>
      <returns>含有已加入項目的新資料集，如果項目已經存在於此資料集中，則為這個資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>代表排序的資料集，能夠進行少量或沒有記憶體配置的變更，有效率地操作或建立不可變的排序資料集。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>將項目加入目前的資料集，並傳回表示是否已成功加入項目的值。</summary>
      <param name="item">要加入至集合的項目。</param>
      <returns>如果已將項目加入資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>從這個資料集中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>判斷資料集是否包含指定的物件。</summary>
      <param name="item">要在資料集中尋找的物件。</param>
      <returns>如果在資料集中找到 <paramref name="item" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>取得不可變的已排序資料集中的項目數。</summary>
      <returns>這個資料集中的項目數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前資料集中移除指定的項目資料集。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>傳回可逐一查看資料集的列舉程式。</summary>
      <returns>可用來逐一查看資料集的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other">集合會與目前的資料集進行比較。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>取得位於指定索引的集合項目。</summary>
      <param name="index">傳回集合中的項目零起始索引。</param>
      <returns>位於指定位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index">傳回集合中的項目零起始索引。</param>
      <returns>位於指定位置項目的唯讀參考。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>取得或設定物件，這個物件可用來判斷不可變排序資料集中的值是否相等。</summary>
      <returns>用來判斷資料集中的值是否相等的比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>取得不可變的已排序資料集中的最大值，如比較子所定義。</summary>
      <returns>資料集中的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>取得不可變的已排序資料集中的最小值，如比較子所定義。</summary>
      <returns>資料集中的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否與指定的集合重疊。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>從資料集中移除第一個出現的指定物件。</summary>
      <param name="item">要從資料集移除的物件。</param>
      <returns>如果已從資料集中移除 <paramref name="item" />，則為 <see langword="true" />，如果在資料集中找不到 <paramref name="item" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>傳回以反向順序逐一查看不可變排序資料集的列舉程式。</summary>
      <returns>以反向順序逐一查看資料集的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集等於 <paramref name="other" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入目前的資料集，並傳回表示是否已成功加入項目的值。</summary>
      <param name="item">要加入至集合的項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從特定的陣列索引開始，將集合的項目複製到陣列。</summary>
      <param name="array">從集合複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，這個值表示此執行個體是否為唯讀。</summary>
      <returns>一律<c>為 false</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果是同步 (安全執行緒) 存取 <see cref="T:System.Collections.ICollection" /> 為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>根據這個執行個體的內容來建立不可變的排序資料集。</summary>
      <returns>不可變的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集和指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前資料集比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>從不可變的已排序資料集中移除所有項目。</summary>
      <returns>已移除項目的空資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>判斷此不可變的已排序資料集是否包含指定的值。</summary>
      <param name="value">要檢查的值。</param>
      <returns>如果資料集包含指定的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>取得不可變的已排序資料集中的項目數。</summary>
      <returns>不可變的已排序資料集中的項目數。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>取得空的不可變已排序的資料集。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>列舉二進位樹狀目錄的內容。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>將 <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> 類別的目前執行個體所使用的資源釋出。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>將列舉程式往前推至不可變排序資料集的下一個項目。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <returns>如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過排序資料集的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>將列舉程式設定為它的初始位置，這是在不可變排序資料集中的第一個項目之前。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>目前的元素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>從這個不可變的已排序資料集中移除指定的項目資料集。</summary>
      <param name="other">要從此資料集中移除的項目。</param>
      <returns>含有已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>傳回可逐一查看不可變的已排序資料集的列舉值。</summary>
      <returns>可用來逐一查看資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>取得指定的值所出現之不可變的已排序資料集內的位置。</summary>
      <param name="item">要搜尋其位置的值。</param>
      <returns>如果找到 <paramref name="item" />，則為已排序資料集中指定之 <paramref name="item" /> 的索引。 如果找不到 <paramref name="item" /> 且小於此資料集中的一或多個項目，此方法會傳回負數，也就是大於值的第一個項目之索引的位元補數。 如果找不到 <paramref name="item" />，且大於資料集中的任何項目，此方法會傳回負數，也就是最後一個項目的索引加 1 的位元補數。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的已排序資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other">要與這個資料集交集的資料集。</param>
      <returns>新的不可變的已排序資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>取得值，這個值表示此不可變的已排序資料集是否為空的。</summary>
      <returns>如果此資料集為空的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集是否為指定之集合的適當超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集是否為指定之集合的子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>取得指定索引處不可變的已排序資料集的項目。</summary>
      <param name="index">要從已排序的資料集擷取之項目的索引。</param>
      <returns>位於指定索引的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>取得位於指定 <paramref name="index" /> 集合項目的唯讀參考。</summary>
      <param name="index">傳回集合中的項目零起始索引。</param>
      <returns>位於指定位置項目的唯讀參考。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>取得用來排序不可變的已排序資料集中索引鍵的比較子。</summary>
      <returns>用來排序索引鍵的比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>取得不可變的已排序資料集中的最大值，如比較子所定義。</summary>
      <returns>資料集中的最大值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>取得不可變的已排序資料集中的最小值，如比較子所定義。</summary>
      <returns>資料集中的最小值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集與指定的集合是否共用通用項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>將指定的值從這個不可變的已排序資料集移除。</summary>
      <param name="value">要移除的項目。</param>
      <returns>已移除項目的新的不可變的已排序資料集，如果在資料集中找不到項目，則為此資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>傳回以反向順序逐一查看此不可變的已排序資料集的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>以反向順序逐一查看不可變的已排序資料集的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的不可變的已排序資料集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果資料集相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的已排序資料集，其中包含存在於這個資料集或指定之序列 (但非兩者) 中的項目。</summary>
      <param name="other">項目的其他序列。</param>
      <returns>新的不可變的已排序資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將指定的值加入集合。</summary>
      <param name="item">要加入的值。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從集合中移除所有項目。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從特定的陣列索引開始，將集合的項目複製到陣列。</summary>
      <param name="array">從集合複製項目之目的地的一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>請參閱 <see cref="T:System.Collections.Generic.ICollection`1" /> 介面。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從集合中移除第一個出現的特定物件。</summary>
      <param name="item">要從集合中移除的物件。</param>
      <returns>如果已順利從集合中移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>在集合中的指定索引處插入項目。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入資料集的物件。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>請參閱 <see cref="T:System.Collections.Generic.IList`1" /> 介面。</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定之索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>將項目加入至目前資料集，並傳回表示是否成功加入項目的值。</summary>
      <param name="item">要加入至集合的項目。</param>
      <returns>如果項目加入至資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將資料集的項目複製到陣列中。</summary>
      <param name="array">一維陣列，這是從資料集複製之項目的目的地。 陣列必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" /> 介面。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>請參閱 <see cref="T:System.Collections.ICollection" />。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用於逐一查看集合的列舉程式物件。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至資料集。</summary>
      <param name="value">要加入至資料集的物件。</param>
      <returns>插入新項目的位置，或是 -1，表示此項目沒有插入集合中。</returns>
      <exception cref="T:System.NotSupportedException">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>將所有項目從資料集移除。</summary>
      <exception cref="T:System.NotSupportedException">所有情況都會擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷資料集是否包含特定的值。</summary>
      <param name="value">要在資料集中尋找的物件。</param>
      <returns>如果在資料集中找到物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷資料集中特定項目的索引。</summary>
      <param name="value">要在資料集中尋找的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入資料集的指定索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入資料集的物件。</param>
      <exception cref="T:System.NotSupportedException">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.Object" />。</summary>
      <param name="index">索引。</param>
      <returns>
        <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>從資料集中移除第一個出現的特定物件。</summary>
      <param name="value">要從資料集移除的物件。</param>
      <exception cref="T:System.NotSupportedException">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位於資料集指定之索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">此集合是唯讀的，或具有固定大小。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>將指定的項目加入至這個不可變的資料集中。</summary>
      <param name="value">要加入的項目。</param>
      <returns>含有已加入項目的新資料集，如果項目已經存在於資料集中，則為這個資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>擷取空的不可變資料集，這個資料集的排序及順序語意與這個執行個體相同。</summary>
      <returns>空的資料集，這個資料集的排序及順序語意與這個執行個體相同。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的不可變資料集中，移除指定之集合內的項目。</summary>
      <param name="other">要從此資料集中移除的項目。</param>
      <returns>已移除項目的新資料集，如果資料集中沒有任何項目，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中包含存在於這個資料集和指定之資料集中的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的不可變資料集，其中包含同時存在於這兩個資料集中的任何項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>從這個不可變的資料集中移除指定的項目。</summary>
      <param name="value">要移除的項目。</param>
      <returns>已移除之指定項目的新資料集，如果資料集中找不到該項目，則為目前的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立不可變的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>新的資料集，其中僅包含在目前資料集或指定之集合 (但非兩者) 中出現的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>建立新的不可變資料集，其中包含在目前資料集或指定之集合中出現的所有項目。</summary>
      <param name="other">要加入項目的來源集合。</param>
      <returns>已加入項目的新不可變資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>建立與這個不可變的已排序資料集具有相同內容的集合，可使用標準的可變介面有效率地操作這個集合。</summary>
      <returns>已排序的資料集產生器。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>搜尋指定值的資料集，並傳回所找到的相等值 (如果有的話)。</summary>
      <param name="equalValue">要搜尋的值。</param>
      <param name="actualValue">搜尋找到的資料集中的值，如果搜尋找不到相符項目，則為原始的值。</param>
      <returns>指出搜尋是否成功的值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>將項目的指定資料集加入至這個不可變的已排序資料集。</summary>
      <param name="other">要加入的項目。</param>
      <returns>已加入項目的新資料集，如果所有項目均已存在於資料集中，則為原始的資料集。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>傳回具有指定之索引鍵比較子的不可變的已排序資料集。</summary>
      <param name="comparer">要檢查的比較子。</param>
      <returns>具有指定之索引鍵比較子的不可變的已排序資料集。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>提供一組 <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> 類別執行個體的初始化方法。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>建立空的不可變堆疊。</summary>
      <typeparam name="T">要儲存於不可變堆疊中的項目類型。</typeparam>
      <returns>空的不可變堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>建立新的不可變堆疊，其中包含指定的項目。</summary>
      <param name="item">要預先填入堆疊的項目。</param>
      <typeparam name="T">不可變堆疊中的項目類型。</typeparam>
      <returns>新的不可變集合，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>建立新的不可變堆疊，其中包含指定的項目陣列。</summary>
      <param name="items">陣列，其中包含要預先填入堆疊的項目。</param>
      <typeparam name="T">不可變堆疊中的項目類型。</typeparam>
      <returns>新的不可變堆疊，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>建立新的不可變堆疊，其中包含指定的項目。</summary>
      <param name="items">在堆疊成為不可變之前新增至該堆疊的項目。</param>
      <typeparam name="T">堆疊中的項目類型。</typeparam>
      <returns>不可變的堆疊，其中包含指定的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>從不可變的堆疊中移除指定的項目。</summary>
      <param name="stack">要修改的堆疊。</param>
      <param name="value">要從堆疊中移除的項目。</param>
      <typeparam name="T">堆疊中包含的項目類型。</typeparam>
      <returns>堆疊；永遠不會 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>表示不可變的堆疊。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T">堆疊上的項目型別。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>從不可變的堆疊移除所有的物件。</summary>
      <returns>空的不可變堆疊。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>取得空的不可變堆疊。</summary>
      <returns>空的不可變堆疊。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>列舉不可變堆疊的內容而不需配置任何記憶體。  
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目。</summary>
      <returns>位於目前列舉程式位置的項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>將列舉程式往前推至不可變堆疊的下一個項目。</summary>
      <returns>如果列舉程式已成功前移至下一個項目，則為 <see langword="true" />；如果列舉程式超過堆疊的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>傳回可逐一查看不可變堆疊的列舉值。</summary>
      <returns>可用來逐一查看堆疊的列舉值。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>取得值，這個值表示此不可變堆疊的執行個體是否為空的。</summary>
      <returns>如果這個執行個體是空的，則為 <see langword="true" />；否則即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>傳回堆疊頂端的物件而不需移除它。</summary>
      <returns>堆疊頂端的物件。</returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>取得堆疊頂端項目的唯讀參考。</summary>
      <returns>堆疊頂端項目的唯讀參考。</returns>
      <exception cref="T:System.InvalidOperationException">當堆疊為空時擲回。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>移除不可變堆疊頂端的項目，並在移除之後，傳回堆疊。</summary>
      <returns>堆疊；永遠不會 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">堆疊是空的。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>從不可變的堆疊中移除指定的項目，並在移除之後，傳回堆疊。</summary>
      <param name="value">要從堆疊移除的值。</param>
      <returns>堆疊；永遠不會 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>在不可變堆疊頂端插入物件，並傳回新的堆疊。</summary>
      <param name="value">要推送至堆疊的物件。</param>
      <returns>新的堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>從不可變的堆疊中移除所有項目。</summary>
      <returns>空的不可變堆疊。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>移除不可變堆疊頂端的項目，並傳回新的堆疊。</summary>
      <returns>新的堆疊；永遠不會 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>在不可變堆疊頂端插入項目，並傳回新的堆疊。</summary>
      <param name="value">要推送至堆疊的項目。</param>
      <returns>新的堆疊。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>LINQ 擴充方法覆寫能針對 <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 提供比標準 LINQ 方法更高的效率 
 NuGet 套件：System.Collections.Immutable (關於固定集合及其安裝方法)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray">要套用函式的集合。</param>
      <param name="func">要在每個元素上以累加方式叫用的函式。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>累加函式套用到所有元素後的最終值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray">要套用函式的集合。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上以累加方式叫用的函式。</param>
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>最終累積值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>以累加的方式套用函式到序列的元素。</summary>
      <param name="immutableArray">要套用函式的集合。</param>
      <param name="seed">初始累積值。</param>
      <param name="func">要在每個元素上以累加方式叫用的函式。</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">累積值的型別。</typeparam>
      <typeparam name="TResult">結果選取器傳回之結果的類型。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>最終累積值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>取得值，該值指示此陣列中的所有元素是否符合指定條件。</summary>
      <param name="immutableArray">要檢查相符項目的陣列。</param>
      <param name="predicate">述詞。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>如果來源序列中的所有元素均通過所指定述詞中的測試，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>取得值，該值指示此陣列中是否包含任何元素。</summary>
      <param name="immutableArray">要檢查元素的陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>如果陣列包含元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>取得值，該值指示此陣列中是否包含任何符合指定條件的元素。</summary>
      <param name="immutableArray">要檢查元素的陣列。</param>
      <param name="predicate">定義符合某元素條件的委派。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>如果元素符合指定條件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>傳回值，該值指示此集合是否包含任何元素。</summary>
      <param name="builder">要檢查相符項目的產生器。</param>
      <typeparam name="T">陣列中項目的型別。</typeparam>
      <returns>如果陣列產生器包含任何元素則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>傳回位於陣列中指定索引處的元素。</summary>
      <param name="immutableArray">要在其中尋找元素的陣列。</param>
      <param name="index">要擷取之元素的索引。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>在指定之索引處的項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>傳回位於序列中指定索引處的元素；如果索引超出範圍，則傳回預設值。</summary>
      <param name="immutableArray">要在其中尋找元素的陣列。</param>
      <param name="index">要擷取之元素的索引。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>位於指定索引處的項目，如果找不到索引則為預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回陣列中第一個元素。</summary>
      <param name="immutableArray">要從其中取得項目的陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>陣列中的第一個項目。</returns>
      <exception cref="T:System.InvalidOperationException">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定條件的第一個元素。</summary>
      <param name="immutableArray">要從其中取得項目的陣列。</param>
      <param name="predicate">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>清單中的第一個元素 (如果符合 <paramref name="predicate" /> 指定的條件)。</returns>
      <exception cref="T:System.InvalidOperationException">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>傳回集合中的第一個元素。</summary>
      <param name="builder">要從其中擷取項目的產生器。</param>
      <typeparam name="T">陣列中項目的類型。</typeparam>
      <returns>清單中的第一個項目。</returns>
      <exception cref="T:System.InvalidOperationException">如果陣列是空的。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回序列的第一個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <param name="immutableArray">要從其中擷取項目的陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合條件的第一個元素；如果找不到這類元素，則傳回預設值。</summary>
      <param name="immutableArray">要自其中擷取元素的陣列。</param>
      <param name="predicate">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>傳回集合中第一個元素，如果集合是空的則傳回預設值。</summary>
      <param name="builder">要從其中擷取元素的產生器。</param>
      <typeparam name="T">產生器中項目的類型。</typeparam>
      <returns>如果有找到則為清單中的第一個項目，否則為項目類型的預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回陣列的最後一個元素。</summary>
      <param name="immutableArray">要從其中擷取項目的陣列。</param>
      <typeparam name="T">陣列所包含之元素的類型。</typeparam>
      <returns>陣列中的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的最後一個元素。</summary>
      <param name="immutableArray">要自其中擷取元素的陣列。</param>
      <param name="predicate">定義要擷取元素之條件的委派。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>陣列中符合 <paramref name="predicate" /> 條件的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>傳回集合中的最後一個元素。</summary>
      <param name="builder">要自其中擷取元素的產生器。</param>
      <typeparam name="T">產生器中項目的類型。</typeparam>
      <returns>產生器中的最後一個元素。</returns>
      <exception cref="T:System.InvalidOperationException">如果集合是空的，則擲回。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</summary>
      <param name="immutableArray">要從其中擷取項目的陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合條件的最後一個元素；如果找不到這類元素，則傳回預設值。</summary>
      <param name="immutableArray">要自其中擷取元素的陣列。</param>
      <param name="predicate">定義要搜尋項目之條件的委派。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>傳回集合中最後一個元素，如果集合是空的則傳回預設值。</summary>
      <param name="builder">要從其中擷取元素的產生器。</param>
      <typeparam name="T">產生器中項目的類型。</typeparam>
      <returns>序列的最後一個元素；如果序列中沒有包含任何元素，則傳回預設值。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>將序列的每個元素規劃成一個新的表單。</summary>
      <param name="immutableArray">要從其中選取項目的不可變陣列。</param>
      <param name="selector">要套用至每個項目的轉換函式。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <typeparam name="TResult">結果元素的類型。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是對每個來源元素叫用轉換函式所產生的結果。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>將序列的每個項目投影為 <see cref="T:System.Collections.Generic.IEnumerable`1" />、將產生的序列簡化成單一序列，並對其中的每個項目叫用結果選取器函式。</summary>
      <param name="immutableArray">不可變的陣列。</param>
      <param name="collectionSelector">要套用到輸入序列中各個項目的轉換函式。</param>
      <param name="resultSelector">要套用到中繼序列中各個項目的轉換函式。</param>
      <typeparam name="TSource">
        <paramref name="immutableArray" /> 項目的類型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 所收集之中繼項目的型別。</typeparam>
      <typeparam name="TResult">產生的序列之項目型別。</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其項目是執行下列動作後所產生的結果：對 <paramref name="immutableArray" /> 的各個項目叫用一對多轉換函式 <paramref name="collectionSelector" />，然後將每個序列項目及其對應的來源項目對應到結果項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray">要用於比較的陣列。</param>
      <param name="items">要用於比較的項目。</param>
      <param name="comparer">用來檢查相等的比較子。</param>
      <typeparam name="TDerived">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase">集合所包含之元素的類型。</typeparam>
      <returns>
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray">要用於比較的陣列。</param>
      <param name="items">要用於比較的項目。</param>
      <param name="comparer">用來檢查相等的比較子。</param>
      <typeparam name="TDerived">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase">集合所包含之元素的類型。</typeparam>
      <returns>
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>根據相等比較子，判斷兩個序列是否相等。</summary>
      <param name="immutableArray">要用於比較的陣列。</param>
      <param name="items">要用於比較的項目。</param>
      <param name="predicate">用來檢查相等的比較子。</param>
      <typeparam name="TDerived">比較陣列中元素的類型。</typeparam>
      <typeparam name="TBase">集合所包含之元素的類型。</typeparam>
      <returns>
        <see langword="true" /> 表示序列相等，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回序列的唯一一個元素，如果序列中不是正好一個元素，則擲回例外狀況。</summary>
      <param name="immutableArray">要從其中移除元素的陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>序列中的元素</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果有一個以上這類元素，則擲回例外狀況。</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>傳回陣列的唯一一個元素，如果序列是空白，則為預設值，如果序列中有一個以上的元素，這個方法就會擲回例外狀況。</summary>
      <param name="immutableArray">陣列。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>陣列中的元素，如果陣列是空的則為預設值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 包含多個元素。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>傳回序列中符合指定之條件的唯一一個元素，如果沒有這類元素，則為預設值，如果有一個以上的元素符合條件，這個方法就會擲回例外狀況。</summary>
      <param name="immutableArray">要從其中取得元素的陣列。</param>
      <param name="predicate">元素必須滿足的條件。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>符合指定之條件的元素，否則為預設值。</returns>
      <exception cref="T:System.InvalidOperationException">超過一個項目符合 <paramref name="predicate" /> 中的條件。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>將此陣列的內容複製到可變動的陣列。</summary>
      <param name="immutableArray" />
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>新的已具現化陣列。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>根據此陣列的內容建立字典。</summary>
      <param name="immutableArray">要用來建立字典的陣列。</param>
      <param name="keySelector">索引鍵選取器。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>根據此陣列的內容建立字典。</summary>
      <param name="immutableArray">要用來建立字典的陣列。</param>
      <param name="keySelector">索引鍵選取器。</param>
      <param name="comparer">要初始化字典的比較子。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>根據此陣列的內容建立字典。</summary>
      <param name="immutableArray">要用來建立字典的陣列。</param>
      <param name="keySelector">索引鍵選取器。</param>
      <param name="elementSelector">元素選取器。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TElement">項目的類型。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>根據此陣列的內容建立字典。</summary>
      <param name="immutableArray">要用來建立字典的陣列。</param>
      <param name="keySelector">索引鍵選取器。</param>
      <param name="elementSelector">元素選取器。</param>
      <param name="comparer">要初始化字典的比較子。</param>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TElement">項目的類型。</typeparam>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>新的已初始化字典。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>根據述詞來篩選值序列。</summary>
      <param name="immutableArray">要篩選的陣列。</param>
      <param name="predicate">要用來篩選陣列內容的條件。</param>
      <typeparam name="T">集合所包含之元素的類型。</typeparam>
      <returns>傳回 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含符合條件的元素。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit.ILGeneration</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary vsli:raw="Helps build custom attributes.">協助建立自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute and the arguments to the constructor.">指定自訂屬性的建構函式與建構函式的引數，初始化 <see langword="CustomAttributeBuilder" /> 類別的執行個體。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自訂屬性之建構函式的引數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="con" /> 為靜態或私用的。  
-或- 
提供的引數數目不符合建構函式呼叫慣例所需之建構函式的參數數目。  
-或- 
提供的引數類型不符合建構函式中宣告的參數類型。  
-或- 
提供的引數不是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 的參考類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;constructorArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="constructorArgs" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.">初始化 <see langword="CustomAttributeBuilder" /> 類別的執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數，以及一組命名的欄位/值配對。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自訂屬性之建構函式的引數。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">自訂屬性的具名欄位。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">自訂屬性的具名欄位值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the named fields.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 陣列的長度不同。  
-或- 
 <paramref name="con" /> 為靜態或私用的。  
-或- 
提供的引數數目不符合建構函式呼叫慣例所需之建構函式的參數數目。  
-或- 
提供的引數類型不符合建構函式中宣告的參數類型。  
-或- 
欄位值型別不符合具名欄位型別。  
-或- 
欄位不屬於做為建構函式的相同類別或基底類別。  
-或- 
提供的引數或具名欄位是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一個參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.">初始化 <see langword="CustomAttributeBuilder" /> 類別的執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數，以及一組命名的屬性或值配對。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自訂屬性之建構函式的引數。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">自訂屬性 (Attribute) 的具名屬性 (Property)。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">自訂屬性 (Attribute) 的具名屬性 (Property) 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument or named property is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 陣列的長度不同。  
-或- 
 <paramref name="con" /> 為靜態或私用的。  
-或- 
提供的引數數目不符合建構函式呼叫慣例所需之建構函式的參數數目。  
-或- 
提供的引數類型不符合建構函式中宣告的參數類型。  
-或- 
屬性值型別不符合具名屬性型別。  
-或- 
屬性不具有 Setter 方法。  
-或- 
屬性不屬於做為建構函式的相同類別或基底類別。  
-或- 
提供的引數或具名屬性是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一個參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;CustomAttributeBuilder&quot; /&gt; class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.">初始化 <see langword="CustomAttributeBuilder" /> 類別的執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數、一組命名的屬性或值配對，以及一組命名的欄位或值配對。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="constructorArgs" vsli:raw="The arguments to the constructor of the custom attribute.">自訂屬性之建構函式的引數。</param>
      <param name="namedProperties" vsli:raw="Named properties of the custom attribute.">自訂屬性 (Attribute) 的具名屬性 (Property)。</param>
      <param name="propertyValues" vsli:raw="Values for the named properties of the custom attribute.">自訂屬性 (Attribute) 的具名屬性 (Property) 值。</param>
      <param name="namedFields" vsli:raw="Named fields of the custom attribute.">自訂屬性的具名欄位。</param>
      <param name="fieldValues" vsli:raw="Values for the named fields of the custom attribute.">自訂屬性的具名欄位值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The lengths of the &lt;paramref name=&quot;namedProperties&quot; /&gt; and &lt;paramref name=&quot;propertyValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; The lengths of the &lt;paramref name=&quot;namedFields&quot; /&gt; and &lt;paramref name=&quot;fieldValues&quot; /&gt; arrays are different.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;con&quot; /&gt; is static or private.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of supplied argument does not match the type of the parameter declared in the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the property values do not match the types of the named properties.  &#xA;  &#xA; -or-  &#xA;  &#xA; The types of the field values do not match the types of the corresponding field types.  &#xA;  &#xA; -or-  &#xA;  &#xA; A property has no setter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property or field does not belong to the same class or base class as the constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; A supplied argument, named property, or named field is a reference type other than &lt;see cref=&quot;T:System.String&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 陣列的長度不同。  
-或- 
<paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 陣列的長度不同。  
-或- 
 <paramref name="con" /> 為靜態或私用的。  
-或- 
提供的引數數目不符合建構函式呼叫慣例所需之建構函式的參數數目。  
-或- 
提供的引數類型不符合建構函式中宣告的參數類型。  
-或- 
屬性值型別不符合具名屬性型別。  
-或- 
欄位值型別不符合對應欄位型別的型別。  
-或- 
屬性不具有 Setter。  
-或- 
屬性或欄位不屬於做為建構函式的相同類別或基底類別。  
-或- 
提供的引數、具名屬性或具名欄位是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">其中一個參數為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary vsli:raw="Generates Microsoft intermediate language (MSIL) instructions.">產生 Microsoft Intermediate Language (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary vsli:raw="Begins a catch block.">開始 Catch 區塊。</summary>
      <param name="exceptionType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the exception.">
        <see cref="T:System.Type" /> 物件，代表例外狀況。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The catch block is within a filtered exception.">Catch 區塊在經過篩選的例外狀況內。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exceptionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.">
        <paramref name="exceptionType" /> 為 <see langword="null" />，而例外狀況篩選器區塊還未傳回數值，以表示 finally 區塊應該執行，直到找到這個 catch 區塊為止。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary vsli:raw="Begins an exception block for a filtered exception.">為篩選的例外狀況開始例外狀況區塊。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。  
-或- 
這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary vsli:raw="Begins an exception block for a non-filtered exception.">為非篩選的例外狀況開始例外狀況區塊。</summary>
      <returns vsli:raw="The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.">區塊結尾的標記 (Label)。 這樣可以讓您留在正確的地方執行 Finally 區塊，或者完成試驗動作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary vsli:raw="Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.">在 Microsoft Intermediate Language (MSIL) 資料流上開始例外狀況錯誤區塊。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.  &#xA;  &#xA; -or-  &#xA;  &#xA; This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">產生的 MSIL 目前並不在例外狀況區塊中。  
-或- 
這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary vsli:raw="Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.">在 Microsoft Intermediate Language (MSIL) 指令資料流中開始 finally 區塊。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The MSIL being generated is not currently in an exception block.">產生的 MSIL 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary vsli:raw="Begins a lexical scope.">開始語彙範圍 (Lexical Scope)。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary vsli:raw="Declares a local variable of the specified type.">宣告指定型別的區域變數。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">
        <see cref="T:System.Type" /> 物件，表示區域變數的型別。</param>
      <returns vsli:raw="The declared local variable.">宣告的區域變數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">包含型別已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary vsli:raw="Declares a local variable of the specified type, optionally pinning the object referred to by the variable.">宣告指定型別的區域變數，選擇性固定 (Pin) 變數所參考的物件。</summary>
      <param name="localType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of the local variable.">
        <see cref="T:System.Type" /> 物件，表示區域變數的型別。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to pin the object in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將物件固定 (Pin) 在記憶體中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.LocalBuilder&quot; /&gt; object that represents the local variable.">
        <see cref="T:System.Reflection.Emit.LocalBuilder" /> 物件，代表區域變數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method body of the enclosing method has been created by the &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)&quot; /&gt; method.">包含型別已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立。  
-或- 
封入方法的方法主體已由 <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> 方法建立。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The method with which this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; is associated is not represented by a &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">與這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 關聯的方法不是由 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary vsli:raw="Declares a new label.">宣告新的標記。</summary>
      <returns vsli:raw="A new label that can be used as a token for branching.">新標籤，可以用作分支的語彙基元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Puts the specified instruction onto the stream of instructions.">放置指定的指令到指令資料流中。</summary>
      <param name="opcode" vsli:raw="The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.">Microsoft Intermediate Language (MSIL) 指令，要放置到資料流中。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">字元引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream. Defined in the &lt;see langword=&quot;OpCodes&quot; /&gt; enumeration.">MSIL 指令，要放置到資料流中。 已定義於 <see langword="OpCodes" /> 列舉型別中。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="arg" vsli:raw="The &lt;see langword=&quot;Int&quot; /&gt; argument pushed onto the stream immediately after the instruction.">
        <see langword="Int" /> 引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="arg" vsli:raw="The numerical argument pushed onto the stream immediately after the instruction.">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定建構函式的指定指令和中繼資料 (Metadata) 語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="con" vsli:raw="A &lt;see langword=&quot;ConstructorInfo&quot; /&gt; representing a constructor.">
        <see langword="ConstructorInfo" />，表示建構函式。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> 為 <see langword="null" />。 這個例外狀況在 .NET Framework 4 中是新的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標記。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="label" vsli:raw="The label to which to branch from this location.">標記，要從這個位置分支至的。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標記。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="labels" vsli:raw="The array of label objects to which to branch from this location. All of the labels will be used.">標記物件陣列，要從這個位置分支至的。 會用到所有的標記。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This exception is new in the .NET Framework 4.">
        <paramref name="con" /> 為 <see langword="null" />。 這個例外狀況在 .NET Framework 4 中是新的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定區域變數的索引。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="local" vsli:raw="A local variable.">區域變數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parent method of the &lt;paramref name=&quot;local&quot; /&gt; parameter does not match the method associated with this &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">
        <paramref name="local" /> 參數的父方法與這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 的相關聯方法不相符。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;local&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="local" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; is a single-byte instruction, and &lt;paramref name=&quot;local&quot; /&gt; represents a local variable with an index greater than &lt;see langword=&quot;Byte.MaxValue&quot; /&gt;.">
        <paramref name="opcode" /> 是單一位元組的指令，而 <paramref name="local" /> 表示索引大於 <see langword="Byte.MaxValue" /> 的區域變數。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary vsli:raw="Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和簽章語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="signature" vsli:raw="A helper for constructing a signature token.">Helper，用來建構簽章語彙基元。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signature&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signature" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary vsli:raw="Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定欄位的指定指令和中繼資料語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="field" vsli:raw="A &lt;see langword=&quot;FieldInfo&quot; /&gt; representing a field.">
        <see langword="FieldInfo" />，表示欄位。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定方法的中繼資料語彙基元。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="meth" vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; representing a method.">
        <see langword="MethodInfo" />，表示方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="meth" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;meth&quot; /&gt; is a generic method for which the &lt;see cref=&quot;P:System.Reflection.MethodBase.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="meth" /> 是泛型方法，其 <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary vsli:raw="Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="arg" vsli:raw="The character argument pushed onto the stream immediately after the instruction.">字元引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary vsli:raw="Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.">放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="arg" vsli:raw="The &lt;see cref=&quot;T:System.Single&quot; /&gt; argument pushed onto the stream immediately after the instruction.">
        <see langword="Single" /> 引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定字串的中繼資料語彙基元。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream.">要在資料流中發出的 MSIL 指令。</param>
      <param name="str" vsli:raw="The &lt;see langword=&quot;String&quot; /&gt; to be emitted.">要發出的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary vsli:raw="Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.">放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定型別的中繼資料語彙基元。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be put onto the stream.">MSIL 指令，要放置到資料流中。</param>
      <param name="cls" vsli:raw="A &lt;see langword=&quot;Type&quot; /&gt;.">
        <see langword="Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cls&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cls" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary vsli:raw="Puts a &lt;see langword=&quot;call&quot; /&gt; or &lt;see langword=&quot;callvirt&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream to call a &lt;see langword=&quot;varargs&quot; /&gt; method.">將 <see langword="call" /> 或 <see langword="callvirt" /> 指令放置於 Microsoft Intermediate Language (MSIL) 資料流中，以呼叫 <see langword="varargs" /> 方法。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Call&quot; /&gt;, &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Callvirt&quot; /&gt;, or &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Newobj&quot; /&gt;.">要在資料流中發出的 MSIL 指令。 必須是 <see cref="F:System.Reflection.Emit.OpCodes.Call" />、<see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> 或 <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />。</param>
      <param name="methodInfo" vsli:raw="The &lt;see langword=&quot;varargs&quot; /&gt; method to be called.">要呼叫的 <see langword="varargs" /> 方法。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments if the method is a &lt;see langword=&quot;varargs&quot; /&gt; method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果此方法為 <see langword="varargs" /> 方法，則為選擇性引數的類型；否則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;opcode&quot; /&gt; does not specify a method call.">
        <paramref name="opcode" /> 未指定方法呼叫。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfo&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfo" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling convention for the method is not &lt;see langword=&quot;varargs&quot; /&gt;, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.">此方法的呼叫慣例不是 <see langword="varargs" />，但會提供選擇性參數類型。 .NET Framework 1.0 和 1.1 版中會擲回這個例外狀況，但在後續版本中，不會擲回任何例外狀況。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.">指定間接呼叫的 Managed 呼叫慣例，將 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 指令放置到 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">要在資料流中發出的 MSIL 指令。 必須是 <see cref="F:System.Reflection.Emit.OpCodes.Calli" />。</param>
      <param name="callingConvention" vsli:raw="The managed calling convention to be used.">要使用的 Managed 呼叫慣例。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">結果的 <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">指令需要的參數型別。</param>
      <param name="optionalParameterTypes" vsli:raw="The types of the optional arguments for &lt;see langword=&quot;varargs&quot; /&gt; calls.">
        <see langword="varargs" /> 呼叫的選擇性參數型別。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;optionalParameterTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, but &lt;paramref name=&quot;callingConvention&quot; /&gt; does not include the &lt;see cref=&quot;F:System.Reflection.CallingConventions.VarArgs&quot; /&gt; flag.">
        <paramref name="optionalParameterTypes" /> 不是 <see langword="null" />，但是 <paramref name="callingConvention" /> 沒有包含 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 旗標。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary vsli:raw="Puts a &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt; instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.">指定間接呼叫的 Unmanaged 呼叫慣例，將 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 指令放置到 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode" vsli:raw="The MSIL instruction to be emitted onto the stream. Must be &lt;see cref=&quot;F:System.Reflection.Emit.OpCodes.Calli&quot; /&gt;.">要在資料流中發出的 MSIL 指令。 必須是 <see cref="F:System.Reflection.Emit.OpCodes.Calli" />。</param>
      <param name="unmanagedCallConv" vsli:raw="The unmanaged calling convention to be used.">要使用的 Unmanaged 呼叫慣例。</param>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the result.">結果的 <see cref="T:System.Type" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the required arguments to the instruction.">指令需要的參數型別。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given local variable.">發出以指定本機變數呼叫 <see cref="Overload:System.Console.WriteLine" /> 所需的 Microsoft 中繼語言 (MSIL)。</summary>
      <param name="localBuilder" vsli:raw="The local variable whose value is to be written to the console.">要將其值寫入主控台的本機變數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type of &lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.  &#xA;  &#xA; -or-  &#xA;  &#xA; There is no overload of &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; that accepts the type of &lt;paramref name=&quot;localBuilder&quot; /&gt;.">
        <paramref name="localBuilder" /> 的類型是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" /> (均不支援)。  
-或- 
沒有任何 <see cref="Overload:System.Console.WriteLine" /> 的多載可接受 <paramref name="localBuilder" /> 的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;localBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) necessary to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with the given field.">發出以指定欄位呼叫 <see cref="Overload:System.Console.WriteLine" /> 所需的 Microsoft Intermediate Language (MSIL)。</summary>
      <param name="fld" vsli:raw="The field whose value is to be written to the console.">欄位，其值要寫入主控台 (Console)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There is no overload of the &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; method that accepts the type of the specified field.">沒有 <see cref="Overload:System.Console.WriteLine" /> 方法的多載，這個方法接受指定欄位的型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fld&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fld" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type of the field is &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;, which are not supported.">欄位的型別為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" />，不支援這些型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary vsli:raw="Emits the Microsoft intermediate language (MSIL) to call &lt;see cref=&quot;Overload:System.Console.WriteLine&quot; /&gt; with a string.">發出 Microsoft Intermediate Language (MSIL)，以字串呼叫 <see cref="Overload:System.Console.WriteLine" />。</summary>
      <param name="value" vsli:raw="The string to be printed.">要列印的字串。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary vsli:raw="Ends an exception block.">結束例外狀況區塊。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The end exception block occurs in an unexpected place in the code stream.">結束例外狀況區塊發生於程式碼資料流中未預期的地方。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary vsli:raw="Ends a lexical scope.">結束語彙範圍。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary vsli:raw="Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;.">在由 <see cref="T:System.Reflection.Emit.ILGenerator" /> 發出的 Microsoft intermediate language (MSIL) 資料流中，取得目前位移 (以位元組為單位)。</summary>
      <returns vsli:raw="The offset in the MSIL stream at which the next instruction will be emitted.">MSIL 資料流的位移，下一個指令將在此位置發出。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary vsli:raw="Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.">以指定標記來標示 Microsoft Intermediate Language (MSIL) 資料流的目前位置。</summary>
      <param name="loc" vsli:raw="The label for which to set an index.">標記，要為其設定索引。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;loc&quot; /&gt; represents an invalid index into the label array.  &#xA;  &#xA; -or-  &#xA;  &#xA; An index for &lt;paramref name=&quot;loc&quot; /&gt; has already been defined.">
        <paramref name="loc" />，表示標記陣列中的無效索引。  
-或- 
<paramref name="loc" /> 的索引已經定義。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary vsli:raw="Emits an instruction to throw an exception.">發出擲回例外狀況的指令。</summary>
      <param name="excType" vsli:raw="The class of the type of exception to throw.">要擲回的例外狀況型別的類別。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is not the &lt;see cref=&quot;T:System.Exception&quot; /&gt; class or a derived class of &lt;see cref=&quot;T:System.Exception&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type does not have a parameterless constructor.">
        <paramref name="excType" /> 不是 <see cref="T:System.Exception" /> 類別或 <see cref="T:System.Exception" /> 的衍生類別。  
-或- 
類型不具有無參數建構函式。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;excType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="excType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.">指定要用來評估區域變數的命名空間 (Namespace)，並注意目前作用的語彙範圍。</summary>
      <param name="usingNamespace" vsli:raw="The namespace to be used in evaluating locals and watches for the current active lexical scope.">用來評估區域變數的命名空間，並注意目前作用的語彙範圍</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;usingNamespace&quot; /&gt; is zero.">
        <paramref name="usingNamespace" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;usingNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="usingNamespace" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; belongs to a &lt;see cref=&quot;T:System.Reflection.Emit.DynamicMethod&quot; /&gt;.">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary vsli:raw="Represents a label in the instruction stream. &lt;see langword=&quot;Label&quot; /&gt; is used in conjunction with the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class.">表示指令資料流中的標記 (Label)。 <see langword="Label" /> 會與 <see cref="T:System.Reflection.Emit.ILGenerator" /> 類別結合使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary vsli:raw="Checks if the given object is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this instance.">檢查指定物件是否為 <see langword="Label" /> 的執行個體，並且與這個執行個體相等。</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;Label&quot; /&gt; instance.">物件，要與這個 <see langword="Label" /> 執行個體比較。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Label&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 是 <see langword="true" /> 的執行個體，並且與這個物件相等，則為 <see langword="Label" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt;.">指出目前的執行個體和指定的 <see cref="T:System.Reflection.Emit.Label" /> 是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to the current instance.">要與目前執行個體相比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 的值和目前執行個體的值相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary vsli:raw="Generates a hash code for this instance.">產生這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A hash code for this instance.">這個執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are equal.">指出兩個 <see cref="T:System.Reflection.Emit.Label" /> 結構是否相等。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">要和 <paramref name="b" /> 比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">要和 <paramref name="a" /> 比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; structures are not equal.">指出兩個 <see cref="T:System.Reflection.Emit.Label" /> 結構是否不相等。</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">要和 <paramref name="b" /> 比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.Label&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">要和 <paramref name="a" /> 比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 不等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary vsli:raw="Represents a local variable within a method or constructor.">表示方法或建構函式 (Constructor) 中的區域變數。</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary vsli:raw="Gets a value indicating whether the object referred to by the local variable is pinned in memory.">取得值，指出是否在記憶體中 Pin 區域變數參考的物件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在記憶體中 Pin 區域變數參考的物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary vsli:raw="Gets the zero-based index of the local variable within the method body.">取得方法主體內區域變數之以零起始的索引。</summary>
      <returns vsli:raw="An integer value that represents the order of declaration of the local variable within the method body.">整數值，表示方法主體內區域變數的宣告順序。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary vsli:raw="Gets the type of the local variable.">取得區域變數的型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the local variable.">區域變數的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary vsli:raw="Creates or associates parameter information.">建立或關聯參數資訊。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this parameter.">擷取這個參數的屬性。</summary>
      <returns vsli:raw="Read-only. Retrieves the attributes for this parameter.">唯讀。 擷取這個參數的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary vsli:raw="Retrieves whether this is an input parameter.">擷取這是否為輸入參數。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this is an input parameter.">唯讀。 擷取這是否為輸入參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary vsli:raw="Retrieves whether this parameter is optional.">擷取這個參數是否為選擇性項目。</summary>
      <returns vsli:raw="Read-only. Specifies whether this parameter is optional.">唯讀。 指定這個參數是否為選擇性項目。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary vsli:raw="Retrieves whether this parameter is an output parameter.">擷取這個參數是否為輸出參數。</summary>
      <returns vsli:raw="Read-only. Retrieves whether this parameter is an output parameter.">唯讀。 擷取這個參數是否為輸出參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary vsli:raw="Retrieves the name of this parameter.">擷取這個參數的名稱。</summary>
      <returns vsli:raw="Read-only. Retrieves the name of this parameter.">唯讀。 擷取這個參數的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary vsli:raw="Retrieves the signature position for this parameter.">擷取這個參數的簽章位置。</summary>
      <returns vsli:raw="Read-only. Retrieves the signature position for this parameter.">唯讀。 擷取這個參數的簽章位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of the parameter.">設定參數的預設值。</summary>
      <param name="defaultValue" vsli:raw="The default value of this parameter.">這個參數的預設值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the parameter.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">參數不是其中一個支援的型別。  
-或- 
<paramref name="defaultValue" /> 的型別不符合參數的型別。  
-或- 
參數的型別是 <see cref="T:System.Object" /> 或其他參考型別、<paramref name="defaultValue" /> 不是 <see langword="null" />，而且無法將此值指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 BLOB (二進位大型物件) 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary vsli:raw="Provides methods for building signatures.">提供建置簽章的方法。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary vsli:raw="Adds an argument to the signature.">加入引數至簽章。</summary>
      <param name="clsArgument" vsli:raw="The type of the argument.">引數型別。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.">簽章已經完成。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clsArgument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="clsArgument" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary vsli:raw="Adds an argument of the specified type to the signature, specifying whether the argument is pinned.">將指定之型別的引數加入簽章，指定該引數是否為固定 (Pin) 。</summary>
      <param name="argument" vsli:raw="The argument type.">引數型別。</param>
      <param name="pinned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the argument is pinned; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果引數為固定 (Pin)，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary vsli:raw="Adds an argument to the signature, with the specified custom modifiers.">使用指定的自訂修飾詞，將引數加入簽章。</summary>
      <param name="argument" vsli:raw="The argument type.">引數型別。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示引數的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果引數沒有必要的自訂修飾詞，請指定 <see langword="null" />。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示引數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果引數沒有選擇性自訂修飾詞，請指定 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;argument&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argument" /> 為 <see langword="null" />。  
-或- 
<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.">簽章已經完成。  
-或- 
其中一個指定的自訂修飾詞為陣列型別。  
-或- 
其中一個指定的自訂修飾詞為開放泛型型別。 也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a set of arguments to the signature, with the specified custom modifiers.">使用指定的自訂修飾詞，將引數集合加入簽章。</summary>
      <param name="arguments" vsli:raw="The types of the arguments to be added.">要加入的引數型別。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示對應引數的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果特定引數沒有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果沒有任何引數具有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示對應引數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果特定引數沒有選擇性的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果沒有任何引數具有選擇性自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="arguments" /> 的項目是 <see langword="null" />。  
-或- 
其中一個指定的自訂修飾詞為 <see langword="null" /> (不過，您可以為任何引數的自訂修飾詞陣列指定 <see langword="null" />)。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;arguments&quot; /&gt;.">簽章已經完成。  
-或- 
其中一個指定的自訂修飾詞為陣列型別。  
-或- 
其中一個指定的自訂修飾詞為開放泛型型別。 也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小不等於 <paramref name="arguments" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary vsli:raw="Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.">標記 vararg 固定部分的結尾。 只有在呼叫端正在建立 vararg 簽章呼叫站台時，這才會使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary vsli:raw="Checks if this instance is equal to the given object.">檢查這個執行個體 (Instance) 是否等於指定物件。</summary>
      <param name="obj" vsli:raw="The object with which this instance should be compared.">應該與這個執行個體比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given object is a &lt;see langword=&quot;SignatureHelper&quot; /&gt; and represents the same signature; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定物件為 <see langword="true" />，並且表示相同簽章，則為 <see langword="SignatureHelper" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a field.">傳回欄位的簽章 Helper。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the field for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">動態模組，包含要求 <see langword="SignatureHelper" /> 的欄位。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a field.">欄位的 <see langword="SignatureHelper" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary vsli:raw="Creates and returns a hash code for this instance.">建立並傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="The hash code based on the name.">以名稱為依據的雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary vsli:raw="Returns a signature helper for a local variable.">傳回區域變數的簽章 Helper。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; for a local variable.">區域變數的 <see cref="T:System.Reflection.Emit.SignatureHelper" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary vsli:raw="Returns a signature helper for a local variable.">傳回區域變數的簽章 Helper。</summary>
      <param name="mod" vsli:raw="The dynamic module that contains the local variable for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">動態模組，包含要求 <see langword="SignatureHelper" /> 的區域變數。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a local variable.">區域變數的 <see langword="SignatureHelper" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's calling convention and return type.">傳回方法的簽章 Helper，其會指定方法的呼叫慣例和傳回型別。</summary>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的傳回類型或 void 傳回類型的 <see langword="null" /> (在 Visual Basic 中為 <see langword="Sub" /> 程序)。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary vsli:raw="Returns a signature helper for a method given the method's module, calling convention, and return type.">指定方法的模組、呼叫慣例和傳回類型，以傳回方法的簽章協助程式。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含要為其要求 <see langword="SignatureHelper" /> 的方法。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的傳回類型或 void 傳回類型的 <see langword="null" /> (在 Visual Basic 中為 <see langword="Sub" /> 程序)。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.">傳回方法的簽章 Helper，該方法具有標準的呼叫慣例、指定的方法模組、傳回型別和引數型別。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the method for which the &lt;see langword=&quot;SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，其中包含要為其要求 <see langword="SignatureHelper" /> 的方法。</param>
      <param name="returnType" vsli:raw="The return type of the method, or &lt;see langword=&quot;null&quot; /&gt; for a void return type (&lt;see langword=&quot;Sub&quot; /&gt; procedure in Visual Basic).">方法的傳回類型或 void 傳回類型的 <see langword="null" /> (在 Visual Basic 中為 <see langword="Sub" /> 程序)。</param>
      <param name="parameterTypes" vsli:raw="The types of the arguments of the method, or &lt;see langword=&quot;null&quot; /&gt; if the method has no arguments.">方法的引數型別，如果方法沒有引數則為 <see langword="null" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;SignatureHelper&quot; /&gt; object for a method.">方法的 <see langword="SignatureHelper" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameterTypes" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.">以指定的動態模組 (其中包含屬性、呼叫慣例、屬性型別、屬性引數以及傳回型別與引數的自訂修飾詞)，傳回屬性的簽章 Helper。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">屬性存取子的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The property type.">屬性型別。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">屬性的引數型別，如果屬性沒有引數則為 <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示屬性之對應引數的必要自訂修飾詞。 如果特定引數沒有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果屬性沒有引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示屬性之對應引數的選擇性自訂修飾詞。 如果特定引數沒有選擇性的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果屬性沒有引數，或者沒有任何引數具有選擇性自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameterTypes" /> 的項目是 <see langword="null" />。  
-或- 
其中一個指定的自訂修飾詞為 <see langword="null" /> (不過，您可以為任何引數的自訂修飾詞陣列指定 <see langword="null" />)。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">簽章已經完成。  
-或- 
 <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。  
-或- 
其中一個指定的自訂修飾詞為陣列型別。  
-或- 
其中一個指定的自訂修飾詞為開放泛型型別。 也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.">指定包含屬性、屬性型別和屬性引數的動態模組後，傳回屬性的簽章 Helper。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="returnType" vsli:raw="The property type.">屬性型別。</param>
      <param name="parameterTypes" vsli:raw="The argument types, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">引數型別，如果屬性沒有引數則為 <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mod" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameterTypes" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.">指定包含屬性、屬性型別、屬性引數和傳回型別與引數之自訂修飾詞的動態模組後，傳回屬性的簽章 Helper。</summary>
      <param name="mod" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; that contains the property for which the &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; is requested.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="returnType" vsli:raw="The property type.">屬性型別。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the property's arguments, or &lt;see langword=&quot;null&quot; /&gt; if the property has no arguments.">屬性的引數型別，如果屬性沒有引數則為 <see langword="null" />。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示屬性之對應引數的必要自訂修飾詞。 如果特定引數沒有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果屬性沒有引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示屬性之對應引數的選擇性自訂修飾詞。 如果特定引數沒有選擇性的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果屬性沒有引數，或者沒有任何引數具有選擇性自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.SignatureHelper&quot; /&gt; object for a property.">屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;parameterTypes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is &lt;see langword=&quot;null&quot; /&gt;. (However, &lt;see langword=&quot;null&quot; /&gt; can be specified for the array of custom modifiers for any argument.)">
        <paramref name="mod" /> 為 <see langword="null" />。  
-或- 
<paramref name="parameterTypes" /> 的項目是 <see langword="null" />。  
-或- 
其中一個指定的自訂修飾詞為 <see langword="null" /> (不過，您可以為任何引數的自訂修飾詞陣列指定 <see langword="null" />)。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The signature has already been finished.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;mod&quot; /&gt; is not a &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; One of the specified custom modifiers is an open generic type. That is, the &lt;see cref=&quot;P:System.Type.ContainsGenericParameters&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt; for the custom modifier.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;requiredParameterTypeCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalParameterTypeCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">簽章已經完成。  
-或- 
 <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。  
-或- 
其中一個指定的自訂修飾詞為陣列型別。  
-或- 
其中一個指定的自訂修飾詞為開放泛型型別。 也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary vsli:raw="Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.">加入結尾語彙基元 (Token) 至簽章，並將簽章標記為已完成，如此其他語彙基元便無法再加入。</summary>
      <returns vsli:raw="A byte array made up of the full signature.">完整特徵標記構成的位元組陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary vsli:raw="Returns a string representing the signature arguments.">傳回表示簽章引數的字串。</summary>
      <returns vsli:raw="A string representing the arguments of this signature.">字串，代表這個特徵標記的引數。</returns>
    </member>
  </members>
</doc>